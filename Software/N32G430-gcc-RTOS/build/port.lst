ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 23, 1
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "FreeRTOS/portable/GCC/ARM_CM4F/port.c"
  18              		.section	.text.prvTaskExitError,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvTaskExitError:
  25              	.LFB129:
   1:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
   2:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
   5:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
   7:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * subject to the following conditions:
  13:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
  14:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
  17:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
  24:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
  27:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
  28:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  29:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  30:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** * Implementation of functions defined in portable.h for the ARM CM4F port.
  31:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** *----------------------------------------------------------*/
  32:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  33:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 2


  34:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  35:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  36:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  37:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  38:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #error This port can only be used when the project options are configured to enable hardware fl
  39:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
  40:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  41:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Prototype of all Interrupt Service Routines (ISRs). */
  42:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** typedef void ( * portISR_t )( void );
  43:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  44:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  45:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  46:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  47:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  48:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SHPR2_REG                    ( *( ( volatile uint32_t * ) 0xe000ed1c ) )
  49:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  50:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  51:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK_BIT              ( 1UL << 2UL )
  52:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  53:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  54:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  55:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  56:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_SET_BIT         ( 1UL << 26UL )
  57:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  58:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  59:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  60:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * r0p1 port. */
  61:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portCPUID                             ( *( ( volatile uint32_t * ) 0xE000ed00 ) )
  62:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID                 ( 0x410FC271UL )
  63:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID                 ( 0x410FC270UL )
  64:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  65:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMIN_INTERRUPT_PRIORITY            ( 255UL )
  66:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) portMIN_INTERRUPT_PRIORITY ) << 16UL
  67:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) portMIN_INTERRUPT_PRIORITY ) << 24UL
  68:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  69:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants used to check the installation of the FreeRTOS interrupt handlers. */
  70:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portSCB_VTOR_REG                      ( *( ( portISR_t ** ) 0xE000ED08 ) )
  71:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portVECTOR_INDEX_SVC                  ( 11 )
  72:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portVECTOR_INDEX_PENDSV               ( 14 )
  73:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  74:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
  75:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  76:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  77:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  78:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  79:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  80:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  81:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  82:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
  83:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  84:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  85:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  86:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  87:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
  88:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR                             ( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating po
  89:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS              ( 0x3UL << 30UL )
  90:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 3


  91:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  92:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR                      ( 0x01000000 )
  93:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN                ( 0xfffffffd )
  94:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  95:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
  96:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  97:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  98:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  99:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 100:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
 101:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 102:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 103:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * occurred while the SysTick counter is stopped during tickless idle
 104:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * calculations. */
 105:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR              ( 94UL )
 106:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 107:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the default SysTick clock rate.  If defined by the
 108:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * user, this symbol must equal the SysTick clock rate when the CLK bit is 0 in the
 109:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * configuration register. */
 110:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
 111:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define configSYSTICK_CLOCK_HZ             ( configCPU_CLOCK_HZ )
 112:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
 113:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( portNVIC_SYSTICK_CLK_BIT )
 114:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #else
 115:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Select the option to clock SysTick not at the same frequency as the core. */
 116:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( 0 )
 117:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
 118:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 119:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 120:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
 121:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * debugger. */
 122:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 123:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 124:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #else
 125:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 126:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
 127:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 128:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 129:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 130:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 131:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 132:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 133:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 134:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 135:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 136:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 137:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 138:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 139:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 140:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 141:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 142:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 143:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 144:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 145:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 146:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 147:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 4


 148:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 149:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 150:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void ) __attribute__( ( naked ) );
 151:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 152:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 153:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 154:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 155:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 156:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 157:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 158:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 159:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 160:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * variable. */
 161:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 162:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 163:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 164:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 165:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 166:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 167:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
 168:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 169:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 170:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 171:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 172:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 173:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 174:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 175:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 176:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 177:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 178:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 179:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 180:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 181:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 182:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 183:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 184:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 185:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 186:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 187:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 188:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 189:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 190:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 191:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 192:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 193:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 194:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 195:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 196:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 197:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 198:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 199:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 200:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 201:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 202:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 203:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                                      TaskFunction_t pxCode,
 204:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                                      void * pvParameters )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 5


 205:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 206:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 207:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * interrupt. */
 208:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 209:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Offset added to account for the way the MCU uses the stack on entry/exit
 210:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * of interrupts, and to ensure alignment. */
 211:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 212:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 213:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 214:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 215:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 216:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 217:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 218:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 219:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Save code space by skipping register initialisation. */
 220:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 221:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 222:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 223:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* A save method is being used that requires each task to maintain its
 224:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * own exec return value. */
 225:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 226:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 227:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 228:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 229:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 230:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     return pxTopOfStack;
 231:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 232:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 233:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 234:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 235:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
  26              		.loc 1 235 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 82B0     		sub	sp, sp, #8
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
 236:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     volatile uint32_t ulDummy = 0;
  34              		.loc 1 236 5 view .LVU1
  35              		.loc 1 236 23 is_stmt 0 view .LVU2
  36 0002 0023     		movs	r3, #0
  37 0004 0193     		str	r3, [sp, #4]
 237:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 238:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* A function that implements a task must not exit or attempt to return to
 239:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
 240:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * should instead call vTaskDelete( NULL ).
 241:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *
 242:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
 243:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * defined, then stop here so application writers can catch the error. */
 244:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting == ~0UL );
  38              		.loc 1 244 46 is_stmt 1 view .LVU3
 245:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
  39              		.loc 1 245 5 view .LVU4
  40              	.LBB12:
  41              	.LBI12:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 6


  42              		.file 2 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  32:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-OFF* */
  34:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  35:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern "C" {
  36:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  37:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-ON* */
  38:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  40:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  41:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  44:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  45:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  46:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  47:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  48:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  49:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  50:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR          char
  51:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT         float
  52:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE        double
  53:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG          long
  54:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT         short
  55:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE    uint32_t
  56:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE     long
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 7


  57:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  58:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE   StackType_t;
  59:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef long             BaseType_t;
  60:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long    UBaseType_t;
  61:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  62:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint16_t     TickType_t;
  64:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint32_t     TickType_t;
  67:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  69:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  71:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_TYPE_IS_ATOMIC    1
  72:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
  73:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint64_t TickType_t;
  74:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffffffffffULL
  75:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #else /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  76:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  77:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  78:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  81:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH      ( -1 )
  82:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  83:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT    8
  84:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDONT_DISCARD      __attribute__( ( used ) )
  85:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  86:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  87:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  88:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD()                                     \
  89:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  90:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  91:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  92:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  93:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  94:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  95:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  96:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  97:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  98:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  99:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
 100:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
 101:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) \
 102:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     do                                           \
 103:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                            \
 104:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( xSwitchRequired != pdFALSE )         \
 105:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 106:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT_TO_SCHEDULER();        \
 107:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             portYIELD();                         \
 108:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 109:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else                                     \
 110:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 111:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT();                     \
 112:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 113:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     } while( 0 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 8


 114:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x )    portEND_SWITCHING_ISR( x )
 115:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 118:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 119:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 120:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 121:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 122:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 123:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 124:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()                      vPortEnterCritical()
 125:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()                       vPortExitCritical()
 126:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 128:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 130:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 131:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 132:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParameters )
 133:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParameters )
 134:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 138:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 139:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xExpec
 140:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 141:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 142:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 144:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 145:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 146:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 147:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 149:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 151:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBi
 152:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 153:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint8_t ucReturn;
 154:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 156:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ucReturn;
 158:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 159:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 161:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configMAX_PRIORITIES > 32 )
 162:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITI
 163:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 164:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 166:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities ) |= 
 167:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities ) &= 
 168:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 9


 171:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 31UL 
 172:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 174:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 175:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 176:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 178:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     void vPortValidateInterruptPriority( void );
 179:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 180:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 181:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 182:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 183:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 184:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE              __inline
 186:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 187:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 188:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 189:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 190:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 192:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulCurrentInterrupt;
 194:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     BaseType_t xReturn;
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 196:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     /* Obtain the number of the currently executing interrupt. */
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 198:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 199:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     if( ulCurrentInterrupt == 0 )
 200:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 201:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdFALSE;
 202:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 203:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     else
 204:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 205:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdTRUE;
 206:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 207:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     return xReturn;
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 210:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 212:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  43              		.loc 2 213 30 view .LVU5
  44              	.LBB13:
 214:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulNewBASEPRI;
  45              		.loc 2 215 5 view .LVU6
 216:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 217:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
  46              		.loc 2 217 5 view .LVU7
  47              		.syntax unified
  48              	@ 217 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
  49 0006 4FF05003 		   mov r3, #80                                              
  50 000a 83F31188 	   msr basepri, r3                                         
  51 000e BFF36F8F 	   isb                                                     
  52 0012 BFF34F8F 	   dsb                                                     
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 10


  53              	
  54              	@ 0 "" 2
  55              		.thumb
  56              		.syntax unified
  57              	.LBE13:
  58              	.LBE12:
 246:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 247:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     while( ulDummy == 0 )
  59              		.loc 1 247 5 view .LVU8
  60              	.L2:
 248:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 249:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 250:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * started to remove a compiler warning about the function being defined
 251:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 252:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * about code appearing after this function is called - making ulDummy
 253:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * volatile makes the compiler think the function could return and
 254:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 255:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * after it. */
 256:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
  61              		.loc 1 256 5 view .LVU9
 247:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
  62              		.loc 1 247 20 discriminator 1 view .LVU10
  63 0016 019B     		ldr	r3, [sp, #4]
  64 0018 002B     		cmp	r3, #0
  65 001a FCD0     		beq	.L2
 257:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
  66              		.loc 1 257 1 is_stmt 0 view .LVU11
  67 001c 02B0     		add	sp, sp, #8
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 0
  70              		@ sp needed
  71 001e 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE129:
  75              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  76              		.align	1
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  81              	prvPortStartFirstTask:
  82              	.LFB131:
 258:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 259:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 260:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 261:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 262:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
 263:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr r3, pxCurrentTCBConst2      \n" /* Restore the context. */
 264:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr r1, [r3]                    \n" /* Use pxCurrentTCBConst to get the pxCurrentTCB ad
 265:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr r0, [r1]                    \n" /* The first item in pxCurrentTCB is the task top o
 266:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldmia r0!, {r4-r11, r14}        \n" /* Pop the registers that are not automatically sav
 267:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   msr psp, r0                     \n" /* Restore the task stack pointer. */
 268:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   isb                             \n"
 269:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   mov r0, #0                      \n"
 270:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   msr basepri, r0                 \n"
 271:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   bx r14                          \n"
 272:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                   \n"
 273:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   .align 4                        \n"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 11


 274:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
 275:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         );
 276:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 277:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 278:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 279:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 280:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
  83              		.loc 1 280 1 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ Naked Function: prologue and epilogue provided by programmer.
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
 281:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Start the first task.  This also clears the bit that indicates the FPU is
 282:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * in use in case the FPU was used before the scheduler was started - which
 283:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * would otherwise result in the unnecessary leaving of space in the SVC stack
 284:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * for lazy saving of FPU registers. */
 285:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
  88              		.loc 1 285 5 view .LVU13
  89              		.syntax unified
  90              	@ 285 "FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
  91 0000 0848     		 ldr r0, =0xE000ED08   
  92 0002 0068     	 ldr r0, [r0]          
  93 0004 0068     	 ldr r0, [r0]          
  94 0006 80F30888 	 msr msp, r0           
  95 000a 4FF00000 	 mov r0, #0            
  96 000e 80F31488 	 msr control, r0       
  97 0012 62B6     	 cpsie i               
  98 0014 61B6     	 cpsie f               
  99 0016 BFF34F8F 	 dsb                   
 100 001a BFF36F8F 	 isb                   
 101 001e 00DF     	 svc 0                 
 102 0020 00BF     	 nop                   
 103 0022 000008ED 	 .ltorg                
 103      00E0
 104              	
 105              	@ 0 "" 2
 286:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, =0xE000ED08   \n" /* Use the NVIC offset register to locate the stack. */
 287:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, [r0]          \n"
 288:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, [r0]          \n"
 289:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " msr msp, r0           \n" /* Set the msp back to the start of the stack. */
 290:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " mov r0, #0            \n" /* Clear the bit that indicates the FPU is in use, see comment 
 291:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " msr control, r0       \n"
 292:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " cpsie i               \n" /* Globally enable interrupts. */
 293:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " cpsie f               \n"
 294:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " dsb                   \n"
 295:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " isb                   \n"
 296:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " svc 0                 \n" /* System call to start first task. */
 297:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " nop                   \n"
 298:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " .ltorg                \n"
 299:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         );
 300:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 106              		.loc 1 300 1 is_stmt 0 view .LVU14
 107              		.thumb
 108              		.syntax unified
 109              		.cfi_endproc
 110              	.LFE131:
 112              		.section	.text.vPortEnableVFP,"ax",%progbits
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 12


 113              		.align	1
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	vPortEnableVFP:
 119              	.LFB139:
 301:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 302:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 303:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 304:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 305:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 306:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 307:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 308:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* This port can be used on all revisions of the Cortex-M7 core other than
 309:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * the r0p1 parts.  r0p1 parts should use the port from the
 310:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * /source/portable/GCC/ARM_CM7/r0p1 directory. */
 311:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 312:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 313:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 314:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* An application can install FreeRTOS interrupt handlers in one of the
 315:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * following ways:
 316:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * 1. Direct Routing - Install the functions vPortSVCHandler and
 317:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    xPortPendSVHandler for SVCall and PendSV interrupts respectively.
 318:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * 2. Indirect Routing - Install separate handlers for SVCall and PendSV
 319:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    interrupts and route program control from those handlers to
 320:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    vPortSVCHandler and xPortPendSVHandler functions.
 321:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *
 322:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * Applications that use Indirect Routing must set
 323:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
 324:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
 325:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * is 1, should be preferred when possible. */
 326:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #if ( configCHECK_HANDLER_INSTALLATION == 1 )
 327:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 328:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 329:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 330:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Validate that the application has correctly installed the FreeRTOS
 331:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * handlers for SVCall and PendSV interrupts. We do not check the
 332:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * installation of the SysTick handler because the application may
 333:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * choose to drive the RTOS tick using a timer other than the SysTick
 334:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * timer by overriding the weak function vPortSetupTimerInterrupt().
 335:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          *
 336:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * Assertion failures here indicate incorrect installation of the
 337:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * FreeRTOS handlers. For help installing the FreeRTOS handlers, see
 338:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * https://www.FreeRTOS.org/FAQHelp.html.
 339:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          *
 340:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * Systems with a configurable address for the interrupt vector table
 341:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * can also encounter assertion failures or even system faults here if
 342:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * VTOR is not set correctly to point to the application's vector table. */
 343:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 344:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 345:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 346:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #endif /* configCHECK_HANDLER_INSTALLATION */
 347:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 348:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #if ( configASSERT_DEFINED == 1 )
 349:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 350:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t ucOriginalPriority;
 351:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         volatile uint32_t ulImplementedPrioBits = 0;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 13


 352:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( port
 353:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t ucMaxPriorityValue;
 354:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 355:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Determine the maximum priority from which ISR safe FreeRTOS API
 356:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * functions can be called.  ISR safe functions are those that end in
 357:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 358:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * ensure interrupt entry is as fast and simple as possible.
 359:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          *
 360:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * Save the interrupt priority value that is about to be clobbered. */
 361:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ucOriginalPriority = *pucFirstUserPriorityRegister;
 362:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 363:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Determine the number of priority bits available.  First write to all
 364:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * possible bits. */
 365:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 366:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 367:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Read the value back to see how many bits stuck. */
 368:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 369:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 370:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Use the same mask on the maximum system call priority. */
 371:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 372:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 373:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Check that the maximum system call priority is nonzero after
 374:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * accounting for the number of priority bits supported by the
 375:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * hardware. A priority of 0 is invalid because setting the BASEPRI
 376:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * register to 0 unmasks all interrupts, and interrupts with priority 0
 377:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * cannot be masked using BASEPRI.
 378:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 379:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ucMaxSysCallPriority );
 380:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 381:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Check that the bits not implemented in hardware are zero in
 382:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
 383:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 384:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 385:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Calculate the maximum acceptable priority group value for the number
 386:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * of bits read back. */
 387:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 388:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 389:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 390:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ulImplementedPrioBits++;
 391:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 392:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 393:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 394:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         if( ulImplementedPrioBits == 8 )
 395:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 396:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* When the hardware implements 8 priority bits, there is no way for
 397:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the software to configure PRIGROUP to not have sub-priorities. As
 398:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * a result, the least significant bit is always used for sub-priority
 399:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * and there are 128 preemption priorities and 2 sub-priorities.
 400:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              *
 401:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * This may cause some confusion in some cases - for example, if
 402:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY is set to 5, both 5 and 4
 403:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * priority interrupts will be masked in Critical Sections as those
 404:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * are at the same preemption priority. This may appear confusing as
 405:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * 4 is higher (numerically lower) priority than
 406:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY and therefore, should not
 407:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * have been masked. Instead, if we set configMAX_SYSCALL_INTERRUPT_PRIORITY
 408:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * to 4, this confusion does not happen and the behaviour remains the same.
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 14


 409:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              *
 410:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * The following assert ensures that the sub-priority bit in the
 411:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
 412:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * confusion. */
 413:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
 414:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue = 0;
 415:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 416:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         else
 417:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 418:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 419:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 420:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 421:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Shift the priority group value back to its position within the AIRCR
 422:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * register. */
 423:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 424:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 425:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 426:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Restore the clobbered interrupt priority register to its original
 427:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * value. */
 428:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         *pucFirstUserPriorityRegister = ucOriginalPriority;
 429:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 430:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #endif /* configASSERT_DEFINED */
 431:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 432:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
 433:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * the highest priority. */
 434:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 435:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 436:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR2_REG = 0;
 437:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 438:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 439:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * here already. */
 440:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     vPortSetupTimerInterrupt();
 441:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 442:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Initialise the critical nesting count ready for the first task. */
 443:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting = 0;
 444:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 445:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Ensure the VFP is enabled - it should be anyway. */
 446:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     vPortEnableVFP();
 447:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 448:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Lazy save always. */
 449:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 450:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 451:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Start the first task. */
 452:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     prvPortStartFirstTask();
 453:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 454:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 455:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * exit error function to prevent compiler warnings about a static function
 456:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * not being called in the case that the application writer overrides this
 457:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 458:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
 459:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * symbol. */
 460:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     vTaskSwitchContext();
 461:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     prvTaskExitError();
 462:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 463:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Should not get here! */
 464:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     return 0;
 465:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 15


 466:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 467:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 468:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 469:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 470:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Not implemented in ports where there is nothing to return to.
 471:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * Artificially force an assert. */
 472:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 473:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 474:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 475:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 476:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 477:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 478:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 479:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting++;
 480:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 481:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* This is not the interrupt safe version of the enter critical function so
 482:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * assert() if it is being called from an interrupt context.  Only API
 483:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 484:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 485:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * assert function also uses a critical section. */
 486:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     if( uxCriticalNesting == 1 )
 487:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 488:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 489:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 490:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 491:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 492:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 493:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 494:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 495:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting );
 496:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 497:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 498:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     if( uxCriticalNesting == 0 )
 499:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 500:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         portENABLE_INTERRUPTS();
 501:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 502:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 503:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 504:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 505:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 506:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 507:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* This is a naked function. */
 508:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 509:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __asm volatile
 510:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     (
 511:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   mrs r0, psp                         \n"
 512:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   isb                                 \n"
 513:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 514:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr r3, pxCurrentTCBConst           \n" /* Get the location of the current TCB. */
 515:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr r2, [r3]                        \n"
 516:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 517:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   tst r14, #0x10                      \n" /* Is the task using the FPU context?  If so, p
 518:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   it eq                               \n"
 519:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   vstmdbeq r0!, {s16-s31}             \n"
 520:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 521:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   stmdb r0!, {r4-r11, r14}            \n" /* Save the core registers. */
 522:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   str r0, [r2]                        \n" /* Save the new top of stack into the first mem
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 16


 523:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 524:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   stmdb sp!, {r0, r3}                 \n"
 525:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   mov r0, %0                          \n"
 526:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   msr basepri, r0                     \n"
 527:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   dsb                                 \n"
 528:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   isb                                 \n"
 529:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   bl vTaskSwitchContext               \n"
 530:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   mov r0, #0                          \n"
 531:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   msr basepri, r0                     \n"
 532:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldmia sp!, {r0, r3}                 \n"
 533:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 534:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr r1, [r3]                        \n" /* The first item in pxCurrentTCB is the task t
 535:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr r0, [r1]                        \n"
 536:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 537:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldmia r0!, {r4-r11, r14}            \n" /* Pop the core registers. */
 538:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 539:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   tst r14, #0x10                      \n" /* Is the task using the FPU context?  If so, p
 540:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   it eq                               \n"
 541:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   vldmiaeq r0!, {s16-s31}             \n"
 542:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 543:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   msr psp, r0                         \n"
 544:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   isb                                 \n"
 545:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 546:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         #ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 547:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #if WORKAROUND_PMU_CM001 == 1
 548:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 "           push { r14 }                \n"
 549:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 "           pop { pc }                  \n"
 550:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #endif
 551:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         #endif
 552:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 553:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   bx r14                              \n"
 554:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 555:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   .align 4                            \n"
 556:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB  \n"
 557:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 558:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     );
 559:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 560:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 561:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 562:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 563:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 564:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 565:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 566:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * save and then restore the interrupt mask value as its value is already
 567:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * known. */
 568:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 569:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     traceISR_ENTER();
 570:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 571:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Increment the RTOS tick. */
 572:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         if( xTaskIncrementTick() != pdFALSE )
 573:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 574:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             traceISR_EXIT_TO_SCHEDULER();
 575:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 576:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* A context switch is required.  Context switching is performed in
 577:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 578:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 579:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 17


 580:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         else
 581:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 582:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             traceISR_EXIT();
 583:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 584:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 585:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portENABLE_INTERRUPTS();
 586:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 587:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 588:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 589:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 590:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 591:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 592:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 593:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecre
 594:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         TickType_t xModifiableIdleTime;
 595:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 596:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 597:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 598:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 599:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 600:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 601:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 602:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 603:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 604:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 605:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "dsb" );
 606:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "isb" );
 607:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 608:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
 609:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * to be unsuspended then abandon the low power entry. */
 610:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 611:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 612:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction
 613:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * above. */
 614:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 615:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 616:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         else
 617:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 618:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 619:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * is accounted for as best it can be, but using the tickless mode will
 620:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * inevitably result in some tiny drift of the time maintained by the
 621:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * kernel with respect to calendar time. */
 622:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 623:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 624:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Use the SysTick current-value register to determine the number of
 625:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * SysTick decrements remaining until the next tick interrupt.  If the
 626:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * current-value register is zero, then there are actually
 627:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * ulTimerCountsForOneTick decrements remaining, not zero, because the
 628:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * SysTick requests the interrupt when decrementing from 1 to 0. */
 629:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 630:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 631:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( ulSysTickDecrementsLeft == 0 )
 632:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 633:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 634:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 635:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 636:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Calculate the reload value required to wait xExpectedIdleTime
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 18


 637:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * tick periods.  -1 is used because this code normally executes part
 638:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * way through the first tick period.  But if the SysTick IRQ is now
 639:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * pending, then clear the IRQ, suppressing the first tick, and correct
 640:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the reload value to reflect that the second tick period is already
 641:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * underway.  The expected idle time is always at least two ticks. */
 642:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTi
 643:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 644:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 645:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 646:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 647:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulReloadValue -= ulTimerCountsForOneTick;
 648:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 649:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 650:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( ulReloadValue > ulStoppedTimerCompensation )
 651:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 652:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulReloadValue -= ulStoppedTimerCompensation;
 653:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 654:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 655:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Set the new reload value. */
 656:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 657:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 658:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Clear the SysTick count flag and set the count value back to
 659:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * zero. */
 660:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 661:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 662:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Restart SysTick. */
 663:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 664:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 665:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 666:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * set its parameter to 0 to indicate that its implementation contains
 667:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 668:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * should not be executed again.  However, the original expected idle
 669:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * time variable must remain unmodified, so a copy is taken. */
 670:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 671:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 672:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 673:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( xModifiableIdleTime > 0 )
 674:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 675:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 676:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "wfi" );
 677:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "isb" );
 678:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 679:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 680:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 681:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 682:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 683:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * out of sleep mode to execute immediately.  See comments above
 684:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the cpsid instruction above. */
 685:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 686:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "dsb" );
 687:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "isb" );
 688:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 689:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Disable interrupts again because the clock is about to be stopped
 690:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * and interrupts that execute while the clock is stopped will increase
 691:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * any slippage between the time maintained by the RTOS and calendar
 692:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * time. */
 693:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 19


 694:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "dsb" );
 695:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "isb" );
 696:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 697:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Disable the SysTick clock without reading the
 698:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 699:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 700:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 701:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * be, but using the tickless mode will inevitably result in some tiny
 702:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * drift of the time maintained by the kernel with respect to calendar
 703:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * time*/
 704:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 705:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 706:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Determine whether the SysTick has already counted to zero. */
 707:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 708:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 709:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 uint32_t ulCalculatedLoadValue;
 710:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 711:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* The tick interrupt ended the sleep (or is now pending), and
 712:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * a new tick period has started.  Reset portNVIC_SYSTICK_LOAD_REG
 713:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * with whatever remains of the new tick period. */
 714:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 715:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 716:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* Don't allow a tiny value, or values that have somehow
 717:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * underflowed because the post sleep hook did something
 718:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * that took too long or because the SysTick current-value register
 719:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * is zero. */
 720:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadVa
 721:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 {
 722:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 723:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 }
 724:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 725:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 726:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 727:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* As the pending tick will be processed as soon as this
 728:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * function exits, the tick value maintained by the tick is stepped
 729:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * forward by one less than the time spent waiting. */
 730:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 731:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 732:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             else
 733:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 734:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* Something other than the tick interrupt ended the sleep. */
 735:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 736:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* Use the SysTick current-value register to determine the
 737:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * number of SysTick decrements remaining until the expected idle
 738:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * time would have ended. */
 739:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 740:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG != portNVIC_SYSTICK_CLK_BIT )
 741:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 {
 742:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     /* If the SysTick is not using the core clock, the current-
 743:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * value register might still be zero here.  In that case, the
 744:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * SysTick didn't load from the reload register, and there are
 745:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * ulReloadValue decrements remaining in the expected idle
 746:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * time, not zero. */
 747:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     if( ulSysTickDecrementsLeft == 0 )
 748:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     {
 749:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                         ulSysTickDecrementsLeft = ulReloadValue;
 750:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 20


 751:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 }
 752:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 753:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 754:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* Work out how long the sleep lasted rounded to complete tick
 755:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * periods (not the ulReload value which accounted for part
 756:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * ticks). */
 757:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ul
 758:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 759:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* How many complete tick periods passed while the processor
 760:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * was waiting? */
 761:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 762:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 763:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* The reload value is set to whatever fraction of a single tick
 764:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * period remains. */
 765:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 766:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 767:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 768:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG again,
 769:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * then set portNVIC_SYSTICK_LOAD_REG back to its standard value.  If
 770:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the SysTick is not using the core clock, temporarily configure it to
 771:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * use the core clock.  This configuration forces the SysTick to load
 772:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * from portNVIC_SYSTICK_LOAD_REG immediately instead of at the next
 773:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * cycle of the other clock.  Then portNVIC_SYSTICK_LOAD_REG is ready
 774:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * to receive the standard value immediately. */
 775:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 776:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portN
 777:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG == portNVIC_SYSTICK_CLK_BIT )
 778:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 779:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 780:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 781:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #else
 782:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 783:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* The temporary usage of the core clock has served its purpose,
 784:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * as described above.  Resume usage of the other clock. */
 785:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT;
 786:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 787:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 788:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 {
 789:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     /* The partial tick period already ended.  Be sure the SysTick
 790:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * counts it only once. */
 791:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0;
 792:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 }
 793:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 794:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 795:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_
 796:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 797:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 798:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 799:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Step the tick to account for any tick periods that elapsed. */
 800:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 801:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 802:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Exit with interrupts enabled. */
 803:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 804:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 805:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 806:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 807:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 21


 808:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 809:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 810:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 811:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 812:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 813:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 814:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 815:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 816:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 817:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 818:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 819:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 820:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 821:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTIC
 822:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 823:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 824:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 825:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Stop and clear the SysTick. */
 826:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 827:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 828:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 829:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 830:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 831:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 832:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 833:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 834:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 835:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 836:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 837:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 120              		.loc 1 837 1 is_stmt 1 view -0
 121              		.cfi_startproc
 122              		@ Naked Function: prologue and epilogue provided by programmer.
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 838:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __asm volatile
 125              		.loc 1 838 5 view .LVU16
 126              		.syntax unified
 127              	@ 838 "FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 128 0000 DFF80C00 		   ldr.w r0, =0xE000ED88       
 129 0004 0168     	   ldr r1, [r0]                
 130              	                               
 131 0006 41F47001 	   orr r1, r1, #( 0xf << 20 )  
 132 000a 0160     	   str r1, [r0]                
 133 000c 7047     	   bx r14                      
 134 000e 000088ED 	   .ltorg                      
 134      00E0
 135              	
 136              	@ 0 "" 2
 839:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     (
 840:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr.w r0, =0xE000ED88       \n" /* The FPU enable bits are in the CPACR. */
 841:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr r1, [r0]                \n"
 842:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "                               \n"
 843:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. *
 844:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   str r1, [r0]                \n"
 845:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   bx r14                      \n"
 846:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   .ltorg                      \n"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 22


 847:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     );
 848:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 137              		.loc 1 848 1 is_stmt 0 view .LVU17
 138              		.thumb
 139              		.syntax unified
 140              		.cfi_endproc
 141              	.LFE139:
 143              		.section	.text.pxPortInitialiseStack,"ax",%progbits
 144              		.align	1
 145              		.global	pxPortInitialiseStack
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 150              	pxPortInitialiseStack:
 151              	.LVL0:
 152              	.LFB128:
 205:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 153              		.loc 1 205 1 is_stmt 1 view -0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 211:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 158              		.loc 1 211 5 view .LVU19
 213:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 159              		.loc 1 213 5 view .LVU20
 213:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 160              		.loc 1 213 19 is_stmt 0 view .LVU21
 161 0000 4FF08073 		mov	r3, #16777216
 162 0004 40F8043C 		str	r3, [r0, #-4]
 214:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 163              		.loc 1 214 5 is_stmt 1 view .LVU22
 164              	.LVL1:
 215:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 165              		.loc 1 215 5 view .LVU23
 215:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 166              		.loc 1 215 48 is_stmt 0 view .LVU24
 167 0008 21F00101 		bic	r1, r1, #1
 168              	.LVL2:
 215:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 169              		.loc 1 215 19 view .LVU25
 170 000c 40F8081C 		str	r1, [r0, #-8]
 216:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 171              		.loc 1 216 5 is_stmt 1 view .LVU26
 172              	.LVL3:
 217:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 173              		.loc 1 217 5 view .LVU27
 217:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 174              		.loc 1 217 21 is_stmt 0 view .LVU28
 175 0010 054B     		ldr	r3, .L7
 217:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 176              		.loc 1 217 19 view .LVU29
 177 0012 40F80C3C 		str	r3, [r0, #-12]
 220:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 178              		.loc 1 220 5 is_stmt 1 view .LVU30
 179              	.LVL4:
 221:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 23


 180              		.loc 1 221 5 view .LVU31
 221:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 181              		.loc 1 221 19 is_stmt 0 view .LVU32
 182 0016 40F8202C 		str	r2, [r0, #-32]
 225:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 183              		.loc 1 225 5 is_stmt 1 view .LVU33
 184              	.LVL5:
 226:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 185              		.loc 1 226 5 view .LVU34
 226:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 186              		.loc 1 226 19 is_stmt 0 view .LVU35
 187 001a 6FF00203 		mvn	r3, #2
 188 001e 40F8243C 		str	r3, [r0, #-36]
 228:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 189              		.loc 1 228 5 is_stmt 1 view .LVU36
 190              	.LVL6:
 230:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 191              		.loc 1 230 5 view .LVU37
 231:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 192              		.loc 1 231 1 is_stmt 0 view .LVU38
 193 0022 4438     		subs	r0, r0, #68
 194              	.LVL7:
 231:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 195              		.loc 1 231 1 view .LVU39
 196 0024 7047     		bx	lr
 197              	.L8:
 198 0026 00BF     		.align	2
 199              	.L7:
 200 0028 00000000 		.word	prvTaskExitError
 201              		.cfi_endproc
 202              	.LFE128:
 204              		.section	.text.vPortSVCHandler,"ax",%progbits
 205              		.align	1
 206              		.global	vPortSVCHandler
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 211              	vPortSVCHandler:
 212              	.LFB130:
 261:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
 213              		.loc 1 261 1 is_stmt 1 view -0
 214              		.cfi_startproc
 215              		@ Naked Function: prologue and epilogue provided by programmer.
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 262:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "   ldr r3, pxCurrentTCBConst2      \n" /* Restore the context. */
 218              		.loc 1 262 5 view .LVU41
 219              		.syntax unified
 220              	@ 262 "FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 221 0000 074B     		   ldr r3, pxCurrentTCBConst2      
 222 0002 1968     	   ldr r1, [r3]                    
 223 0004 0868     	   ldr r0, [r1]                    
 224 0006 B0E8F04F 	   ldmia r0!, {r4-r11, r14}        
 225 000a 80F30988 	   msr psp, r0                     
 226 000e BFF36F8F 	   isb                             
 227 0012 4FF00000 	   mov r0, #0                      
 228 0016 80F31188 	   msr basepri, r0                 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 24


 229 001a 7047     	   bx r14                          
 230              	                                   
 231 001c AFF30080 	   .align 4                        
 232 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB             
 233              	
 234              	@ 0 "" 2
 276:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 235              		.loc 1 276 1 is_stmt 0 view .LVU42
 236              		.thumb
 237              		.syntax unified
 238              		.cfi_endproc
 239              	.LFE130:
 241              		.section	.text.vPortEndScheduler,"ax",%progbits
 242              		.align	1
 243              		.global	vPortEndScheduler
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 248              	vPortEndScheduler:
 249              	.LFB133:
 469:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Not implemented in ports where there is nothing to return to.
 250              		.loc 1 469 1 is_stmt 1 view -0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              		@ link register save eliminated.
 472:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 255              		.loc 1 472 48 view .LVU44
 473:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 256              		.loc 1 473 1 is_stmt 0 view .LVU45
 257 0000 7047     		bx	lr
 258              		.cfi_endproc
 259              	.LFE133:
 261              		.section	.text.vPortEnterCritical,"ax",%progbits
 262              		.align	1
 263              		.global	vPortEnterCritical
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 268              	vPortEnterCritical:
 269              	.LFB134:
 477:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 270              		.loc 1 477 1 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              		@ link register save eliminated.
 478:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting++;
 275              		.loc 1 478 5 view .LVU47
 276              	.LBB14:
 277              	.LBI14:
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 278              		.loc 2 213 30 view .LVU48
 279              	.LBB15:
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 280              		.loc 2 215 5 view .LVU49
 281              		.loc 2 217 5 view .LVU50
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 25


 282              		.syntax unified
 283              	@ 217 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 284 0000 4FF05003 		   mov r3, #80                                              
 285 0004 83F31188 	   msr basepri, r3                                         
 286 0008 BFF36F8F 	   isb                                                     
 287 000c BFF34F8F 	   dsb                                                     
 288              	
 289              	@ 0 "" 2
 290              		.thumb
 291              		.syntax unified
 292              	.LBE15:
 293              	.LBE14:
 479:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 294              		.loc 1 479 5 view .LVU51
 479:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 295              		.loc 1 479 22 is_stmt 0 view .LVU52
 296 0010 024A     		ldr	r2, .L12
 297 0012 1368     		ldr	r3, [r2]
 298 0014 0133     		adds	r3, r3, #1
 299 0016 1360     		str	r3, [r2]
 486:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 300              		.loc 1 486 5 is_stmt 1 view .LVU53
 488:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 301              		.loc 1 488 77 view .LVU54
 490:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 302              		.loc 1 490 1 is_stmt 0 view .LVU55
 303 0018 7047     		bx	lr
 304              	.L13:
 305 001a 00BF     		.align	2
 306              	.L12:
 307 001c 00000000 		.word	uxCriticalNesting
 308              		.cfi_endproc
 309              	.LFE134:
 311              		.section	.text.vPortExitCritical,"ax",%progbits
 312              		.align	1
 313              		.global	vPortExitCritical
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 318              	vPortExitCritical:
 319              	.LFB135:
 494:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting );
 320              		.loc 1 494 1 is_stmt 1 view -0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              		@ link register save eliminated.
 495:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 325              		.loc 1 495 38 view .LVU57
 496:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 326              		.loc 1 496 5 view .LVU58
 496:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 327              		.loc 1 496 22 is_stmt 0 view .LVU59
 328 0000 034A     		ldr	r2, .L16
 329 0002 1368     		ldr	r3, [r2]
 330 0004 013B     		subs	r3, r3, #1
 331 0006 1360     		str	r3, [r2]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 26


 498:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 332              		.loc 1 498 5 is_stmt 1 view .LVU60
 498:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 333              		.loc 1 498 7 is_stmt 0 view .LVU61
 334 0008 0BB9     		cbnz	r3, .L14
 500:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 335              		.loc 1 500 9 is_stmt 1 view .LVU62
 336              	.LVL8:
 337              	.LBB16:
 338              	.LBI16:
 218:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 219:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %0, %1                                              \n" \
 220:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %0                                         \n" \
 221:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 222:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 223:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 224:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     );
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 226:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 230:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 232:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 234:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 235:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mrs %0, basepri                                         \n" \
 236:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %1, %2                                              \n" \
 237:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %1                                         \n" \
 238:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 239:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 240:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRI
 241:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     );
 242:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 243:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     /* This return will not be reached but is necessary to prevent compiler
 244:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      * warnings. */
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     return ulOriginalBASEPRI;
 246:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 247:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 339              		.loc 2 249 30 view .LVU63
 340              	.LBB17:
 250:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 341              		.loc 2 251 5 view .LVU64
 342              		.syntax unified
 343              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 344 000a 83F31188 		   msr basepri, r3 
 345              	@ 0 "" 2
 346              	.LVL9:
 347              		.thumb
 348              		.syntax unified
 349              	.L14:
 350              		.loc 2 251 5 is_stmt 0 view .LVU65
 351              	.LBE17:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 27


 352              	.LBE16:
 502:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 353              		.loc 1 502 1 view .LVU66
 354 000e 7047     		bx	lr
 355              	.L17:
 356              		.align	2
 357              	.L16:
 358 0010 00000000 		.word	uxCriticalNesting
 359              		.cfi_endproc
 360              	.LFE135:
 362              		.section	.text.xPortPendSVHandler,"ax",%progbits
 363              		.align	1
 364              		.global	xPortPendSVHandler
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 369              	xPortPendSVHandler:
 370              	.LFB136:
 506:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* This is a naked function. */
 371              		.loc 1 506 1 is_stmt 1 view -0
 372              		.cfi_startproc
 373              		@ Naked Function: prologue and epilogue provided by programmer.
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 509:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     (
 376              		.loc 1 509 5 view .LVU68
 377              		.syntax unified
 378              	@ 509 "FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 379 0000 EFF30980 		   mrs r0, psp                         
 380 0004 BFF36F8F 	   isb                                 
 381              	                                       
 382 0008 154B     	   ldr r3, pxCurrentTCBConst           
 383 000a 1A68     	   ldr r2, [r3]                        
 384              	                                       
 385 000c 1EF0100F 	   tst r14, #0x10                      
 386 0010 08BF     	   it eq                               
 387 0012 20ED108A 	   vstmdbeq r0!, {s16-s31}             
 388              	                                       
 389 0016 20E9F04F 	   stmdb r0!, {r4-r11, r14}            
 390 001a 1060     	   str r0, [r2]                        
 391              	                                       
 392 001c 2DE90900 	   stmdb sp!, {r0, r3}                 
 393 0020 4FF05000 	   mov r0, #80                          
 394 0024 80F31188 	   msr basepri, r0                     
 395 0028 BFF34F8F 	   dsb                                 
 396 002c BFF36F8F 	   isb                                 
 397 0030 FFF7FEFF 	   bl vTaskSwitchContext               
 398 0034 4FF00000 	   mov r0, #0                          
 399 0038 80F31188 	   msr basepri, r0                     
 400 003c 09BC     	   ldmia sp!, {r0, r3}                 
 401              	                                       
 402 003e 1968     	   ldr r1, [r3]                        
 403 0040 0868     	   ldr r0, [r1]                        
 404              	                                       
 405 0042 B0E8F04F 	   ldmia r0!, {r4-r11, r14}            
 406              	                                       
 407 0046 1EF0100F 	   tst r14, #0x10                      
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 28


 408 004a 08BF     	   it eq                               
 409 004c B0EC108A 	   vldmiaeq r0!, {s16-s31}             
 410              	                                       
 411 0050 80F30988 	   msr psp, r0                         
 412 0054 BFF36F8F 	   isb                                 
 413              	                                       
 414              	                                       
 415 0058 7047     	   bx r14                              
 416              	                                       
 417 005a 00BFAFF3 	   .align 4                            
 417      0080
 418 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB  
 419              	
 420              	@ 0 "" 2
 559:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 421              		.loc 1 559 1 is_stmt 0 view .LVU69
 422              		.thumb
 423              		.syntax unified
 424              		.cfi_endproc
 425              	.LFE136:
 427              		.section	.text.xPortSysTickHandler,"ax",%progbits
 428              		.align	1
 429              		.global	xPortSysTickHandler
 430              		.syntax unified
 431              		.thumb
 432              		.thumb_func
 434              	xPortSysTickHandler:
 435              	.LFB137:
 563:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 436              		.loc 1 563 1 is_stmt 1 view -0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440 0000 08B5     		push	{r3, lr}
 441              	.LCFI2:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 3, -8
 444              		.cfi_offset 14, -4
 568:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     traceISR_ENTER();
 445              		.loc 1 568 5 view .LVU71
 446              	.LBB18:
 447              	.LBI18:
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 448              		.loc 2 213 30 view .LVU72
 449              	.LBB19:
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 450              		.loc 2 215 5 view .LVU73
 217:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 451              		.loc 2 217 5 view .LVU74
 452              		.syntax unified
 453              	@ 217 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 454 0002 4FF05003 		   mov r3, #80                                              
 455 0006 83F31188 	   msr basepri, r3                                         
 456 000a BFF36F8F 	   isb                                                     
 457 000e BFF34F8F 	   dsb                                                     
 458              	
 459              	@ 0 "" 2
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 29


 460              		.thumb
 461              		.syntax unified
 462              	.LBE19:
 463              	.LBE18:
 569:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 464              		.loc 1 569 21 view .LVU75
 572:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 465              		.loc 1 572 9 view .LVU76
 572:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 466              		.loc 1 572 13 is_stmt 0 view .LVU77
 467 0012 FFF7FEFF 		bl	xTaskIncrementTick
 468              	.LVL10:
 572:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 469              		.loc 1 572 11 discriminator 1 view .LVU78
 470 0016 28B1     		cbz	r0, .L20
 574:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 471              		.loc 1 574 41 is_stmt 1 view .LVU79
 578:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 472              		.loc 1 578 13 view .LVU80
 578:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 473              		.loc 1 578 35 is_stmt 0 view .LVU81
 474 0018 4FF0E023 		mov	r3, #-536813568
 475 001c 4FF08052 		mov	r2, #268435456
 476 0020 C3F8042D 		str	r2, [r3, #3332]
 477              	.L20:
 582:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 478              		.loc 1 582 28 is_stmt 1 view .LVU82
 585:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 479              		.loc 1 585 5 view .LVU83
 480              	.LVL11:
 481              	.LBB20:
 482              	.LBI20:
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 483              		.loc 2 249 30 view .LVU84
 484              	.LBB21:
 485              		.loc 2 251 5 view .LVU85
 486 0024 0023     		movs	r3, #0
 487              		.syntax unified
 488              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 489 0026 83F31188 		   msr basepri, r3 
 490              	@ 0 "" 2
 491              	.LVL12:
 492              		.loc 2 251 5 is_stmt 0 view .LVU86
 493              		.thumb
 494              		.syntax unified
 495              	.LBE21:
 496              	.LBE20:
 586:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 497              		.loc 1 586 1 view .LVU87
 498 002a 08BD     		pop	{r3, pc}
 499              		.cfi_endproc
 500              	.LFE137:
 502              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 503              		.align	1
 504              		.weak	vPortSetupTimerInterrupt
 505              		.syntax unified
 506              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 30


 507              		.thumb_func
 509              	vPortSetupTimerInterrupt:
 510              	.LFB138:
 815:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 511              		.loc 1 815 1 is_stmt 1 view -0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 0, uses_anonymous_args = 0
 515              		@ link register save eliminated.
 826:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 516              		.loc 1 826 5 view .LVU89
 826:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 517              		.loc 1 826 31 is_stmt 0 view .LVU90
 518 0000 4FF0E022 		mov	r2, #-536813568
 519 0004 0023     		movs	r3, #0
 520 0006 1361     		str	r3, [r2, #16]
 827:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 521              		.loc 1 827 5 is_stmt 1 view .LVU91
 827:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 522              		.loc 1 827 40 is_stmt 0 view .LVU92
 523 0008 9361     		str	r3, [r2, #24]
 830:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 524              		.loc 1 830 5 is_stmt 1 view .LVU93
 830:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 525              		.loc 1 830 58 is_stmt 0 view .LVU94
 526 000a 054B     		ldr	r3, .L23
 527 000c 1B68     		ldr	r3, [r3]
 528 000e 0549     		ldr	r1, .L23+4
 529 0010 A1FB0313 		umull	r1, r3, r1, r3
 530 0014 9B09     		lsrs	r3, r3, #6
 830:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 531              		.loc 1 830 81 view .LVU95
 532 0016 013B     		subs	r3, r3, #1
 830:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 533              		.loc 1 830 31 view .LVU96
 534 0018 5361     		str	r3, [r2, #20]
 831:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 535              		.loc 1 831 5 is_stmt 1 view .LVU97
 831:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 536              		.loc 1 831 31 is_stmt 0 view .LVU98
 537 001a 0723     		movs	r3, #7
 538 001c 1361     		str	r3, [r2, #16]
 832:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 539              		.loc 1 832 1 view .LVU99
 540 001e 7047     		bx	lr
 541              	.L24:
 542              		.align	2
 543              	.L23:
 544 0020 00000000 		.word	SystemClockFrequency
 545 0024 D34D6210 		.word	274877907
 546              		.cfi_endproc
 547              	.LFE138:
 549              		.section	.text.xPortStartScheduler,"ax",%progbits
 550              		.align	1
 551              		.global	xPortStartScheduler
 552              		.syntax unified
 553              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 31


 554              		.thumb_func
 556              	xPortStartScheduler:
 557              	.LFB132:
 307:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* This port can be used on all revisions of the Cortex-M7 core other than
 558              		.loc 1 307 1 is_stmt 1 view -0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562 0000 38B5     		push	{r3, r4, r5, lr}
 563              	.LCFI3:
 564              		.cfi_def_cfa_offset 16
 565              		.cfi_offset 3, -16
 566              		.cfi_offset 4, -12
 567              		.cfi_offset 5, -8
 568              		.cfi_offset 14, -4
 311:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 569              		.loc 1 311 55 view .LVU101
 312:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 570              		.loc 1 312 55 view .LVU102
 328:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 571              		.loc 1 328 9 view .LVU103
 572              	.LVL13:
 343:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 573              		.loc 1 343 81 view .LVU104
 344:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 574              		.loc 1 344 87 view .LVU105
 434:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 575              		.loc 1 434 5 view .LVU106
 576 0002 4FF0E024 		mov	r4, #-536813568
 577 0006 D4F8203D 		ldr	r3, [r4, #3360]
 434:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 578              		.loc 1 434 24 is_stmt 0 view .LVU107
 579 000a 43F47F03 		orr	r3, r3, #16711680
 580 000e C4F8203D 		str	r3, [r4, #3360]
 435:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR2_REG = 0;
 581              		.loc 1 435 5 is_stmt 1 view .LVU108
 582 0012 D4F8203D 		ldr	r3, [r4, #3360]
 435:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR2_REG = 0;
 583              		.loc 1 435 24 is_stmt 0 view .LVU109
 584 0016 43F07F43 		orr	r3, r3, #-16777216
 585 001a C4F8203D 		str	r3, [r4, #3360]
 436:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 586              		.loc 1 436 5 is_stmt 1 view .LVU110
 436:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 587              		.loc 1 436 24 is_stmt 0 view .LVU111
 588 001e 0025     		movs	r5, #0
 589 0020 C4F81C5D 		str	r5, [r4, #3356]
 440:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 590              		.loc 1 440 5 is_stmt 1 view .LVU112
 591 0024 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 592              	.LVL14:
 443:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 593              		.loc 1 443 5 view .LVU113
 443:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 594              		.loc 1 443 23 is_stmt 0 view .LVU114
 595 0028 084B     		ldr	r3, .L27
 596 002a 1D60     		str	r5, [r3]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 32


 446:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 597              		.loc 1 446 5 is_stmt 1 view .LVU115
 598 002c FFF7FEFF 		bl	vPortEnableVFP
 599              	.LVL15:
 449:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 600              		.loc 1 449 5 view .LVU116
 601 0030 D4F8343F 		ldr	r3, [r4, #3892]
 449:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 602              		.loc 1 449 20 is_stmt 0 view .LVU117
 603 0034 43F04043 		orr	r3, r3, #-1073741824
 604 0038 C4F8343F 		str	r3, [r4, #3892]
 452:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 605              		.loc 1 452 5 is_stmt 1 view .LVU118
 606 003c FFF7FEFF 		bl	prvPortStartFirstTask
 607              	.LVL16:
 460:FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     prvTaskExitError();
 608              		.loc 1 460 5 view .LVU119
 609 0040 FFF7FEFF 		bl	vTaskSwitchContext
 610              	.LVL17:
 461:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 611              		.loc 1 461 5 view .LVU120
 612 0044 FFF7FEFF 		bl	prvTaskExitError
 613              	.LVL18:
 464:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 614              		.loc 1 464 5 view .LVU121
 465:FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 615              		.loc 1 465 1 is_stmt 0 view .LVU122
 616 0048 2846     		mov	r0, r5
 617 004a 38BD     		pop	{r3, r4, r5, pc}
 618              	.L28:
 619              		.align	2
 620              	.L27:
 621 004c 00000000 		.word	uxCriticalNesting
 622              		.cfi_endproc
 623              	.LFE132:
 625              		.section	.data.uxCriticalNesting,"aw"
 626              		.align	2
 629              	uxCriticalNesting:
 630 0000 AAAAAAAA 		.word	-1431655766
 631              		.text
 632              	.Letext0:
 633              		.file 3 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 634              		.file 4 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 635              		.file 5 "FreeRTOS/Inc/projdefs.h"
 636              		.file 6 "CMSIS/device/system_n32g430.h"
 637              		.file 7 "FreeRTOS/Inc/task.h"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s 			page 33


DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:19     .text.prvTaskExitError:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:24     .text.prvTaskExitError:00000000 prvTaskExitError
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:76     .text.prvPortStartFirstTask:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:81     .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:103    .text.prvPortStartFirstTask:00000022 $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:103    .text.prvPortStartFirstTask:00000024 $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:113    .text.vPortEnableVFP:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:118    .text.vPortEnableVFP:00000000 vPortEnableVFP
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:134    .text.vPortEnableVFP:0000000e $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:134    .text.vPortEnableVFP:00000010 $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:144    .text.pxPortInitialiseStack:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:150    .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:200    .text.pxPortInitialiseStack:00000028 $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:205    .text.vPortSVCHandler:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:211    .text.vPortSVCHandler:00000000 vPortSVCHandler
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:232    .text.vPortSVCHandler:00000020 pxCurrentTCBConst2
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:232    .text.vPortSVCHandler:00000020 $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:242    .text.vPortEndScheduler:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:248    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:262    .text.vPortEnterCritical:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:268    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:307    .text.vPortEnterCritical:0000001c $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:629    .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:312    .text.vPortExitCritical:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:318    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:358    .text.vPortExitCritical:00000010 $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:363    .text.xPortPendSVHandler:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:369    .text.xPortPendSVHandler:00000000 xPortPendSVHandler
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:418    .text.xPortPendSVHandler:00000060 pxCurrentTCBConst
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:418    .text.xPortPendSVHandler:00000060 $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:428    .text.xPortSysTickHandler:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:434    .text.xPortSysTickHandler:00000000 xPortSysTickHandler
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:503    .text.vPortSetupTimerInterrupt:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:509    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:544    .text.vPortSetupTimerInterrupt:00000020 $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:550    .text.xPortStartScheduler:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:556    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:621    .text.xPortStartScheduler:0000004c $d
C:\Users\Dawn\AppData\Local\Temp\ccx87zZo.s:626    .data.uxCriticalNesting:00000000 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemClockFrequency
