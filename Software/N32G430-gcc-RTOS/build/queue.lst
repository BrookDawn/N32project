ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 23, 1
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "FreeRTOS/Src/queue.c"
  18              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvGetDisinheritPriorityAfterTimeout:
  25              	.LVL0:
  26              	.LFB150:
   1:FreeRTOS/Src/queue.c **** /*
   2:FreeRTOS/Src/queue.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/Src/queue.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/Src/queue.c ****  *
   5:FreeRTOS/Src/queue.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/Src/queue.c ****  *
   7:FreeRTOS/Src/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/Src/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/Src/queue.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/Src/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/Src/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/Src/queue.c ****  * subject to the following conditions:
  13:FreeRTOS/Src/queue.c ****  *
  14:FreeRTOS/Src/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/Src/queue.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/Src/queue.c ****  *
  17:FreeRTOS/Src/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/Src/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/Src/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/Src/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/Src/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/Src/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/Src/queue.c ****  *
  24:FreeRTOS/Src/queue.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/Src/queue.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/Src/queue.c ****  *
  27:FreeRTOS/Src/queue.c ****  */
  28:FreeRTOS/Src/queue.c **** 
  29:FreeRTOS/Src/queue.c **** #include <stdlib.h>
  30:FreeRTOS/Src/queue.c **** #include <string.h>
  31:FreeRTOS/Src/queue.c **** 
  32:FreeRTOS/Src/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 2


  33:FreeRTOS/Src/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS/Src/queue.c ****  * task.h is included from an application file. */
  35:FreeRTOS/Src/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/Src/queue.c **** 
  37:FreeRTOS/Src/queue.c **** #include "FreeRTOS.h"
  38:FreeRTOS/Src/queue.c **** #include "task.h"
  39:FreeRTOS/Src/queue.c **** #include "queue.h"
  40:FreeRTOS/Src/queue.c **** 
  41:FreeRTOS/Src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  42:FreeRTOS/Src/queue.c ****     #include "croutine.h"
  43:FreeRTOS/Src/queue.c **** #endif
  44:FreeRTOS/Src/queue.c **** 
  45:FreeRTOS/Src/queue.c **** /* The MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:FreeRTOS/Src/queue.c ****  * for the header files above, but not in this file, in order to generate the
  47:FreeRTOS/Src/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:FreeRTOS/Src/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  49:FreeRTOS/Src/queue.c **** 
  50:FreeRTOS/Src/queue.c **** 
  51:FreeRTOS/Src/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:FreeRTOS/Src/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  53:FreeRTOS/Src/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  54:FreeRTOS/Src/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  55:FreeRTOS/Src/queue.c **** 
  56:FreeRTOS/Src/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  57:FreeRTOS/Src/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  58:FreeRTOS/Src/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  59:FreeRTOS/Src/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  60:FreeRTOS/Src/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  61:FreeRTOS/Src/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  62:FreeRTOS/Src/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  63:FreeRTOS/Src/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  64:FreeRTOS/Src/queue.c ****  * being used for. */
  65:FreeRTOS/Src/queue.c **** #define uxQueueType               pcHead
  66:FreeRTOS/Src/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  67:FreeRTOS/Src/queue.c **** 
  68:FreeRTOS/Src/queue.c **** typedef struct QueuePointers
  69:FreeRTOS/Src/queue.c **** {
  70:FreeRTOS/Src/queue.c ****     int8_t * pcTail;     /**< Points to the byte at the end of the queue storage area.  Once more b
  71:FreeRTOS/Src/queue.c ****     int8_t * pcReadFrom; /**< Points to the last place that a queued item was read from when the st
  72:FreeRTOS/Src/queue.c **** } QueuePointers_t;
  73:FreeRTOS/Src/queue.c **** 
  74:FreeRTOS/Src/queue.c **** typedef struct SemaphoreData
  75:FreeRTOS/Src/queue.c **** {
  76:FreeRTOS/Src/queue.c ****     TaskHandle_t xMutexHolder;        /**< The handle of the task that holds the mutex. */
  77:FreeRTOS/Src/queue.c ****     UBaseType_t uxRecursiveCallCount; /**< Maintains a count of the number of times a recursive mut
  78:FreeRTOS/Src/queue.c **** } SemaphoreData_t;
  79:FreeRTOS/Src/queue.c **** 
  80:FreeRTOS/Src/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  81:FreeRTOS/Src/queue.c ****  * zero. */
  82:FreeRTOS/Src/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  83:FreeRTOS/Src/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  84:FreeRTOS/Src/queue.c **** 
  85:FreeRTOS/Src/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  86:FreeRTOS/Src/queue.c **** 
  87:FreeRTOS/Src/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
  88:FreeRTOS/Src/queue.c ****  * performed just because a higher priority task has been woken. */
  89:FreeRTOS/Src/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 3


  90:FreeRTOS/Src/queue.c **** #else
  91:FreeRTOS/Src/queue.c ****     #if ( configNUMBER_OF_CORES == 1 )
  92:FreeRTOS/Src/queue.c ****         #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  93:FreeRTOS/Src/queue.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
  94:FreeRTOS/Src/queue.c ****         #define queueYIELD_IF_USING_PREEMPTION()    vTaskYieldWithinAPI()
  95:FreeRTOS/Src/queue.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
  96:FreeRTOS/Src/queue.c **** #endif
  97:FreeRTOS/Src/queue.c **** 
  98:FreeRTOS/Src/queue.c **** /*
  99:FreeRTOS/Src/queue.c ****  * Definition of the queue used by the scheduler.
 100:FreeRTOS/Src/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 101:FreeRTOS/Src/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
 102:FreeRTOS/Src/queue.c ****  */
 103:FreeRTOS/Src/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
 104:FreeRTOS/Src/queue.c **** {
 105:FreeRTOS/Src/queue.c ****     int8_t * pcHead;           /**< Points to the beginning of the queue storage area. */
 106:FreeRTOS/Src/queue.c ****     int8_t * pcWriteTo;        /**< Points to the free next place in the storage area. */
 107:FreeRTOS/Src/queue.c **** 
 108:FreeRTOS/Src/queue.c ****     union
 109:FreeRTOS/Src/queue.c ****     {
 110:FreeRTOS/Src/queue.c ****         QueuePointers_t xQueue;     /**< Data required exclusively when this structure is used as a
 111:FreeRTOS/Src/queue.c ****         SemaphoreData_t xSemaphore; /**< Data required exclusively when this structure is used as a
 112:FreeRTOS/Src/queue.c ****     } u;
 113:FreeRTOS/Src/queue.c **** 
 114:FreeRTOS/Src/queue.c ****     List_t xTasksWaitingToSend;             /**< List of tasks that are blocked waiting to post ont
 115:FreeRTOS/Src/queue.c ****     List_t xTasksWaitingToReceive;          /**< List of tasks that are blocked waiting to read fro
 116:FreeRTOS/Src/queue.c **** 
 117:FreeRTOS/Src/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /**< The number of items currently in the queue. */
 118:FreeRTOS/Src/queue.c ****     UBaseType_t uxLength;                   /**< The length of the queue defined as the number of i
 119:FreeRTOS/Src/queue.c ****     UBaseType_t uxItemSize;                 /**< The size of each items that the queue will hold. *
 120:FreeRTOS/Src/queue.c **** 
 121:FreeRTOS/Src/queue.c ****     volatile int8_t cRxLock;                /**< Stores the number of items received from the queue
 122:FreeRTOS/Src/queue.c ****     volatile int8_t cTxLock;                /**< Stores the number of items transmitted to the queu
 123:FreeRTOS/Src/queue.c **** 
 124:FreeRTOS/Src/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 125:FreeRTOS/Src/queue.c ****         uint8_t ucStaticallyAllocated; /**< Set to pdTRUE if the memory used by the queue was stati
 126:FreeRTOS/Src/queue.c ****     #endif
 127:FreeRTOS/Src/queue.c **** 
 128:FreeRTOS/Src/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 129:FreeRTOS/Src/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 130:FreeRTOS/Src/queue.c ****     #endif
 131:FreeRTOS/Src/queue.c **** 
 132:FreeRTOS/Src/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 133:FreeRTOS/Src/queue.c ****         UBaseType_t uxQueueNumber;
 134:FreeRTOS/Src/queue.c ****         uint8_t ucQueueType;
 135:FreeRTOS/Src/queue.c ****     #endif
 136:FreeRTOS/Src/queue.c **** } xQUEUE;
 137:FreeRTOS/Src/queue.c **** 
 138:FreeRTOS/Src/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 139:FreeRTOS/Src/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 140:FreeRTOS/Src/queue.c **** typedef xQUEUE Queue_t;
 141:FreeRTOS/Src/queue.c **** 
 142:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 143:FreeRTOS/Src/queue.c **** 
 144:FreeRTOS/Src/queue.c **** /*
 145:FreeRTOS/Src/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 146:FreeRTOS/Src/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 4


 147:FreeRTOS/Src/queue.c ****  */
 148:FreeRTOS/Src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 149:FreeRTOS/Src/queue.c **** 
 150:FreeRTOS/Src/queue.c **** /* The type stored within the queue registry array.  This allows a name
 151:FreeRTOS/Src/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 152:FreeRTOS/Src/queue.c ****  * more user friendly. */
 153:FreeRTOS/Src/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 154:FreeRTOS/Src/queue.c ****     {
 155:FreeRTOS/Src/queue.c ****         const char * pcQueueName;
 156:FreeRTOS/Src/queue.c ****         QueueHandle_t xHandle;
 157:FreeRTOS/Src/queue.c ****     } xQueueRegistryItem;
 158:FreeRTOS/Src/queue.c **** 
 159:FreeRTOS/Src/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 160:FreeRTOS/Src/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 161:FreeRTOS/Src/queue.c ****  * debuggers. */
 162:FreeRTOS/Src/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 163:FreeRTOS/Src/queue.c **** 
 164:FreeRTOS/Src/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 165:FreeRTOS/Src/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 166:FreeRTOS/Src/queue.c ****  * array position being vacant. */
 167:FreeRTOS/Src/queue.c **** 
 168:FreeRTOS/Src/queue.c **** /* MISRA Ref 8.4.2 [Declaration shall be visible] */
 169:FreeRTOS/Src/queue.c **** /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-84 */
 170:FreeRTOS/Src/queue.c **** /* coverity[misra_c_2012_rule_8_4_violation] */
 171:FreeRTOS/Src/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 172:FreeRTOS/Src/queue.c **** 
 173:FreeRTOS/Src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 174:FreeRTOS/Src/queue.c **** 
 175:FreeRTOS/Src/queue.c **** /*
 176:FreeRTOS/Src/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 177:FreeRTOS/Src/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 178:FreeRTOS/Src/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 179:FreeRTOS/Src/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 180:FreeRTOS/Src/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 181:FreeRTOS/Src/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 182:FreeRTOS/Src/queue.c ****  */
 183:FreeRTOS/Src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 184:FreeRTOS/Src/queue.c **** 
 185:FreeRTOS/Src/queue.c **** /*
 186:FreeRTOS/Src/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 187:FreeRTOS/Src/queue.c ****  *
 188:FreeRTOS/Src/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 189:FreeRTOS/Src/queue.c ****  */
 190:FreeRTOS/Src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 191:FreeRTOS/Src/queue.c **** 
 192:FreeRTOS/Src/queue.c **** /*
 193:FreeRTOS/Src/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 194:FreeRTOS/Src/queue.c ****  *
 195:FreeRTOS/Src/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 196:FreeRTOS/Src/queue.c ****  */
 197:FreeRTOS/Src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 198:FreeRTOS/Src/queue.c **** 
 199:FreeRTOS/Src/queue.c **** /*
 200:FreeRTOS/Src/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 201:FreeRTOS/Src/queue.c ****  * back of the queue.
 202:FreeRTOS/Src/queue.c ****  */
 203:FreeRTOS/Src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 5


 204:FreeRTOS/Src/queue.c ****                                       const void * pvItemToQueue,
 205:FreeRTOS/Src/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 206:FreeRTOS/Src/queue.c **** 
 207:FreeRTOS/Src/queue.c **** /*
 208:FreeRTOS/Src/queue.c ****  * Copies an item out of a queue.
 209:FreeRTOS/Src/queue.c ****  */
 210:FreeRTOS/Src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 211:FreeRTOS/Src/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 212:FreeRTOS/Src/queue.c **** 
 213:FreeRTOS/Src/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 214:FreeRTOS/Src/queue.c **** 
 215:FreeRTOS/Src/queue.c **** /*
 216:FreeRTOS/Src/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 217:FreeRTOS/Src/queue.c ****  * the queue set that the queue contains data.
 218:FreeRTOS/Src/queue.c ****  */
 219:FreeRTOS/Src/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 220:FreeRTOS/Src/queue.c **** #endif
 221:FreeRTOS/Src/queue.c **** 
 222:FreeRTOS/Src/queue.c **** /*
 223:FreeRTOS/Src/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 224:FreeRTOS/Src/queue.c ****  * dynamically to fill in the structure's members.
 225:FreeRTOS/Src/queue.c ****  */
 226:FreeRTOS/Src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 227:FreeRTOS/Src/queue.c ****                                    const UBaseType_t uxItemSize,
 228:FreeRTOS/Src/queue.c ****                                    uint8_t * pucQueueStorage,
 229:FreeRTOS/Src/queue.c ****                                    const uint8_t ucQueueType,
 230:FreeRTOS/Src/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 231:FreeRTOS/Src/queue.c **** 
 232:FreeRTOS/Src/queue.c **** /*
 233:FreeRTOS/Src/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 234:FreeRTOS/Src/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 235:FreeRTOS/Src/queue.c ****  * as a mutex.
 236:FreeRTOS/Src/queue.c ****  */
 237:FreeRTOS/Src/queue.c **** #if ( configUSE_MUTEXES == 1 )
 238:FreeRTOS/Src/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 239:FreeRTOS/Src/queue.c **** #endif
 240:FreeRTOS/Src/queue.c **** 
 241:FreeRTOS/Src/queue.c **** #if ( configUSE_MUTEXES == 1 )
 242:FreeRTOS/Src/queue.c **** 
 243:FreeRTOS/Src/queue.c **** /*
 244:FreeRTOS/Src/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 245:FreeRTOS/Src/queue.c ****  * priority, but the waiting task times out, then the holder should
 246:FreeRTOS/Src/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 247:FreeRTOS/Src/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 248:FreeRTOS/Src/queue.c ****  * that priority.
 249:FreeRTOS/Src/queue.c ****  */
 250:FreeRTOS/Src/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 251:FreeRTOS/Src/queue.c **** #endif
 252:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 253:FreeRTOS/Src/queue.c **** 
 254:FreeRTOS/Src/queue.c **** /*
 255:FreeRTOS/Src/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 256:FreeRTOS/Src/queue.c ****  * accessing the queue event lists.
 257:FreeRTOS/Src/queue.c ****  */
 258:FreeRTOS/Src/queue.c **** #define prvLockQueue( pxQueue )                            \
 259:FreeRTOS/Src/queue.c ****     taskENTER_CRITICAL();                                  \
 260:FreeRTOS/Src/queue.c ****     {                                                      \
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 6


 261:FreeRTOS/Src/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 262:FreeRTOS/Src/queue.c ****         {                                                  \
 263:FreeRTOS/Src/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 264:FreeRTOS/Src/queue.c ****         }                                                  \
 265:FreeRTOS/Src/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 266:FreeRTOS/Src/queue.c ****         {                                                  \
 267:FreeRTOS/Src/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 268:FreeRTOS/Src/queue.c ****         }                                                  \
 269:FreeRTOS/Src/queue.c ****     }                                                      \
 270:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL()
 271:FreeRTOS/Src/queue.c **** 
 272:FreeRTOS/Src/queue.c **** /*
 273:FreeRTOS/Src/queue.c ****  * Macro to increment cTxLock member of the queue data structure. It is
 274:FreeRTOS/Src/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 275:FreeRTOS/Src/queue.c ****  * tasks than the number of tasks in the system.
 276:FreeRTOS/Src/queue.c ****  */
 277:FreeRTOS/Src/queue.c **** #define prvIncrementQueueTxLock( pxQueue, cTxLock )                           \
 278:FreeRTOS/Src/queue.c ****     do {                                                                      \
 279:FreeRTOS/Src/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 280:FreeRTOS/Src/queue.c ****         if( ( UBaseType_t ) ( cTxLock ) < uxNumberOfTasks )                   \
 281:FreeRTOS/Src/queue.c ****         {                                                                     \
 282:FreeRTOS/Src/queue.c ****             configASSERT( ( cTxLock ) != queueINT8_MAX );                     \
 283:FreeRTOS/Src/queue.c ****             ( pxQueue )->cTxLock = ( int8_t ) ( ( cTxLock ) + ( int8_t ) 1 ); \
 284:FreeRTOS/Src/queue.c ****         }                                                                     \
 285:FreeRTOS/Src/queue.c ****     } while( 0 )
 286:FreeRTOS/Src/queue.c **** 
 287:FreeRTOS/Src/queue.c **** /*
 288:FreeRTOS/Src/queue.c ****  * Macro to increment cRxLock member of the queue data structure. It is
 289:FreeRTOS/Src/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 290:FreeRTOS/Src/queue.c ****  * tasks than the number of tasks in the system.
 291:FreeRTOS/Src/queue.c ****  */
 292:FreeRTOS/Src/queue.c **** #define prvIncrementQueueRxLock( pxQueue, cRxLock )                           \
 293:FreeRTOS/Src/queue.c ****     do {                                                                      \
 294:FreeRTOS/Src/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 295:FreeRTOS/Src/queue.c ****         if( ( UBaseType_t ) ( cRxLock ) < uxNumberOfTasks )                   \
 296:FreeRTOS/Src/queue.c ****         {                                                                     \
 297:FreeRTOS/Src/queue.c ****             configASSERT( ( cRxLock ) != queueINT8_MAX );                     \
 298:FreeRTOS/Src/queue.c ****             ( pxQueue )->cRxLock = ( int8_t ) ( ( cRxLock ) + ( int8_t ) 1 ); \
 299:FreeRTOS/Src/queue.c ****         }                                                                     \
 300:FreeRTOS/Src/queue.c ****     } while( 0 )
 301:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 302:FreeRTOS/Src/queue.c **** 
 303:FreeRTOS/Src/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 304:FreeRTOS/Src/queue.c ****                                BaseType_t xNewQueue )
 305:FreeRTOS/Src/queue.c **** {
 306:FreeRTOS/Src/queue.c ****     BaseType_t xReturn = pdPASS;
 307:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 308:FreeRTOS/Src/queue.c **** 
 309:FreeRTOS/Src/queue.c ****     traceENTER_xQueueGenericReset( xQueue, xNewQueue );
 310:FreeRTOS/Src/queue.c **** 
 311:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
 312:FreeRTOS/Src/queue.c **** 
 313:FreeRTOS/Src/queue.c ****     if( ( pxQueue != NULL ) &&
 314:FreeRTOS/Src/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 315:FreeRTOS/Src/queue.c ****         /* Check for multiplication overflow. */
 316:FreeRTOS/Src/queue.c ****         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 317:FreeRTOS/Src/queue.c ****     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 7


 318:FreeRTOS/Src/queue.c ****         taskENTER_CRITICAL();
 319:FreeRTOS/Src/queue.c ****         {
 320:FreeRTOS/Src/queue.c ****             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize 
 321:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 322:FreeRTOS/Src/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 323:FreeRTOS/Src/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 324:FreeRTOS/Src/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 325:FreeRTOS/Src/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 326:FreeRTOS/Src/queue.c **** 
 327:FreeRTOS/Src/queue.c ****             if( xNewQueue == pdFALSE )
 328:FreeRTOS/Src/queue.c ****             {
 329:FreeRTOS/Src/queue.c ****                 /* If there are tasks blocked waiting to read from the queue, then
 330:FreeRTOS/Src/queue.c ****                  * the tasks will remain blocked as after this function exits the queue
 331:FreeRTOS/Src/queue.c ****                  * will still be empty.  If there are tasks blocked waiting to write to
 332:FreeRTOS/Src/queue.c ****                  * the queue, then one should be unblocked as after this function exits
 333:FreeRTOS/Src/queue.c ****                  * it will be possible to write to it. */
 334:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 335:FreeRTOS/Src/queue.c ****                 {
 336:FreeRTOS/Src/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 337:FreeRTOS/Src/queue.c ****                     {
 338:FreeRTOS/Src/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 339:FreeRTOS/Src/queue.c ****                     }
 340:FreeRTOS/Src/queue.c ****                     else
 341:FreeRTOS/Src/queue.c ****                     {
 342:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 343:FreeRTOS/Src/queue.c ****                     }
 344:FreeRTOS/Src/queue.c ****                 }
 345:FreeRTOS/Src/queue.c ****                 else
 346:FreeRTOS/Src/queue.c ****                 {
 347:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 348:FreeRTOS/Src/queue.c ****                 }
 349:FreeRTOS/Src/queue.c ****             }
 350:FreeRTOS/Src/queue.c ****             else
 351:FreeRTOS/Src/queue.c ****             {
 352:FreeRTOS/Src/queue.c ****                 /* Ensure the event queues start in the correct state. */
 353:FreeRTOS/Src/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 354:FreeRTOS/Src/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 355:FreeRTOS/Src/queue.c ****             }
 356:FreeRTOS/Src/queue.c ****         }
 357:FreeRTOS/Src/queue.c ****         taskEXIT_CRITICAL();
 358:FreeRTOS/Src/queue.c ****     }
 359:FreeRTOS/Src/queue.c ****     else
 360:FreeRTOS/Src/queue.c ****     {
 361:FreeRTOS/Src/queue.c ****         xReturn = pdFAIL;
 362:FreeRTOS/Src/queue.c ****     }
 363:FreeRTOS/Src/queue.c **** 
 364:FreeRTOS/Src/queue.c ****     configASSERT( xReturn != pdFAIL );
 365:FreeRTOS/Src/queue.c **** 
 366:FreeRTOS/Src/queue.c ****     /* A value is returned for calling semantic consistency with previous
 367:FreeRTOS/Src/queue.c ****      * versions. */
 368:FreeRTOS/Src/queue.c ****     traceRETURN_xQueueGenericReset( xReturn );
 369:FreeRTOS/Src/queue.c **** 
 370:FreeRTOS/Src/queue.c ****     return xReturn;
 371:FreeRTOS/Src/queue.c **** }
 372:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 373:FreeRTOS/Src/queue.c **** 
 374:FreeRTOS/Src/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 8


 375:FreeRTOS/Src/queue.c **** 
 376:FreeRTOS/Src/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 377:FreeRTOS/Src/queue.c ****                                              const UBaseType_t uxItemSize,
 378:FreeRTOS/Src/queue.c ****                                              uint8_t * pucQueueStorage,
 379:FreeRTOS/Src/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 380:FreeRTOS/Src/queue.c ****                                              const uint8_t ucQueueType )
 381:FreeRTOS/Src/queue.c ****     {
 382:FreeRTOS/Src/queue.c ****         Queue_t * pxNewQueue = NULL;
 383:FreeRTOS/Src/queue.c **** 
 384:FreeRTOS/Src/queue.c ****         traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQ
 385:FreeRTOS/Src/queue.c **** 
 386:FreeRTOS/Src/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 387:FreeRTOS/Src/queue.c ****          * supplied. */
 388:FreeRTOS/Src/queue.c ****         configASSERT( pxStaticQueue );
 389:FreeRTOS/Src/queue.c **** 
 390:FreeRTOS/Src/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 391:FreeRTOS/Src/queue.c ****             ( pxStaticQueue != NULL ) &&
 392:FreeRTOS/Src/queue.c **** 
 393:FreeRTOS/Src/queue.c ****             /* A queue storage area should be provided if the item size is not 0, and
 394:FreeRTOS/Src/queue.c ****              * should not be provided if the item size is 0. */
 395:FreeRTOS/Src/queue.c ****             ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 396:FreeRTOS/Src/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 397:FreeRTOS/Src/queue.c ****         {
 398:FreeRTOS/Src/queue.c ****             #if ( configASSERT_DEFINED == 1 )
 399:FreeRTOS/Src/queue.c ****             {
 400:FreeRTOS/Src/queue.c ****                 /* Sanity check that the size of the structure used to declare a
 401:FreeRTOS/Src/queue.c ****                  * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 402:FreeRTOS/Src/queue.c ****                  * the real queue and semaphore structures. */
 403:FreeRTOS/Src/queue.c ****                 volatile size_t xSize = sizeof( StaticQueue_t );
 404:FreeRTOS/Src/queue.c **** 
 405:FreeRTOS/Src/queue.c ****                 /* This assertion cannot be branch covered in unit tests */
 406:FreeRTOS/Src/queue.c ****                 configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 407:FreeRTOS/Src/queue.c ****                 ( void ) xSize;                             /* Prevent unused variable warning when
 408:FreeRTOS/Src/queue.c ****             }
 409:FreeRTOS/Src/queue.c ****             #endif /* configASSERT_DEFINED */
 410:FreeRTOS/Src/queue.c **** 
 411:FreeRTOS/Src/queue.c ****             /* The address of a statically allocated queue was passed in, use it.
 412:FreeRTOS/Src/queue.c ****              * The address of a statically allocated storage area was also passed in
 413:FreeRTOS/Src/queue.c ****              * but is already set. */
 414:FreeRTOS/Src/queue.c ****             /* MISRA Ref 11.3.1 [Misaligned access] */
 415:FreeRTOS/Src/queue.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 416:FreeRTOS/Src/queue.c ****             /* coverity[misra_c_2012_rule_11_3_violation] */
 417:FreeRTOS/Src/queue.c ****             pxNewQueue = ( Queue_t * ) pxStaticQueue;
 418:FreeRTOS/Src/queue.c **** 
 419:FreeRTOS/Src/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 420:FreeRTOS/Src/queue.c ****             {
 421:FreeRTOS/Src/queue.c ****                 /* Queues can be allocated wither statically or dynamically, so
 422:FreeRTOS/Src/queue.c ****                  * note this queue was allocated statically in case the queue is
 423:FreeRTOS/Src/queue.c ****                  * later deleted. */
 424:FreeRTOS/Src/queue.c ****                 pxNewQueue->ucStaticallyAllocated = pdTRUE;
 425:FreeRTOS/Src/queue.c ****             }
 426:FreeRTOS/Src/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 427:FreeRTOS/Src/queue.c **** 
 428:FreeRTOS/Src/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 429:FreeRTOS/Src/queue.c ****         }
 430:FreeRTOS/Src/queue.c ****         else
 431:FreeRTOS/Src/queue.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 9


 432:FreeRTOS/Src/queue.c ****             configASSERT( pxNewQueue );
 433:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
 434:FreeRTOS/Src/queue.c ****         }
 435:FreeRTOS/Src/queue.c **** 
 436:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 437:FreeRTOS/Src/queue.c **** 
 438:FreeRTOS/Src/queue.c ****         return pxNewQueue;
 439:FreeRTOS/Src/queue.c ****     }
 440:FreeRTOS/Src/queue.c **** 
 441:FreeRTOS/Src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 442:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 443:FreeRTOS/Src/queue.c **** 
 444:FreeRTOS/Src/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 445:FreeRTOS/Src/queue.c **** 
 446:FreeRTOS/Src/queue.c ****     BaseType_t xQueueGenericGetStaticBuffers( QueueHandle_t xQueue,
 447:FreeRTOS/Src/queue.c ****                                               uint8_t ** ppucQueueStorage,
 448:FreeRTOS/Src/queue.c ****                                               StaticQueue_t ** ppxStaticQueue )
 449:FreeRTOS/Src/queue.c ****     {
 450:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
 451:FreeRTOS/Src/queue.c ****         Queue_t * const pxQueue = xQueue;
 452:FreeRTOS/Src/queue.c **** 
 453:FreeRTOS/Src/queue.c ****         traceENTER_xQueueGenericGetStaticBuffers( xQueue, ppucQueueStorage, ppxStaticQueue );
 454:FreeRTOS/Src/queue.c **** 
 455:FreeRTOS/Src/queue.c ****         configASSERT( pxQueue );
 456:FreeRTOS/Src/queue.c ****         configASSERT( ppxStaticQueue );
 457:FreeRTOS/Src/queue.c **** 
 458:FreeRTOS/Src/queue.c ****         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 459:FreeRTOS/Src/queue.c ****         {
 460:FreeRTOS/Src/queue.c ****             /* Check if the queue was statically allocated. */
 461:FreeRTOS/Src/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdTRUE )
 462:FreeRTOS/Src/queue.c ****             {
 463:FreeRTOS/Src/queue.c ****                 if( ppucQueueStorage != NULL )
 464:FreeRTOS/Src/queue.c ****                 {
 465:FreeRTOS/Src/queue.c ****                     *ppucQueueStorage = ( uint8_t * ) pxQueue->pcHead;
 466:FreeRTOS/Src/queue.c ****                 }
 467:FreeRTOS/Src/queue.c **** 
 468:FreeRTOS/Src/queue.c ****                 /* MISRA Ref 11.3.1 [Misaligned access] */
 469:FreeRTOS/Src/queue.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
 470:FreeRTOS/Src/queue.c ****                 /* coverity[misra_c_2012_rule_11_3_violation] */
 471:FreeRTOS/Src/queue.c ****                 *ppxStaticQueue = ( StaticQueue_t * ) pxQueue;
 472:FreeRTOS/Src/queue.c ****                 xReturn = pdTRUE;
 473:FreeRTOS/Src/queue.c ****             }
 474:FreeRTOS/Src/queue.c ****             else
 475:FreeRTOS/Src/queue.c ****             {
 476:FreeRTOS/Src/queue.c ****                 xReturn = pdFALSE;
 477:FreeRTOS/Src/queue.c ****             }
 478:FreeRTOS/Src/queue.c ****         }
 479:FreeRTOS/Src/queue.c ****         #else /* configSUPPORT_DYNAMIC_ALLOCATION */
 480:FreeRTOS/Src/queue.c ****         {
 481:FreeRTOS/Src/queue.c ****             /* Queue must have been statically allocated. */
 482:FreeRTOS/Src/queue.c ****             if( ppucQueueStorage != NULL )
 483:FreeRTOS/Src/queue.c ****             {
 484:FreeRTOS/Src/queue.c ****                 *ppucQueueStorage = ( uint8_t * ) pxQueue->pcHead;
 485:FreeRTOS/Src/queue.c ****             }
 486:FreeRTOS/Src/queue.c **** 
 487:FreeRTOS/Src/queue.c ****             *ppxStaticQueue = ( StaticQueue_t * ) pxQueue;
 488:FreeRTOS/Src/queue.c ****             xReturn = pdTRUE;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 10


 489:FreeRTOS/Src/queue.c ****         }
 490:FreeRTOS/Src/queue.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 491:FreeRTOS/Src/queue.c **** 
 492:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueGenericGetStaticBuffers( xReturn );
 493:FreeRTOS/Src/queue.c **** 
 494:FreeRTOS/Src/queue.c ****         return xReturn;
 495:FreeRTOS/Src/queue.c ****     }
 496:FreeRTOS/Src/queue.c **** 
 497:FreeRTOS/Src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 498:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 499:FreeRTOS/Src/queue.c **** 
 500:FreeRTOS/Src/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 501:FreeRTOS/Src/queue.c **** 
 502:FreeRTOS/Src/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 503:FreeRTOS/Src/queue.c ****                                        const UBaseType_t uxItemSize,
 504:FreeRTOS/Src/queue.c ****                                        const uint8_t ucQueueType )
 505:FreeRTOS/Src/queue.c ****     {
 506:FreeRTOS/Src/queue.c ****         Queue_t * pxNewQueue = NULL;
 507:FreeRTOS/Src/queue.c ****         size_t xQueueSizeInBytes;
 508:FreeRTOS/Src/queue.c ****         uint8_t * pucQueueStorage;
 509:FreeRTOS/Src/queue.c **** 
 510:FreeRTOS/Src/queue.c ****         traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 511:FreeRTOS/Src/queue.c **** 
 512:FreeRTOS/Src/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 513:FreeRTOS/Src/queue.c ****             /* Check for multiplication overflow. */
 514:FreeRTOS/Src/queue.c ****             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 515:FreeRTOS/Src/queue.c ****             /* Check for addition overflow. */
 516:FreeRTOS/Src/queue.c ****             ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) 
 517:FreeRTOS/Src/queue.c ****         {
 518:FreeRTOS/Src/queue.c ****             /* Allocate enough space to hold the maximum number of items that
 519:FreeRTOS/Src/queue.c ****              * can be in the queue at any time.  It is valid for uxItemSize to be
 520:FreeRTOS/Src/queue.c ****              * zero in the case the queue is used as a semaphore. */
 521:FreeRTOS/Src/queue.c ****             xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 522:FreeRTOS/Src/queue.c **** 
 523:FreeRTOS/Src/queue.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
 524:FreeRTOS/Src/queue.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 525:FreeRTOS/Src/queue.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
 526:FreeRTOS/Src/queue.c ****             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 527:FreeRTOS/Src/queue.c **** 
 528:FreeRTOS/Src/queue.c ****             if( pxNewQueue != NULL )
 529:FreeRTOS/Src/queue.c ****             {
 530:FreeRTOS/Src/queue.c ****                 /* Jump past the queue structure to find the location of the queue
 531:FreeRTOS/Src/queue.c ****                  * storage area. */
 532:FreeRTOS/Src/queue.c ****                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 533:FreeRTOS/Src/queue.c ****                 pucQueueStorage += sizeof( Queue_t );
 534:FreeRTOS/Src/queue.c **** 
 535:FreeRTOS/Src/queue.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 536:FreeRTOS/Src/queue.c ****                 {
 537:FreeRTOS/Src/queue.c ****                     /* Queues can be created either statically or dynamically, so
 538:FreeRTOS/Src/queue.c ****                      * note this task was created dynamically in case it is later
 539:FreeRTOS/Src/queue.c ****                      * deleted. */
 540:FreeRTOS/Src/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdFALSE;
 541:FreeRTOS/Src/queue.c ****                 }
 542:FreeRTOS/Src/queue.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 543:FreeRTOS/Src/queue.c **** 
 544:FreeRTOS/Src/queue.c ****                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxN
 545:FreeRTOS/Src/queue.c ****             }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 11


 546:FreeRTOS/Src/queue.c ****             else
 547:FreeRTOS/Src/queue.c ****             {
 548:FreeRTOS/Src/queue.c ****                 traceQUEUE_CREATE_FAILED( ucQueueType );
 549:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 550:FreeRTOS/Src/queue.c ****             }
 551:FreeRTOS/Src/queue.c ****         }
 552:FreeRTOS/Src/queue.c ****         else
 553:FreeRTOS/Src/queue.c ****         {
 554:FreeRTOS/Src/queue.c ****             configASSERT( pxNewQueue );
 555:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
 556:FreeRTOS/Src/queue.c ****         }
 557:FreeRTOS/Src/queue.c **** 
 558:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueGenericCreate( pxNewQueue );
 559:FreeRTOS/Src/queue.c **** 
 560:FreeRTOS/Src/queue.c ****         return pxNewQueue;
 561:FreeRTOS/Src/queue.c ****     }
 562:FreeRTOS/Src/queue.c **** 
 563:FreeRTOS/Src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 564:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 565:FreeRTOS/Src/queue.c **** 
 566:FreeRTOS/Src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 567:FreeRTOS/Src/queue.c ****                                    const UBaseType_t uxItemSize,
 568:FreeRTOS/Src/queue.c ****                                    uint8_t * pucQueueStorage,
 569:FreeRTOS/Src/queue.c ****                                    const uint8_t ucQueueType,
 570:FreeRTOS/Src/queue.c ****                                    Queue_t * pxNewQueue )
 571:FreeRTOS/Src/queue.c **** {
 572:FreeRTOS/Src/queue.c ****     /* Remove compiler warnings about unused parameters should
 573:FreeRTOS/Src/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 574:FreeRTOS/Src/queue.c ****     ( void ) ucQueueType;
 575:FreeRTOS/Src/queue.c **** 
 576:FreeRTOS/Src/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 577:FreeRTOS/Src/queue.c ****     {
 578:FreeRTOS/Src/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 579:FreeRTOS/Src/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 580:FreeRTOS/Src/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 581:FreeRTOS/Src/queue.c ****          * value that is known to be within the memory map. */
 582:FreeRTOS/Src/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 583:FreeRTOS/Src/queue.c ****     }
 584:FreeRTOS/Src/queue.c ****     else
 585:FreeRTOS/Src/queue.c ****     {
 586:FreeRTOS/Src/queue.c ****         /* Set the head to the start of the queue storage area. */
 587:FreeRTOS/Src/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 588:FreeRTOS/Src/queue.c ****     }
 589:FreeRTOS/Src/queue.c **** 
 590:FreeRTOS/Src/queue.c ****     /* Initialise the queue members as described where the queue type is
 591:FreeRTOS/Src/queue.c ****      * defined. */
 592:FreeRTOS/Src/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 593:FreeRTOS/Src/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 594:FreeRTOS/Src/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 595:FreeRTOS/Src/queue.c **** 
 596:FreeRTOS/Src/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 597:FreeRTOS/Src/queue.c ****     {
 598:FreeRTOS/Src/queue.c ****         pxNewQueue->ucQueueType = ucQueueType;
 599:FreeRTOS/Src/queue.c ****     }
 600:FreeRTOS/Src/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 601:FreeRTOS/Src/queue.c **** 
 602:FreeRTOS/Src/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 12


 603:FreeRTOS/Src/queue.c ****     {
 604:FreeRTOS/Src/queue.c ****         pxNewQueue->pxQueueSetContainer = NULL;
 605:FreeRTOS/Src/queue.c ****     }
 606:FreeRTOS/Src/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 607:FreeRTOS/Src/queue.c **** 
 608:FreeRTOS/Src/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 609:FreeRTOS/Src/queue.c **** }
 610:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 611:FreeRTOS/Src/queue.c **** 
 612:FreeRTOS/Src/queue.c **** #if ( configUSE_MUTEXES == 1 )
 613:FreeRTOS/Src/queue.c **** 
 614:FreeRTOS/Src/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 615:FreeRTOS/Src/queue.c ****     {
 616:FreeRTOS/Src/queue.c ****         if( pxNewQueue != NULL )
 617:FreeRTOS/Src/queue.c ****         {
 618:FreeRTOS/Src/queue.c ****             /* The queue create function will set all the queue structure members
 619:FreeRTOS/Src/queue.c ****             * correctly for a generic queue, but this function is creating a
 620:FreeRTOS/Src/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 621:FreeRTOS/Src/queue.c ****             * in particular the information required for priority inheritance. */
 622:FreeRTOS/Src/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 623:FreeRTOS/Src/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 624:FreeRTOS/Src/queue.c **** 
 625:FreeRTOS/Src/queue.c ****             /* In case this is a recursive mutex. */
 626:FreeRTOS/Src/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 627:FreeRTOS/Src/queue.c **** 
 628:FreeRTOS/Src/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 629:FreeRTOS/Src/queue.c **** 
 630:FreeRTOS/Src/queue.c ****             /* Start with the semaphore in the expected state. */
 631:FreeRTOS/Src/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 632:FreeRTOS/Src/queue.c ****         }
 633:FreeRTOS/Src/queue.c ****         else
 634:FreeRTOS/Src/queue.c ****         {
 635:FreeRTOS/Src/queue.c ****             traceCREATE_MUTEX_FAILED();
 636:FreeRTOS/Src/queue.c ****         }
 637:FreeRTOS/Src/queue.c ****     }
 638:FreeRTOS/Src/queue.c **** 
 639:FreeRTOS/Src/queue.c **** #endif /* configUSE_MUTEXES */
 640:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 641:FreeRTOS/Src/queue.c **** 
 642:FreeRTOS/Src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 643:FreeRTOS/Src/queue.c **** 
 644:FreeRTOS/Src/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 645:FreeRTOS/Src/queue.c ****     {
 646:FreeRTOS/Src/queue.c ****         QueueHandle_t xNewQueue;
 647:FreeRTOS/Src/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 648:FreeRTOS/Src/queue.c **** 
 649:FreeRTOS/Src/queue.c ****         traceENTER_xQueueCreateMutex( ucQueueType );
 650:FreeRTOS/Src/queue.c **** 
 651:FreeRTOS/Src/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 652:FreeRTOS/Src/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 653:FreeRTOS/Src/queue.c **** 
 654:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueCreateMutex( xNewQueue );
 655:FreeRTOS/Src/queue.c **** 
 656:FreeRTOS/Src/queue.c ****         return xNewQueue;
 657:FreeRTOS/Src/queue.c ****     }
 658:FreeRTOS/Src/queue.c **** 
 659:FreeRTOS/Src/queue.c **** #endif /* configUSE_MUTEXES */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 13


 660:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 661:FreeRTOS/Src/queue.c **** 
 662:FreeRTOS/Src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 663:FreeRTOS/Src/queue.c **** 
 664:FreeRTOS/Src/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 665:FreeRTOS/Src/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 666:FreeRTOS/Src/queue.c ****     {
 667:FreeRTOS/Src/queue.c ****         QueueHandle_t xNewQueue;
 668:FreeRTOS/Src/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 669:FreeRTOS/Src/queue.c **** 
 670:FreeRTOS/Src/queue.c ****         traceENTER_xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 671:FreeRTOS/Src/queue.c **** 
 672:FreeRTOS/Src/queue.c ****         /* Prevent compiler warnings about unused parameters if
 673:FreeRTOS/Src/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 674:FreeRTOS/Src/queue.c ****         ( void ) ucQueueType;
 675:FreeRTOS/Src/queue.c **** 
 676:FreeRTOS/Src/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 677:FreeRTOS/Src/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 678:FreeRTOS/Src/queue.c **** 
 679:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueCreateMutexStatic( xNewQueue );
 680:FreeRTOS/Src/queue.c **** 
 681:FreeRTOS/Src/queue.c ****         return xNewQueue;
 682:FreeRTOS/Src/queue.c ****     }
 683:FreeRTOS/Src/queue.c **** 
 684:FreeRTOS/Src/queue.c **** #endif /* configUSE_MUTEXES */
 685:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 686:FreeRTOS/Src/queue.c **** 
 687:FreeRTOS/Src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 688:FreeRTOS/Src/queue.c **** 
 689:FreeRTOS/Src/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 690:FreeRTOS/Src/queue.c ****     {
 691:FreeRTOS/Src/queue.c ****         TaskHandle_t pxReturn;
 692:FreeRTOS/Src/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 693:FreeRTOS/Src/queue.c **** 
 694:FreeRTOS/Src/queue.c ****         traceENTER_xQueueGetMutexHolder( xSemaphore );
 695:FreeRTOS/Src/queue.c **** 
 696:FreeRTOS/Src/queue.c ****         configASSERT( xSemaphore );
 697:FreeRTOS/Src/queue.c **** 
 698:FreeRTOS/Src/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 699:FreeRTOS/Src/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 700:FreeRTOS/Src/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 701:FreeRTOS/Src/queue.c ****          * identity of the mutex holder, as the holder may change between the
 702:FreeRTOS/Src/queue.c ****          * following critical section exiting and the function returning. */
 703:FreeRTOS/Src/queue.c ****         taskENTER_CRITICAL();
 704:FreeRTOS/Src/queue.c ****         {
 705:FreeRTOS/Src/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 706:FreeRTOS/Src/queue.c ****             {
 707:FreeRTOS/Src/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 708:FreeRTOS/Src/queue.c ****             }
 709:FreeRTOS/Src/queue.c ****             else
 710:FreeRTOS/Src/queue.c ****             {
 711:FreeRTOS/Src/queue.c ****                 pxReturn = NULL;
 712:FreeRTOS/Src/queue.c ****             }
 713:FreeRTOS/Src/queue.c ****         }
 714:FreeRTOS/Src/queue.c ****         taskEXIT_CRITICAL();
 715:FreeRTOS/Src/queue.c **** 
 716:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueGetMutexHolder( pxReturn );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 14


 717:FreeRTOS/Src/queue.c **** 
 718:FreeRTOS/Src/queue.c ****         return pxReturn;
 719:FreeRTOS/Src/queue.c ****     }
 720:FreeRTOS/Src/queue.c **** 
 721:FreeRTOS/Src/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 722:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 723:FreeRTOS/Src/queue.c **** 
 724:FreeRTOS/Src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 725:FreeRTOS/Src/queue.c **** 
 726:FreeRTOS/Src/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 727:FreeRTOS/Src/queue.c ****     {
 728:FreeRTOS/Src/queue.c ****         TaskHandle_t pxReturn;
 729:FreeRTOS/Src/queue.c **** 
 730:FreeRTOS/Src/queue.c ****         traceENTER_xQueueGetMutexHolderFromISR( xSemaphore );
 731:FreeRTOS/Src/queue.c **** 
 732:FreeRTOS/Src/queue.c ****         configASSERT( xSemaphore );
 733:FreeRTOS/Src/queue.c **** 
 734:FreeRTOS/Src/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 735:FreeRTOS/Src/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 736:FreeRTOS/Src/queue.c ****          * not required here. */
 737:FreeRTOS/Src/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 738:FreeRTOS/Src/queue.c ****         {
 739:FreeRTOS/Src/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 740:FreeRTOS/Src/queue.c ****         }
 741:FreeRTOS/Src/queue.c ****         else
 742:FreeRTOS/Src/queue.c ****         {
 743:FreeRTOS/Src/queue.c ****             pxReturn = NULL;
 744:FreeRTOS/Src/queue.c ****         }
 745:FreeRTOS/Src/queue.c **** 
 746:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueGetMutexHolderFromISR( pxReturn );
 747:FreeRTOS/Src/queue.c **** 
 748:FreeRTOS/Src/queue.c ****         return pxReturn;
 749:FreeRTOS/Src/queue.c ****     }
 750:FreeRTOS/Src/queue.c **** 
 751:FreeRTOS/Src/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 752:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 753:FreeRTOS/Src/queue.c **** 
 754:FreeRTOS/Src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 755:FreeRTOS/Src/queue.c **** 
 756:FreeRTOS/Src/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 757:FreeRTOS/Src/queue.c ****     {
 758:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
 759:FreeRTOS/Src/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 760:FreeRTOS/Src/queue.c **** 
 761:FreeRTOS/Src/queue.c ****         traceENTER_xQueueGiveMutexRecursive( xMutex );
 762:FreeRTOS/Src/queue.c **** 
 763:FreeRTOS/Src/queue.c ****         configASSERT( pxMutex );
 764:FreeRTOS/Src/queue.c **** 
 765:FreeRTOS/Src/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 766:FreeRTOS/Src/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 767:FreeRTOS/Src/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 768:FreeRTOS/Src/queue.c ****          * this is the only condition we are interested in it does not matter if
 769:FreeRTOS/Src/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 770:FreeRTOS/Src/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 771:FreeRTOS/Src/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 772:FreeRTOS/Src/queue.c ****         {
 773:FreeRTOS/Src/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 15


 774:FreeRTOS/Src/queue.c **** 
 775:FreeRTOS/Src/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 776:FreeRTOS/Src/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 777:FreeRTOS/Src/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 778:FreeRTOS/Src/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 779:FreeRTOS/Src/queue.c ****              * uxRecursiveCallCount member. */
 780:FreeRTOS/Src/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 781:FreeRTOS/Src/queue.c **** 
 782:FreeRTOS/Src/queue.c ****             /* Has the recursive call count unwound to 0? */
 783:FreeRTOS/Src/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 784:FreeRTOS/Src/queue.c ****             {
 785:FreeRTOS/Src/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 786:FreeRTOS/Src/queue.c ****                  * task that might be waiting to access the mutex. */
 787:FreeRTOS/Src/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 788:FreeRTOS/Src/queue.c ****             }
 789:FreeRTOS/Src/queue.c ****             else
 790:FreeRTOS/Src/queue.c ****             {
 791:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 792:FreeRTOS/Src/queue.c ****             }
 793:FreeRTOS/Src/queue.c **** 
 794:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
 795:FreeRTOS/Src/queue.c ****         }
 796:FreeRTOS/Src/queue.c ****         else
 797:FreeRTOS/Src/queue.c ****         {
 798:FreeRTOS/Src/queue.c ****             /* The mutex cannot be given because the calling task is not the
 799:FreeRTOS/Src/queue.c ****              * holder. */
 800:FreeRTOS/Src/queue.c ****             xReturn = pdFAIL;
 801:FreeRTOS/Src/queue.c **** 
 802:FreeRTOS/Src/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 803:FreeRTOS/Src/queue.c ****         }
 804:FreeRTOS/Src/queue.c **** 
 805:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueGiveMutexRecursive( xReturn );
 806:FreeRTOS/Src/queue.c **** 
 807:FreeRTOS/Src/queue.c ****         return xReturn;
 808:FreeRTOS/Src/queue.c ****     }
 809:FreeRTOS/Src/queue.c **** 
 810:FreeRTOS/Src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 811:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 812:FreeRTOS/Src/queue.c **** 
 813:FreeRTOS/Src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 814:FreeRTOS/Src/queue.c **** 
 815:FreeRTOS/Src/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 816:FreeRTOS/Src/queue.c ****                                          TickType_t xTicksToWait )
 817:FreeRTOS/Src/queue.c ****     {
 818:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
 819:FreeRTOS/Src/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 820:FreeRTOS/Src/queue.c **** 
 821:FreeRTOS/Src/queue.c ****         traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );
 822:FreeRTOS/Src/queue.c **** 
 823:FreeRTOS/Src/queue.c ****         configASSERT( pxMutex );
 824:FreeRTOS/Src/queue.c **** 
 825:FreeRTOS/Src/queue.c ****         /* Comments regarding mutual exclusion as per those within
 826:FreeRTOS/Src/queue.c ****          * xQueueGiveMutexRecursive(). */
 827:FreeRTOS/Src/queue.c **** 
 828:FreeRTOS/Src/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 829:FreeRTOS/Src/queue.c **** 
 830:FreeRTOS/Src/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 16


 831:FreeRTOS/Src/queue.c ****         {
 832:FreeRTOS/Src/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 833:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
 834:FreeRTOS/Src/queue.c ****         }
 835:FreeRTOS/Src/queue.c ****         else
 836:FreeRTOS/Src/queue.c ****         {
 837:FreeRTOS/Src/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 838:FreeRTOS/Src/queue.c **** 
 839:FreeRTOS/Src/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 840:FreeRTOS/Src/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 841:FreeRTOS/Src/queue.c ****              * before reaching here. */
 842:FreeRTOS/Src/queue.c ****             if( xReturn != pdFAIL )
 843:FreeRTOS/Src/queue.c ****             {
 844:FreeRTOS/Src/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 845:FreeRTOS/Src/queue.c ****             }
 846:FreeRTOS/Src/queue.c ****             else
 847:FreeRTOS/Src/queue.c ****             {
 848:FreeRTOS/Src/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 849:FreeRTOS/Src/queue.c ****             }
 850:FreeRTOS/Src/queue.c ****         }
 851:FreeRTOS/Src/queue.c **** 
 852:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueTakeMutexRecursive( xReturn );
 853:FreeRTOS/Src/queue.c **** 
 854:FreeRTOS/Src/queue.c ****         return xReturn;
 855:FreeRTOS/Src/queue.c ****     }
 856:FreeRTOS/Src/queue.c **** 
 857:FreeRTOS/Src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 858:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 859:FreeRTOS/Src/queue.c **** 
 860:FreeRTOS/Src/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 861:FreeRTOS/Src/queue.c **** 
 862:FreeRTOS/Src/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 863:FreeRTOS/Src/queue.c ****                                                        const UBaseType_t uxInitialCount,
 864:FreeRTOS/Src/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 865:FreeRTOS/Src/queue.c ****     {
 866:FreeRTOS/Src/queue.c ****         QueueHandle_t xHandle = NULL;
 867:FreeRTOS/Src/queue.c **** 
 868:FreeRTOS/Src/queue.c ****         traceENTER_xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue )
 869:FreeRTOS/Src/queue.c **** 
 870:FreeRTOS/Src/queue.c ****         if( ( uxMaxCount != 0U ) &&
 871:FreeRTOS/Src/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 872:FreeRTOS/Src/queue.c ****         {
 873:FreeRTOS/Src/queue.c ****             xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL
 874:FreeRTOS/Src/queue.c **** 
 875:FreeRTOS/Src/queue.c ****             if( xHandle != NULL )
 876:FreeRTOS/Src/queue.c ****             {
 877:FreeRTOS/Src/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 878:FreeRTOS/Src/queue.c **** 
 879:FreeRTOS/Src/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 880:FreeRTOS/Src/queue.c ****             }
 881:FreeRTOS/Src/queue.c ****             else
 882:FreeRTOS/Src/queue.c ****             {
 883:FreeRTOS/Src/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 884:FreeRTOS/Src/queue.c ****             }
 885:FreeRTOS/Src/queue.c ****         }
 886:FreeRTOS/Src/queue.c ****         else
 887:FreeRTOS/Src/queue.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 17


 888:FreeRTOS/Src/queue.c ****             configASSERT( xHandle );
 889:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
 890:FreeRTOS/Src/queue.c ****         }
 891:FreeRTOS/Src/queue.c **** 
 892:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueCreateCountingSemaphoreStatic( xHandle );
 893:FreeRTOS/Src/queue.c **** 
 894:FreeRTOS/Src/queue.c ****         return xHandle;
 895:FreeRTOS/Src/queue.c ****     }
 896:FreeRTOS/Src/queue.c **** 
 897:FreeRTOS/Src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 898:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 899:FreeRTOS/Src/queue.c **** 
 900:FreeRTOS/Src/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 901:FreeRTOS/Src/queue.c **** 
 902:FreeRTOS/Src/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 903:FreeRTOS/Src/queue.c ****                                                  const UBaseType_t uxInitialCount )
 904:FreeRTOS/Src/queue.c ****     {
 905:FreeRTOS/Src/queue.c ****         QueueHandle_t xHandle = NULL;
 906:FreeRTOS/Src/queue.c **** 
 907:FreeRTOS/Src/queue.c ****         traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );
 908:FreeRTOS/Src/queue.c **** 
 909:FreeRTOS/Src/queue.c ****         if( ( uxMaxCount != 0U ) &&
 910:FreeRTOS/Src/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 911:FreeRTOS/Src/queue.c ****         {
 912:FreeRTOS/Src/queue.c ****             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE
 913:FreeRTOS/Src/queue.c **** 
 914:FreeRTOS/Src/queue.c ****             if( xHandle != NULL )
 915:FreeRTOS/Src/queue.c ****             {
 916:FreeRTOS/Src/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 917:FreeRTOS/Src/queue.c **** 
 918:FreeRTOS/Src/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 919:FreeRTOS/Src/queue.c ****             }
 920:FreeRTOS/Src/queue.c ****             else
 921:FreeRTOS/Src/queue.c ****             {
 922:FreeRTOS/Src/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 923:FreeRTOS/Src/queue.c ****             }
 924:FreeRTOS/Src/queue.c ****         }
 925:FreeRTOS/Src/queue.c ****         else
 926:FreeRTOS/Src/queue.c ****         {
 927:FreeRTOS/Src/queue.c ****             configASSERT( xHandle );
 928:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
 929:FreeRTOS/Src/queue.c ****         }
 930:FreeRTOS/Src/queue.c **** 
 931:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueCreateCountingSemaphore( xHandle );
 932:FreeRTOS/Src/queue.c **** 
 933:FreeRTOS/Src/queue.c ****         return xHandle;
 934:FreeRTOS/Src/queue.c ****     }
 935:FreeRTOS/Src/queue.c **** 
 936:FreeRTOS/Src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 937:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 938:FreeRTOS/Src/queue.c **** 
 939:FreeRTOS/Src/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 940:FreeRTOS/Src/queue.c ****                               const void * const pvItemToQueue,
 941:FreeRTOS/Src/queue.c ****                               TickType_t xTicksToWait,
 942:FreeRTOS/Src/queue.c ****                               const BaseType_t xCopyPosition )
 943:FreeRTOS/Src/queue.c **** {
 944:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 18


 945:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
 946:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 947:FreeRTOS/Src/queue.c **** 
 948:FreeRTOS/Src/queue.c ****     traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 949:FreeRTOS/Src/queue.c **** 
 950:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
 951:FreeRTOS/Src/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 952:FreeRTOS/Src/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 953:FreeRTOS/Src/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 954:FreeRTOS/Src/queue.c ****     {
 955:FreeRTOS/Src/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 956:FreeRTOS/Src/queue.c ****     }
 957:FreeRTOS/Src/queue.c ****     #endif
 958:FreeRTOS/Src/queue.c **** 
 959:FreeRTOS/Src/queue.c ****     for( ; ; )
 960:FreeRTOS/Src/queue.c ****     {
 961:FreeRTOS/Src/queue.c ****         taskENTER_CRITICAL();
 962:FreeRTOS/Src/queue.c ****         {
 963:FreeRTOS/Src/queue.c ****             /* Is there room on the queue now?  The running task must be the
 964:FreeRTOS/Src/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 965:FreeRTOS/Src/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 966:FreeRTOS/Src/queue.c ****              * queue is full. */
 967:FreeRTOS/Src/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 968:FreeRTOS/Src/queue.c ****             {
 969:FreeRTOS/Src/queue.c ****                 traceQUEUE_SEND( pxQueue );
 970:FreeRTOS/Src/queue.c **** 
 971:FreeRTOS/Src/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 972:FreeRTOS/Src/queue.c ****                 {
 973:FreeRTOS/Src/queue.c ****                     const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 974:FreeRTOS/Src/queue.c **** 
 975:FreeRTOS/Src/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 976:FreeRTOS/Src/queue.c **** 
 977:FreeRTOS/Src/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
 978:FreeRTOS/Src/queue.c ****                     {
 979:FreeRTOS/Src/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
 980:FreeRTOS/Src/queue.c ****                         {
 981:FreeRTOS/Src/queue.c ****                             /* Do not notify the queue set as an existing item
 982:FreeRTOS/Src/queue.c ****                              * was overwritten in the queue so the number of items
 983:FreeRTOS/Src/queue.c ****                              * in the queue has not changed. */
 984:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 985:FreeRTOS/Src/queue.c ****                         }
 986:FreeRTOS/Src/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 987:FreeRTOS/Src/queue.c ****                         {
 988:FreeRTOS/Src/queue.c ****                             /* The queue is a member of a queue set, and posting
 989:FreeRTOS/Src/queue.c ****                              * to the queue set caused a higher priority task to
 990:FreeRTOS/Src/queue.c ****                              * unblock. A context switch is required. */
 991:FreeRTOS/Src/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 992:FreeRTOS/Src/queue.c ****                         }
 993:FreeRTOS/Src/queue.c ****                         else
 994:FreeRTOS/Src/queue.c ****                         {
 995:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 996:FreeRTOS/Src/queue.c ****                         }
 997:FreeRTOS/Src/queue.c ****                     }
 998:FreeRTOS/Src/queue.c ****                     else
 999:FreeRTOS/Src/queue.c ****                     {
1000:FreeRTOS/Src/queue.c ****                         /* If there was a task waiting for data to arrive on the
1001:FreeRTOS/Src/queue.c ****                          * queue then unblock it now. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 19


1002:FreeRTOS/Src/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1003:FreeRTOS/Src/queue.c ****                         {
1004:FreeRTOS/Src/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1005:FreeRTOS/Src/queue.c ****                             {
1006:FreeRTOS/Src/queue.c ****                                 /* The unblocked task has a priority higher than
1007:FreeRTOS/Src/queue.c ****                                  * our own so yield immediately.  Yes it is ok to
1008:FreeRTOS/Src/queue.c ****                                  * do this from within the critical section - the
1009:FreeRTOS/Src/queue.c ****                                  * kernel takes care of that. */
1010:FreeRTOS/Src/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
1011:FreeRTOS/Src/queue.c ****                             }
1012:FreeRTOS/Src/queue.c ****                             else
1013:FreeRTOS/Src/queue.c ****                             {
1014:FreeRTOS/Src/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1015:FreeRTOS/Src/queue.c ****                             }
1016:FreeRTOS/Src/queue.c ****                         }
1017:FreeRTOS/Src/queue.c ****                         else if( xYieldRequired != pdFALSE )
1018:FreeRTOS/Src/queue.c ****                         {
1019:FreeRTOS/Src/queue.c ****                             /* This path is a special case that will only get
1020:FreeRTOS/Src/queue.c ****                              * executed if the task was holding multiple mutexes
1021:FreeRTOS/Src/queue.c ****                              * and the mutexes were given back in an order that is
1022:FreeRTOS/Src/queue.c ****                              * different to that in which they were taken. */
1023:FreeRTOS/Src/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
1024:FreeRTOS/Src/queue.c ****                         }
1025:FreeRTOS/Src/queue.c ****                         else
1026:FreeRTOS/Src/queue.c ****                         {
1027:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1028:FreeRTOS/Src/queue.c ****                         }
1029:FreeRTOS/Src/queue.c ****                     }
1030:FreeRTOS/Src/queue.c ****                 }
1031:FreeRTOS/Src/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1032:FreeRTOS/Src/queue.c ****                 {
1033:FreeRTOS/Src/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1034:FreeRTOS/Src/queue.c **** 
1035:FreeRTOS/Src/queue.c ****                     /* If there was a task waiting for data to arrive on the
1036:FreeRTOS/Src/queue.c ****                      * queue then unblock it now. */
1037:FreeRTOS/Src/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1038:FreeRTOS/Src/queue.c ****                     {
1039:FreeRTOS/Src/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1040:FreeRTOS/Src/queue.c ****                         {
1041:FreeRTOS/Src/queue.c ****                             /* The unblocked task has a priority higher than
1042:FreeRTOS/Src/queue.c ****                              * our own so yield immediately.  Yes it is ok to do
1043:FreeRTOS/Src/queue.c ****                              * this from within the critical section - the kernel
1044:FreeRTOS/Src/queue.c ****                              * takes care of that. */
1045:FreeRTOS/Src/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
1046:FreeRTOS/Src/queue.c ****                         }
1047:FreeRTOS/Src/queue.c ****                         else
1048:FreeRTOS/Src/queue.c ****                         {
1049:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1050:FreeRTOS/Src/queue.c ****                         }
1051:FreeRTOS/Src/queue.c ****                     }
1052:FreeRTOS/Src/queue.c ****                     else if( xYieldRequired != pdFALSE )
1053:FreeRTOS/Src/queue.c ****                     {
1054:FreeRTOS/Src/queue.c ****                         /* This path is a special case that will only get
1055:FreeRTOS/Src/queue.c ****                          * executed if the task was holding multiple mutexes and
1056:FreeRTOS/Src/queue.c ****                          * the mutexes were given back in an order that is
1057:FreeRTOS/Src/queue.c ****                          * different to that in which they were taken. */
1058:FreeRTOS/Src/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 20


1059:FreeRTOS/Src/queue.c ****                     }
1060:FreeRTOS/Src/queue.c ****                     else
1061:FreeRTOS/Src/queue.c ****                     {
1062:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1063:FreeRTOS/Src/queue.c ****                     }
1064:FreeRTOS/Src/queue.c ****                 }
1065:FreeRTOS/Src/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1066:FreeRTOS/Src/queue.c **** 
1067:FreeRTOS/Src/queue.c ****                 taskEXIT_CRITICAL();
1068:FreeRTOS/Src/queue.c **** 
1069:FreeRTOS/Src/queue.c ****                 traceRETURN_xQueueGenericSend( pdPASS );
1070:FreeRTOS/Src/queue.c **** 
1071:FreeRTOS/Src/queue.c ****                 return pdPASS;
1072:FreeRTOS/Src/queue.c ****             }
1073:FreeRTOS/Src/queue.c ****             else
1074:FreeRTOS/Src/queue.c ****             {
1075:FreeRTOS/Src/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1076:FreeRTOS/Src/queue.c ****                 {
1077:FreeRTOS/Src/queue.c ****                     /* The queue was full and no block time is specified (or
1078:FreeRTOS/Src/queue.c ****                      * the block time has expired) so leave now. */
1079:FreeRTOS/Src/queue.c ****                     taskEXIT_CRITICAL();
1080:FreeRTOS/Src/queue.c **** 
1081:FreeRTOS/Src/queue.c ****                     /* Return to the original privilege level before exiting
1082:FreeRTOS/Src/queue.c ****                      * the function. */
1083:FreeRTOS/Src/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
1084:FreeRTOS/Src/queue.c ****                     traceRETURN_xQueueGenericSend( errQUEUE_FULL );
1085:FreeRTOS/Src/queue.c **** 
1086:FreeRTOS/Src/queue.c ****                     return errQUEUE_FULL;
1087:FreeRTOS/Src/queue.c ****                 }
1088:FreeRTOS/Src/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1089:FreeRTOS/Src/queue.c ****                 {
1090:FreeRTOS/Src/queue.c ****                     /* The queue was full and a block time was specified so
1091:FreeRTOS/Src/queue.c ****                      * configure the timeout structure. */
1092:FreeRTOS/Src/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1093:FreeRTOS/Src/queue.c ****                     xEntryTimeSet = pdTRUE;
1094:FreeRTOS/Src/queue.c ****                 }
1095:FreeRTOS/Src/queue.c ****                 else
1096:FreeRTOS/Src/queue.c ****                 {
1097:FreeRTOS/Src/queue.c ****                     /* Entry time was already set. */
1098:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1099:FreeRTOS/Src/queue.c ****                 }
1100:FreeRTOS/Src/queue.c ****             }
1101:FreeRTOS/Src/queue.c ****         }
1102:FreeRTOS/Src/queue.c ****         taskEXIT_CRITICAL();
1103:FreeRTOS/Src/queue.c **** 
1104:FreeRTOS/Src/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1105:FreeRTOS/Src/queue.c ****          * now the critical section has been exited. */
1106:FreeRTOS/Src/queue.c **** 
1107:FreeRTOS/Src/queue.c ****         vTaskSuspendAll();
1108:FreeRTOS/Src/queue.c ****         prvLockQueue( pxQueue );
1109:FreeRTOS/Src/queue.c **** 
1110:FreeRTOS/Src/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1111:FreeRTOS/Src/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1112:FreeRTOS/Src/queue.c ****         {
1113:FreeRTOS/Src/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
1114:FreeRTOS/Src/queue.c ****             {
1115:FreeRTOS/Src/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 21


1116:FreeRTOS/Src/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1117:FreeRTOS/Src/queue.c **** 
1118:FreeRTOS/Src/queue.c ****                 /* Unlocking the queue means queue events can effect the
1119:FreeRTOS/Src/queue.c ****                  * event list. It is possible that interrupts occurring now
1120:FreeRTOS/Src/queue.c ****                  * remove this task from the event list again - but as the
1121:FreeRTOS/Src/queue.c ****                  * scheduler is suspended the task will go onto the pending
1122:FreeRTOS/Src/queue.c ****                  * ready list instead of the actual ready list. */
1123:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
1124:FreeRTOS/Src/queue.c **** 
1125:FreeRTOS/Src/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
1126:FreeRTOS/Src/queue.c ****                  * ready list into the ready list - so it is feasible that this
1127:FreeRTOS/Src/queue.c ****                  * task is already in the ready list before it yields - in which
1128:FreeRTOS/Src/queue.c ****                  * case the yield will not cause a context switch unless there
1129:FreeRTOS/Src/queue.c ****                  * is also a higher priority task in the pending ready list. */
1130:FreeRTOS/Src/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1131:FreeRTOS/Src/queue.c ****                 {
1132:FreeRTOS/Src/queue.c ****                     taskYIELD_WITHIN_API();
1133:FreeRTOS/Src/queue.c ****                 }
1134:FreeRTOS/Src/queue.c ****             }
1135:FreeRTOS/Src/queue.c ****             else
1136:FreeRTOS/Src/queue.c ****             {
1137:FreeRTOS/Src/queue.c ****                 /* Try again. */
1138:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
1139:FreeRTOS/Src/queue.c ****                 ( void ) xTaskResumeAll();
1140:FreeRTOS/Src/queue.c ****             }
1141:FreeRTOS/Src/queue.c ****         }
1142:FreeRTOS/Src/queue.c ****         else
1143:FreeRTOS/Src/queue.c ****         {
1144:FreeRTOS/Src/queue.c ****             /* The timeout has expired. */
1145:FreeRTOS/Src/queue.c ****             prvUnlockQueue( pxQueue );
1146:FreeRTOS/Src/queue.c ****             ( void ) xTaskResumeAll();
1147:FreeRTOS/Src/queue.c **** 
1148:FreeRTOS/Src/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
1149:FreeRTOS/Src/queue.c ****             traceRETURN_xQueueGenericSend( errQUEUE_FULL );
1150:FreeRTOS/Src/queue.c **** 
1151:FreeRTOS/Src/queue.c ****             return errQUEUE_FULL;
1152:FreeRTOS/Src/queue.c ****         }
1153:FreeRTOS/Src/queue.c ****     }
1154:FreeRTOS/Src/queue.c **** }
1155:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1156:FreeRTOS/Src/queue.c **** 
1157:FreeRTOS/Src/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
1158:FreeRTOS/Src/queue.c ****                                      const void * const pvItemToQueue,
1159:FreeRTOS/Src/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
1160:FreeRTOS/Src/queue.c ****                                      const BaseType_t xCopyPosition )
1161:FreeRTOS/Src/queue.c **** {
1162:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
1163:FreeRTOS/Src/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1164:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
1165:FreeRTOS/Src/queue.c **** 
1166:FreeRTOS/Src/queue.c ****     traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPos
1167:FreeRTOS/Src/queue.c **** 
1168:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
1169:FreeRTOS/Src/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
1170:FreeRTOS/Src/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1171:FreeRTOS/Src/queue.c **** 
1172:FreeRTOS/Src/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 22


1173:FreeRTOS/Src/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1174:FreeRTOS/Src/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1175:FreeRTOS/Src/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1176:FreeRTOS/Src/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1177:FreeRTOS/Src/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1178:FreeRTOS/Src/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1179:FreeRTOS/Src/queue.c ****      * assigned a priority above the configured maximum system call priority.
1180:FreeRTOS/Src/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1181:FreeRTOS/Src/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1182:FreeRTOS/Src/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1183:FreeRTOS/Src/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1184:FreeRTOS/Src/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1185:FreeRTOS/Src/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1186:FreeRTOS/Src/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1187:FreeRTOS/Src/queue.c **** 
1188:FreeRTOS/Src/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1189:FreeRTOS/Src/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1190:FreeRTOS/Src/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1191:FreeRTOS/Src/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1192:FreeRTOS/Src/queue.c ****      * post). */
1193:FreeRTOS/Src/queue.c ****     /* MISRA Ref 4.7.1 [Return value shall be checked] */
1194:FreeRTOS/Src/queue.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
1195:FreeRTOS/Src/queue.c ****     /* coverity[misra_c_2012_directive_4_7_violation] */
1196:FreeRTOS/Src/queue.c ****     uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
1197:FreeRTOS/Src/queue.c ****     {
1198:FreeRTOS/Src/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
1199:FreeRTOS/Src/queue.c ****         {
1200:FreeRTOS/Src/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1201:FreeRTOS/Src/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
1202:FreeRTOS/Src/queue.c **** 
1203:FreeRTOS/Src/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1204:FreeRTOS/Src/queue.c **** 
1205:FreeRTOS/Src/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1206:FreeRTOS/Src/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1207:FreeRTOS/Src/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1208:FreeRTOS/Src/queue.c ****              *  called here even though the disinherit function does not check if
1209:FreeRTOS/Src/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1210:FreeRTOS/Src/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1211:FreeRTOS/Src/queue.c **** 
1212:FreeRTOS/Src/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1213:FreeRTOS/Src/queue.c ****              * be done when the queue is unlocked later. */
1214:FreeRTOS/Src/queue.c ****             if( cTxLock == queueUNLOCKED )
1215:FreeRTOS/Src/queue.c ****             {
1216:FreeRTOS/Src/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1217:FreeRTOS/Src/queue.c ****                 {
1218:FreeRTOS/Src/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1219:FreeRTOS/Src/queue.c ****                     {
1220:FreeRTOS/Src/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
1221:FreeRTOS/Src/queue.c ****                         {
1222:FreeRTOS/Src/queue.c ****                             /* Do not notify the queue set as an existing item
1223:FreeRTOS/Src/queue.c ****                              * was overwritten in the queue so the number of items
1224:FreeRTOS/Src/queue.c ****                              * in the queue has not changed. */
1225:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1226:FreeRTOS/Src/queue.c ****                         }
1227:FreeRTOS/Src/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1228:FreeRTOS/Src/queue.c ****                         {
1229:FreeRTOS/Src/queue.c ****                             /* The queue is a member of a queue set, and posting
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 23


1230:FreeRTOS/Src/queue.c ****                              * to the queue set caused a higher priority task to
1231:FreeRTOS/Src/queue.c ****                              * unblock.  A context switch is required. */
1232:FreeRTOS/Src/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1233:FreeRTOS/Src/queue.c ****                             {
1234:FreeRTOS/Src/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1235:FreeRTOS/Src/queue.c ****                             }
1236:FreeRTOS/Src/queue.c ****                             else
1237:FreeRTOS/Src/queue.c ****                             {
1238:FreeRTOS/Src/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1239:FreeRTOS/Src/queue.c ****                             }
1240:FreeRTOS/Src/queue.c ****                         }
1241:FreeRTOS/Src/queue.c ****                         else
1242:FreeRTOS/Src/queue.c ****                         {
1243:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1244:FreeRTOS/Src/queue.c ****                         }
1245:FreeRTOS/Src/queue.c ****                     }
1246:FreeRTOS/Src/queue.c ****                     else
1247:FreeRTOS/Src/queue.c ****                     {
1248:FreeRTOS/Src/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1249:FreeRTOS/Src/queue.c ****                         {
1250:FreeRTOS/Src/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1251:FreeRTOS/Src/queue.c ****                             {
1252:FreeRTOS/Src/queue.c ****                                 /* The task waiting has a higher priority so
1253:FreeRTOS/Src/queue.c ****                                  *  record that a context switch is required. */
1254:FreeRTOS/Src/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1255:FreeRTOS/Src/queue.c ****                                 {
1256:FreeRTOS/Src/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1257:FreeRTOS/Src/queue.c ****                                 }
1258:FreeRTOS/Src/queue.c ****                                 else
1259:FreeRTOS/Src/queue.c ****                                 {
1260:FreeRTOS/Src/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1261:FreeRTOS/Src/queue.c ****                                 }
1262:FreeRTOS/Src/queue.c ****                             }
1263:FreeRTOS/Src/queue.c ****                             else
1264:FreeRTOS/Src/queue.c ****                             {
1265:FreeRTOS/Src/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1266:FreeRTOS/Src/queue.c ****                             }
1267:FreeRTOS/Src/queue.c ****                         }
1268:FreeRTOS/Src/queue.c ****                         else
1269:FreeRTOS/Src/queue.c ****                         {
1270:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1271:FreeRTOS/Src/queue.c ****                         }
1272:FreeRTOS/Src/queue.c ****                     }
1273:FreeRTOS/Src/queue.c ****                 }
1274:FreeRTOS/Src/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1275:FreeRTOS/Src/queue.c ****                 {
1276:FreeRTOS/Src/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1277:FreeRTOS/Src/queue.c ****                     {
1278:FreeRTOS/Src/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1279:FreeRTOS/Src/queue.c ****                         {
1280:FreeRTOS/Src/queue.c ****                             /* The task waiting has a higher priority so record that a
1281:FreeRTOS/Src/queue.c ****                              * context switch is required. */
1282:FreeRTOS/Src/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1283:FreeRTOS/Src/queue.c ****                             {
1284:FreeRTOS/Src/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1285:FreeRTOS/Src/queue.c ****                             }
1286:FreeRTOS/Src/queue.c ****                             else
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 24


1287:FreeRTOS/Src/queue.c ****                             {
1288:FreeRTOS/Src/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1289:FreeRTOS/Src/queue.c ****                             }
1290:FreeRTOS/Src/queue.c ****                         }
1291:FreeRTOS/Src/queue.c ****                         else
1292:FreeRTOS/Src/queue.c ****                         {
1293:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1294:FreeRTOS/Src/queue.c ****                         }
1295:FreeRTOS/Src/queue.c ****                     }
1296:FreeRTOS/Src/queue.c ****                     else
1297:FreeRTOS/Src/queue.c ****                     {
1298:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1299:FreeRTOS/Src/queue.c ****                     }
1300:FreeRTOS/Src/queue.c **** 
1301:FreeRTOS/Src/queue.c ****                     /* Not used in this path. */
1302:FreeRTOS/Src/queue.c ****                     ( void ) uxPreviousMessagesWaiting;
1303:FreeRTOS/Src/queue.c ****                 }
1304:FreeRTOS/Src/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1305:FreeRTOS/Src/queue.c ****             }
1306:FreeRTOS/Src/queue.c ****             else
1307:FreeRTOS/Src/queue.c ****             {
1308:FreeRTOS/Src/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1309:FreeRTOS/Src/queue.c ****                  * knows that data was posted while it was locked. */
1310:FreeRTOS/Src/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
1311:FreeRTOS/Src/queue.c ****             }
1312:FreeRTOS/Src/queue.c **** 
1313:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
1314:FreeRTOS/Src/queue.c ****         }
1315:FreeRTOS/Src/queue.c ****         else
1316:FreeRTOS/Src/queue.c ****         {
1317:FreeRTOS/Src/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1318:FreeRTOS/Src/queue.c ****             xReturn = errQUEUE_FULL;
1319:FreeRTOS/Src/queue.c ****         }
1320:FreeRTOS/Src/queue.c ****     }
1321:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
1322:FreeRTOS/Src/queue.c **** 
1323:FreeRTOS/Src/queue.c ****     traceRETURN_xQueueGenericSendFromISR( xReturn );
1324:FreeRTOS/Src/queue.c **** 
1325:FreeRTOS/Src/queue.c ****     return xReturn;
1326:FreeRTOS/Src/queue.c **** }
1327:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1328:FreeRTOS/Src/queue.c **** 
1329:FreeRTOS/Src/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1330:FreeRTOS/Src/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1331:FreeRTOS/Src/queue.c **** {
1332:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
1333:FreeRTOS/Src/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1334:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
1335:FreeRTOS/Src/queue.c **** 
1336:FreeRTOS/Src/queue.c ****     traceENTER_xQueueGiveFromISR( xQueue, pxHigherPriorityTaskWoken );
1337:FreeRTOS/Src/queue.c **** 
1338:FreeRTOS/Src/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1339:FreeRTOS/Src/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1340:FreeRTOS/Src/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1341:FreeRTOS/Src/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1342:FreeRTOS/Src/queue.c ****      * post). */
1343:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 25


1344:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
1345:FreeRTOS/Src/queue.c **** 
1346:FreeRTOS/Src/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1347:FreeRTOS/Src/queue.c ****      * if the item size is not 0. */
1348:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1349:FreeRTOS/Src/queue.c **** 
1350:FreeRTOS/Src/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1351:FreeRTOS/Src/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1352:FreeRTOS/Src/queue.c ****      * interrupts, only tasks. */
1353:FreeRTOS/Src/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
1354:FreeRTOS/Src/queue.c **** 
1355:FreeRTOS/Src/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1356:FreeRTOS/Src/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1357:FreeRTOS/Src/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1358:FreeRTOS/Src/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1359:FreeRTOS/Src/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1360:FreeRTOS/Src/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1361:FreeRTOS/Src/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1362:FreeRTOS/Src/queue.c ****      * assigned a priority above the configured maximum system call priority.
1363:FreeRTOS/Src/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1364:FreeRTOS/Src/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1365:FreeRTOS/Src/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1366:FreeRTOS/Src/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1367:FreeRTOS/Src/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1368:FreeRTOS/Src/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1369:FreeRTOS/Src/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1370:FreeRTOS/Src/queue.c **** 
1371:FreeRTOS/Src/queue.c ****     /* MISRA Ref 4.7.1 [Return value shall be checked] */
1372:FreeRTOS/Src/queue.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
1373:FreeRTOS/Src/queue.c ****     /* coverity[misra_c_2012_directive_4_7_violation] */
1374:FreeRTOS/Src/queue.c ****     uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
1375:FreeRTOS/Src/queue.c ****     {
1376:FreeRTOS/Src/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1377:FreeRTOS/Src/queue.c **** 
1378:FreeRTOS/Src/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1379:FreeRTOS/Src/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1380:FreeRTOS/Src/queue.c ****          * space'. */
1381:FreeRTOS/Src/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
1382:FreeRTOS/Src/queue.c ****         {
1383:FreeRTOS/Src/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1384:FreeRTOS/Src/queue.c **** 
1385:FreeRTOS/Src/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1386:FreeRTOS/Src/queue.c **** 
1387:FreeRTOS/Src/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1388:FreeRTOS/Src/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1389:FreeRTOS/Src/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1390:FreeRTOS/Src/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1391:FreeRTOS/Src/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1392:FreeRTOS/Src/queue.c ****              * messages (semaphores) available. */
1393:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
1394:FreeRTOS/Src/queue.c **** 
1395:FreeRTOS/Src/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1396:FreeRTOS/Src/queue.c ****              * be done when the queue is unlocked later. */
1397:FreeRTOS/Src/queue.c ****             if( cTxLock == queueUNLOCKED )
1398:FreeRTOS/Src/queue.c ****             {
1399:FreeRTOS/Src/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1400:FreeRTOS/Src/queue.c ****                 {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 26


1401:FreeRTOS/Src/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1402:FreeRTOS/Src/queue.c ****                     {
1403:FreeRTOS/Src/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1404:FreeRTOS/Src/queue.c ****                         {
1405:FreeRTOS/Src/queue.c ****                             /* The semaphore is a member of a queue set, and
1406:FreeRTOS/Src/queue.c ****                              * posting to the queue set caused a higher priority
1407:FreeRTOS/Src/queue.c ****                              * task to unblock.  A context switch is required. */
1408:FreeRTOS/Src/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1409:FreeRTOS/Src/queue.c ****                             {
1410:FreeRTOS/Src/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1411:FreeRTOS/Src/queue.c ****                             }
1412:FreeRTOS/Src/queue.c ****                             else
1413:FreeRTOS/Src/queue.c ****                             {
1414:FreeRTOS/Src/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1415:FreeRTOS/Src/queue.c ****                             }
1416:FreeRTOS/Src/queue.c ****                         }
1417:FreeRTOS/Src/queue.c ****                         else
1418:FreeRTOS/Src/queue.c ****                         {
1419:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1420:FreeRTOS/Src/queue.c ****                         }
1421:FreeRTOS/Src/queue.c ****                     }
1422:FreeRTOS/Src/queue.c ****                     else
1423:FreeRTOS/Src/queue.c ****                     {
1424:FreeRTOS/Src/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1425:FreeRTOS/Src/queue.c ****                         {
1426:FreeRTOS/Src/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1427:FreeRTOS/Src/queue.c ****                             {
1428:FreeRTOS/Src/queue.c ****                                 /* The task waiting has a higher priority so
1429:FreeRTOS/Src/queue.c ****                                  *  record that a context switch is required. */
1430:FreeRTOS/Src/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1431:FreeRTOS/Src/queue.c ****                                 {
1432:FreeRTOS/Src/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1433:FreeRTOS/Src/queue.c ****                                 }
1434:FreeRTOS/Src/queue.c ****                                 else
1435:FreeRTOS/Src/queue.c ****                                 {
1436:FreeRTOS/Src/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1437:FreeRTOS/Src/queue.c ****                                 }
1438:FreeRTOS/Src/queue.c ****                             }
1439:FreeRTOS/Src/queue.c ****                             else
1440:FreeRTOS/Src/queue.c ****                             {
1441:FreeRTOS/Src/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1442:FreeRTOS/Src/queue.c ****                             }
1443:FreeRTOS/Src/queue.c ****                         }
1444:FreeRTOS/Src/queue.c ****                         else
1445:FreeRTOS/Src/queue.c ****                         {
1446:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1447:FreeRTOS/Src/queue.c ****                         }
1448:FreeRTOS/Src/queue.c ****                     }
1449:FreeRTOS/Src/queue.c ****                 }
1450:FreeRTOS/Src/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1451:FreeRTOS/Src/queue.c ****                 {
1452:FreeRTOS/Src/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1453:FreeRTOS/Src/queue.c ****                     {
1454:FreeRTOS/Src/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1455:FreeRTOS/Src/queue.c ****                         {
1456:FreeRTOS/Src/queue.c ****                             /* The task waiting has a higher priority so record that a
1457:FreeRTOS/Src/queue.c ****                              * context switch is required. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 27


1458:FreeRTOS/Src/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1459:FreeRTOS/Src/queue.c ****                             {
1460:FreeRTOS/Src/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1461:FreeRTOS/Src/queue.c ****                             }
1462:FreeRTOS/Src/queue.c ****                             else
1463:FreeRTOS/Src/queue.c ****                             {
1464:FreeRTOS/Src/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1465:FreeRTOS/Src/queue.c ****                             }
1466:FreeRTOS/Src/queue.c ****                         }
1467:FreeRTOS/Src/queue.c ****                         else
1468:FreeRTOS/Src/queue.c ****                         {
1469:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1470:FreeRTOS/Src/queue.c ****                         }
1471:FreeRTOS/Src/queue.c ****                     }
1472:FreeRTOS/Src/queue.c ****                     else
1473:FreeRTOS/Src/queue.c ****                     {
1474:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1475:FreeRTOS/Src/queue.c ****                     }
1476:FreeRTOS/Src/queue.c ****                 }
1477:FreeRTOS/Src/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1478:FreeRTOS/Src/queue.c ****             }
1479:FreeRTOS/Src/queue.c ****             else
1480:FreeRTOS/Src/queue.c ****             {
1481:FreeRTOS/Src/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1482:FreeRTOS/Src/queue.c ****                  * knows that data was posted while it was locked. */
1483:FreeRTOS/Src/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
1484:FreeRTOS/Src/queue.c ****             }
1485:FreeRTOS/Src/queue.c **** 
1486:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
1487:FreeRTOS/Src/queue.c ****         }
1488:FreeRTOS/Src/queue.c ****         else
1489:FreeRTOS/Src/queue.c ****         {
1490:FreeRTOS/Src/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1491:FreeRTOS/Src/queue.c ****             xReturn = errQUEUE_FULL;
1492:FreeRTOS/Src/queue.c ****         }
1493:FreeRTOS/Src/queue.c ****     }
1494:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
1495:FreeRTOS/Src/queue.c **** 
1496:FreeRTOS/Src/queue.c ****     traceRETURN_xQueueGiveFromISR( xReturn );
1497:FreeRTOS/Src/queue.c **** 
1498:FreeRTOS/Src/queue.c ****     return xReturn;
1499:FreeRTOS/Src/queue.c **** }
1500:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1501:FreeRTOS/Src/queue.c **** 
1502:FreeRTOS/Src/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1503:FreeRTOS/Src/queue.c ****                           void * const pvBuffer,
1504:FreeRTOS/Src/queue.c ****                           TickType_t xTicksToWait )
1505:FreeRTOS/Src/queue.c **** {
1506:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1507:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
1508:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
1509:FreeRTOS/Src/queue.c **** 
1510:FreeRTOS/Src/queue.c ****     traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );
1511:FreeRTOS/Src/queue.c **** 
1512:FreeRTOS/Src/queue.c ****     /* Check the pointer is not NULL. */
1513:FreeRTOS/Src/queue.c ****     configASSERT( ( pxQueue ) );
1514:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 28


1515:FreeRTOS/Src/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1516:FreeRTOS/Src/queue.c ****      * is zero (so no data is copied into the buffer). */
1517:FreeRTOS/Src/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1518:FreeRTOS/Src/queue.c **** 
1519:FreeRTOS/Src/queue.c ****     /* Cannot block if the scheduler is suspended. */
1520:FreeRTOS/Src/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1521:FreeRTOS/Src/queue.c ****     {
1522:FreeRTOS/Src/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1523:FreeRTOS/Src/queue.c ****     }
1524:FreeRTOS/Src/queue.c ****     #endif
1525:FreeRTOS/Src/queue.c **** 
1526:FreeRTOS/Src/queue.c ****     for( ; ; )
1527:FreeRTOS/Src/queue.c ****     {
1528:FreeRTOS/Src/queue.c ****         taskENTER_CRITICAL();
1529:FreeRTOS/Src/queue.c ****         {
1530:FreeRTOS/Src/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1531:FreeRTOS/Src/queue.c **** 
1532:FreeRTOS/Src/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1533:FreeRTOS/Src/queue.c ****              * must be the highest priority task wanting to access the queue. */
1534:FreeRTOS/Src/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1535:FreeRTOS/Src/queue.c ****             {
1536:FreeRTOS/Src/queue.c ****                 /* Data available, remove one item. */
1537:FreeRTOS/Src/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1538:FreeRTOS/Src/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1539:FreeRTOS/Src/queue.c ****                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 
1540:FreeRTOS/Src/queue.c **** 
1541:FreeRTOS/Src/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1542:FreeRTOS/Src/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1543:FreeRTOS/Src/queue.c ****                  * task. */
1544:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1545:FreeRTOS/Src/queue.c ****                 {
1546:FreeRTOS/Src/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1547:FreeRTOS/Src/queue.c ****                     {
1548:FreeRTOS/Src/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1549:FreeRTOS/Src/queue.c ****                     }
1550:FreeRTOS/Src/queue.c ****                     else
1551:FreeRTOS/Src/queue.c ****                     {
1552:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1553:FreeRTOS/Src/queue.c ****                     }
1554:FreeRTOS/Src/queue.c ****                 }
1555:FreeRTOS/Src/queue.c ****                 else
1556:FreeRTOS/Src/queue.c ****                 {
1557:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1558:FreeRTOS/Src/queue.c ****                 }
1559:FreeRTOS/Src/queue.c **** 
1560:FreeRTOS/Src/queue.c ****                 taskEXIT_CRITICAL();
1561:FreeRTOS/Src/queue.c **** 
1562:FreeRTOS/Src/queue.c ****                 traceRETURN_xQueueReceive( pdPASS );
1563:FreeRTOS/Src/queue.c **** 
1564:FreeRTOS/Src/queue.c ****                 return pdPASS;
1565:FreeRTOS/Src/queue.c ****             }
1566:FreeRTOS/Src/queue.c ****             else
1567:FreeRTOS/Src/queue.c ****             {
1568:FreeRTOS/Src/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1569:FreeRTOS/Src/queue.c ****                 {
1570:FreeRTOS/Src/queue.c ****                     /* The queue was empty and no block time is specified (or
1571:FreeRTOS/Src/queue.c ****                      * the block time has expired) so leave now. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 29


1572:FreeRTOS/Src/queue.c ****                     taskEXIT_CRITICAL();
1573:FreeRTOS/Src/queue.c **** 
1574:FreeRTOS/Src/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1575:FreeRTOS/Src/queue.c ****                     traceRETURN_xQueueReceive( errQUEUE_EMPTY );
1576:FreeRTOS/Src/queue.c **** 
1577:FreeRTOS/Src/queue.c ****                     return errQUEUE_EMPTY;
1578:FreeRTOS/Src/queue.c ****                 }
1579:FreeRTOS/Src/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1580:FreeRTOS/Src/queue.c ****                 {
1581:FreeRTOS/Src/queue.c ****                     /* The queue was empty and a block time was specified so
1582:FreeRTOS/Src/queue.c ****                      * configure the timeout structure. */
1583:FreeRTOS/Src/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1584:FreeRTOS/Src/queue.c ****                     xEntryTimeSet = pdTRUE;
1585:FreeRTOS/Src/queue.c ****                 }
1586:FreeRTOS/Src/queue.c ****                 else
1587:FreeRTOS/Src/queue.c ****                 {
1588:FreeRTOS/Src/queue.c ****                     /* Entry time was already set. */
1589:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1590:FreeRTOS/Src/queue.c ****                 }
1591:FreeRTOS/Src/queue.c ****             }
1592:FreeRTOS/Src/queue.c ****         }
1593:FreeRTOS/Src/queue.c ****         taskEXIT_CRITICAL();
1594:FreeRTOS/Src/queue.c **** 
1595:FreeRTOS/Src/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1596:FreeRTOS/Src/queue.c ****          * now the critical section has been exited. */
1597:FreeRTOS/Src/queue.c **** 
1598:FreeRTOS/Src/queue.c ****         vTaskSuspendAll();
1599:FreeRTOS/Src/queue.c ****         prvLockQueue( pxQueue );
1600:FreeRTOS/Src/queue.c **** 
1601:FreeRTOS/Src/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1602:FreeRTOS/Src/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1603:FreeRTOS/Src/queue.c ****         {
1604:FreeRTOS/Src/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1605:FreeRTOS/Src/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1606:FreeRTOS/Src/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1607:FreeRTOS/Src/queue.c ****             {
1608:FreeRTOS/Src/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1609:FreeRTOS/Src/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1610:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
1611:FreeRTOS/Src/queue.c **** 
1612:FreeRTOS/Src/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1613:FreeRTOS/Src/queue.c ****                 {
1614:FreeRTOS/Src/queue.c ****                     taskYIELD_WITHIN_API();
1615:FreeRTOS/Src/queue.c ****                 }
1616:FreeRTOS/Src/queue.c ****                 else
1617:FreeRTOS/Src/queue.c ****                 {
1618:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1619:FreeRTOS/Src/queue.c ****                 }
1620:FreeRTOS/Src/queue.c ****             }
1621:FreeRTOS/Src/queue.c ****             else
1622:FreeRTOS/Src/queue.c ****             {
1623:FreeRTOS/Src/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1624:FreeRTOS/Src/queue.c ****                  * data. */
1625:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
1626:FreeRTOS/Src/queue.c ****                 ( void ) xTaskResumeAll();
1627:FreeRTOS/Src/queue.c ****             }
1628:FreeRTOS/Src/queue.c ****         }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 30


1629:FreeRTOS/Src/queue.c ****         else
1630:FreeRTOS/Src/queue.c ****         {
1631:FreeRTOS/Src/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1632:FreeRTOS/Src/queue.c ****              * back and attempt to read the data. */
1633:FreeRTOS/Src/queue.c ****             prvUnlockQueue( pxQueue );
1634:FreeRTOS/Src/queue.c ****             ( void ) xTaskResumeAll();
1635:FreeRTOS/Src/queue.c **** 
1636:FreeRTOS/Src/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1637:FreeRTOS/Src/queue.c ****             {
1638:FreeRTOS/Src/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1639:FreeRTOS/Src/queue.c ****                 traceRETURN_xQueueReceive( errQUEUE_EMPTY );
1640:FreeRTOS/Src/queue.c **** 
1641:FreeRTOS/Src/queue.c ****                 return errQUEUE_EMPTY;
1642:FreeRTOS/Src/queue.c ****             }
1643:FreeRTOS/Src/queue.c ****             else
1644:FreeRTOS/Src/queue.c ****             {
1645:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1646:FreeRTOS/Src/queue.c ****             }
1647:FreeRTOS/Src/queue.c ****         }
1648:FreeRTOS/Src/queue.c ****     }
1649:FreeRTOS/Src/queue.c **** }
1650:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1651:FreeRTOS/Src/queue.c **** 
1652:FreeRTOS/Src/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1653:FreeRTOS/Src/queue.c ****                                 TickType_t xTicksToWait )
1654:FreeRTOS/Src/queue.c **** {
1655:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1656:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
1657:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
1658:FreeRTOS/Src/queue.c **** 
1659:FreeRTOS/Src/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1660:FreeRTOS/Src/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
1661:FreeRTOS/Src/queue.c ****     #endif
1662:FreeRTOS/Src/queue.c **** 
1663:FreeRTOS/Src/queue.c ****     traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );
1664:FreeRTOS/Src/queue.c **** 
1665:FreeRTOS/Src/queue.c ****     /* Check the queue pointer is not NULL. */
1666:FreeRTOS/Src/queue.c ****     configASSERT( ( pxQueue ) );
1667:FreeRTOS/Src/queue.c **** 
1668:FreeRTOS/Src/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1669:FreeRTOS/Src/queue.c ****      * 0. */
1670:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1671:FreeRTOS/Src/queue.c **** 
1672:FreeRTOS/Src/queue.c ****     /* Cannot block if the scheduler is suspended. */
1673:FreeRTOS/Src/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1674:FreeRTOS/Src/queue.c ****     {
1675:FreeRTOS/Src/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1676:FreeRTOS/Src/queue.c ****     }
1677:FreeRTOS/Src/queue.c ****     #endif
1678:FreeRTOS/Src/queue.c **** 
1679:FreeRTOS/Src/queue.c ****     for( ; ; )
1680:FreeRTOS/Src/queue.c ****     {
1681:FreeRTOS/Src/queue.c ****         taskENTER_CRITICAL();
1682:FreeRTOS/Src/queue.c ****         {
1683:FreeRTOS/Src/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1684:FreeRTOS/Src/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1685:FreeRTOS/Src/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 31


1686:FreeRTOS/Src/queue.c **** 
1687:FreeRTOS/Src/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1688:FreeRTOS/Src/queue.c ****              * must be the highest priority task wanting to access the queue. */
1689:FreeRTOS/Src/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1690:FreeRTOS/Src/queue.c ****             {
1691:FreeRTOS/Src/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1692:FreeRTOS/Src/queue.c **** 
1693:FreeRTOS/Src/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1694:FreeRTOS/Src/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1695:FreeRTOS/Src/queue.c ****                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1
1696:FreeRTOS/Src/queue.c **** 
1697:FreeRTOS/Src/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1698:FreeRTOS/Src/queue.c ****                 {
1699:FreeRTOS/Src/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1700:FreeRTOS/Src/queue.c ****                     {
1701:FreeRTOS/Src/queue.c ****                         /* Record the information required to implement
1702:FreeRTOS/Src/queue.c ****                          * priority inheritance should it become necessary. */
1703:FreeRTOS/Src/queue.c ****                         pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1704:FreeRTOS/Src/queue.c ****                     }
1705:FreeRTOS/Src/queue.c ****                     else
1706:FreeRTOS/Src/queue.c ****                     {
1707:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1708:FreeRTOS/Src/queue.c ****                     }
1709:FreeRTOS/Src/queue.c ****                 }
1710:FreeRTOS/Src/queue.c ****                 #endif /* configUSE_MUTEXES */
1711:FreeRTOS/Src/queue.c **** 
1712:FreeRTOS/Src/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1713:FreeRTOS/Src/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1714:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1715:FreeRTOS/Src/queue.c ****                 {
1716:FreeRTOS/Src/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1717:FreeRTOS/Src/queue.c ****                     {
1718:FreeRTOS/Src/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1719:FreeRTOS/Src/queue.c ****                     }
1720:FreeRTOS/Src/queue.c ****                     else
1721:FreeRTOS/Src/queue.c ****                     {
1722:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1723:FreeRTOS/Src/queue.c ****                     }
1724:FreeRTOS/Src/queue.c ****                 }
1725:FreeRTOS/Src/queue.c ****                 else
1726:FreeRTOS/Src/queue.c ****                 {
1727:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1728:FreeRTOS/Src/queue.c ****                 }
1729:FreeRTOS/Src/queue.c **** 
1730:FreeRTOS/Src/queue.c ****                 taskEXIT_CRITICAL();
1731:FreeRTOS/Src/queue.c **** 
1732:FreeRTOS/Src/queue.c ****                 traceRETURN_xQueueSemaphoreTake( pdPASS );
1733:FreeRTOS/Src/queue.c **** 
1734:FreeRTOS/Src/queue.c ****                 return pdPASS;
1735:FreeRTOS/Src/queue.c ****             }
1736:FreeRTOS/Src/queue.c ****             else
1737:FreeRTOS/Src/queue.c ****             {
1738:FreeRTOS/Src/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1739:FreeRTOS/Src/queue.c ****                 {
1740:FreeRTOS/Src/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1741:FreeRTOS/Src/queue.c ****                      * (or the block time has expired) so exit now. */
1742:FreeRTOS/Src/queue.c ****                     taskEXIT_CRITICAL();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 32


1743:FreeRTOS/Src/queue.c **** 
1744:FreeRTOS/Src/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1745:FreeRTOS/Src/queue.c ****                     traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
1746:FreeRTOS/Src/queue.c **** 
1747:FreeRTOS/Src/queue.c ****                     return errQUEUE_EMPTY;
1748:FreeRTOS/Src/queue.c ****                 }
1749:FreeRTOS/Src/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1750:FreeRTOS/Src/queue.c ****                 {
1751:FreeRTOS/Src/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1752:FreeRTOS/Src/queue.c ****                      * so configure the timeout structure ready to block. */
1753:FreeRTOS/Src/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1754:FreeRTOS/Src/queue.c ****                     xEntryTimeSet = pdTRUE;
1755:FreeRTOS/Src/queue.c ****                 }
1756:FreeRTOS/Src/queue.c ****                 else
1757:FreeRTOS/Src/queue.c ****                 {
1758:FreeRTOS/Src/queue.c ****                     /* Entry time was already set. */
1759:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1760:FreeRTOS/Src/queue.c ****                 }
1761:FreeRTOS/Src/queue.c ****             }
1762:FreeRTOS/Src/queue.c ****         }
1763:FreeRTOS/Src/queue.c ****         taskEXIT_CRITICAL();
1764:FreeRTOS/Src/queue.c **** 
1765:FreeRTOS/Src/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1766:FreeRTOS/Src/queue.c ****          * now the critical section has been exited. */
1767:FreeRTOS/Src/queue.c **** 
1768:FreeRTOS/Src/queue.c ****         vTaskSuspendAll();
1769:FreeRTOS/Src/queue.c ****         prvLockQueue( pxQueue );
1770:FreeRTOS/Src/queue.c **** 
1771:FreeRTOS/Src/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1772:FreeRTOS/Src/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1773:FreeRTOS/Src/queue.c ****         {
1774:FreeRTOS/Src/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1775:FreeRTOS/Src/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1776:FreeRTOS/Src/queue.c ****              * become available.  As semaphores are implemented with queues the
1777:FreeRTOS/Src/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1778:FreeRTOS/Src/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1779:FreeRTOS/Src/queue.c ****             {
1780:FreeRTOS/Src/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1781:FreeRTOS/Src/queue.c **** 
1782:FreeRTOS/Src/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1783:FreeRTOS/Src/queue.c ****                 {
1784:FreeRTOS/Src/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1785:FreeRTOS/Src/queue.c ****                     {
1786:FreeRTOS/Src/queue.c ****                         taskENTER_CRITICAL();
1787:FreeRTOS/Src/queue.c ****                         {
1788:FreeRTOS/Src/queue.c ****                             xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMut
1789:FreeRTOS/Src/queue.c ****                         }
1790:FreeRTOS/Src/queue.c ****                         taskEXIT_CRITICAL();
1791:FreeRTOS/Src/queue.c ****                     }
1792:FreeRTOS/Src/queue.c ****                     else
1793:FreeRTOS/Src/queue.c ****                     {
1794:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1795:FreeRTOS/Src/queue.c ****                     }
1796:FreeRTOS/Src/queue.c ****                 }
1797:FreeRTOS/Src/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1798:FreeRTOS/Src/queue.c **** 
1799:FreeRTOS/Src/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 33


1800:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
1801:FreeRTOS/Src/queue.c **** 
1802:FreeRTOS/Src/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1803:FreeRTOS/Src/queue.c ****                 {
1804:FreeRTOS/Src/queue.c ****                     taskYIELD_WITHIN_API();
1805:FreeRTOS/Src/queue.c ****                 }
1806:FreeRTOS/Src/queue.c ****                 else
1807:FreeRTOS/Src/queue.c ****                 {
1808:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1809:FreeRTOS/Src/queue.c ****                 }
1810:FreeRTOS/Src/queue.c ****             }
1811:FreeRTOS/Src/queue.c ****             else
1812:FreeRTOS/Src/queue.c ****             {
1813:FreeRTOS/Src/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1814:FreeRTOS/Src/queue.c ****                  * attempt to take the semaphore again. */
1815:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
1816:FreeRTOS/Src/queue.c ****                 ( void ) xTaskResumeAll();
1817:FreeRTOS/Src/queue.c ****             }
1818:FreeRTOS/Src/queue.c ****         }
1819:FreeRTOS/Src/queue.c ****         else
1820:FreeRTOS/Src/queue.c ****         {
1821:FreeRTOS/Src/queue.c ****             /* Timed out. */
1822:FreeRTOS/Src/queue.c ****             prvUnlockQueue( pxQueue );
1823:FreeRTOS/Src/queue.c ****             ( void ) xTaskResumeAll();
1824:FreeRTOS/Src/queue.c **** 
1825:FreeRTOS/Src/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1826:FreeRTOS/Src/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1827:FreeRTOS/Src/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1828:FreeRTOS/Src/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1829:FreeRTOS/Src/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1830:FreeRTOS/Src/queue.c ****             {
1831:FreeRTOS/Src/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1832:FreeRTOS/Src/queue.c ****                 {
1833:FreeRTOS/Src/queue.c ****                     /* xInheritanceOccurred could only have be set if
1834:FreeRTOS/Src/queue.c ****                      * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1835:FreeRTOS/Src/queue.c ****                      * test the mutex type again to check it is actually a mutex. */
1836:FreeRTOS/Src/queue.c ****                     if( xInheritanceOccurred != pdFALSE )
1837:FreeRTOS/Src/queue.c ****                     {
1838:FreeRTOS/Src/queue.c ****                         taskENTER_CRITICAL();
1839:FreeRTOS/Src/queue.c ****                         {
1840:FreeRTOS/Src/queue.c ****                             UBaseType_t uxHighestWaitingPriority;
1841:FreeRTOS/Src/queue.c **** 
1842:FreeRTOS/Src/queue.c ****                             /* This task blocking on the mutex caused another
1843:FreeRTOS/Src/queue.c ****                              * task to inherit this task's priority.  Now this task
1844:FreeRTOS/Src/queue.c ****                              * has timed out the priority should be disinherited
1845:FreeRTOS/Src/queue.c ****                              * again, but only as low as the next highest priority
1846:FreeRTOS/Src/queue.c ****                              * task that is waiting for the same mutex. */
1847:FreeRTOS/Src/queue.c ****                             uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueu
1848:FreeRTOS/Src/queue.c **** 
1849:FreeRTOS/Src/queue.c ****                             /* vTaskPriorityDisinheritAfterTimeout uses the uxHighestWaitingPriorit
1850:FreeRTOS/Src/queue.c ****                              * parameter to index pxReadyTasksLists when adding the task holding
1851:FreeRTOS/Src/queue.c ****                              * mutex to the ready list for its new priority. Coverity thinks that
1852:FreeRTOS/Src/queue.c ****                              * it can result in out-of-bounds access which is not true because
1853:FreeRTOS/Src/queue.c ****                              * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAft
1854:FreeRTOS/Src/queue.c ****                              * is capped at ( configMAX_PRIORITIES - 1 ). */
1855:FreeRTOS/Src/queue.c ****                             /* coverity[overrun] */
1856:FreeRTOS/Src/queue.c ****                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 34


1857:FreeRTOS/Src/queue.c ****                         }
1858:FreeRTOS/Src/queue.c ****                         taskEXIT_CRITICAL();
1859:FreeRTOS/Src/queue.c ****                     }
1860:FreeRTOS/Src/queue.c ****                 }
1861:FreeRTOS/Src/queue.c ****                 #endif /* configUSE_MUTEXES */
1862:FreeRTOS/Src/queue.c **** 
1863:FreeRTOS/Src/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1864:FreeRTOS/Src/queue.c ****                 traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
1865:FreeRTOS/Src/queue.c **** 
1866:FreeRTOS/Src/queue.c ****                 return errQUEUE_EMPTY;
1867:FreeRTOS/Src/queue.c ****             }
1868:FreeRTOS/Src/queue.c ****             else
1869:FreeRTOS/Src/queue.c ****             {
1870:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1871:FreeRTOS/Src/queue.c ****             }
1872:FreeRTOS/Src/queue.c ****         }
1873:FreeRTOS/Src/queue.c ****     }
1874:FreeRTOS/Src/queue.c **** }
1875:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1876:FreeRTOS/Src/queue.c **** 
1877:FreeRTOS/Src/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1878:FreeRTOS/Src/queue.c ****                        void * const pvBuffer,
1879:FreeRTOS/Src/queue.c ****                        TickType_t xTicksToWait )
1880:FreeRTOS/Src/queue.c **** {
1881:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1882:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
1883:FreeRTOS/Src/queue.c ****     int8_t * pcOriginalReadPosition;
1884:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
1885:FreeRTOS/Src/queue.c **** 
1886:FreeRTOS/Src/queue.c ****     traceENTER_xQueuePeek( xQueue, pvBuffer, xTicksToWait );
1887:FreeRTOS/Src/queue.c **** 
1888:FreeRTOS/Src/queue.c ****     /* Check the pointer is not NULL. */
1889:FreeRTOS/Src/queue.c ****     configASSERT( ( pxQueue ) );
1890:FreeRTOS/Src/queue.c **** 
1891:FreeRTOS/Src/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1892:FreeRTOS/Src/queue.c ****      * is zero (so no data is copied into the buffer. */
1893:FreeRTOS/Src/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1894:FreeRTOS/Src/queue.c **** 
1895:FreeRTOS/Src/queue.c ****     /* Cannot block if the scheduler is suspended. */
1896:FreeRTOS/Src/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1897:FreeRTOS/Src/queue.c ****     {
1898:FreeRTOS/Src/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1899:FreeRTOS/Src/queue.c ****     }
1900:FreeRTOS/Src/queue.c ****     #endif
1901:FreeRTOS/Src/queue.c **** 
1902:FreeRTOS/Src/queue.c ****     for( ; ; )
1903:FreeRTOS/Src/queue.c ****     {
1904:FreeRTOS/Src/queue.c ****         taskENTER_CRITICAL();
1905:FreeRTOS/Src/queue.c ****         {
1906:FreeRTOS/Src/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1907:FreeRTOS/Src/queue.c **** 
1908:FreeRTOS/Src/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1909:FreeRTOS/Src/queue.c ****              * must be the highest priority task wanting to access the queue. */
1910:FreeRTOS/Src/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1911:FreeRTOS/Src/queue.c ****             {
1912:FreeRTOS/Src/queue.c ****                 /* Remember the read position so it can be reset after the data
1913:FreeRTOS/Src/queue.c ****                  * is read from the queue as this function is only peeking the
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 35


1914:FreeRTOS/Src/queue.c ****                  * data, not removing it. */
1915:FreeRTOS/Src/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1916:FreeRTOS/Src/queue.c **** 
1917:FreeRTOS/Src/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1918:FreeRTOS/Src/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1919:FreeRTOS/Src/queue.c **** 
1920:FreeRTOS/Src/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1921:FreeRTOS/Src/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1922:FreeRTOS/Src/queue.c **** 
1923:FreeRTOS/Src/queue.c ****                 /* The data is being left in the queue, so see if there are
1924:FreeRTOS/Src/queue.c ****                  * any other tasks waiting for the data. */
1925:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1926:FreeRTOS/Src/queue.c ****                 {
1927:FreeRTOS/Src/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
1928:FreeRTOS/Src/queue.c ****                     {
1929:FreeRTOS/Src/queue.c ****                         /* The task waiting has a higher priority than this task. */
1930:FreeRTOS/Src/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1931:FreeRTOS/Src/queue.c ****                     }
1932:FreeRTOS/Src/queue.c ****                     else
1933:FreeRTOS/Src/queue.c ****                     {
1934:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1935:FreeRTOS/Src/queue.c ****                     }
1936:FreeRTOS/Src/queue.c ****                 }
1937:FreeRTOS/Src/queue.c ****                 else
1938:FreeRTOS/Src/queue.c ****                 {
1939:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1940:FreeRTOS/Src/queue.c ****                 }
1941:FreeRTOS/Src/queue.c **** 
1942:FreeRTOS/Src/queue.c ****                 taskEXIT_CRITICAL();
1943:FreeRTOS/Src/queue.c **** 
1944:FreeRTOS/Src/queue.c ****                 traceRETURN_xQueuePeek( pdPASS );
1945:FreeRTOS/Src/queue.c **** 
1946:FreeRTOS/Src/queue.c ****                 return pdPASS;
1947:FreeRTOS/Src/queue.c ****             }
1948:FreeRTOS/Src/queue.c ****             else
1949:FreeRTOS/Src/queue.c ****             {
1950:FreeRTOS/Src/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1951:FreeRTOS/Src/queue.c ****                 {
1952:FreeRTOS/Src/queue.c ****                     /* The queue was empty and no block time is specified (or
1953:FreeRTOS/Src/queue.c ****                      * the block time has expired) so leave now. */
1954:FreeRTOS/Src/queue.c ****                     taskEXIT_CRITICAL();
1955:FreeRTOS/Src/queue.c **** 
1956:FreeRTOS/Src/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1957:FreeRTOS/Src/queue.c ****                     traceRETURN_xQueuePeek( errQUEUE_EMPTY );
1958:FreeRTOS/Src/queue.c **** 
1959:FreeRTOS/Src/queue.c ****                     return errQUEUE_EMPTY;
1960:FreeRTOS/Src/queue.c ****                 }
1961:FreeRTOS/Src/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1962:FreeRTOS/Src/queue.c ****                 {
1963:FreeRTOS/Src/queue.c ****                     /* The queue was empty and a block time was specified so
1964:FreeRTOS/Src/queue.c ****                      * configure the timeout structure ready to enter the blocked
1965:FreeRTOS/Src/queue.c ****                      * state. */
1966:FreeRTOS/Src/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1967:FreeRTOS/Src/queue.c ****                     xEntryTimeSet = pdTRUE;
1968:FreeRTOS/Src/queue.c ****                 }
1969:FreeRTOS/Src/queue.c ****                 else
1970:FreeRTOS/Src/queue.c ****                 {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 36


1971:FreeRTOS/Src/queue.c ****                     /* Entry time was already set. */
1972:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1973:FreeRTOS/Src/queue.c ****                 }
1974:FreeRTOS/Src/queue.c ****             }
1975:FreeRTOS/Src/queue.c ****         }
1976:FreeRTOS/Src/queue.c ****         taskEXIT_CRITICAL();
1977:FreeRTOS/Src/queue.c **** 
1978:FreeRTOS/Src/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1979:FreeRTOS/Src/queue.c ****          * now that the critical section has been exited. */
1980:FreeRTOS/Src/queue.c **** 
1981:FreeRTOS/Src/queue.c ****         vTaskSuspendAll();
1982:FreeRTOS/Src/queue.c ****         prvLockQueue( pxQueue );
1983:FreeRTOS/Src/queue.c **** 
1984:FreeRTOS/Src/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1985:FreeRTOS/Src/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1986:FreeRTOS/Src/queue.c ****         {
1987:FreeRTOS/Src/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1988:FreeRTOS/Src/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1989:FreeRTOS/Src/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1990:FreeRTOS/Src/queue.c ****             {
1991:FreeRTOS/Src/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1992:FreeRTOS/Src/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1993:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
1994:FreeRTOS/Src/queue.c **** 
1995:FreeRTOS/Src/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1996:FreeRTOS/Src/queue.c ****                 {
1997:FreeRTOS/Src/queue.c ****                     taskYIELD_WITHIN_API();
1998:FreeRTOS/Src/queue.c ****                 }
1999:FreeRTOS/Src/queue.c ****                 else
2000:FreeRTOS/Src/queue.c ****                 {
2001:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2002:FreeRTOS/Src/queue.c ****                 }
2003:FreeRTOS/Src/queue.c ****             }
2004:FreeRTOS/Src/queue.c ****             else
2005:FreeRTOS/Src/queue.c ****             {
2006:FreeRTOS/Src/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
2007:FreeRTOS/Src/queue.c ****                  * state, instead return to try and obtain the data. */
2008:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
2009:FreeRTOS/Src/queue.c ****                 ( void ) xTaskResumeAll();
2010:FreeRTOS/Src/queue.c ****             }
2011:FreeRTOS/Src/queue.c ****         }
2012:FreeRTOS/Src/queue.c ****         else
2013:FreeRTOS/Src/queue.c ****         {
2014:FreeRTOS/Src/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
2015:FreeRTOS/Src/queue.c ****              * exit, otherwise go back and try to read the data again. */
2016:FreeRTOS/Src/queue.c ****             prvUnlockQueue( pxQueue );
2017:FreeRTOS/Src/queue.c ****             ( void ) xTaskResumeAll();
2018:FreeRTOS/Src/queue.c **** 
2019:FreeRTOS/Src/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
2020:FreeRTOS/Src/queue.c ****             {
2021:FreeRTOS/Src/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
2022:FreeRTOS/Src/queue.c ****                 traceRETURN_xQueuePeek( errQUEUE_EMPTY );
2023:FreeRTOS/Src/queue.c **** 
2024:FreeRTOS/Src/queue.c ****                 return errQUEUE_EMPTY;
2025:FreeRTOS/Src/queue.c ****             }
2026:FreeRTOS/Src/queue.c ****             else
2027:FreeRTOS/Src/queue.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 37


2028:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2029:FreeRTOS/Src/queue.c ****             }
2030:FreeRTOS/Src/queue.c ****         }
2031:FreeRTOS/Src/queue.c ****     }
2032:FreeRTOS/Src/queue.c **** }
2033:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2034:FreeRTOS/Src/queue.c **** 
2035:FreeRTOS/Src/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
2036:FreeRTOS/Src/queue.c ****                                  void * const pvBuffer,
2037:FreeRTOS/Src/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
2038:FreeRTOS/Src/queue.c **** {
2039:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
2040:FreeRTOS/Src/queue.c ****     UBaseType_t uxSavedInterruptStatus;
2041:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
2042:FreeRTOS/Src/queue.c **** 
2043:FreeRTOS/Src/queue.c ****     traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );
2044:FreeRTOS/Src/queue.c **** 
2045:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
2046:FreeRTOS/Src/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2047:FreeRTOS/Src/queue.c **** 
2048:FreeRTOS/Src/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2049:FreeRTOS/Src/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2050:FreeRTOS/Src/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
2051:FreeRTOS/Src/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2052:FreeRTOS/Src/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2053:FreeRTOS/Src/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2054:FreeRTOS/Src/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2055:FreeRTOS/Src/queue.c ****      * assigned a priority above the configured maximum system call priority.
2056:FreeRTOS/Src/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2057:FreeRTOS/Src/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
2058:FreeRTOS/Src/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
2059:FreeRTOS/Src/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2060:FreeRTOS/Src/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
2061:FreeRTOS/Src/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2062:FreeRTOS/Src/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2063:FreeRTOS/Src/queue.c **** 
2064:FreeRTOS/Src/queue.c ****     /* MISRA Ref 4.7.1 [Return value shall be checked] */
2065:FreeRTOS/Src/queue.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
2066:FreeRTOS/Src/queue.c ****     /* coverity[misra_c_2012_directive_4_7_violation] */
2067:FreeRTOS/Src/queue.c ****     uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
2068:FreeRTOS/Src/queue.c ****     {
2069:FreeRTOS/Src/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2070:FreeRTOS/Src/queue.c **** 
2071:FreeRTOS/Src/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
2072:FreeRTOS/Src/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2073:FreeRTOS/Src/queue.c ****         {
2074:FreeRTOS/Src/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
2075:FreeRTOS/Src/queue.c **** 
2076:FreeRTOS/Src/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
2077:FreeRTOS/Src/queue.c **** 
2078:FreeRTOS/Src/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
2079:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
2080:FreeRTOS/Src/queue.c **** 
2081:FreeRTOS/Src/queue.c ****             /* If the queue is locked the event list will not be modified.
2082:FreeRTOS/Src/queue.c ****              * Instead update the lock count so the task that unlocks the queue
2083:FreeRTOS/Src/queue.c ****              * will know that an ISR has removed data while the queue was
2084:FreeRTOS/Src/queue.c ****              * locked. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 38


2085:FreeRTOS/Src/queue.c ****             if( cRxLock == queueUNLOCKED )
2086:FreeRTOS/Src/queue.c ****             {
2087:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2088:FreeRTOS/Src/queue.c ****                 {
2089:FreeRTOS/Src/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2090:FreeRTOS/Src/queue.c ****                     {
2091:FreeRTOS/Src/queue.c ****                         /* The task waiting has a higher priority than us so
2092:FreeRTOS/Src/queue.c ****                          * force a context switch. */
2093:FreeRTOS/Src/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
2094:FreeRTOS/Src/queue.c ****                         {
2095:FreeRTOS/Src/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
2096:FreeRTOS/Src/queue.c ****                         }
2097:FreeRTOS/Src/queue.c ****                         else
2098:FreeRTOS/Src/queue.c ****                         {
2099:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2100:FreeRTOS/Src/queue.c ****                         }
2101:FreeRTOS/Src/queue.c ****                     }
2102:FreeRTOS/Src/queue.c ****                     else
2103:FreeRTOS/Src/queue.c ****                     {
2104:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2105:FreeRTOS/Src/queue.c ****                     }
2106:FreeRTOS/Src/queue.c ****                 }
2107:FreeRTOS/Src/queue.c ****                 else
2108:FreeRTOS/Src/queue.c ****                 {
2109:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2110:FreeRTOS/Src/queue.c ****                 }
2111:FreeRTOS/Src/queue.c ****             }
2112:FreeRTOS/Src/queue.c ****             else
2113:FreeRTOS/Src/queue.c ****             {
2114:FreeRTOS/Src/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
2115:FreeRTOS/Src/queue.c ****                  * knows that data was removed while it was locked. */
2116:FreeRTOS/Src/queue.c ****                 prvIncrementQueueRxLock( pxQueue, cRxLock );
2117:FreeRTOS/Src/queue.c ****             }
2118:FreeRTOS/Src/queue.c **** 
2119:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
2120:FreeRTOS/Src/queue.c ****         }
2121:FreeRTOS/Src/queue.c ****         else
2122:FreeRTOS/Src/queue.c ****         {
2123:FreeRTOS/Src/queue.c ****             xReturn = pdFAIL;
2124:FreeRTOS/Src/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
2125:FreeRTOS/Src/queue.c ****         }
2126:FreeRTOS/Src/queue.c ****     }
2127:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
2128:FreeRTOS/Src/queue.c **** 
2129:FreeRTOS/Src/queue.c ****     traceRETURN_xQueueReceiveFromISR( xReturn );
2130:FreeRTOS/Src/queue.c **** 
2131:FreeRTOS/Src/queue.c ****     return xReturn;
2132:FreeRTOS/Src/queue.c **** }
2133:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2134:FreeRTOS/Src/queue.c **** 
2135:FreeRTOS/Src/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
2136:FreeRTOS/Src/queue.c ****                               void * const pvBuffer )
2137:FreeRTOS/Src/queue.c **** {
2138:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
2139:FreeRTOS/Src/queue.c ****     UBaseType_t uxSavedInterruptStatus;
2140:FreeRTOS/Src/queue.c ****     int8_t * pcOriginalReadPosition;
2141:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 39


2142:FreeRTOS/Src/queue.c **** 
2143:FreeRTOS/Src/queue.c ****     traceENTER_xQueuePeekFromISR( xQueue, pvBuffer );
2144:FreeRTOS/Src/queue.c **** 
2145:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
2146:FreeRTOS/Src/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2147:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
2148:FreeRTOS/Src/queue.c **** 
2149:FreeRTOS/Src/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2150:FreeRTOS/Src/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2151:FreeRTOS/Src/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
2152:FreeRTOS/Src/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2153:FreeRTOS/Src/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2154:FreeRTOS/Src/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2155:FreeRTOS/Src/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2156:FreeRTOS/Src/queue.c ****      * assigned a priority above the configured maximum system call priority.
2157:FreeRTOS/Src/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2158:FreeRTOS/Src/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
2159:FreeRTOS/Src/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
2160:FreeRTOS/Src/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2161:FreeRTOS/Src/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
2162:FreeRTOS/Src/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2163:FreeRTOS/Src/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2164:FreeRTOS/Src/queue.c **** 
2165:FreeRTOS/Src/queue.c ****     /* MISRA Ref 4.7.1 [Return value shall be checked] */
2166:FreeRTOS/Src/queue.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
2167:FreeRTOS/Src/queue.c ****     /* coverity[misra_c_2012_directive_4_7_violation] */
2168:FreeRTOS/Src/queue.c ****     uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
2169:FreeRTOS/Src/queue.c ****     {
2170:FreeRTOS/Src/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
2171:FreeRTOS/Src/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2172:FreeRTOS/Src/queue.c ****         {
2173:FreeRTOS/Src/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
2174:FreeRTOS/Src/queue.c **** 
2175:FreeRTOS/Src/queue.c ****             /* Remember the read position so it can be reset as nothing is
2176:FreeRTOS/Src/queue.c ****              * actually being removed from the queue. */
2177:FreeRTOS/Src/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
2178:FreeRTOS/Src/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
2179:FreeRTOS/Src/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
2180:FreeRTOS/Src/queue.c **** 
2181:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
2182:FreeRTOS/Src/queue.c ****         }
2183:FreeRTOS/Src/queue.c ****         else
2184:FreeRTOS/Src/queue.c ****         {
2185:FreeRTOS/Src/queue.c ****             xReturn = pdFAIL;
2186:FreeRTOS/Src/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
2187:FreeRTOS/Src/queue.c ****         }
2188:FreeRTOS/Src/queue.c ****     }
2189:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
2190:FreeRTOS/Src/queue.c **** 
2191:FreeRTOS/Src/queue.c ****     traceRETURN_xQueuePeekFromISR( xReturn );
2192:FreeRTOS/Src/queue.c **** 
2193:FreeRTOS/Src/queue.c ****     return xReturn;
2194:FreeRTOS/Src/queue.c **** }
2195:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2196:FreeRTOS/Src/queue.c **** 
2197:FreeRTOS/Src/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
2198:FreeRTOS/Src/queue.c **** {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 40


2199:FreeRTOS/Src/queue.c ****     UBaseType_t uxReturn;
2200:FreeRTOS/Src/queue.c **** 
2201:FreeRTOS/Src/queue.c ****     traceENTER_uxQueueMessagesWaiting( xQueue );
2202:FreeRTOS/Src/queue.c **** 
2203:FreeRTOS/Src/queue.c ****     configASSERT( xQueue );
2204:FreeRTOS/Src/queue.c **** 
2205:FreeRTOS/Src/queue.c ****     taskENTER_CRITICAL();
2206:FreeRTOS/Src/queue.c ****     {
2207:FreeRTOS/Src/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
2208:FreeRTOS/Src/queue.c ****     }
2209:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL();
2210:FreeRTOS/Src/queue.c **** 
2211:FreeRTOS/Src/queue.c ****     traceRETURN_uxQueueMessagesWaiting( uxReturn );
2212:FreeRTOS/Src/queue.c **** 
2213:FreeRTOS/Src/queue.c ****     return uxReturn;
2214:FreeRTOS/Src/queue.c **** }
2215:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2216:FreeRTOS/Src/queue.c **** 
2217:FreeRTOS/Src/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
2218:FreeRTOS/Src/queue.c **** {
2219:FreeRTOS/Src/queue.c ****     UBaseType_t uxReturn;
2220:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
2221:FreeRTOS/Src/queue.c **** 
2222:FreeRTOS/Src/queue.c ****     traceENTER_uxQueueSpacesAvailable( xQueue );
2223:FreeRTOS/Src/queue.c **** 
2224:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
2225:FreeRTOS/Src/queue.c **** 
2226:FreeRTOS/Src/queue.c ****     taskENTER_CRITICAL();
2227:FreeRTOS/Src/queue.c ****     {
2228:FreeRTOS/Src/queue.c ****         uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
2229:FreeRTOS/Src/queue.c ****     }
2230:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL();
2231:FreeRTOS/Src/queue.c **** 
2232:FreeRTOS/Src/queue.c ****     traceRETURN_uxQueueSpacesAvailable( uxReturn );
2233:FreeRTOS/Src/queue.c **** 
2234:FreeRTOS/Src/queue.c ****     return uxReturn;
2235:FreeRTOS/Src/queue.c **** }
2236:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2237:FreeRTOS/Src/queue.c **** 
2238:FreeRTOS/Src/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2239:FreeRTOS/Src/queue.c **** {
2240:FreeRTOS/Src/queue.c ****     UBaseType_t uxReturn;
2241:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
2242:FreeRTOS/Src/queue.c **** 
2243:FreeRTOS/Src/queue.c ****     traceENTER_uxQueueMessagesWaitingFromISR( xQueue );
2244:FreeRTOS/Src/queue.c **** 
2245:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
2246:FreeRTOS/Src/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
2247:FreeRTOS/Src/queue.c **** 
2248:FreeRTOS/Src/queue.c ****     traceRETURN_uxQueueMessagesWaitingFromISR( uxReturn );
2249:FreeRTOS/Src/queue.c **** 
2250:FreeRTOS/Src/queue.c ****     return uxReturn;
2251:FreeRTOS/Src/queue.c **** }
2252:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2253:FreeRTOS/Src/queue.c **** 
2254:FreeRTOS/Src/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2255:FreeRTOS/Src/queue.c **** {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 41


2256:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
2257:FreeRTOS/Src/queue.c **** 
2258:FreeRTOS/Src/queue.c ****     traceENTER_vQueueDelete( xQueue );
2259:FreeRTOS/Src/queue.c **** 
2260:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
2261:FreeRTOS/Src/queue.c ****     traceQUEUE_DELETE( pxQueue );
2262:FreeRTOS/Src/queue.c **** 
2263:FreeRTOS/Src/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2264:FreeRTOS/Src/queue.c ****     {
2265:FreeRTOS/Src/queue.c ****         vQueueUnregisterQueue( pxQueue );
2266:FreeRTOS/Src/queue.c ****     }
2267:FreeRTOS/Src/queue.c ****     #endif
2268:FreeRTOS/Src/queue.c **** 
2269:FreeRTOS/Src/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2270:FreeRTOS/Src/queue.c ****     {
2271:FreeRTOS/Src/queue.c ****         /* The queue can only have been allocated dynamically - free it
2272:FreeRTOS/Src/queue.c ****          * again. */
2273:FreeRTOS/Src/queue.c ****         vPortFree( pxQueue );
2274:FreeRTOS/Src/queue.c ****     }
2275:FreeRTOS/Src/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2276:FreeRTOS/Src/queue.c ****     {
2277:FreeRTOS/Src/queue.c ****         /* The queue could have been allocated statically or dynamically, so
2278:FreeRTOS/Src/queue.c ****          * check before attempting to free the memory. */
2279:FreeRTOS/Src/queue.c ****         if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2280:FreeRTOS/Src/queue.c ****         {
2281:FreeRTOS/Src/queue.c ****             vPortFree( pxQueue );
2282:FreeRTOS/Src/queue.c ****         }
2283:FreeRTOS/Src/queue.c ****         else
2284:FreeRTOS/Src/queue.c ****         {
2285:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
2286:FreeRTOS/Src/queue.c ****         }
2287:FreeRTOS/Src/queue.c ****     }
2288:FreeRTOS/Src/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2289:FreeRTOS/Src/queue.c ****     {
2290:FreeRTOS/Src/queue.c ****         /* The queue must have been statically allocated, so is not going to be
2291:FreeRTOS/Src/queue.c ****          * deleted.  Avoid compiler warnings about the unused parameter. */
2292:FreeRTOS/Src/queue.c ****         ( void ) pxQueue;
2293:FreeRTOS/Src/queue.c ****     }
2294:FreeRTOS/Src/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2295:FreeRTOS/Src/queue.c **** 
2296:FreeRTOS/Src/queue.c ****     traceRETURN_vQueueDelete();
2297:FreeRTOS/Src/queue.c **** }
2298:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2299:FreeRTOS/Src/queue.c **** 
2300:FreeRTOS/Src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2301:FreeRTOS/Src/queue.c **** 
2302:FreeRTOS/Src/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2303:FreeRTOS/Src/queue.c ****     {
2304:FreeRTOS/Src/queue.c ****         traceENTER_uxQueueGetQueueNumber( xQueue );
2305:FreeRTOS/Src/queue.c **** 
2306:FreeRTOS/Src/queue.c ****         traceRETURN_uxQueueGetQueueNumber( ( ( Queue_t * ) xQueue )->uxQueueNumber );
2307:FreeRTOS/Src/queue.c **** 
2308:FreeRTOS/Src/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2309:FreeRTOS/Src/queue.c ****     }
2310:FreeRTOS/Src/queue.c **** 
2311:FreeRTOS/Src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2312:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 42


2313:FreeRTOS/Src/queue.c **** 
2314:FreeRTOS/Src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2315:FreeRTOS/Src/queue.c **** 
2316:FreeRTOS/Src/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2317:FreeRTOS/Src/queue.c ****                                UBaseType_t uxQueueNumber )
2318:FreeRTOS/Src/queue.c ****     {
2319:FreeRTOS/Src/queue.c ****         traceENTER_vQueueSetQueueNumber( xQueue, uxQueueNumber );
2320:FreeRTOS/Src/queue.c **** 
2321:FreeRTOS/Src/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2322:FreeRTOS/Src/queue.c **** 
2323:FreeRTOS/Src/queue.c ****         traceRETURN_vQueueSetQueueNumber();
2324:FreeRTOS/Src/queue.c ****     }
2325:FreeRTOS/Src/queue.c **** 
2326:FreeRTOS/Src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2327:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2328:FreeRTOS/Src/queue.c **** 
2329:FreeRTOS/Src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2330:FreeRTOS/Src/queue.c **** 
2331:FreeRTOS/Src/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2332:FreeRTOS/Src/queue.c ****     {
2333:FreeRTOS/Src/queue.c ****         traceENTER_ucQueueGetQueueType( xQueue );
2334:FreeRTOS/Src/queue.c **** 
2335:FreeRTOS/Src/queue.c ****         traceRETURN_ucQueueGetQueueType( ( ( Queue_t * ) xQueue )->ucQueueType );
2336:FreeRTOS/Src/queue.c **** 
2337:FreeRTOS/Src/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
2338:FreeRTOS/Src/queue.c ****     }
2339:FreeRTOS/Src/queue.c **** 
2340:FreeRTOS/Src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2341:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2342:FreeRTOS/Src/queue.c **** 
2343:FreeRTOS/Src/queue.c **** UBaseType_t uxQueueGetQueueItemSize( QueueHandle_t xQueue ) /* PRIVILEGED_FUNCTION */
2344:FreeRTOS/Src/queue.c **** {
2345:FreeRTOS/Src/queue.c ****     traceENTER_uxQueueGetQueueItemSize( xQueue );
2346:FreeRTOS/Src/queue.c **** 
2347:FreeRTOS/Src/queue.c ****     traceRETURN_uxQueueGetQueueItemSize( ( ( Queue_t * ) xQueue )->uxItemSize );
2348:FreeRTOS/Src/queue.c **** 
2349:FreeRTOS/Src/queue.c ****     return ( ( Queue_t * ) xQueue )->uxItemSize;
2350:FreeRTOS/Src/queue.c **** }
2351:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2352:FreeRTOS/Src/queue.c **** 
2353:FreeRTOS/Src/queue.c **** UBaseType_t uxQueueGetQueueLength( QueueHandle_t xQueue ) /* PRIVILEGED_FUNCTION */
2354:FreeRTOS/Src/queue.c **** {
2355:FreeRTOS/Src/queue.c ****     traceENTER_uxQueueGetQueueLength( xQueue );
2356:FreeRTOS/Src/queue.c **** 
2357:FreeRTOS/Src/queue.c ****     traceRETURN_uxQueueGetQueueLength( ( ( Queue_t * ) xQueue )->uxLength );
2358:FreeRTOS/Src/queue.c **** 
2359:FreeRTOS/Src/queue.c ****     return ( ( Queue_t * ) xQueue )->uxLength;
2360:FreeRTOS/Src/queue.c **** }
2361:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2362:FreeRTOS/Src/queue.c **** 
2363:FreeRTOS/Src/queue.c **** #if ( configUSE_MUTEXES == 1 )
2364:FreeRTOS/Src/queue.c **** 
2365:FreeRTOS/Src/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2366:FreeRTOS/Src/queue.c ****     {
  27              		.loc 1 2366 5 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 43


  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              		.loc 1 2366 5 is_stmt 0 view .LVU1
  33 0000 0346     		mov	r3, r0
2367:FreeRTOS/Src/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
  34              		.loc 1 2367 9 is_stmt 1 view .LVU2
2368:FreeRTOS/Src/queue.c **** 
2369:FreeRTOS/Src/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2370:FreeRTOS/Src/queue.c ****          * priority, but the waiting task times out, then the holder should
2371:FreeRTOS/Src/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2372:FreeRTOS/Src/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2373:FreeRTOS/Src/queue.c ****          * return the priority of the highest priority task that is waiting for the
2374:FreeRTOS/Src/queue.c ****          * mutex. */
2375:FreeRTOS/Src/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  35              		.loc 1 2375 9 view .LVU3
  36              		.loc 1 2375 13 is_stmt 0 view .LVU4
  37 0002 406A     		ldr	r0, [r0, #36]
  38              	.LVL1:
  39              		.loc 1 2375 11 view .LVU5
  40 0004 18B1     		cbz	r0, .L1
2376:FreeRTOS/Src/queue.c ****         {
2377:FreeRTOS/Src/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIE
  41              		.loc 1 2377 13 is_stmt 1 view .LVU6
  42              		.loc 1 2377 120 is_stmt 0 view .LVU7
  43 0006 1B6B     		ldr	r3, [r3, #48]
  44              	.LVL2:
  45              		.loc 1 2377 120 view .LVU8
  46 0008 1868     		ldr	r0, [r3]
  47              		.loc 1 2377 45 view .LVU9
  48 000a C0F10500 		rsb	r0, r0, #5
  49              	.LVL3:
2378:FreeRTOS/Src/queue.c ****         }
2379:FreeRTOS/Src/queue.c ****         else
2380:FreeRTOS/Src/queue.c ****         {
2381:FreeRTOS/Src/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2382:FreeRTOS/Src/queue.c ****         }
2383:FreeRTOS/Src/queue.c **** 
2384:FreeRTOS/Src/queue.c ****         return uxHighestPriorityOfWaitingTasks;
  50              		.loc 1 2384 9 is_stmt 1 view .LVU10
  51              	.L1:
2385:FreeRTOS/Src/queue.c ****     }
  52              		.loc 1 2385 5 is_stmt 0 view .LVU11
  53 000e 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE150:
  57              		.section	.text.prvIsQueueFull,"ax",%progbits
  58              		.align	1
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  63              	prvIsQueueFull:
  64              	.LVL4:
  65              	.LFB156:
2386:FreeRTOS/Src/queue.c **** 
2387:FreeRTOS/Src/queue.c **** #endif /* configUSE_MUTEXES */
2388:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2389:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 44


2390:FreeRTOS/Src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2391:FreeRTOS/Src/queue.c ****                                       const void * pvItemToQueue,
2392:FreeRTOS/Src/queue.c ****                                       const BaseType_t xPosition )
2393:FreeRTOS/Src/queue.c **** {
2394:FreeRTOS/Src/queue.c ****     BaseType_t xReturn = pdFALSE;
2395:FreeRTOS/Src/queue.c ****     UBaseType_t uxMessagesWaiting;
2396:FreeRTOS/Src/queue.c **** 
2397:FreeRTOS/Src/queue.c ****     /* This function is called from a critical section. */
2398:FreeRTOS/Src/queue.c **** 
2399:FreeRTOS/Src/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2400:FreeRTOS/Src/queue.c **** 
2401:FreeRTOS/Src/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2402:FreeRTOS/Src/queue.c ****     {
2403:FreeRTOS/Src/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2404:FreeRTOS/Src/queue.c ****         {
2405:FreeRTOS/Src/queue.c ****             if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2406:FreeRTOS/Src/queue.c ****             {
2407:FreeRTOS/Src/queue.c ****                 /* The mutex is no longer being held. */
2408:FreeRTOS/Src/queue.c ****                 xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2409:FreeRTOS/Src/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
2410:FreeRTOS/Src/queue.c ****             }
2411:FreeRTOS/Src/queue.c ****             else
2412:FreeRTOS/Src/queue.c ****             {
2413:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2414:FreeRTOS/Src/queue.c ****             }
2415:FreeRTOS/Src/queue.c ****         }
2416:FreeRTOS/Src/queue.c ****         #endif /* configUSE_MUTEXES */
2417:FreeRTOS/Src/queue.c ****     }
2418:FreeRTOS/Src/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
2419:FreeRTOS/Src/queue.c ****     {
2420:FreeRTOS/Src/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
2421:FreeRTOS/Src/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;
2422:FreeRTOS/Src/queue.c **** 
2423:FreeRTOS/Src/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
2424:FreeRTOS/Src/queue.c ****         {
2425:FreeRTOS/Src/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
2426:FreeRTOS/Src/queue.c ****         }
2427:FreeRTOS/Src/queue.c ****         else
2428:FreeRTOS/Src/queue.c ****         {
2429:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
2430:FreeRTOS/Src/queue.c ****         }
2431:FreeRTOS/Src/queue.c ****     }
2432:FreeRTOS/Src/queue.c ****     else
2433:FreeRTOS/Src/queue.c ****     {
2434:FreeRTOS/Src/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
2435:FreeRTOS/Src/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2436:FreeRTOS/Src/queue.c **** 
2437:FreeRTOS/Src/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
2438:FreeRTOS/Src/queue.c ****         {
2439:FreeRTOS/Src/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2440:FreeRTOS/Src/queue.c ****         }
2441:FreeRTOS/Src/queue.c ****         else
2442:FreeRTOS/Src/queue.c ****         {
2443:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
2444:FreeRTOS/Src/queue.c ****         }
2445:FreeRTOS/Src/queue.c **** 
2446:FreeRTOS/Src/queue.c ****         if( xPosition == queueOVERWRITE )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 45


2447:FreeRTOS/Src/queue.c ****         {
2448:FreeRTOS/Src/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2449:FreeRTOS/Src/queue.c ****             {
2450:FreeRTOS/Src/queue.c ****                 /* An item is not being added but overwritten, so subtract
2451:FreeRTOS/Src/queue.c ****                  * one from the recorded number of items in the queue so when
2452:FreeRTOS/Src/queue.c ****                  * one is added again below the number of recorded items remains
2453:FreeRTOS/Src/queue.c ****                  * correct. */
2454:FreeRTOS/Src/queue.c ****                 --uxMessagesWaiting;
2455:FreeRTOS/Src/queue.c ****             }
2456:FreeRTOS/Src/queue.c ****             else
2457:FreeRTOS/Src/queue.c ****             {
2458:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2459:FreeRTOS/Src/queue.c ****             }
2460:FreeRTOS/Src/queue.c ****         }
2461:FreeRTOS/Src/queue.c ****         else
2462:FreeRTOS/Src/queue.c ****         {
2463:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
2464:FreeRTOS/Src/queue.c ****         }
2465:FreeRTOS/Src/queue.c ****     }
2466:FreeRTOS/Src/queue.c **** 
2467:FreeRTOS/Src/queue.c ****     pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
2468:FreeRTOS/Src/queue.c **** 
2469:FreeRTOS/Src/queue.c ****     return xReturn;
2470:FreeRTOS/Src/queue.c **** }
2471:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2472:FreeRTOS/Src/queue.c **** 
2473:FreeRTOS/Src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2474:FreeRTOS/Src/queue.c ****                                   void * const pvBuffer )
2475:FreeRTOS/Src/queue.c **** {
2476:FreeRTOS/Src/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2477:FreeRTOS/Src/queue.c ****     {
2478:FreeRTOS/Src/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2479:FreeRTOS/Src/queue.c **** 
2480:FreeRTOS/Src/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2481:FreeRTOS/Src/queue.c ****         {
2482:FreeRTOS/Src/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2483:FreeRTOS/Src/queue.c ****         }
2484:FreeRTOS/Src/queue.c ****         else
2485:FreeRTOS/Src/queue.c ****         {
2486:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
2487:FreeRTOS/Src/queue.c ****         }
2488:FreeRTOS/Src/queue.c **** 
2489:FreeRTOS/Src/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
2490:FreeRTOS/Src/queue.c ****     }
2491:FreeRTOS/Src/queue.c **** }
2492:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2493:FreeRTOS/Src/queue.c **** 
2494:FreeRTOS/Src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2495:FreeRTOS/Src/queue.c **** {
2496:FreeRTOS/Src/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2497:FreeRTOS/Src/queue.c **** 
2498:FreeRTOS/Src/queue.c ****     /* The lock counts contains the number of extra data items placed or
2499:FreeRTOS/Src/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2500:FreeRTOS/Src/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2501:FreeRTOS/Src/queue.c ****      * updated. */
2502:FreeRTOS/Src/queue.c ****     taskENTER_CRITICAL();
2503:FreeRTOS/Src/queue.c ****     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 46


2504:FreeRTOS/Src/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
2505:FreeRTOS/Src/queue.c **** 
2506:FreeRTOS/Src/queue.c ****         /* See if data was added to the queue while it was locked. */
2507:FreeRTOS/Src/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
2508:FreeRTOS/Src/queue.c ****         {
2509:FreeRTOS/Src/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2510:FreeRTOS/Src/queue.c ****              * blocked waiting for data to become available? */
2511:FreeRTOS/Src/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2512:FreeRTOS/Src/queue.c ****             {
2513:FreeRTOS/Src/queue.c ****                 if( pxQueue->pxQueueSetContainer != NULL )
2514:FreeRTOS/Src/queue.c ****                 {
2515:FreeRTOS/Src/queue.c ****                     if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2516:FreeRTOS/Src/queue.c ****                     {
2517:FreeRTOS/Src/queue.c ****                         /* The queue is a member of a queue set, and posting to
2518:FreeRTOS/Src/queue.c ****                          * the queue set caused a higher priority task to unblock.
2519:FreeRTOS/Src/queue.c ****                          * A context switch is required. */
2520:FreeRTOS/Src/queue.c ****                         vTaskMissedYield();
2521:FreeRTOS/Src/queue.c ****                     }
2522:FreeRTOS/Src/queue.c ****                     else
2523:FreeRTOS/Src/queue.c ****                     {
2524:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2525:FreeRTOS/Src/queue.c ****                     }
2526:FreeRTOS/Src/queue.c ****                 }
2527:FreeRTOS/Src/queue.c ****                 else
2528:FreeRTOS/Src/queue.c ****                 {
2529:FreeRTOS/Src/queue.c ****                     /* Tasks that are removed from the event list will get
2530:FreeRTOS/Src/queue.c ****                      * added to the pending ready list as the scheduler is still
2531:FreeRTOS/Src/queue.c ****                      * suspended. */
2532:FreeRTOS/Src/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2533:FreeRTOS/Src/queue.c ****                     {
2534:FreeRTOS/Src/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2535:FreeRTOS/Src/queue.c ****                         {
2536:FreeRTOS/Src/queue.c ****                             /* The task waiting has a higher priority so record that a
2537:FreeRTOS/Src/queue.c ****                              * context switch is required. */
2538:FreeRTOS/Src/queue.c ****                             vTaskMissedYield();
2539:FreeRTOS/Src/queue.c ****                         }
2540:FreeRTOS/Src/queue.c ****                         else
2541:FreeRTOS/Src/queue.c ****                         {
2542:FreeRTOS/Src/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2543:FreeRTOS/Src/queue.c ****                         }
2544:FreeRTOS/Src/queue.c ****                     }
2545:FreeRTOS/Src/queue.c ****                     else
2546:FreeRTOS/Src/queue.c ****                     {
2547:FreeRTOS/Src/queue.c ****                         break;
2548:FreeRTOS/Src/queue.c ****                     }
2549:FreeRTOS/Src/queue.c ****                 }
2550:FreeRTOS/Src/queue.c ****             }
2551:FreeRTOS/Src/queue.c ****             #else /* configUSE_QUEUE_SETS */
2552:FreeRTOS/Src/queue.c ****             {
2553:FreeRTOS/Src/queue.c ****                 /* Tasks that are removed from the event list will get added to
2554:FreeRTOS/Src/queue.c ****                  * the pending ready list as the scheduler is still suspended. */
2555:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2556:FreeRTOS/Src/queue.c ****                 {
2557:FreeRTOS/Src/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
2558:FreeRTOS/Src/queue.c ****                     {
2559:FreeRTOS/Src/queue.c ****                         /* The task waiting has a higher priority so record that
2560:FreeRTOS/Src/queue.c ****                          * a context switch is required. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 47


2561:FreeRTOS/Src/queue.c ****                         vTaskMissedYield();
2562:FreeRTOS/Src/queue.c ****                     }
2563:FreeRTOS/Src/queue.c ****                     else
2564:FreeRTOS/Src/queue.c ****                     {
2565:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2566:FreeRTOS/Src/queue.c ****                     }
2567:FreeRTOS/Src/queue.c ****                 }
2568:FreeRTOS/Src/queue.c ****                 else
2569:FreeRTOS/Src/queue.c ****                 {
2570:FreeRTOS/Src/queue.c ****                     break;
2571:FreeRTOS/Src/queue.c ****                 }
2572:FreeRTOS/Src/queue.c ****             }
2573:FreeRTOS/Src/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2574:FreeRTOS/Src/queue.c **** 
2575:FreeRTOS/Src/queue.c ****             --cTxLock;
2576:FreeRTOS/Src/queue.c ****         }
2577:FreeRTOS/Src/queue.c **** 
2578:FreeRTOS/Src/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
2579:FreeRTOS/Src/queue.c ****     }
2580:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL();
2581:FreeRTOS/Src/queue.c **** 
2582:FreeRTOS/Src/queue.c ****     /* Do the same for the Rx lock. */
2583:FreeRTOS/Src/queue.c ****     taskENTER_CRITICAL();
2584:FreeRTOS/Src/queue.c ****     {
2585:FreeRTOS/Src/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
2586:FreeRTOS/Src/queue.c **** 
2587:FreeRTOS/Src/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
2588:FreeRTOS/Src/queue.c ****         {
2589:FreeRTOS/Src/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2590:FreeRTOS/Src/queue.c ****             {
2591:FreeRTOS/Src/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2592:FreeRTOS/Src/queue.c ****                 {
2593:FreeRTOS/Src/queue.c ****                     vTaskMissedYield();
2594:FreeRTOS/Src/queue.c ****                 }
2595:FreeRTOS/Src/queue.c ****                 else
2596:FreeRTOS/Src/queue.c ****                 {
2597:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2598:FreeRTOS/Src/queue.c ****                 }
2599:FreeRTOS/Src/queue.c **** 
2600:FreeRTOS/Src/queue.c ****                 --cRxLock;
2601:FreeRTOS/Src/queue.c ****             }
2602:FreeRTOS/Src/queue.c ****             else
2603:FreeRTOS/Src/queue.c ****             {
2604:FreeRTOS/Src/queue.c ****                 break;
2605:FreeRTOS/Src/queue.c ****             }
2606:FreeRTOS/Src/queue.c ****         }
2607:FreeRTOS/Src/queue.c **** 
2608:FreeRTOS/Src/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
2609:FreeRTOS/Src/queue.c ****     }
2610:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL();
2611:FreeRTOS/Src/queue.c **** }
2612:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2613:FreeRTOS/Src/queue.c **** 
2614:FreeRTOS/Src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2615:FreeRTOS/Src/queue.c **** {
2616:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
2617:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 48


2618:FreeRTOS/Src/queue.c ****     taskENTER_CRITICAL();
2619:FreeRTOS/Src/queue.c ****     {
2620:FreeRTOS/Src/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2621:FreeRTOS/Src/queue.c ****         {
2622:FreeRTOS/Src/queue.c ****             xReturn = pdTRUE;
2623:FreeRTOS/Src/queue.c ****         }
2624:FreeRTOS/Src/queue.c ****         else
2625:FreeRTOS/Src/queue.c ****         {
2626:FreeRTOS/Src/queue.c ****             xReturn = pdFALSE;
2627:FreeRTOS/Src/queue.c ****         }
2628:FreeRTOS/Src/queue.c ****     }
2629:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL();
2630:FreeRTOS/Src/queue.c **** 
2631:FreeRTOS/Src/queue.c ****     return xReturn;
2632:FreeRTOS/Src/queue.c **** }
2633:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2634:FreeRTOS/Src/queue.c **** 
2635:FreeRTOS/Src/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2636:FreeRTOS/Src/queue.c **** {
2637:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
2638:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
2639:FreeRTOS/Src/queue.c **** 
2640:FreeRTOS/Src/queue.c ****     traceENTER_xQueueIsQueueEmptyFromISR( xQueue );
2641:FreeRTOS/Src/queue.c **** 
2642:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
2643:FreeRTOS/Src/queue.c **** 
2644:FreeRTOS/Src/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2645:FreeRTOS/Src/queue.c ****     {
2646:FreeRTOS/Src/queue.c ****         xReturn = pdTRUE;
2647:FreeRTOS/Src/queue.c ****     }
2648:FreeRTOS/Src/queue.c ****     else
2649:FreeRTOS/Src/queue.c ****     {
2650:FreeRTOS/Src/queue.c ****         xReturn = pdFALSE;
2651:FreeRTOS/Src/queue.c ****     }
2652:FreeRTOS/Src/queue.c **** 
2653:FreeRTOS/Src/queue.c ****     traceRETURN_xQueueIsQueueEmptyFromISR( xReturn );
2654:FreeRTOS/Src/queue.c **** 
2655:FreeRTOS/Src/queue.c ****     return xReturn;
2656:FreeRTOS/Src/queue.c **** }
2657:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2658:FreeRTOS/Src/queue.c **** 
2659:FreeRTOS/Src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2660:FreeRTOS/Src/queue.c **** {
  66              		.loc 1 2660 1 is_stmt 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		.loc 1 2660 1 is_stmt 0 view .LVU13
  71 0000 10B5     		push	{r4, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
  76 0002 0446     		mov	r4, r0
2661:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
  77              		.loc 1 2661 5 is_stmt 1 view .LVU14
2662:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 49


2663:FreeRTOS/Src/queue.c ****     taskENTER_CRITICAL();
  78              		.loc 1 2663 5 view .LVU15
  79 0004 FFF7FEFF 		bl	vPortEnterCritical
  80              	.LVL5:
2664:FreeRTOS/Src/queue.c ****     {
2665:FreeRTOS/Src/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  81              		.loc 1 2665 9 view .LVU16
  82              		.loc 1 2665 20 is_stmt 0 view .LVU17
  83 0008 A26B     		ldr	r2, [r4, #56]
  84              		.loc 1 2665 50 view .LVU18
  85 000a E36B     		ldr	r3, [r4, #60]
  86              		.loc 1 2665 11 view .LVU19
  87 000c 9A42     		cmp	r2, r3
  88 000e 04D0     		beq	.L7
2666:FreeRTOS/Src/queue.c ****         {
2667:FreeRTOS/Src/queue.c ****             xReturn = pdTRUE;
2668:FreeRTOS/Src/queue.c ****         }
2669:FreeRTOS/Src/queue.c ****         else
2670:FreeRTOS/Src/queue.c ****         {
2671:FreeRTOS/Src/queue.c ****             xReturn = pdFALSE;
  89              		.loc 1 2671 21 view .LVU20
  90 0010 0024     		movs	r4, #0
  91              	.LVL6:
  92              	.L4:
2672:FreeRTOS/Src/queue.c ****         }
2673:FreeRTOS/Src/queue.c ****     }
2674:FreeRTOS/Src/queue.c ****     taskEXIT_CRITICAL();
  93              		.loc 1 2674 5 is_stmt 1 view .LVU21
  94 0012 FFF7FEFF 		bl	vPortExitCritical
  95              	.LVL7:
2675:FreeRTOS/Src/queue.c **** 
2676:FreeRTOS/Src/queue.c ****     return xReturn;
  96              		.loc 1 2676 5 view .LVU22
2677:FreeRTOS/Src/queue.c **** }
  97              		.loc 1 2677 1 is_stmt 0 view .LVU23
  98 0016 2046     		mov	r0, r4
  99 0018 10BD     		pop	{r4, pc}
 100              	.LVL8:
 101              	.L7:
2667:FreeRTOS/Src/queue.c ****         }
 102              		.loc 1 2667 21 view .LVU24
 103 001a 0124     		movs	r4, #1
 104              	.LVL9:
2667:FreeRTOS/Src/queue.c ****         }
 105              		.loc 1 2667 21 view .LVU25
 106 001c F9E7     		b	.L4
 107              		.cfi_endproc
 108              	.LFE156:
 110              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 111              		.align	1
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 116              	prvIsQueueEmpty:
 117              	.LVL10:
 118              	.LFB154:
2615:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 50


 119              		.loc 1 2615 1 is_stmt 1 view -0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
2615:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 123              		.loc 1 2615 1 is_stmt 0 view .LVU27
 124 0000 10B5     		push	{r4, lr}
 125              	.LCFI1:
 126              		.cfi_def_cfa_offset 8
 127              		.cfi_offset 4, -8
 128              		.cfi_offset 14, -4
 129 0002 0446     		mov	r4, r0
2616:FreeRTOS/Src/queue.c **** 
 130              		.loc 1 2616 5 is_stmt 1 view .LVU28
2618:FreeRTOS/Src/queue.c ****     {
 131              		.loc 1 2618 5 view .LVU29
 132 0004 FFF7FEFF 		bl	vPortEnterCritical
 133              	.LVL11:
2620:FreeRTOS/Src/queue.c ****         {
 134              		.loc 1 2620 9 view .LVU30
2620:FreeRTOS/Src/queue.c ****         {
 135              		.loc 1 2620 20 is_stmt 0 view .LVU31
 136 0008 A36B     		ldr	r3, [r4, #56]
2620:FreeRTOS/Src/queue.c ****         {
 137              		.loc 1 2620 11 view .LVU32
 138 000a 23B9     		cbnz	r3, .L10
2622:FreeRTOS/Src/queue.c ****         }
 139              		.loc 1 2622 21 view .LVU33
 140 000c 0124     		movs	r4, #1
 141              	.LVL12:
 142              	.L9:
2629:FreeRTOS/Src/queue.c **** 
 143              		.loc 1 2629 5 is_stmt 1 view .LVU34
 144 000e FFF7FEFF 		bl	vPortExitCritical
 145              	.LVL13:
2631:FreeRTOS/Src/queue.c **** }
 146              		.loc 1 2631 5 view .LVU35
2632:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 147              		.loc 1 2632 1 is_stmt 0 view .LVU36
 148 0012 2046     		mov	r0, r4
 149 0014 10BD     		pop	{r4, pc}
 150              	.LVL14:
 151              	.L10:
2626:FreeRTOS/Src/queue.c ****         }
 152              		.loc 1 2626 21 view .LVU37
 153 0016 0024     		movs	r4, #0
 154              	.LVL15:
2626:FreeRTOS/Src/queue.c ****         }
 155              		.loc 1 2626 21 view .LVU38
 156 0018 F9E7     		b	.L9
 157              		.cfi_endproc
 158              	.LFE154:
 160              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 161              		.align	1
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 51


 166              	prvCopyDataToQueue:
 167              	.LVL16:
 168              	.LFB151:
2393:FreeRTOS/Src/queue.c ****     BaseType_t xReturn = pdFALSE;
 169              		.loc 1 2393 1 is_stmt 1 view -0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
2393:FreeRTOS/Src/queue.c ****     BaseType_t xReturn = pdFALSE;
 173              		.loc 1 2393 1 is_stmt 0 view .LVU40
 174 0000 70B5     		push	{r4, r5, r6, lr}
 175              	.LCFI2:
 176              		.cfi_def_cfa_offset 16
 177              		.cfi_offset 4, -16
 178              		.cfi_offset 5, -12
 179              		.cfi_offset 6, -8
 180              		.cfi_offset 14, -4
 181 0002 0446     		mov	r4, r0
 182 0004 1546     		mov	r5, r2
2394:FreeRTOS/Src/queue.c ****     UBaseType_t uxMessagesWaiting;
 183              		.loc 1 2394 5 is_stmt 1 view .LVU41
 184              	.LVL17:
2395:FreeRTOS/Src/queue.c **** 
 185              		.loc 1 2395 5 view .LVU42
2399:FreeRTOS/Src/queue.c **** 
 186              		.loc 1 2399 5 view .LVU43
2399:FreeRTOS/Src/queue.c **** 
 187              		.loc 1 2399 23 is_stmt 0 view .LVU44
 188 0006 866B     		ldr	r6, [r0, #56]
 189              	.LVL18:
2401:FreeRTOS/Src/queue.c ****     {
 190              		.loc 1 2401 5 is_stmt 1 view .LVU45
2401:FreeRTOS/Src/queue.c ****     {
 191              		.loc 1 2401 16 is_stmt 0 view .LVU46
 192 0008 026C     		ldr	r2, [r0, #64]
 193              	.LVL19:
2401:FreeRTOS/Src/queue.c ****     {
 194              		.loc 1 2401 7 view .LVU47
 195 000a 5AB9     		cbnz	r2, .L13
2405:FreeRTOS/Src/queue.c ****             {
 196              		.loc 1 2405 13 is_stmt 1 view .LVU48
2405:FreeRTOS/Src/queue.c ****             {
 197              		.loc 1 2405 24 is_stmt 0 view .LVU49
 198 000c 0368     		ldr	r3, [r0]
2405:FreeRTOS/Src/queue.c ****             {
 199              		.loc 1 2405 15 view .LVU50
 200 000e 1BB1     		cbz	r3, .L22
2394:FreeRTOS/Src/queue.c ****     UBaseType_t uxMessagesWaiting;
 201              		.loc 1 2394 16 view .LVU51
 202 0010 0020     		movs	r0, #0
 203              	.LVL20:
 204              	.L14:
2463:FreeRTOS/Src/queue.c ****         }
 205              		.loc 1 2463 37 is_stmt 1 view .LVU52
2467:FreeRTOS/Src/queue.c **** 
 206              		.loc 1 2467 5 view .LVU53
2467:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 52


 207              		.loc 1 2467 34 is_stmt 0 view .LVU54
 208 0012 0136     		adds	r6, r6, #1
 209              	.LVL21:
2467:FreeRTOS/Src/queue.c **** 
 210              		.loc 1 2467 32 view .LVU55
 211 0014 A663     		str	r6, [r4, #56]
2469:FreeRTOS/Src/queue.c **** }
 212              		.loc 1 2469 5 is_stmt 1 view .LVU56
2470:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 213              		.loc 1 2470 1 is_stmt 0 view .LVU57
 214 0016 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL22:
 216              	.L22:
2408:FreeRTOS/Src/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 217              		.loc 1 2408 17 is_stmt 1 view .LVU58
2408:FreeRTOS/Src/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 218              		.loc 1 2408 27 is_stmt 0 view .LVU59
 219 0018 8068     		ldr	r0, [r0, #8]
 220              	.LVL23:
2408:FreeRTOS/Src/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 221              		.loc 1 2408 27 view .LVU60
 222 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 223              	.LVL24:
2409:FreeRTOS/Src/queue.c ****             }
 224              		.loc 1 2409 17 is_stmt 1 view .LVU61
2409:FreeRTOS/Src/queue.c ****             }
 225              		.loc 1 2409 52 is_stmt 0 view .LVU62
 226 001e 0023     		movs	r3, #0
 227 0020 A360     		str	r3, [r4, #8]
 228 0022 F6E7     		b	.L14
 229              	.LVL25:
 230              	.L13:
2418:FreeRTOS/Src/queue.c ****     {
 231              		.loc 1 2418 10 is_stmt 1 view .LVU63
2418:FreeRTOS/Src/queue.c ****     {
 232              		.loc 1 2418 12 is_stmt 0 view .LVU64
 233 0024 6DB9     		cbnz	r5, .L15
2420:FreeRTOS/Src/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;
 234              		.loc 1 2420 9 is_stmt 1 view .LVU65
2420:FreeRTOS/Src/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;
 235              		.loc 1 2420 18 is_stmt 0 view .LVU66
 236 0026 4068     		ldr	r0, [r0, #4]
 237              	.LVL26:
2420:FreeRTOS/Src/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;
 238              		.loc 1 2420 18 view .LVU67
 239 0028 FFF7FEFF 		bl	memcpy
 240              	.LVL27:
2421:FreeRTOS/Src/queue.c **** 
 241              		.loc 1 2421 9 is_stmt 1 view .LVU68
2421:FreeRTOS/Src/queue.c **** 
 242              		.loc 1 2421 16 is_stmt 0 view .LVU69
 243 002c 6368     		ldr	r3, [r4, #4]
2421:FreeRTOS/Src/queue.c **** 
 244              		.loc 1 2421 38 view .LVU70
 245 002e 226C     		ldr	r2, [r4, #64]
2421:FreeRTOS/Src/queue.c **** 
 246              		.loc 1 2421 28 view .LVU71
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 53


 247 0030 1344     		add	r3, r3, r2
 248 0032 6360     		str	r3, [r4, #4]
2423:FreeRTOS/Src/queue.c ****         {
 249              		.loc 1 2423 9 is_stmt 1 view .LVU72
2423:FreeRTOS/Src/queue.c ****         {
 250              		.loc 1 2423 52 is_stmt 0 view .LVU73
 251 0034 A268     		ldr	r2, [r4, #8]
2423:FreeRTOS/Src/queue.c ****         {
 252              		.loc 1 2423 11 view .LVU74
 253 0036 9342     		cmp	r3, r2
 254 0038 19D3     		bcc	.L18
2425:FreeRTOS/Src/queue.c ****         }
 255              		.loc 1 2425 13 is_stmt 1 view .LVU75
2425:FreeRTOS/Src/queue.c ****         }
 256              		.loc 1 2425 41 is_stmt 0 view .LVU76
 257 003a 2368     		ldr	r3, [r4]
2425:FreeRTOS/Src/queue.c ****         }
 258              		.loc 1 2425 32 view .LVU77
 259 003c 6360     		str	r3, [r4, #4]
2394:FreeRTOS/Src/queue.c ****     UBaseType_t uxMessagesWaiting;
 260              		.loc 1 2394 16 view .LVU78
 261 003e 2846     		mov	r0, r5
 262 0040 E7E7     		b	.L14
 263              	.LVL28:
 264              	.L15:
2434:FreeRTOS/Src/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 265              		.loc 1 2434 9 is_stmt 1 view .LVU79
2434:FreeRTOS/Src/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 266              		.loc 1 2434 18 is_stmt 0 view .LVU80
 267 0042 C068     		ldr	r0, [r0, #12]
 268              	.LVL29:
2434:FreeRTOS/Src/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 269              		.loc 1 2434 18 view .LVU81
 270 0044 FFF7FEFF 		bl	memcpy
 271              	.LVL30:
2435:FreeRTOS/Src/queue.c **** 
 272              		.loc 1 2435 9 is_stmt 1 view .LVU82
2435:FreeRTOS/Src/queue.c **** 
 273              		.loc 1 2435 26 is_stmt 0 view .LVU83
 274 0048 E368     		ldr	r3, [r4, #12]
2435:FreeRTOS/Src/queue.c **** 
 275              		.loc 1 2435 48 view .LVU84
 276 004a 226C     		ldr	r2, [r4, #64]
2435:FreeRTOS/Src/queue.c **** 
 277              		.loc 1 2435 38 view .LVU85
 278 004c 5142     		rsbs	r1, r2, #0
 279 004e 9B1A     		subs	r3, r3, r2
 280 0050 E360     		str	r3, [r4, #12]
2437:FreeRTOS/Src/queue.c ****         {
 281              		.loc 1 2437 9 is_stmt 1 view .LVU86
2437:FreeRTOS/Src/queue.c ****         {
 282              		.loc 1 2437 51 is_stmt 0 view .LVU87
 283 0052 2268     		ldr	r2, [r4]
2437:FreeRTOS/Src/queue.c ****         {
 284              		.loc 1 2437 11 view .LVU88
 285 0054 9342     		cmp	r3, r2
 286 0056 02D2     		bcs	.L16
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 54


2439:FreeRTOS/Src/queue.c ****         }
 287              		.loc 1 2439 13 is_stmt 1 view .LVU89
2439:FreeRTOS/Src/queue.c ****         }
 288              		.loc 1 2439 63 is_stmt 0 view .LVU90
 289 0058 A368     		ldr	r3, [r4, #8]
2439:FreeRTOS/Src/queue.c ****         }
 290              		.loc 1 2439 71 view .LVU91
 291 005a 0B44     		add	r3, r3, r1
2439:FreeRTOS/Src/queue.c ****         }
 292              		.loc 1 2439 42 view .LVU92
 293 005c E360     		str	r3, [r4, #12]
 294              	.L16:
2443:FreeRTOS/Src/queue.c ****         }
 295              		.loc 1 2443 37 is_stmt 1 view .LVU93
2446:FreeRTOS/Src/queue.c ****         {
 296              		.loc 1 2446 9 view .LVU94
2446:FreeRTOS/Src/queue.c ****         {
 297              		.loc 1 2446 11 is_stmt 0 view .LVU95
 298 005e 022D     		cmp	r5, #2
 299 0060 01D0     		beq	.L23
2394:FreeRTOS/Src/queue.c ****     UBaseType_t uxMessagesWaiting;
 300              		.loc 1 2394 16 view .LVU96
 301 0062 0020     		movs	r0, #0
 302 0064 D5E7     		b	.L14
 303              	.L23:
2448:FreeRTOS/Src/queue.c ****             {
 304              		.loc 1 2448 13 is_stmt 1 view .LVU97
2448:FreeRTOS/Src/queue.c ****             {
 305              		.loc 1 2448 15 is_stmt 0 view .LVU98
 306 0066 26B1     		cbz	r6, .L20
2454:FreeRTOS/Src/queue.c ****             }
 307              		.loc 1 2454 17 is_stmt 1 view .LVU99
 308 0068 013E     		subs	r6, r6, #1
 309              	.LVL31:
2394:FreeRTOS/Src/queue.c ****     UBaseType_t uxMessagesWaiting;
 310              		.loc 1 2394 16 is_stmt 0 view .LVU100
 311 006a 0020     		movs	r0, #0
 312 006c D1E7     		b	.L14
 313              	.L18:
2394:FreeRTOS/Src/queue.c ****     UBaseType_t uxMessagesWaiting;
 314              		.loc 1 2394 16 view .LVU101
 315 006e 2846     		mov	r0, r5
 316 0070 CFE7     		b	.L14
 317              	.L20:
2394:FreeRTOS/Src/queue.c ****     UBaseType_t uxMessagesWaiting;
 318              		.loc 1 2394 16 view .LVU102
 319 0072 0020     		movs	r0, #0
 320 0074 CDE7     		b	.L14
 321              		.cfi_endproc
 322              	.LFE151:
 324              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 325              		.align	1
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 330              	prvCopyDataFromQueue:
 331              	.LVL32:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 55


 332              	.LFB152:
2475:FreeRTOS/Src/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 333              		.loc 1 2475 1 is_stmt 1 view -0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
2475:FreeRTOS/Src/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 337              		.loc 1 2475 1 is_stmt 0 view .LVU104
 338 0000 0346     		mov	r3, r0
2476:FreeRTOS/Src/queue.c ****     {
 339              		.loc 1 2476 5 is_stmt 1 view .LVU105
2476:FreeRTOS/Src/queue.c ****     {
 340              		.loc 1 2476 16 is_stmt 0 view .LVU106
 341 0002 026C     		ldr	r2, [r0, #64]
2476:FreeRTOS/Src/queue.c ****     {
 342              		.loc 1 2476 7 view .LVU107
 343 0004 6AB1     		cbz	r2, .L28
2475:FreeRTOS/Src/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 344              		.loc 1 2475 1 view .LVU108
 345 0006 10B5     		push	{r4, lr}
 346              	.LCFI3:
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 4, -8
 349              		.cfi_offset 14, -4
 350 0008 0846     		mov	r0, r1
 351              	.LVL33:
2478:FreeRTOS/Src/queue.c **** 
 352              		.loc 1 2478 9 is_stmt 1 view .LVU109
2478:FreeRTOS/Src/queue.c **** 
 353              		.loc 1 2478 26 is_stmt 0 view .LVU110
 354 000a D968     		ldr	r1, [r3, #12]
 355              	.LVL34:
2478:FreeRTOS/Src/queue.c **** 
 356              		.loc 1 2478 38 view .LVU111
 357 000c 1144     		add	r1, r1, r2
 358 000e D960     		str	r1, [r3, #12]
2480:FreeRTOS/Src/queue.c ****         {
 359              		.loc 1 2480 9 is_stmt 1 view .LVU112
2480:FreeRTOS/Src/queue.c ****         {
 360              		.loc 1 2480 11 is_stmt 0 view .LVU113
 361 0010 9C68     		ldr	r4, [r3, #8]
 362 0012 A142     		cmp	r1, r4
 363 0014 01D3     		bcc	.L26
2482:FreeRTOS/Src/queue.c ****         }
 364              		.loc 1 2482 13 is_stmt 1 view .LVU114
2482:FreeRTOS/Src/queue.c ****         }
 365              		.loc 1 2482 51 is_stmt 0 view .LVU115
 366 0016 1968     		ldr	r1, [r3]
2482:FreeRTOS/Src/queue.c ****         }
 367              		.loc 1 2482 42 view .LVU116
 368 0018 D960     		str	r1, [r3, #12]
 369              	.L26:
2486:FreeRTOS/Src/queue.c ****         }
 370              		.loc 1 2486 37 is_stmt 1 view .LVU117
2489:FreeRTOS/Src/queue.c ****     }
 371              		.loc 1 2489 9 view .LVU118
2489:FreeRTOS/Src/queue.c ****     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 56


 372              		.loc 1 2489 18 is_stmt 0 view .LVU119
 373 001a D968     		ldr	r1, [r3, #12]
 374 001c FFF7FEFF 		bl	memcpy
 375              	.LVL35:
2491:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 376              		.loc 1 2491 1 view .LVU120
 377 0020 10BD     		pop	{r4, pc}
 378              	.LVL36:
 379              	.L28:
 380              	.LCFI4:
 381              		.cfi_def_cfa_offset 0
 382              		.cfi_restore 4
 383              		.cfi_restore 14
2491:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 384              		.loc 1 2491 1 view .LVU121
 385 0022 7047     		bx	lr
 386              		.cfi_endproc
 387              	.LFE152:
 389              		.section	.text.prvUnlockQueue,"ax",%progbits
 390              		.align	1
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 395              	prvUnlockQueue:
 396              	.LVL37:
 397              	.LFB153:
2495:FreeRTOS/Src/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 398              		.loc 1 2495 1 is_stmt 1 view -0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
2495:FreeRTOS/Src/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 402              		.loc 1 2495 1 is_stmt 0 view .LVU123
 403 0000 38B5     		push	{r3, r4, r5, lr}
 404              	.LCFI5:
 405              		.cfi_def_cfa_offset 16
 406              		.cfi_offset 3, -16
 407              		.cfi_offset 4, -12
 408              		.cfi_offset 5, -8
 409              		.cfi_offset 14, -4
 410 0002 0546     		mov	r5, r0
2502:FreeRTOS/Src/queue.c ****     {
 411              		.loc 1 2502 5 is_stmt 1 view .LVU124
 412 0004 FFF7FEFF 		bl	vPortEnterCritical
 413              	.LVL38:
 414              	.LBB26:
2504:FreeRTOS/Src/queue.c **** 
 415              		.loc 1 2504 9 view .LVU125
2504:FreeRTOS/Src/queue.c **** 
 416              		.loc 1 2504 16 is_stmt 0 view .LVU126
 417 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 418 000c 64B2     		sxtb	r4, r4
 419              	.LVL39:
2507:FreeRTOS/Src/queue.c ****         {
 420              		.loc 1 2507 9 is_stmt 1 view .LVU127
2507:FreeRTOS/Src/queue.c ****         {
 421              		.loc 1 2507 14 is_stmt 0 view .LVU128
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 57


 422 000e 01E0     		b	.L32
 423              	.L34:
2565:FreeRTOS/Src/queue.c ****                     }
 424              		.loc 1 2565 49 is_stmt 1 view .LVU129
2575:FreeRTOS/Src/queue.c ****         }
 425              		.loc 1 2575 13 view .LVU130
 426 0010 013C     		subs	r4, r4, #1
 427              	.LVL40:
2575:FreeRTOS/Src/queue.c ****         }
 428              		.loc 1 2575 13 is_stmt 0 view .LVU131
 429 0012 64B2     		sxtb	r4, r4
 430              	.LVL41:
 431              	.L32:
2507:FreeRTOS/Src/queue.c ****         {
 432              		.loc 1 2507 24 is_stmt 1 view .LVU132
 433 0014 002C     		cmp	r4, #0
 434 0016 0ADD     		ble	.L33
2555:FreeRTOS/Src/queue.c ****                 {
 435              		.loc 1 2555 17 view .LVU133
2555:FreeRTOS/Src/queue.c ****                 {
 436              		.loc 1 2555 21 is_stmt 0 view .LVU134
 437 0018 6B6A     		ldr	r3, [r5, #36]
2555:FreeRTOS/Src/queue.c ****                 {
 438              		.loc 1 2555 19 view .LVU135
 439 001a 43B1     		cbz	r3, .L33
2557:FreeRTOS/Src/queue.c ****                     {
 440              		.loc 1 2557 21 is_stmt 1 view .LVU136
2557:FreeRTOS/Src/queue.c ****                     {
 441              		.loc 1 2557 25 is_stmt 0 view .LVU137
 442 001c 05F12400 		add	r0, r5, #36
 443 0020 FFF7FEFF 		bl	xTaskRemoveFromEventList
 444              	.LVL42:
2557:FreeRTOS/Src/queue.c ****                     {
 445              		.loc 1 2557 23 discriminator 1 view .LVU138
 446 0024 0028     		cmp	r0, #0
 447 0026 F3D0     		beq	.L34
2561:FreeRTOS/Src/queue.c ****                     }
 448              		.loc 1 2561 25 is_stmt 1 view .LVU139
 449 0028 FFF7FEFF 		bl	vTaskMissedYield
 450              	.LVL43:
 451 002c F0E7     		b	.L34
 452              	.L33:
2578:FreeRTOS/Src/queue.c ****     }
 453              		.loc 1 2578 9 view .LVU140
2578:FreeRTOS/Src/queue.c ****     }
 454              		.loc 1 2578 26 is_stmt 0 view .LVU141
 455 002e FF23     		movs	r3, #255
 456 0030 85F84530 		strb	r3, [r5, #69]
 457              	.LBE26:
2580:FreeRTOS/Src/queue.c **** 
 458              		.loc 1 2580 5 is_stmt 1 view .LVU142
 459 0034 FFF7FEFF 		bl	vPortExitCritical
 460              	.LVL44:
2583:FreeRTOS/Src/queue.c ****     {
 461              		.loc 1 2583 5 view .LVU143
 462 0038 FFF7FEFF 		bl	vPortEnterCritical
 463              	.LVL45:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 58


 464              	.LBB27:
2585:FreeRTOS/Src/queue.c **** 
 465              		.loc 1 2585 9 view .LVU144
2585:FreeRTOS/Src/queue.c **** 
 466              		.loc 1 2585 16 is_stmt 0 view .LVU145
 467 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 468              	.LVL46:
2585:FreeRTOS/Src/queue.c **** 
 469              		.loc 1 2585 16 view .LVU146
 470 0040 64B2     		sxtb	r4, r4
 471              	.LVL47:
2587:FreeRTOS/Src/queue.c ****         {
 472              		.loc 1 2587 9 is_stmt 1 view .LVU147
2587:FreeRTOS/Src/queue.c ****         {
 473              		.loc 1 2587 14 is_stmt 0 view .LVU148
 474 0042 01E0     		b	.L36
 475              	.L38:
2597:FreeRTOS/Src/queue.c ****                 }
 476              		.loc 1 2597 45 is_stmt 1 view .LVU149
2600:FreeRTOS/Src/queue.c ****             }
 477              		.loc 1 2600 17 view .LVU150
 478 0044 013C     		subs	r4, r4, #1
 479              	.LVL48:
2600:FreeRTOS/Src/queue.c ****             }
 480              		.loc 1 2600 17 is_stmt 0 view .LVU151
 481 0046 64B2     		sxtb	r4, r4
 482              	.LVL49:
 483              	.L36:
2587:FreeRTOS/Src/queue.c ****         {
 484              		.loc 1 2587 24 is_stmt 1 view .LVU152
 485 0048 002C     		cmp	r4, #0
 486 004a 0ADD     		ble	.L37
2589:FreeRTOS/Src/queue.c ****             {
 487              		.loc 1 2589 13 view .LVU153
2589:FreeRTOS/Src/queue.c ****             {
 488              		.loc 1 2589 17 is_stmt 0 view .LVU154
 489 004c 2B69     		ldr	r3, [r5, #16]
2589:FreeRTOS/Src/queue.c ****             {
 490              		.loc 1 2589 15 view .LVU155
 491 004e 43B1     		cbz	r3, .L37
2591:FreeRTOS/Src/queue.c ****                 {
 492              		.loc 1 2591 17 is_stmt 1 view .LVU156
2591:FreeRTOS/Src/queue.c ****                 {
 493              		.loc 1 2591 21 is_stmt 0 view .LVU157
 494 0050 05F11000 		add	r0, r5, #16
 495 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 496              	.LVL50:
2591:FreeRTOS/Src/queue.c ****                 {
 497              		.loc 1 2591 19 discriminator 1 view .LVU158
 498 0058 0028     		cmp	r0, #0
 499 005a F3D0     		beq	.L38
2593:FreeRTOS/Src/queue.c ****                 }
 500              		.loc 1 2593 21 is_stmt 1 view .LVU159
 501 005c FFF7FEFF 		bl	vTaskMissedYield
 502              	.LVL51:
 503 0060 F0E7     		b	.L38
 504              	.L37:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 59


2608:FreeRTOS/Src/queue.c ****     }
 505              		.loc 1 2608 9 view .LVU160
2608:FreeRTOS/Src/queue.c ****     }
 506              		.loc 1 2608 26 is_stmt 0 view .LVU161
 507 0062 FF23     		movs	r3, #255
 508 0064 85F84430 		strb	r3, [r5, #68]
 509              	.LBE27:
2610:FreeRTOS/Src/queue.c **** }
 510              		.loc 1 2610 5 is_stmt 1 view .LVU162
 511 0068 FFF7FEFF 		bl	vPortExitCritical
 512              	.LVL52:
2611:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 513              		.loc 1 2611 1 is_stmt 0 view .LVU163
 514 006c 38BD     		pop	{r3, r4, r5, pc}
2611:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 515              		.loc 1 2611 1 view .LVU164
 516              		.cfi_endproc
 517              	.LFE153:
 519              		.section	.text.xQueueGenericReset,"ax",%progbits
 520              		.align	1
 521              		.global	xQueueGenericReset
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 526              	xQueueGenericReset:
 527              	.LVL53:
 528              	.LFB128:
 305:FreeRTOS/Src/queue.c ****     BaseType_t xReturn = pdPASS;
 529              		.loc 1 305 1 is_stmt 1 view -0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 306:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 533              		.loc 1 306 5 view .LVU166
 307:FreeRTOS/Src/queue.c **** 
 534              		.loc 1 307 5 view .LVU167
 309:FreeRTOS/Src/queue.c **** 
 535              		.loc 1 309 55 view .LVU168
 311:FreeRTOS/Src/queue.c **** 
 536              		.loc 1 311 28 view .LVU169
 313:FreeRTOS/Src/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 537              		.loc 1 313 5 view .LVU170
 313:FreeRTOS/Src/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 538              		.loc 1 313 7 is_stmt 0 view .LVU171
 539 0000 0028     		cmp	r0, #0
 540 0002 44D0     		beq	.L47
 305:FreeRTOS/Src/queue.c ****     BaseType_t xReturn = pdPASS;
 541              		.loc 1 305 1 view .LVU172
 542 0004 38B5     		push	{r3, r4, r5, lr}
 543              	.LCFI6:
 544              		.cfi_def_cfa_offset 16
 545              		.cfi_offset 3, -16
 546              		.cfi_offset 4, -12
 547              		.cfi_offset 5, -8
 548              		.cfi_offset 14, -4
 549 0006 0D46     		mov	r5, r1
 550 0008 0446     		mov	r4, r0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 60


 314:FreeRTOS/Src/queue.c ****         /* Check for multiplication overflow. */
 551              		.loc 1 314 18 view .LVU173
 552 000a C36B     		ldr	r3, [r0, #60]
 313:FreeRTOS/Src/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 553              		.loc 1 313 29 discriminator 1 view .LVU174
 554 000c 002B     		cmp	r3, #0
 555 000e 40D0     		beq	.L48
 316:FreeRTOS/Src/queue.c ****     {
 556              		.loc 1 316 54 view .LVU175
 557 0010 026C     		ldr	r2, [r0, #64]
 316:FreeRTOS/Src/queue.c ****     {
 558              		.loc 1 316 44 view .LVU176
 559 0012 0021     		movs	r1, #0
 560              	.LVL54:
 316:FreeRTOS/Src/queue.c ****     {
 561              		.loc 1 316 44 view .LVU177
 562 0014 A2FB0323 		umull	r2, r3, r2, r3
 563 0018 13B9     		cbnz	r3, .L54
 564              	.L43:
 314:FreeRTOS/Src/queue.c ****         /* Check for multiplication overflow. */
 565              		.loc 1 314 37 view .LVU178
 566 001a 19B1     		cbz	r1, .L55
 361:FreeRTOS/Src/queue.c ****     }
 567              		.loc 1 361 17 view .LVU179
 568 001c 0020     		movs	r0, #0
 569              	.LVL55:
 364:FreeRTOS/Src/queue.c **** 
 570              		.loc 1 364 38 is_stmt 1 view .LVU180
 368:FreeRTOS/Src/queue.c **** 
 571              		.loc 1 368 46 view .LVU181
 370:FreeRTOS/Src/queue.c **** }
 572              		.loc 1 370 5 view .LVU182
 370:FreeRTOS/Src/queue.c **** }
 573              		.loc 1 370 12 is_stmt 0 view .LVU183
 574 001e 39E0     		b	.L41
 575              	.LVL56:
 576              	.L54:
 316:FreeRTOS/Src/queue.c ****     {
 577              		.loc 1 316 44 view .LVU184
 578 0020 0121     		movs	r1, #1
 579 0022 FAE7     		b	.L43
 580              	.L55:
 318:FreeRTOS/Src/queue.c ****         {
 581              		.loc 1 318 9 is_stmt 1 view .LVU185
 582 0024 FFF7FEFF 		bl	vPortEnterCritical
 583              	.LVL57:
 320:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 584              		.loc 1 320 13 view .LVU186
 320:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 585              		.loc 1 320 47 is_stmt 0 view .LVU187
 586 0028 2368     		ldr	r3, [r4]
 320:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 587              		.loc 1 320 67 view .LVU188
 588 002a E26B     		ldr	r2, [r4, #60]
 320:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 589              		.loc 1 320 87 view .LVU189
 590 002c 216C     		ldr	r1, [r4, #64]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 61


 320:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 591              		.loc 1 320 56 view .LVU190
 592 002e 01FB0230 		mla	r0, r1, r2, r3
 320:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 593              		.loc 1 320 38 view .LVU191
 594 0032 A060     		str	r0, [r4, #8]
 321:FreeRTOS/Src/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 595              		.loc 1 321 13 is_stmt 1 view .LVU192
 321:FreeRTOS/Src/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 596              		.loc 1 321 40 is_stmt 0 view .LVU193
 597 0034 0020     		movs	r0, #0
 598 0036 A063     		str	r0, [r4, #56]
 322:FreeRTOS/Src/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 599              		.loc 1 322 13 is_stmt 1 view .LVU194
 322:FreeRTOS/Src/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 600              		.loc 1 322 32 is_stmt 0 view .LVU195
 601 0038 6360     		str	r3, [r4, #4]
 323:FreeRTOS/Src/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 602              		.loc 1 323 13 is_stmt 1 view .LVU196
 323:FreeRTOS/Src/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 603              		.loc 1 323 84 is_stmt 0 view .LVU197
 604 003a 013A     		subs	r2, r2, #1
 323:FreeRTOS/Src/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 605              		.loc 1 323 60 view .LVU198
 606 003c 02FB0133 		mla	r3, r2, r1, r3
 323:FreeRTOS/Src/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 607              		.loc 1 323 42 view .LVU199
 608 0040 E360     		str	r3, [r4, #12]
 324:FreeRTOS/Src/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 609              		.loc 1 324 13 is_stmt 1 view .LVU200
 324:FreeRTOS/Src/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 610              		.loc 1 324 30 is_stmt 0 view .LVU201
 611 0042 FF23     		movs	r3, #255
 612 0044 84F84430 		strb	r3, [r4, #68]
 325:FreeRTOS/Src/queue.c **** 
 613              		.loc 1 325 13 is_stmt 1 view .LVU202
 325:FreeRTOS/Src/queue.c **** 
 614              		.loc 1 325 30 is_stmt 0 view .LVU203
 615 0048 84F84530 		strb	r3, [r4, #69]
 327:FreeRTOS/Src/queue.c ****             {
 616              		.loc 1 327 13 is_stmt 1 view .LVU204
 327:FreeRTOS/Src/queue.c ****             {
 617              		.loc 1 327 15 is_stmt 0 view .LVU205
 618 004c B5B9     		cbnz	r5, .L45
 334:FreeRTOS/Src/queue.c ****                 {
 619              		.loc 1 334 17 is_stmt 1 view .LVU206
 334:FreeRTOS/Src/queue.c ****                 {
 620              		.loc 1 334 21 is_stmt 0 view .LVU207
 621 004e 2369     		ldr	r3, [r4, #16]
 334:FreeRTOS/Src/queue.c ****                 {
 622              		.loc 1 334 19 view .LVU208
 623 0050 1BB9     		cbnz	r3, .L56
 624              	.L46:
 357:FreeRTOS/Src/queue.c ****     }
 625              		.loc 1 357 9 is_stmt 1 view .LVU209
 626 0052 FFF7FEFF 		bl	vPortExitCritical
 627              	.LVL58:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 62


 306:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 628              		.loc 1 306 16 is_stmt 0 view .LVU210
 629 0056 0120     		movs	r0, #1
 357:FreeRTOS/Src/queue.c ****     }
 630              		.loc 1 357 9 view .LVU211
 631 0058 1CE0     		b	.L41
 632              	.L56:
 336:FreeRTOS/Src/queue.c ****                     {
 633              		.loc 1 336 21 is_stmt 1 view .LVU212
 336:FreeRTOS/Src/queue.c ****                     {
 634              		.loc 1 336 25 is_stmt 0 view .LVU213
 635 005a 04F11000 		add	r0, r4, #16
 636 005e FFF7FEFF 		bl	xTaskRemoveFromEventList
 637              	.LVL59:
 336:FreeRTOS/Src/queue.c ****                     {
 638              		.loc 1 336 23 discriminator 1 view .LVU214
 639 0062 0028     		cmp	r0, #0
 640 0064 F5D0     		beq	.L46
 338:FreeRTOS/Src/queue.c ****                     }
 641              		.loc 1 338 25 is_stmt 1 view .LVU215
 642 0066 4FF0E023 		mov	r3, #-536813568
 643 006a 4FF08052 		mov	r2, #268435456
 644 006e C3F8042D 		str	r2, [r3, #3332]
 338:FreeRTOS/Src/queue.c ****                     }
 645              		.loc 1 338 25 view .LVU216
 646              		.syntax unified
 647              	@ 338 "FreeRTOS/Src/queue.c" 1
 648 0072 BFF34F8F 		dsb
 649              	@ 0 "" 2
 338:FreeRTOS/Src/queue.c ****                     }
 650              		.loc 1 338 25 view .LVU217
 651              	@ 338 "FreeRTOS/Src/queue.c" 1
 652 0076 BFF36F8F 		isb
 653              	@ 0 "" 2
 338:FreeRTOS/Src/queue.c ****                     }
 654              		.loc 1 338 57 view .LVU218
 655              		.thumb
 656              		.syntax unified
 657 007a EAE7     		b	.L46
 658              	.L45:
 353:FreeRTOS/Src/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 659              		.loc 1 353 17 view .LVU219
 660 007c 04F11000 		add	r0, r4, #16
 661 0080 FFF7FEFF 		bl	vListInitialise
 662              	.LVL60:
 354:FreeRTOS/Src/queue.c ****             }
 663              		.loc 1 354 17 view .LVU220
 664 0084 04F12400 		add	r0, r4, #36
 665 0088 FFF7FEFF 		bl	vListInitialise
 666              	.LVL61:
 667 008c E1E7     		b	.L46
 668              	.LVL62:
 669              	.L47:
 670              	.LCFI7:
 671              		.cfi_def_cfa_offset 0
 672              		.cfi_restore 3
 673              		.cfi_restore 4
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 63


 674              		.cfi_restore 5
 675              		.cfi_restore 14
 361:FreeRTOS/Src/queue.c ****     }
 676              		.loc 1 361 17 is_stmt 0 view .LVU221
 677 008e 0020     		movs	r0, #0
 678              	.LVL63:
 371:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 679              		.loc 1 371 1 view .LVU222
 680 0090 7047     		bx	lr
 681              	.LVL64:
 682              	.L48:
 683              	.LCFI8:
 684              		.cfi_def_cfa_offset 16
 685              		.cfi_offset 3, -16
 686              		.cfi_offset 4, -12
 687              		.cfi_offset 5, -8
 688              		.cfi_offset 14, -4
 361:FreeRTOS/Src/queue.c ****     }
 689              		.loc 1 361 17 view .LVU223
 690 0092 0020     		movs	r0, #0
 691              	.LVL65:
 692              	.L41:
 371:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 693              		.loc 1 371 1 view .LVU224
 694 0094 38BD     		pop	{r3, r4, r5, pc}
 371:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 695              		.loc 1 371 1 view .LVU225
 696              		.cfi_endproc
 697              	.LFE128:
 699              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 700              		.align	1
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 705              	prvInitialiseNewQueue:
 706              	.LVL66:
 707              	.LFB130:
 571:FreeRTOS/Src/queue.c ****     /* Remove compiler warnings about unused parameters should
 708              		.loc 1 571 1 is_stmt 1 view -0
 709              		.cfi_startproc
 710              		@ args = 4, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 571:FreeRTOS/Src/queue.c ****     /* Remove compiler warnings about unused parameters should
 712              		.loc 1 571 1 is_stmt 0 view .LVU227
 713 0000 10B5     		push	{r4, lr}
 714              	.LCFI9:
 715              		.cfi_def_cfa_offset 8
 716              		.cfi_offset 4, -8
 717              		.cfi_offset 14, -4
 718 0002 0346     		mov	r3, r0
 719              	.LVL67:
 571:FreeRTOS/Src/queue.c ****     /* Remove compiler warnings about unused parameters should
 720              		.loc 1 571 1 view .LVU228
 721 0004 0298     		ldr	r0, [sp, #8]
 722              	.LVL68:
 574:FreeRTOS/Src/queue.c **** 
 723              		.loc 1 574 5 is_stmt 1 view .LVU229
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 64


 576:FreeRTOS/Src/queue.c ****     {
 724              		.loc 1 576 5 view .LVU230
 576:FreeRTOS/Src/queue.c ****     {
 725              		.loc 1 576 7 is_stmt 0 view .LVU231
 726 0006 0C46     		mov	r4, r1
 727 0008 31B9     		cbnz	r1, .L58
 582:FreeRTOS/Src/queue.c ****     }
 728              		.loc 1 582 9 is_stmt 1 view .LVU232
 582:FreeRTOS/Src/queue.c ****     }
 729              		.loc 1 582 28 is_stmt 0 view .LVU233
 730 000a 0060     		str	r0, [r0]
 731              	.L59:
 592:FreeRTOS/Src/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 732              		.loc 1 592 5 is_stmt 1 view .LVU234
 592:FreeRTOS/Src/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 733              		.loc 1 592 26 is_stmt 0 view .LVU235
 734 000c C363     		str	r3, [r0, #60]
 593:FreeRTOS/Src/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 735              		.loc 1 593 5 is_stmt 1 view .LVU236
 593:FreeRTOS/Src/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 736              		.loc 1 593 28 is_stmt 0 view .LVU237
 737 000e 0464     		str	r4, [r0, #64]
 594:FreeRTOS/Src/queue.c **** 
 738              		.loc 1 594 5 is_stmt 1 view .LVU238
 594:FreeRTOS/Src/queue.c **** 
 739              		.loc 1 594 14 is_stmt 0 view .LVU239
 740 0010 0121     		movs	r1, #1
 741              	.LVL69:
 594:FreeRTOS/Src/queue.c **** 
 742              		.loc 1 594 14 view .LVU240
 743 0012 FFF7FEFF 		bl	xQueueGenericReset
 744              	.LVL70:
 608:FreeRTOS/Src/queue.c **** }
 745              		.loc 1 608 36 is_stmt 1 view .LVU241
 609:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 746              		.loc 1 609 1 is_stmt 0 view .LVU242
 747 0016 10BD     		pop	{r4, pc}
 748              	.LVL71:
 749              	.L58:
 587:FreeRTOS/Src/queue.c ****     }
 750              		.loc 1 587 9 is_stmt 1 view .LVU243
 587:FreeRTOS/Src/queue.c ****     }
 751              		.loc 1 587 28 is_stmt 0 view .LVU244
 752 0018 0260     		str	r2, [r0]
 753 001a F7E7     		b	.L59
 754              		.cfi_endproc
 755              	.LFE130:
 757              		.section	.text.xQueueGenericCreate,"ax",%progbits
 758              		.align	1
 759              		.global	xQueueGenericCreate
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 764              	xQueueGenericCreate:
 765              	.LVL72:
 766              	.LFB129:
 505:FreeRTOS/Src/queue.c ****         Queue_t * pxNewQueue = NULL;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 65


 767              		.loc 1 505 5 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 505:FreeRTOS/Src/queue.c ****         Queue_t * pxNewQueue = NULL;
 771              		.loc 1 505 5 is_stmt 0 view .LVU246
 772 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 773              	.LCFI10:
 774              		.cfi_def_cfa_offset 20
 775              		.cfi_offset 4, -20
 776              		.cfi_offset 5, -16
 777              		.cfi_offset 6, -12
 778              		.cfi_offset 7, -8
 779              		.cfi_offset 14, -4
 780 0002 83B0     		sub	sp, sp, #12
 781              	.LCFI11:
 782              		.cfi_def_cfa_offset 32
 506:FreeRTOS/Src/queue.c ****         size_t xQueueSizeInBytes;
 783              		.loc 1 506 9 is_stmt 1 view .LVU247
 784              	.LVL73:
 507:FreeRTOS/Src/queue.c ****         uint8_t * pucQueueStorage;
 785              		.loc 1 507 9 view .LVU248
 508:FreeRTOS/Src/queue.c **** 
 786              		.loc 1 508 9 view .LVU249
 510:FreeRTOS/Src/queue.c **** 
 787              		.loc 1 510 81 view .LVU250
 512:FreeRTOS/Src/queue.c ****             /* Check for multiplication overflow. */
 788              		.loc 1 512 9 view .LVU251
 512:FreeRTOS/Src/queue.c ****             /* Check for multiplication overflow. */
 789              		.loc 1 512 11 is_stmt 0 view .LVU252
 790 0004 E0B1     		cbz	r0, .L65
 791 0006 0C46     		mov	r4, r1
 792 0008 1746     		mov	r7, r2
 793 000a 0546     		mov	r5, r0
 514:FreeRTOS/Src/queue.c ****             /* Check for addition overflow. */
 794              		.loc 1 514 44 view .LVU253
 795 000c 0023     		movs	r3, #0
 796 000e A4FB0012 		umull	r1, r2, r4, r0
 797              	.LVL74:
 514:FreeRTOS/Src/queue.c ****             /* Check for addition overflow. */
 798              		.loc 1 514 44 view .LVU254
 799 0012 9AB9     		cbnz	r2, .L69
 800              	.L63:
 512:FreeRTOS/Src/queue.c ****             /* Check for multiplication overflow. */
 801              		.loc 1 512 51 discriminator 1 view .LVU255
 802 0014 C3B9     		cbnz	r3, .L66
 516:FreeRTOS/Src/queue.c ****         {
 803              		.loc 1 516 83 view .LVU256
 804 0016 04FB05F0 		mul	r0, r4, r5
 805              	.LVL75:
 514:FreeRTOS/Src/queue.c ****             /* Check for addition overflow. */
 806              		.loc 1 514 60 view .LVU257
 807 001a 10F1490F 		cmn	r0, #73
 808 001e 15D8     		bhi	.L67
 521:FreeRTOS/Src/queue.c **** 
 809              		.loc 1 521 13 is_stmt 1 view .LVU258
 810              	.LVL76:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 66


 526:FreeRTOS/Src/queue.c **** 
 811              		.loc 1 526 13 view .LVU259
 526:FreeRTOS/Src/queue.c **** 
 812              		.loc 1 526 40 is_stmt 0 view .LVU260
 813 0020 4830     		adds	r0, r0, #72
 814              	.LVL77:
 526:FreeRTOS/Src/queue.c **** 
 815              		.loc 1 526 40 view .LVU261
 816 0022 FFF7FEFF 		bl	pvPortMalloc
 817              	.LVL78:
 528:FreeRTOS/Src/queue.c ****             {
 818              		.loc 1 528 13 is_stmt 1 view .LVU262
 528:FreeRTOS/Src/queue.c ****             {
 819              		.loc 1 528 15 is_stmt 0 view .LVU263
 820 0026 0646     		mov	r6, r0
 821 0028 58B1     		cbz	r0, .L61
 532:FreeRTOS/Src/queue.c ****                 pucQueueStorage += sizeof( Queue_t );
 822              		.loc 1 532 17 is_stmt 1 view .LVU264
 823              	.LVL79:
 533:FreeRTOS/Src/queue.c **** 
 824              		.loc 1 533 17 view .LVU265
 544:FreeRTOS/Src/queue.c ****             }
 825              		.loc 1 544 17 view .LVU266
 826 002a 0090     		str	r0, [sp]
 827 002c 3B46     		mov	r3, r7
 828 002e 00F14802 		add	r2, r0, #72
 829              	.LVL80:
 544:FreeRTOS/Src/queue.c ****             }
 830              		.loc 1 544 17 is_stmt 0 view .LVU267
 831 0032 2146     		mov	r1, r4
 832 0034 2846     		mov	r0, r5
 833              	.LVL81:
 544:FreeRTOS/Src/queue.c ****             }
 834              		.loc 1 544 17 view .LVU268
 835 0036 FFF7FEFF 		bl	prvInitialiseNewQueue
 836              	.LVL82:
 544:FreeRTOS/Src/queue.c ****             }
 837              		.loc 1 544 17 view .LVU269
 838 003a 02E0     		b	.L61
 839              	.LVL83:
 840              	.L69:
 514:FreeRTOS/Src/queue.c ****             /* Check for addition overflow. */
 841              		.loc 1 514 44 view .LVU270
 842 003c 0123     		movs	r3, #1
 843 003e E9E7     		b	.L63
 844              	.LVL84:
 845              	.L65:
 506:FreeRTOS/Src/queue.c ****         size_t xQueueSizeInBytes;
 846              		.loc 1 506 19 view .LVU271
 847 0040 0026     		movs	r6, #0
 848              	.LVL85:
 849              	.L61:
 561:FreeRTOS/Src/queue.c **** 
 850              		.loc 1 561 5 view .LVU272
 851 0042 3046     		mov	r0, r6
 852 0044 03B0     		add	sp, sp, #12
 853              	.LCFI12:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 67


 854              		.cfi_remember_state
 855              		.cfi_def_cfa_offset 20
 856              		@ sp needed
 857 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 858              	.LVL86:
 859              	.L66:
 860              	.LCFI13:
 861              		.cfi_restore_state
 506:FreeRTOS/Src/queue.c ****         size_t xQueueSizeInBytes;
 862              		.loc 1 506 19 view .LVU273
 863 0048 0026     		movs	r6, #0
 864 004a FAE7     		b	.L61
 865              	.LVL87:
 866              	.L67:
 506:FreeRTOS/Src/queue.c ****         size_t xQueueSizeInBytes;
 867              		.loc 1 506 19 view .LVU274
 868 004c 0026     		movs	r6, #0
 554:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
 869              		.loc 1 554 39 is_stmt 1 view .LVU275
 555:FreeRTOS/Src/queue.c ****         }
 870              		.loc 1 555 37 view .LVU276
 558:FreeRTOS/Src/queue.c **** 
 871              		.loc 1 558 54 view .LVU277
 560:FreeRTOS/Src/queue.c ****     }
 872              		.loc 1 560 9 view .LVU278
 560:FreeRTOS/Src/queue.c ****     }
 873              		.loc 1 560 16 is_stmt 0 view .LVU279
 874 004e F8E7     		b	.L61
 875              		.cfi_endproc
 876              	.LFE129:
 878              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 879              		.align	1
 880              		.global	xQueueCreateCountingSemaphore
 881              		.syntax unified
 882              		.thumb
 883              		.thumb_func
 885              	xQueueCreateCountingSemaphore:
 886              	.LVL88:
 887              	.LFB135:
 904:FreeRTOS/Src/queue.c ****         QueueHandle_t xHandle = NULL;
 888              		.loc 1 904 5 is_stmt 1 view -0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 0
 891              		@ frame_needed = 0, uses_anonymous_args = 0
 905:FreeRTOS/Src/queue.c **** 
 892              		.loc 1 905 9 view .LVU281
 907:FreeRTOS/Src/queue.c **** 
 893              		.loc 1 907 79 view .LVU282
 909:FreeRTOS/Src/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 894              		.loc 1 909 9 view .LVU283
 909:FreeRTOS/Src/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 895              		.loc 1 909 11 is_stmt 0 view .LVU284
 896 0000 50B1     		cbz	r0, .L72
 904:FreeRTOS/Src/queue.c ****         QueueHandle_t xHandle = NULL;
 897              		.loc 1 904 5 view .LVU285
 898 0002 10B5     		push	{r4, lr}
 899              	.LCFI14:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 68


 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 4, -8
 902              		.cfi_offset 14, -4
 903 0004 0C46     		mov	r4, r1
 909:FreeRTOS/Src/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 904              		.loc 1 909 34 discriminator 1 view .LVU286
 905 0006 8842     		cmp	r0, r1
 906 0008 08D3     		bcc	.L73
 912:FreeRTOS/Src/queue.c **** 
 907              		.loc 1 912 13 is_stmt 1 view .LVU287
 912:FreeRTOS/Src/queue.c **** 
 908              		.loc 1 912 23 is_stmt 0 view .LVU288
 909 000a 0222     		movs	r2, #2
 910 000c 0021     		movs	r1, #0
 911              	.LVL89:
 912:FreeRTOS/Src/queue.c **** 
 912              		.loc 1 912 23 view .LVU289
 913 000e FFF7FEFF 		bl	xQueueGenericCreate
 914              	.LVL90:
 914:FreeRTOS/Src/queue.c ****             {
 915              		.loc 1 914 13 is_stmt 1 view .LVU290
 914:FreeRTOS/Src/queue.c ****             {
 916              		.loc 1 914 15 is_stmt 0 view .LVU291
 917 0012 20B1     		cbz	r0, .L70
 916:FreeRTOS/Src/queue.c **** 
 918              		.loc 1 916 17 is_stmt 1 view .LVU292
 916:FreeRTOS/Src/queue.c **** 
 919              		.loc 1 916 62 is_stmt 0 view .LVU293
 920 0014 8463     		str	r4, [r0, #56]
 918:FreeRTOS/Src/queue.c ****             }
 921              		.loc 1 918 49 is_stmt 1 view .LVU294
 922 0016 02E0     		b	.L70
 923              	.LVL91:
 924              	.L72:
 925              	.LCFI15:
 926              		.cfi_def_cfa_offset 0
 927              		.cfi_restore 4
 928              		.cfi_restore 14
 905:FreeRTOS/Src/queue.c **** 
 929              		.loc 1 905 23 is_stmt 0 view .LVU295
 930 0018 0020     		movs	r0, #0
 931              	.LVL92:
 934:FreeRTOS/Src/queue.c **** 
 932              		.loc 1 934 5 view .LVU296
 933 001a 7047     		bx	lr
 934              	.LVL93:
 935              	.L73:
 936              	.LCFI16:
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 4, -8
 939              		.cfi_offset 14, -4
 905:FreeRTOS/Src/queue.c **** 
 940              		.loc 1 905 23 view .LVU297
 941 001c 0020     		movs	r0, #0
 942              	.LVL94:
 927:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
 943              		.loc 1 927 36 is_stmt 1 view .LVU298
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 69


 928:FreeRTOS/Src/queue.c ****         }
 944              		.loc 1 928 37 view .LVU299
 931:FreeRTOS/Src/queue.c **** 
 945              		.loc 1 931 61 view .LVU300
 933:FreeRTOS/Src/queue.c ****     }
 946              		.loc 1 933 9 view .LVU301
 947              	.L70:
 934:FreeRTOS/Src/queue.c **** 
 948              		.loc 1 934 5 is_stmt 0 view .LVU302
 949 001e 10BD     		pop	{r4, pc}
 934:FreeRTOS/Src/queue.c **** 
 950              		.loc 1 934 5 view .LVU303
 951              		.cfi_endproc
 952              	.LFE135:
 954              		.section	.text.xQueueGenericSend,"ax",%progbits
 955              		.align	1
 956              		.global	xQueueGenericSend
 957              		.syntax unified
 958              		.thumb
 959              		.thumb_func
 961              	xQueueGenericSend:
 962              	.LVL95:
 963              	.LFB136:
 943:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 964              		.loc 1 943 1 is_stmt 1 view -0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 16
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 943:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 968              		.loc 1 943 1 is_stmt 0 view .LVU305
 969 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 970              	.LCFI17:
 971              		.cfi_def_cfa_offset 20
 972              		.cfi_offset 4, -20
 973              		.cfi_offset 5, -16
 974              		.cfi_offset 6, -12
 975              		.cfi_offset 7, -8
 976              		.cfi_offset 14, -4
 977 0002 85B0     		sub	sp, sp, #20
 978              	.LCFI18:
 979              		.cfi_def_cfa_offset 40
 980 0004 0446     		mov	r4, r0
 981 0006 0F46     		mov	r7, r1
 982 0008 0192     		str	r2, [sp, #4]
 983 000a 1D46     		mov	r5, r3
 944:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
 984              		.loc 1 944 5 is_stmt 1 view .LVU306
 985              	.LVL96:
 945:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 986              		.loc 1 945 5 view .LVU307
 946:FreeRTOS/Src/queue.c **** 
 987              		.loc 1 946 5 view .LVU308
 944:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
 988              		.loc 1 944 16 is_stmt 0 view .LVU309
 989 000c 0026     		movs	r6, #0
 990 000e 3DE0     		b	.L79
 991              	.LVL97:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 70


 992              	.L80:
 969:FreeRTOS/Src/queue.c **** 
 993              		.loc 1 969 43 is_stmt 1 view .LVU310
1033:FreeRTOS/Src/queue.c **** 
 994              		.loc 1 1033 21 view .LVU311
1033:FreeRTOS/Src/queue.c **** 
 995              		.loc 1 1033 38 is_stmt 0 view .LVU312
 996 0010 2A46     		mov	r2, r5
 997 0012 3946     		mov	r1, r7
 998 0014 2046     		mov	r0, r4
 999 0016 FFF7FEFF 		bl	prvCopyDataToQueue
 1000              	.LVL98:
1037:FreeRTOS/Src/queue.c ****                     {
 1001              		.loc 1 1037 21 is_stmt 1 view .LVU313
1037:FreeRTOS/Src/queue.c ****                     {
 1002              		.loc 1 1037 25 is_stmt 0 view .LVU314
 1003 001a 636A     		ldr	r3, [r4, #36]
1037:FreeRTOS/Src/queue.c ****                     {
 1004              		.loc 1 1037 23 view .LVU315
 1005 001c 7BB9     		cbnz	r3, .L93
1052:FreeRTOS/Src/queue.c ****                     {
 1006              		.loc 1 1052 26 is_stmt 1 view .LVU316
1052:FreeRTOS/Src/queue.c ****                     {
 1007              		.loc 1 1052 28 is_stmt 0 view .LVU317
 1008 001e 48B1     		cbz	r0, .L83
1058:FreeRTOS/Src/queue.c ****                     }
 1009              		.loc 1 1058 25 is_stmt 1 view .LVU318
 1010 0020 4FF0E023 		mov	r3, #-536813568
 1011 0024 4FF08052 		mov	r2, #268435456
 1012 0028 C3F8042D 		str	r2, [r3, #3332]
1058:FreeRTOS/Src/queue.c ****                     }
 1013              		.loc 1 1058 25 view .LVU319
 1014              		.syntax unified
 1015              	@ 1058 "FreeRTOS/Src/queue.c" 1
 1016 002c BFF34F8F 		dsb
 1017              	@ 0 "" 2
1058:FreeRTOS/Src/queue.c ****                     }
 1018              		.loc 1 1058 25 view .LVU320
 1019              	@ 1058 "FreeRTOS/Src/queue.c" 1
 1020 0030 BFF36F8F 		isb
 1021              	@ 0 "" 2
1058:FreeRTOS/Src/queue.c ****                     }
 1022              		.loc 1 1058 57 view .LVU321
 1023              	.LVL99:
 1024              		.thumb
 1025              		.syntax unified
 1026              	.L83:
1062:FreeRTOS/Src/queue.c ****                     }
 1027              		.loc 1 1062 49 view .LVU322
1067:FreeRTOS/Src/queue.c **** 
 1028              		.loc 1 1067 17 view .LVU323
 1029 0034 FFF7FEFF 		bl	vPortExitCritical
 1030              	.LVL100:
1069:FreeRTOS/Src/queue.c **** 
 1031              		.loc 1 1069 56 view .LVU324
1071:FreeRTOS/Src/queue.c ****             }
 1032              		.loc 1 1071 17 view .LVU325
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 71


1071:FreeRTOS/Src/queue.c ****             }
 1033              		.loc 1 1071 24 is_stmt 0 view .LVU326
 1034 0038 0120     		movs	r0, #1
 1035              	.LVL101:
 1036              	.L78:
1154:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1037              		.loc 1 1154 1 view .LVU327
 1038 003a 05B0     		add	sp, sp, #20
 1039              	.LCFI19:
 1040              		.cfi_remember_state
 1041              		.cfi_def_cfa_offset 20
 1042              		@ sp needed
 1043 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1044              	.LVL102:
 1045              	.L93:
 1046              	.LCFI20:
 1047              		.cfi_restore_state
1039:FreeRTOS/Src/queue.c ****                         {
 1048              		.loc 1 1039 25 is_stmt 1 view .LVU328
1039:FreeRTOS/Src/queue.c ****                         {
 1049              		.loc 1 1039 29 is_stmt 0 view .LVU329
 1050 003e 04F12400 		add	r0, r4, #36
 1051              	.LVL103:
1039:FreeRTOS/Src/queue.c ****                         {
 1052              		.loc 1 1039 29 view .LVU330
 1053 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1054              	.LVL104:
1039:FreeRTOS/Src/queue.c ****                         {
 1055              		.loc 1 1039 27 discriminator 1 view .LVU331
 1056 0046 0028     		cmp	r0, #0
 1057 0048 F4D0     		beq	.L83
1045:FreeRTOS/Src/queue.c ****                         }
 1058              		.loc 1 1045 29 is_stmt 1 view .LVU332
 1059 004a 4FF0E023 		mov	r3, #-536813568
 1060 004e 4FF08052 		mov	r2, #268435456
 1061 0052 C3F8042D 		str	r2, [r3, #3332]
1045:FreeRTOS/Src/queue.c ****                         }
 1062              		.loc 1 1045 29 view .LVU333
 1063              		.syntax unified
 1064              	@ 1045 "FreeRTOS/Src/queue.c" 1
 1065 0056 BFF34F8F 		dsb
 1066              	@ 0 "" 2
1045:FreeRTOS/Src/queue.c ****                         }
 1067              		.loc 1 1045 29 view .LVU334
 1068              	@ 1045 "FreeRTOS/Src/queue.c" 1
 1069 005a BFF36F8F 		isb
 1070              	@ 0 "" 2
1045:FreeRTOS/Src/queue.c ****                         }
 1071              		.loc 1 1045 61 view .LVU335
 1072              		.thumb
 1073              		.syntax unified
 1074 005e E9E7     		b	.L83
 1075              	.LVL105:
 1076              	.L94:
1079:FreeRTOS/Src/queue.c **** 
 1077              		.loc 1 1079 21 view .LVU336
 1078 0060 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 72


 1079              	.LVL106:
1083:FreeRTOS/Src/queue.c ****                     traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 1080              		.loc 1 1083 54 view .LVU337
1084:FreeRTOS/Src/queue.c **** 
 1081              		.loc 1 1084 67 view .LVU338
1086:FreeRTOS/Src/queue.c ****                 }
 1082              		.loc 1 1086 21 view .LVU339
1086:FreeRTOS/Src/queue.c ****                 }
 1083              		.loc 1 1086 28 is_stmt 0 view .LVU340
 1084 0064 0020     		movs	r0, #0
 1085 0066 E8E7     		b	.L78
 1086              	.L95:
1092:FreeRTOS/Src/queue.c ****                     xEntryTimeSet = pdTRUE;
 1087              		.loc 1 1092 21 is_stmt 1 view .LVU341
 1088 0068 02A8     		add	r0, sp, #8
 1089 006a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1090              	.LVL107:
1093:FreeRTOS/Src/queue.c ****                 }
 1091              		.loc 1 1093 21 view .LVU342
1093:FreeRTOS/Src/queue.c ****                 }
 1092              		.loc 1 1093 35 is_stmt 0 view .LVU343
 1093 006e 0126     		movs	r6, #1
 1094 0070 19E0     		b	.L86
 1095              	.LVL108:
 1096              	.L96:
1108:FreeRTOS/Src/queue.c **** 
 1097              		.loc 1 1108 9 is_stmt 1 discriminator 1 view .LVU344
 1098 0072 0023     		movs	r3, #0
 1099 0074 84F84430 		strb	r3, [r4, #68]
 1100 0078 21E0     		b	.L87
 1101              	.L97:
1108:FreeRTOS/Src/queue.c **** 
 1102              		.loc 1 1108 9 discriminator 4 view .LVU345
 1103 007a 0023     		movs	r3, #0
 1104 007c 84F84530 		strb	r3, [r4, #69]
 1105 0080 23E0     		b	.L88
 1106              	.L90:
1138:FreeRTOS/Src/queue.c ****                 ( void ) xTaskResumeAll();
 1107              		.loc 1 1138 17 view .LVU346
 1108 0082 2046     		mov	r0, r4
 1109 0084 FFF7FEFF 		bl	prvUnlockQueue
 1110              	.LVL109:
1139:FreeRTOS/Src/queue.c ****             }
 1111              		.loc 1 1139 17 view .LVU347
1139:FreeRTOS/Src/queue.c ****             }
 1112              		.loc 1 1139 26 is_stmt 0 view .LVU348
 1113 0088 FFF7FEFF 		bl	xTaskResumeAll
 1114              	.LVL110:
 1115              	.L79:
 948:FreeRTOS/Src/queue.c **** 
 1116              		.loc 1 948 87 is_stmt 1 view .LVU349
 950:FreeRTOS/Src/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1117              		.loc 1 950 28 view .LVU350
 951:FreeRTOS/Src/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1118              		.loc 1 951 100 view .LVU351
 952:FreeRTOS/Src/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1119              		.loc 1 952 91 view .LVU352
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 73


 955:FreeRTOS/Src/queue.c ****     }
 1120              		.loc 1 955 110 view .LVU353
 959:FreeRTOS/Src/queue.c ****     {
 1121              		.loc 1 959 5 view .LVU354
 961:FreeRTOS/Src/queue.c ****         {
 1122              		.loc 1 961 9 view .LVU355
 1123 008c FFF7FEFF 		bl	vPortEnterCritical
 1124              	.LVL111:
 967:FreeRTOS/Src/queue.c ****             {
 1125              		.loc 1 967 13 view .LVU356
 967:FreeRTOS/Src/queue.c ****             {
 1126              		.loc 1 967 26 is_stmt 0 view .LVU357
 1127 0090 A26B     		ldr	r2, [r4, #56]
 967:FreeRTOS/Src/queue.c ****             {
 1128              		.loc 1 967 55 view .LVU358
 1129 0092 E36B     		ldr	r3, [r4, #60]
 967:FreeRTOS/Src/queue.c ****             {
 1130              		.loc 1 967 15 view .LVU359
 1131 0094 9A42     		cmp	r2, r3
 1132 0096 BBD3     		bcc	.L80
 967:FreeRTOS/Src/queue.c ****             {
 1133              		.loc 1 967 68 discriminator 1 view .LVU360
 1134 0098 022D     		cmp	r5, #2
 1135 009a B9D0     		beq	.L80
1075:FreeRTOS/Src/queue.c ****                 {
 1136              		.loc 1 1075 17 is_stmt 1 view .LVU361
1075:FreeRTOS/Src/queue.c ****                 {
 1137              		.loc 1 1075 34 is_stmt 0 view .LVU362
 1138 009c 019B     		ldr	r3, [sp, #4]
1075:FreeRTOS/Src/queue.c ****                 {
 1139              		.loc 1 1075 19 view .LVU363
 1140 009e 002B     		cmp	r3, #0
 1141 00a0 DED0     		beq	.L94
1088:FreeRTOS/Src/queue.c ****                 {
 1142              		.loc 1 1088 22 is_stmt 1 view .LVU364
1088:FreeRTOS/Src/queue.c ****                 {
 1143              		.loc 1 1088 24 is_stmt 0 view .LVU365
 1144 00a2 002E     		cmp	r6, #0
 1145 00a4 E0D0     		beq	.L95
 1146              	.LVL112:
 1147              	.L86:
1098:FreeRTOS/Src/queue.c ****                 }
 1148              		.loc 1 1098 45 is_stmt 1 view .LVU366
1102:FreeRTOS/Src/queue.c **** 
 1149              		.loc 1 1102 9 view .LVU367
 1150 00a6 FFF7FEFF 		bl	vPortExitCritical
 1151              	.LVL113:
1107:FreeRTOS/Src/queue.c ****         prvLockQueue( pxQueue );
 1152              		.loc 1 1107 9 view .LVU368
 1153 00aa FFF7FEFF 		bl	vTaskSuspendAll
 1154              	.LVL114:
1108:FreeRTOS/Src/queue.c **** 
 1155              		.loc 1 1108 9 view .LVU369
 1156 00ae FFF7FEFF 		bl	vPortEnterCritical
 1157              	.LVL115:
1108:FreeRTOS/Src/queue.c **** 
 1158              		.loc 1 1108 9 discriminator 1 view .LVU370
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 74


 1159 00b2 94F84400 		ldrb	r0, [r4, #68]	@ zero_extendqisi2
 1160 00b6 40B2     		sxtb	r0, r0
 1161 00b8 B0F1FF3F 		cmp	r0, #-1
 1162 00bc D9D0     		beq	.L96
 1163              	.L87:
1108:FreeRTOS/Src/queue.c **** 
 1164              		.loc 1 1108 9 discriminator 3 view .LVU371
 1165 00be 94F84500 		ldrb	r0, [r4, #69]	@ zero_extendqisi2
 1166 00c2 40B2     		sxtb	r0, r0
 1167 00c4 B0F1FF3F 		cmp	r0, #-1
 1168 00c8 D7D0     		beq	.L97
 1169              	.L88:
1108:FreeRTOS/Src/queue.c **** 
 1170              		.loc 1 1108 9 discriminator 6 view .LVU372
 1171 00ca FFF7FEFF 		bl	vPortExitCritical
 1172              	.LVL116:
1111:FreeRTOS/Src/queue.c ****         {
 1173              		.loc 1 1111 9 view .LVU373
1111:FreeRTOS/Src/queue.c ****         {
 1174              		.loc 1 1111 13 is_stmt 0 view .LVU374
 1175 00ce 01A9     		add	r1, sp, #4
 1176 00d0 02A8     		add	r0, sp, #8
 1177 00d2 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1178              	.LVL117:
1111:FreeRTOS/Src/queue.c ****         {
 1179              		.loc 1 1111 11 discriminator 1 view .LVU375
 1180 00d6 D8B9     		cbnz	r0, .L89
1113:FreeRTOS/Src/queue.c ****             {
 1181              		.loc 1 1113 13 is_stmt 1 view .LVU376
1113:FreeRTOS/Src/queue.c ****             {
 1182              		.loc 1 1113 17 is_stmt 0 view .LVU377
 1183 00d8 2046     		mov	r0, r4
 1184 00da FFF7FEFF 		bl	prvIsQueueFull
 1185              	.LVL118:
1113:FreeRTOS/Src/queue.c ****             {
 1186              		.loc 1 1113 15 discriminator 1 view .LVU378
 1187 00de 0028     		cmp	r0, #0
 1188 00e0 CFD0     		beq	.L90
1115:FreeRTOS/Src/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1189              		.loc 1 1115 55 is_stmt 1 view .LVU379
1116:FreeRTOS/Src/queue.c **** 
 1190              		.loc 1 1116 17 view .LVU380
 1191 00e2 0199     		ldr	r1, [sp, #4]
 1192 00e4 04F11000 		add	r0, r4, #16
 1193 00e8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1194              	.LVL119:
1123:FreeRTOS/Src/queue.c **** 
 1195              		.loc 1 1123 17 view .LVU381
 1196 00ec 2046     		mov	r0, r4
 1197 00ee FFF7FEFF 		bl	prvUnlockQueue
 1198              	.LVL120:
1130:FreeRTOS/Src/queue.c ****                 {
 1199              		.loc 1 1130 17 view .LVU382
1130:FreeRTOS/Src/queue.c ****                 {
 1200              		.loc 1 1130 21 is_stmt 0 view .LVU383
 1201 00f2 FFF7FEFF 		bl	xTaskResumeAll
 1202              	.LVL121:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 75


1130:FreeRTOS/Src/queue.c ****                 {
 1203              		.loc 1 1130 19 discriminator 1 view .LVU384
 1204 00f6 0028     		cmp	r0, #0
 1205 00f8 C8D1     		bne	.L79
1132:FreeRTOS/Src/queue.c ****                 }
 1206              		.loc 1 1132 21 is_stmt 1 view .LVU385
 1207 00fa 4FF0E023 		mov	r3, #-536813568
 1208 00fe 4FF08052 		mov	r2, #268435456
 1209 0102 C3F8042D 		str	r2, [r3, #3332]
1132:FreeRTOS/Src/queue.c ****                 }
 1210              		.loc 1 1132 21 view .LVU386
 1211              		.syntax unified
 1212              	@ 1132 "FreeRTOS/Src/queue.c" 1
 1213 0106 BFF34F8F 		dsb
 1214              	@ 0 "" 2
1132:FreeRTOS/Src/queue.c ****                 }
 1215              		.loc 1 1132 21 view .LVU387
 1216              	@ 1132 "FreeRTOS/Src/queue.c" 1
 1217 010a BFF36F8F 		isb
 1218              	@ 0 "" 2
 1219              		.thumb
 1220              		.syntax unified
 1221 010e BDE7     		b	.L79
 1222              	.L89:
1145:FreeRTOS/Src/queue.c ****             ( void ) xTaskResumeAll();
 1223              		.loc 1 1145 13 view .LVU388
 1224 0110 2046     		mov	r0, r4
 1225 0112 FFF7FEFF 		bl	prvUnlockQueue
 1226              	.LVL122:
1146:FreeRTOS/Src/queue.c **** 
 1227              		.loc 1 1146 13 view .LVU389
1146:FreeRTOS/Src/queue.c **** 
 1228              		.loc 1 1146 22 is_stmt 0 view .LVU390
 1229 0116 FFF7FEFF 		bl	xTaskResumeAll
 1230              	.LVL123:
1148:FreeRTOS/Src/queue.c ****             traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 1231              		.loc 1 1148 46 is_stmt 1 view .LVU391
1149:FreeRTOS/Src/queue.c **** 
 1232              		.loc 1 1149 59 view .LVU392
1151:FreeRTOS/Src/queue.c ****         }
 1233              		.loc 1 1151 13 view .LVU393
1151:FreeRTOS/Src/queue.c ****         }
 1234              		.loc 1 1151 20 is_stmt 0 view .LVU394
 1235 011a 0020     		movs	r0, #0
 1236 011c 8DE7     		b	.L78
 1237              		.cfi_endproc
 1238              	.LFE136:
 1240              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1241              		.align	1
 1242              		.syntax unified
 1243              		.thumb
 1244              		.thumb_func
 1246              	prvInitialiseMutex:
 1247              	.LVL124:
 1248              	.LFB131:
 615:FreeRTOS/Src/queue.c ****         if( pxNewQueue != NULL )
 1249              		.loc 1 615 5 is_stmt 1 view -0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 76


 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 616:FreeRTOS/Src/queue.c ****         {
 1253              		.loc 1 616 9 view .LVU396
 616:FreeRTOS/Src/queue.c ****         {
 1254              		.loc 1 616 11 is_stmt 0 view .LVU397
 1255 0000 48B1     		cbz	r0, .L101
 615:FreeRTOS/Src/queue.c ****         if( pxNewQueue != NULL )
 1256              		.loc 1 615 5 view .LVU398
 1257 0002 08B5     		push	{r3, lr}
 1258              	.LCFI21:
 1259              		.cfi_def_cfa_offset 8
 1260              		.cfi_offset 3, -8
 1261              		.cfi_offset 14, -4
 622:FreeRTOS/Src/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1262              		.loc 1 622 13 is_stmt 1 view .LVU399
 622:FreeRTOS/Src/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1263              		.loc 1 622 51 is_stmt 0 view .LVU400
 1264 0004 0021     		movs	r1, #0
 1265 0006 8160     		str	r1, [r0, #8]
 623:FreeRTOS/Src/queue.c **** 
 1266              		.loc 1 623 13 is_stmt 1 view .LVU401
 623:FreeRTOS/Src/queue.c **** 
 1267              		.loc 1 623 37 is_stmt 0 view .LVU402
 1268 0008 0160     		str	r1, [r0]
 626:FreeRTOS/Src/queue.c **** 
 1269              		.loc 1 626 13 is_stmt 1 view .LVU403
 626:FreeRTOS/Src/queue.c **** 
 1270              		.loc 1 626 59 is_stmt 0 view .LVU404
 1271 000a C160     		str	r1, [r0, #12]
 628:FreeRTOS/Src/queue.c **** 
 1272              		.loc 1 628 44 is_stmt 1 view .LVU405
 631:FreeRTOS/Src/queue.c ****         }
 1273              		.loc 1 631 13 view .LVU406
 631:FreeRTOS/Src/queue.c ****         }
 1274              		.loc 1 631 22 is_stmt 0 view .LVU407
 1275 000c 0B46     		mov	r3, r1
 1276 000e 0A46     		mov	r2, r1
 1277 0010 FFF7FEFF 		bl	xQueueGenericSend
 1278              	.LVL125:
 635:FreeRTOS/Src/queue.c ****         }
 1279              		.loc 1 635 39 is_stmt 1 view .LVU408
 637:FreeRTOS/Src/queue.c **** 
 1280              		.loc 1 637 5 is_stmt 0 view .LVU409
 1281 0014 08BD     		pop	{r3, pc}
 1282              	.LVL126:
 1283              	.L101:
 1284              	.LCFI22:
 1285              		.cfi_def_cfa_offset 0
 1286              		.cfi_restore 3
 1287              		.cfi_restore 14
 637:FreeRTOS/Src/queue.c **** 
 1288              		.loc 1 637 5 view .LVU410
 1289 0016 7047     		bx	lr
 1290              		.cfi_endproc
 1291              	.LFE131:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 77


 1293              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1294              		.align	1
 1295              		.global	xQueueCreateMutex
 1296              		.syntax unified
 1297              		.thumb
 1298              		.thumb_func
 1300              	xQueueCreateMutex:
 1301              	.LVL127:
 1302              	.LFB132:
 645:FreeRTOS/Src/queue.c ****         QueueHandle_t xNewQueue;
 1303              		.loc 1 645 5 is_stmt 1 view -0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 645:FreeRTOS/Src/queue.c ****         QueueHandle_t xNewQueue;
 1307              		.loc 1 645 5 is_stmt 0 view .LVU412
 1308 0000 10B5     		push	{r4, lr}
 1309              	.LCFI23:
 1310              		.cfi_def_cfa_offset 8
 1311              		.cfi_offset 4, -8
 1312              		.cfi_offset 14, -4
 1313 0002 0246     		mov	r2, r0
 646:FreeRTOS/Src/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 1314              		.loc 1 646 9 is_stmt 1 view .LVU413
 647:FreeRTOS/Src/queue.c **** 
 1315              		.loc 1 647 9 view .LVU414
 1316              	.LVL128:
 649:FreeRTOS/Src/queue.c **** 
 1317              		.loc 1 649 52 view .LVU415
 651:FreeRTOS/Src/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1318              		.loc 1 651 9 view .LVU416
 651:FreeRTOS/Src/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1319              		.loc 1 651 21 is_stmt 0 view .LVU417
 1320 0004 0021     		movs	r1, #0
 1321 0006 0120     		movs	r0, #1
 1322              	.LVL129:
 651:FreeRTOS/Src/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1323              		.loc 1 651 21 view .LVU418
 1324 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1325              	.LVL130:
 651:FreeRTOS/Src/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1326              		.loc 1 651 21 view .LVU419
 1327 000c 0446     		mov	r4, r0
 1328              	.LVL131:
 652:FreeRTOS/Src/queue.c **** 
 1329              		.loc 1 652 9 is_stmt 1 view .LVU420
 1330 000e FFF7FEFF 		bl	prvInitialiseMutex
 1331              	.LVL132:
 654:FreeRTOS/Src/queue.c **** 
 1332              		.loc 1 654 51 view .LVU421
 656:FreeRTOS/Src/queue.c ****     }
 1333              		.loc 1 656 9 view .LVU422
 657:FreeRTOS/Src/queue.c **** 
 1334              		.loc 1 657 5 is_stmt 0 view .LVU423
 1335 0012 2046     		mov	r0, r4
 1336 0014 10BD     		pop	{r4, pc}
 657:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 78


 1337              		.loc 1 657 5 view .LVU424
 1338              		.cfi_endproc
 1339              	.LFE132:
 1341              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1342              		.align	1
 1343              		.global	xQueueGiveMutexRecursive
 1344              		.syntax unified
 1345              		.thumb
 1346              		.thumb_func
 1348              	xQueueGiveMutexRecursive:
 1349              	.LVL133:
 1350              	.LFB133:
 757:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
 1351              		.loc 1 757 5 is_stmt 1 view -0
 1352              		.cfi_startproc
 1353              		@ args = 0, pretend = 0, frame = 0
 1354              		@ frame_needed = 0, uses_anonymous_args = 0
 757:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
 1355              		.loc 1 757 5 is_stmt 0 view .LVU426
 1356 0000 38B5     		push	{r3, r4, r5, lr}
 1357              	.LCFI24:
 1358              		.cfi_def_cfa_offset 16
 1359              		.cfi_offset 3, -16
 1360              		.cfi_offset 4, -12
 1361              		.cfi_offset 5, -8
 1362              		.cfi_offset 14, -4
 1363 0002 0446     		mov	r4, r0
 758:FreeRTOS/Src/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1364              		.loc 1 758 9 is_stmt 1 view .LVU427
 759:FreeRTOS/Src/queue.c **** 
 1365              		.loc 1 759 9 view .LVU428
 1366              	.LVL134:
 761:FreeRTOS/Src/queue.c **** 
 1367              		.loc 1 761 54 view .LVU429
 763:FreeRTOS/Src/queue.c **** 
 1368              		.loc 1 763 32 view .LVU430
 771:FreeRTOS/Src/queue.c ****         {
 1369              		.loc 1 771 9 view .LVU431
 771:FreeRTOS/Src/queue.c ****         {
 1370              		.loc 1 771 34 is_stmt 0 view .LVU432
 1371 0004 8568     		ldr	r5, [r0, #8]
 771:FreeRTOS/Src/queue.c ****         {
 1372              		.loc 1 771 51 view .LVU433
 1373 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1374              	.LVL135:
 771:FreeRTOS/Src/queue.c ****         {
 1375              		.loc 1 771 11 discriminator 1 view .LVU434
 1376 000a 8542     		cmp	r5, r0
 1377 000c 01D0     		beq	.L111
 800:FreeRTOS/Src/queue.c **** 
 1378              		.loc 1 800 21 view .LVU435
 1379 000e 0020     		movs	r0, #0
 1380              	.L106:
 808:FreeRTOS/Src/queue.c **** 
 1381              		.loc 1 808 5 view .LVU436
 1382 0010 38BD     		pop	{r3, r4, r5, pc}
 1383              	.LVL136:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 79


 1384              	.L111:
 773:FreeRTOS/Src/queue.c **** 
 1385              		.loc 1 773 49 is_stmt 1 view .LVU437
 780:FreeRTOS/Src/queue.c **** 
 1386              		.loc 1 780 13 view .LVU438
 780:FreeRTOS/Src/queue.c **** 
 1387              		.loc 1 780 36 is_stmt 0 view .LVU439
 1388 0012 E368     		ldr	r3, [r4, #12]
 780:FreeRTOS/Src/queue.c **** 
 1389              		.loc 1 780 59 view .LVU440
 1390 0014 013B     		subs	r3, r3, #1
 1391 0016 E360     		str	r3, [r4, #12]
 783:FreeRTOS/Src/queue.c ****             {
 1392              		.loc 1 783 13 is_stmt 1 view .LVU441
 783:FreeRTOS/Src/queue.c ****             {
 1393              		.loc 1 783 15 is_stmt 0 view .LVU442
 1394 0018 0BB1     		cbz	r3, .L112
 794:FreeRTOS/Src/queue.c ****         }
 1395              		.loc 1 794 21 view .LVU443
 1396 001a 0120     		movs	r0, #1
 1397              	.LVL137:
 802:FreeRTOS/Src/queue.c ****         }
 1398              		.loc 1 802 56 is_stmt 1 view .LVU444
 805:FreeRTOS/Src/queue.c **** 
 1399              		.loc 1 805 56 view .LVU445
 807:FreeRTOS/Src/queue.c ****     }
 1400              		.loc 1 807 9 view .LVU446
 807:FreeRTOS/Src/queue.c ****     }
 1401              		.loc 1 807 16 is_stmt 0 view .LVU447
 1402 001c F8E7     		b	.L106
 1403              	.LVL138:
 1404              	.L112:
 787:FreeRTOS/Src/queue.c ****             }
 1405              		.loc 1 787 17 is_stmt 1 view .LVU448
 787:FreeRTOS/Src/queue.c ****             }
 1406              		.loc 1 787 26 is_stmt 0 view .LVU449
 1407 001e 1A46     		mov	r2, r3
 1408 0020 1946     		mov	r1, r3
 1409 0022 2046     		mov	r0, r4
 1410 0024 FFF7FEFF 		bl	xQueueGenericSend
 1411              	.LVL139:
 794:FreeRTOS/Src/queue.c ****         }
 1412              		.loc 1 794 21 view .LVU450
 1413 0028 0120     		movs	r0, #1
 1414 002a F1E7     		b	.L106
 1415              		.cfi_endproc
 1416              	.LFE133:
 1418              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1419              		.align	1
 1420              		.global	xQueueGenericSendFromISR
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1425              	xQueueGenericSendFromISR:
 1426              	.LVL140:
 1427              	.LFB137:
1161:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 80


 1428              		.loc 1 1161 1 is_stmt 1 view -0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
1161:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 1432              		.loc 1 1161 1 is_stmt 0 view .LVU452
 1433 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1434              	.LCFI25:
 1435              		.cfi_def_cfa_offset 24
 1436              		.cfi_offset 3, -24
 1437              		.cfi_offset 4, -20
 1438              		.cfi_offset 5, -16
 1439              		.cfi_offset 6, -12
 1440              		.cfi_offset 7, -8
 1441              		.cfi_offset 14, -4
 1442 0002 0446     		mov	r4, r0
 1443 0004 1746     		mov	r7, r2
 1444 0006 1A46     		mov	r2, r3
 1445              	.LVL141:
1162:FreeRTOS/Src/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 1446              		.loc 1 1162 5 is_stmt 1 view .LVU453
1163:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 1447              		.loc 1 1163 5 view .LVU454
1164:FreeRTOS/Src/queue.c **** 
 1448              		.loc 1 1164 5 view .LVU455
1166:FreeRTOS/Src/queue.c **** 
 1449              		.loc 1 1166 107 view .LVU456
1168:FreeRTOS/Src/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1450              		.loc 1 1168 28 view .LVU457
1169:FreeRTOS/Src/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1451              		.loc 1 1169 100 view .LVU458
1170:FreeRTOS/Src/queue.c **** 
 1452              		.loc 1 1170 91 view .LVU459
1186:FreeRTOS/Src/queue.c **** 
 1453              		.loc 1 1186 47 view .LVU460
1196:FreeRTOS/Src/queue.c ****     {
 1454              		.loc 1 1196 5 view .LVU461
 1455              	.LBB28:
 1456              	.LBI28:
 1457              		.file 2 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 81


  18:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  32:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-OFF* */
  34:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  35:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern "C" {
  36:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  37:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-ON* */
  38:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  40:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  41:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  44:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  45:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  46:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  47:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  48:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  49:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  50:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR          char
  51:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT         float
  52:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE        double
  53:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG          long
  54:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT         short
  55:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE    uint32_t
  56:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE     long
  57:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  58:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE   StackType_t;
  59:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef long             BaseType_t;
  60:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long    UBaseType_t;
  61:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  62:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint16_t     TickType_t;
  64:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint32_t     TickType_t;
  67:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  69:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  71:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_TYPE_IS_ATOMIC    1
  72:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
  73:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint64_t TickType_t;
  74:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffffffffffULL
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 82


  75:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #else /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  76:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  77:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  78:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  81:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH      ( -1 )
  82:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  83:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT    8
  84:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDONT_DISCARD      __attribute__( ( used ) )
  85:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  86:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  87:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  88:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD()                                     \
  89:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  90:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  91:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  92:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  93:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  94:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  95:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  96:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  97:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  98:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  99:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
 100:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
 101:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) \
 102:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     do                                           \
 103:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                            \
 104:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( xSwitchRequired != pdFALSE )         \
 105:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 106:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT_TO_SCHEDULER();        \
 107:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             portYIELD();                         \
 108:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 109:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else                                     \
 110:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 111:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT();                     \
 112:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 113:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     } while( 0 )
 114:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x )    portEND_SWITCHING_ISR( x )
 115:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 118:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 119:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 120:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 121:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 122:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 123:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 124:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()                      vPortEnterCritical()
 125:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()                       vPortExitCritical()
 126:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 128:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 130:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 131:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 83


 132:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParameters )
 133:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParameters )
 134:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 138:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 139:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xExpec
 140:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 141:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 142:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 144:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 145:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 146:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 147:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 149:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 151:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBi
 152:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 153:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint8_t ucReturn;
 154:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 156:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ucReturn;
 158:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 159:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 161:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configMAX_PRIORITIES > 32 )
 162:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITI
 163:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 164:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 166:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities ) |= 
 167:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities ) &= 
 168:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 31UL 
 172:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 174:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 175:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 176:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 178:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     void vPortValidateInterruptPriority( void );
 179:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 180:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 181:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 182:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 183:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 184:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE              __inline
 186:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 187:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 188:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 84


 189:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 190:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 192:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulCurrentInterrupt;
 194:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     BaseType_t xReturn;
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 196:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     /* Obtain the number of the currently executing interrupt. */
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 198:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 199:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     if( ulCurrentInterrupt == 0 )
 200:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 201:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdFALSE;
 202:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 203:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     else
 204:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 205:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdTRUE;
 206:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 207:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     return xReturn;
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 210:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 212:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 214:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulNewBASEPRI;
 216:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 217:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 218:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 219:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %0, %1                                              \n" \
 220:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %0                                         \n" \
 221:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 222:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 223:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 224:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     );
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 226:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1458              		.loc 2 229 34 view .LVU462
 1459              	.LBB29:
 230:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1460              		.loc 2 231 5 view .LVU463
 232:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 1461              		.loc 2 233 5 view .LVU464
 1462              		.syntax unified
 1463              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1464 0008 EFF31185 		   mrs r5, basepri                                         
 1465 000c 4FF05003 	   mov r3, #80                                              
 1466 0010 83F31188 	   msr basepri, r3                                         
 1467 0014 BFF36F8F 	   isb                                                     
 1468 0018 BFF34F8F 	   dsb                                                     
 1469              	
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 85


 1470              	@ 0 "" 2
 1471              	.LVL142:
 234:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 235:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mrs %0, basepri                                         \n" \
 236:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %1, %2                                              \n" \
 237:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %1                                         \n" \
 238:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 239:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 240:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRI
 241:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     );
 242:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 243:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     /* This return will not be reached but is necessary to prevent compiler
 244:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      * warnings. */
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     return ulOriginalBASEPRI;
 1472              		.loc 2 245 5 view .LVU465
 1473              		.loc 2 245 5 is_stmt 0 view .LVU466
 1474              		.thumb
 1475              		.syntax unified
 1476              	.LBE29:
 1477              	.LBE28:
1198:FreeRTOS/Src/queue.c ****         {
 1478              		.loc 1 1198 9 is_stmt 1 view .LVU467
1198:FreeRTOS/Src/queue.c ****         {
 1479              		.loc 1 1198 22 is_stmt 0 view .LVU468
 1480 001c 806B     		ldr	r0, [r0, #56]
 1481              	.LVL143:
1198:FreeRTOS/Src/queue.c ****         {
 1482              		.loc 1 1198 51 view .LVU469
 1483 001e E36B     		ldr	r3, [r4, #60]
1198:FreeRTOS/Src/queue.c ****         {
 1484              		.loc 1 1198 11 view .LVU470
 1485 0020 9842     		cmp	r0, r3
 1486 0022 05D3     		bcc	.L114
1198:FreeRTOS/Src/queue.c ****         {
 1487              		.loc 1 1198 64 discriminator 1 view .LVU471
 1488 0024 022A     		cmp	r2, #2
 1489 0026 03D0     		beq	.L114
1318:FreeRTOS/Src/queue.c ****         }
 1490              		.loc 1 1318 21 view .LVU472
 1491 0028 0020     		movs	r0, #0
 1492              	.LVL144:
 1493              	.L115:
1321:FreeRTOS/Src/queue.c **** 
 1494              		.loc 1 1321 5 is_stmt 1 view .LVU473
 1495              	.LBB30:
 1496              	.LBI30:
 246:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 247:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1497              		.loc 2 249 30 view .LVU474
 1498              	.LBB31:
 250:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 1499              		.loc 2 251 5 view .LVU475
 1500              		.syntax unified
 1501              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 86


 1502 002a 85F31188 		   msr basepri, r5 
 1503              	@ 0 "" 2
 1504              		.thumb
 1505              		.syntax unified
 1506              	.LBE31:
 1507              	.LBE30:
1323:FreeRTOS/Src/queue.c **** 
 1508              		.loc 1 1323 52 view .LVU476
1325:FreeRTOS/Src/queue.c **** }
 1509              		.loc 1 1325 5 view .LVU477
1326:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1510              		.loc 1 1326 1 is_stmt 0 view .LVU478
 1511 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1512              	.LVL145:
 1513              	.L114:
 1514              	.LBB32:
1200:FreeRTOS/Src/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1515              		.loc 1 1200 13 is_stmt 1 view .LVU479
1200:FreeRTOS/Src/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1516              		.loc 1 1200 26 is_stmt 0 view .LVU480
 1517 0030 94F84560 		ldrb	r6, [r4, #69]	@ zero_extendqisi2
 1518 0034 76B2     		sxtb	r6, r6
 1519              	.LVL146:
1201:FreeRTOS/Src/queue.c **** 
 1520              		.loc 1 1201 13 is_stmt 1 view .LVU481
1201:FreeRTOS/Src/queue.c **** 
 1521              		.loc 1 1201 31 is_stmt 0 view .LVU482
 1522 0036 A36B     		ldr	r3, [r4, #56]
1203:FreeRTOS/Src/queue.c **** 
 1523              		.loc 1 1203 48 is_stmt 1 view .LVU483
1210:FreeRTOS/Src/queue.c **** 
 1524              		.loc 1 1210 13 view .LVU484
1210:FreeRTOS/Src/queue.c **** 
 1525              		.loc 1 1210 22 is_stmt 0 view .LVU485
 1526 0038 2046     		mov	r0, r4
 1527 003a FFF7FEFF 		bl	prvCopyDataToQueue
 1528              	.LVL147:
1214:FreeRTOS/Src/queue.c ****             {
 1529              		.loc 1 1214 13 is_stmt 1 view .LVU486
1214:FreeRTOS/Src/queue.c ****             {
 1530              		.loc 1 1214 15 is_stmt 0 view .LVU487
 1531 003e B6F1FF3F 		cmp	r6, #-1
 1532 0042 0CD1     		bne	.L116
1276:FreeRTOS/Src/queue.c ****                     {
 1533              		.loc 1 1276 21 is_stmt 1 view .LVU488
1276:FreeRTOS/Src/queue.c ****                     {
 1534              		.loc 1 1276 25 is_stmt 0 view .LVU489
 1535 0044 636A     		ldr	r3, [r4, #36]
1276:FreeRTOS/Src/queue.c ****                     {
 1536              		.loc 1 1276 23 view .LVU490
 1537 0046 0BB9     		cbnz	r3, .L123
1313:FreeRTOS/Src/queue.c ****         }
 1538              		.loc 1 1313 21 view .LVU491
 1539 0048 0120     		movs	r0, #1
 1540 004a EEE7     		b	.L115
 1541              	.L123:
1278:FreeRTOS/Src/queue.c ****                         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 87


 1542              		.loc 1 1278 25 is_stmt 1 view .LVU492
1278:FreeRTOS/Src/queue.c ****                         {
 1543              		.loc 1 1278 29 is_stmt 0 view .LVU493
 1544 004c 04F12400 		add	r0, r4, #36
 1545 0050 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1546              	.LVL148:
1278:FreeRTOS/Src/queue.c ****                         {
 1547              		.loc 1 1278 27 discriminator 1 view .LVU494
 1548 0054 68B1     		cbz	r0, .L119
1282:FreeRTOS/Src/queue.c ****                             {
 1549              		.loc 1 1282 29 is_stmt 1 view .LVU495
1282:FreeRTOS/Src/queue.c ****                             {
 1550              		.loc 1 1282 31 is_stmt 0 view .LVU496
 1551 0056 77B1     		cbz	r7, .L120
1284:FreeRTOS/Src/queue.c ****                             }
 1552              		.loc 1 1284 33 is_stmt 1 view .LVU497
1284:FreeRTOS/Src/queue.c ****                             }
 1553              		.loc 1 1284 60 is_stmt 0 view .LVU498
 1554 0058 0120     		movs	r0, #1
 1555 005a 3860     		str	r0, [r7]
 1556 005c E5E7     		b	.L115
 1557              	.L116:
1310:FreeRTOS/Src/queue.c ****             }
 1558              		.loc 1 1310 17 is_stmt 1 view .LVU499
 1559              	.LBB33:
1310:FreeRTOS/Src/queue.c ****             }
 1560              		.loc 1 1310 17 view .LVU500
 1561 005e FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 1562              	.LVL149:
1310:FreeRTOS/Src/queue.c ****             }
 1563              		.loc 1 1310 17 discriminator 1 view .LVU501
 1564 0062 8642     		cmp	r6, r0
 1565 0064 09D2     		bcs	.L121
1310:FreeRTOS/Src/queue.c ****             }
 1566              		.loc 1 1310 17 discriminator 1 view .LVU502
1310:FreeRTOS/Src/queue.c ****             }
 1567              		.loc 1 1310 17 discriminator 1 view .LVU503
 1568 0066 0136     		adds	r6, r6, #1
 1569              	.LVL150:
1310:FreeRTOS/Src/queue.c ****             }
 1570              		.loc 1 1310 17 is_stmt 0 discriminator 1 view .LVU504
 1571 0068 76B2     		sxtb	r6, r6
 1572              	.LVL151:
1310:FreeRTOS/Src/queue.c ****             }
 1573              		.loc 1 1310 17 discriminator 1 view .LVU505
 1574 006a 84F84560 		strb	r6, [r4, #69]
 1575              	.LBE33:
1313:FreeRTOS/Src/queue.c ****         }
 1576              		.loc 1 1313 21 view .LVU506
 1577 006e 0120     		movs	r0, #1
 1578              	.LVL152:
1313:FreeRTOS/Src/queue.c ****         }
 1579              		.loc 1 1313 21 view .LVU507
 1580 0070 DBE7     		b	.L115
 1581              	.LVL153:
 1582              	.L119:
1313:FreeRTOS/Src/queue.c ****         }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 88


 1583              		.loc 1 1313 21 view .LVU508
 1584 0072 0120     		movs	r0, #1
 1585 0074 D9E7     		b	.L115
 1586              	.L120:
 1587 0076 0120     		movs	r0, #1
 1588 0078 D7E7     		b	.L115
 1589              	.LVL154:
 1590              	.L121:
1313:FreeRTOS/Src/queue.c ****         }
 1591              		.loc 1 1313 21 view .LVU509
 1592 007a 0120     		movs	r0, #1
 1593              	.LVL155:
1313:FreeRTOS/Src/queue.c ****         }
 1594              		.loc 1 1313 21 view .LVU510
 1595 007c D5E7     		b	.L115
 1596              	.LBE32:
 1597              		.cfi_endproc
 1598              	.LFE137:
 1600              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1601              		.align	1
 1602              		.global	xQueueGiveFromISR
 1603              		.syntax unified
 1604              		.thumb
 1605              		.thumb_func
 1607              	xQueueGiveFromISR:
 1608              	.LVL156:
 1609              	.LFB138:
1331:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 1610              		.loc 1 1331 1 is_stmt 1 view -0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 0
 1613              		@ frame_needed = 0, uses_anonymous_args = 0
1331:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 1614              		.loc 1 1331 1 is_stmt 0 view .LVU512
 1615 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1616              	.LCFI26:
 1617              		.cfi_def_cfa_offset 24
 1618              		.cfi_offset 3, -24
 1619              		.cfi_offset 4, -20
 1620              		.cfi_offset 5, -16
 1621              		.cfi_offset 6, -12
 1622              		.cfi_offset 7, -8
 1623              		.cfi_offset 14, -4
1332:FreeRTOS/Src/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 1624              		.loc 1 1332 5 is_stmt 1 view .LVU513
1333:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 1625              		.loc 1 1333 5 view .LVU514
1334:FreeRTOS/Src/queue.c **** 
 1626              		.loc 1 1334 5 view .LVU515
 1627              	.LVL157:
1336:FreeRTOS/Src/queue.c **** 
 1628              		.loc 1 1336 70 view .LVU516
1344:FreeRTOS/Src/queue.c **** 
 1629              		.loc 1 1344 28 view .LVU517
1348:FreeRTOS/Src/queue.c **** 
 1630              		.loc 1 1348 45 view .LVU518
1353:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 89


 1631              		.loc 1 1353 123 view .LVU519
1369:FreeRTOS/Src/queue.c **** 
 1632              		.loc 1 1369 47 view .LVU520
1374:FreeRTOS/Src/queue.c ****     {
 1633              		.loc 1 1374 5 view .LVU521
 1634              	.LBB34:
 1635              	.LBI34:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 1636              		.loc 2 229 34 view .LVU522
 1637              	.LBB35:
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1638              		.loc 2 231 5 view .LVU523
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1639              		.loc 2 233 5 view .LVU524
 1640              		.syntax unified
 1641              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1642 0002 EFF31185 		   mrs r5, basepri                                         
 1643 0006 4FF05003 	   mov r3, #80                                              
 1644 000a 83F31188 	   msr basepri, r3                                         
 1645 000e BFF36F8F 	   isb                                                     
 1646 0012 BFF34F8F 	   dsb                                                     
 1647              	
 1648              	@ 0 "" 2
 1649              	.LVL158:
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 1650              		.loc 2 245 5 view .LVU525
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 1651              		.loc 2 245 5 is_stmt 0 view .LVU526
 1652              		.thumb
 1653              		.syntax unified
 1654              	.LBE35:
 1655              	.LBE34:
 1656              	.LBB36:
1376:FreeRTOS/Src/queue.c **** 
 1657              		.loc 1 1376 9 is_stmt 1 view .LVU527
1376:FreeRTOS/Src/queue.c **** 
 1658              		.loc 1 1376 27 is_stmt 0 view .LVU528
 1659 0016 836B     		ldr	r3, [r0, #56]
 1660              	.LVL159:
1381:FreeRTOS/Src/queue.c ****         {
 1661              		.loc 1 1381 9 is_stmt 1 view .LVU529
1381:FreeRTOS/Src/queue.c ****         {
 1662              		.loc 1 1381 40 is_stmt 0 view .LVU530
 1663 0018 C26B     		ldr	r2, [r0, #60]
1381:FreeRTOS/Src/queue.c ****         {
 1664              		.loc 1 1381 11 view .LVU531
 1665 001a 9A42     		cmp	r2, r3
 1666 001c 1FD9     		bls	.L127
 1667 001e 0446     		mov	r4, r0
 1668 0020 0E46     		mov	r6, r1
 1669              	.LBB37:
1383:FreeRTOS/Src/queue.c **** 
 1670              		.loc 1 1383 13 is_stmt 1 view .LVU532
1383:FreeRTOS/Src/queue.c **** 
 1671              		.loc 1 1383 26 is_stmt 0 view .LVU533
 1672 0022 90F84570 		ldrb	r7, [r0, #69]	@ zero_extendqisi2
 1673 0026 7FB2     		sxtb	r7, r7
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 90


 1674              	.LVL160:
1385:FreeRTOS/Src/queue.c **** 
 1675              		.loc 1 1385 48 is_stmt 1 view .LVU534
1393:FreeRTOS/Src/queue.c **** 
 1676              		.loc 1 1393 13 view .LVU535
1393:FreeRTOS/Src/queue.c **** 
 1677              		.loc 1 1393 42 is_stmt 0 view .LVU536
 1678 0028 0133     		adds	r3, r3, #1
 1679              	.LVL161:
1393:FreeRTOS/Src/queue.c **** 
 1680              		.loc 1 1393 40 view .LVU537
 1681 002a 8363     		str	r3, [r0, #56]
1397:FreeRTOS/Src/queue.c ****             {
 1682              		.loc 1 1397 13 is_stmt 1 view .LVU538
1397:FreeRTOS/Src/queue.c ****             {
 1683              		.loc 1 1397 15 is_stmt 0 view .LVU539
 1684 002c B7F1FF3F 		cmp	r7, #-1
 1685 0030 0BD1     		bne	.L126
1452:FreeRTOS/Src/queue.c ****                     {
 1686              		.loc 1 1452 21 is_stmt 1 view .LVU540
1452:FreeRTOS/Src/queue.c ****                     {
 1687              		.loc 1 1452 25 is_stmt 0 view .LVU541
 1688 0032 436A     		ldr	r3, [r0, #36]
 1689              	.LVL162:
1452:FreeRTOS/Src/queue.c ****                     {
 1690              		.loc 1 1452 23 view .LVU542
 1691 0034 0BB9     		cbnz	r3, .L133
1486:FreeRTOS/Src/queue.c ****         }
 1692              		.loc 1 1486 21 view .LVU543
 1693 0036 0120     		movs	r0, #1
 1694              	.LVL163:
1486:FreeRTOS/Src/queue.c ****         }
 1695              		.loc 1 1486 21 view .LVU544
 1696 0038 12E0     		b	.L125
 1697              	.LVL164:
 1698              	.L133:
1454:FreeRTOS/Src/queue.c ****                         {
 1699              		.loc 1 1454 25 is_stmt 1 view .LVU545
1454:FreeRTOS/Src/queue.c ****                         {
 1700              		.loc 1 1454 29 is_stmt 0 view .LVU546
 1701 003a 2430     		adds	r0, r0, #36
 1702              	.LVL165:
1454:FreeRTOS/Src/queue.c ****                         {
 1703              		.loc 1 1454 29 view .LVU547
 1704 003c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1705              	.LVL166:
1454:FreeRTOS/Src/queue.c ****                         {
 1706              		.loc 1 1454 27 discriminator 1 view .LVU548
 1707 0040 88B1     		cbz	r0, .L129
1458:FreeRTOS/Src/queue.c ****                             {
 1708              		.loc 1 1458 29 is_stmt 1 view .LVU549
1458:FreeRTOS/Src/queue.c ****                             {
 1709              		.loc 1 1458 31 is_stmt 0 view .LVU550
 1710 0042 96B1     		cbz	r6, .L130
1460:FreeRTOS/Src/queue.c ****                             }
 1711              		.loc 1 1460 33 is_stmt 1 view .LVU551
1460:FreeRTOS/Src/queue.c ****                             }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 91


 1712              		.loc 1 1460 60 is_stmt 0 view .LVU552
 1713 0044 0120     		movs	r0, #1
 1714 0046 3060     		str	r0, [r6]
 1715 0048 0AE0     		b	.L125
 1716              	.LVL167:
 1717              	.L126:
1483:FreeRTOS/Src/queue.c ****             }
 1718              		.loc 1 1483 17 is_stmt 1 view .LVU553
 1719              	.LBB38:
1483:FreeRTOS/Src/queue.c ****             }
 1720              		.loc 1 1483 17 view .LVU554
 1721 004a FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 1722              	.LVL168:
1483:FreeRTOS/Src/queue.c ****             }
 1723              		.loc 1 1483 17 discriminator 1 view .LVU555
 1724 004e 8742     		cmp	r7, r0
 1725 0050 0DD2     		bcs	.L131
1483:FreeRTOS/Src/queue.c ****             }
 1726              		.loc 1 1483 17 discriminator 1 view .LVU556
1483:FreeRTOS/Src/queue.c ****             }
 1727              		.loc 1 1483 17 discriminator 1 view .LVU557
 1728 0052 0137     		adds	r7, r7, #1
 1729              	.LVL169:
1483:FreeRTOS/Src/queue.c ****             }
 1730              		.loc 1 1483 17 is_stmt 0 discriminator 1 view .LVU558
 1731 0054 7FB2     		sxtb	r7, r7
 1732              	.LVL170:
1483:FreeRTOS/Src/queue.c ****             }
 1733              		.loc 1 1483 17 discriminator 1 view .LVU559
 1734 0056 84F84570 		strb	r7, [r4, #69]
 1735              	.LBE38:
1486:FreeRTOS/Src/queue.c ****         }
 1736              		.loc 1 1486 21 view .LVU560
 1737 005a 0120     		movs	r0, #1
 1738              	.LVL171:
1486:FreeRTOS/Src/queue.c ****         }
 1739              		.loc 1 1486 21 view .LVU561
 1740 005c 00E0     		b	.L125
 1741              	.LVL172:
 1742              	.L127:
1486:FreeRTOS/Src/queue.c ****         }
 1743              		.loc 1 1486 21 view .LVU562
 1744              	.LBE37:
1491:FreeRTOS/Src/queue.c ****         }
 1745              		.loc 1 1491 21 view .LVU563
 1746 005e 0020     		movs	r0, #0
 1747              	.LVL173:
 1748              	.L125:
1491:FreeRTOS/Src/queue.c ****         }
 1749              		.loc 1 1491 21 view .LVU564
 1750              	.LBE36:
1494:FreeRTOS/Src/queue.c **** 
 1751              		.loc 1 1494 5 is_stmt 1 view .LVU565
 1752              	.LBB40:
 1753              	.LBI40:
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 1754              		.loc 2 249 30 view .LVU566
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 92


 1755              	.LBB41:
 1756              		.loc 2 251 5 view .LVU567
 1757              		.syntax unified
 1758              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1759 0060 85F31188 		   msr basepri, r5 
 1760              	@ 0 "" 2
 1761              		.thumb
 1762              		.syntax unified
 1763              	.LBE41:
 1764              	.LBE40:
1496:FreeRTOS/Src/queue.c **** 
 1765              		.loc 1 1496 45 view .LVU568
1498:FreeRTOS/Src/queue.c **** }
 1766              		.loc 1 1498 5 view .LVU569
1499:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1767              		.loc 1 1499 1 is_stmt 0 view .LVU570
 1768 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1769              	.LVL174:
 1770              	.L129:
 1771              	.LBB42:
 1772              	.LBB39:
1486:FreeRTOS/Src/queue.c ****         }
 1773              		.loc 1 1486 21 view .LVU571
 1774 0066 0120     		movs	r0, #1
 1775 0068 FAE7     		b	.L125
 1776              	.L130:
 1777 006a 0120     		movs	r0, #1
 1778 006c F8E7     		b	.L125
 1779              	.LVL175:
 1780              	.L131:
1486:FreeRTOS/Src/queue.c ****         }
 1781              		.loc 1 1486 21 view .LVU572
 1782 006e 0120     		movs	r0, #1
 1783              	.LVL176:
1486:FreeRTOS/Src/queue.c ****         }
 1784              		.loc 1 1486 21 view .LVU573
 1785 0070 F6E7     		b	.L125
 1786              	.LBE39:
 1787              	.LBE42:
 1788              		.cfi_endproc
 1789              	.LFE138:
 1791              		.section	.text.xQueueReceive,"ax",%progbits
 1792              		.align	1
 1793              		.global	xQueueReceive
 1794              		.syntax unified
 1795              		.thumb
 1796              		.thumb_func
 1798              	xQueueReceive:
 1799              	.LVL177:
 1800              	.LFB139:
1505:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1801              		.loc 1 1505 1 is_stmt 1 view -0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 16
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
1505:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1805              		.loc 1 1505 1 is_stmt 0 view .LVU575
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 93


 1806 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1807              	.LCFI27:
 1808              		.cfi_def_cfa_offset 20
 1809              		.cfi_offset 4, -20
 1810              		.cfi_offset 5, -16
 1811              		.cfi_offset 6, -12
 1812              		.cfi_offset 7, -8
 1813              		.cfi_offset 14, -4
 1814 0002 85B0     		sub	sp, sp, #20
 1815              	.LCFI28:
 1816              		.cfi_def_cfa_offset 40
 1817 0004 0446     		mov	r4, r0
 1818 0006 0F46     		mov	r7, r1
 1819 0008 0192     		str	r2, [sp, #4]
1506:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
 1820              		.loc 1 1506 5 is_stmt 1 view .LVU576
 1821              	.LVL178:
1507:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 1822              		.loc 1 1507 5 view .LVU577
1508:FreeRTOS/Src/queue.c **** 
 1823              		.loc 1 1508 5 view .LVU578
1506:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
 1824              		.loc 1 1506 16 is_stmt 0 view .LVU579
 1825 000a 0026     		movs	r6, #0
 1826 000c 3EE0     		b	.L135
 1827              	.LVL179:
 1828              	.L149:
 1829              	.LBB43:
1537:FreeRTOS/Src/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
 1830              		.loc 1 1537 17 is_stmt 1 view .LVU580
 1831 000e 3946     		mov	r1, r7
 1832 0010 2046     		mov	r0, r4
 1833 0012 FFF7FEFF 		bl	prvCopyDataFromQueue
 1834              	.LVL180:
1538:FreeRTOS/Src/queue.c ****                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 
 1835              		.loc 1 1538 46 view .LVU581
1539:FreeRTOS/Src/queue.c **** 
 1836              		.loc 1 1539 17 view .LVU582
1539:FreeRTOS/Src/queue.c **** 
 1837              		.loc 1 1539 46 is_stmt 0 view .LVU583
 1838 0016 013D     		subs	r5, r5, #1
 1839              	.LVL181:
1539:FreeRTOS/Src/queue.c **** 
 1840              		.loc 1 1539 44 view .LVU584
 1841 0018 A563     		str	r5, [r4, #56]
1544:FreeRTOS/Src/queue.c ****                 {
 1842              		.loc 1 1544 17 is_stmt 1 view .LVU585
1544:FreeRTOS/Src/queue.c ****                 {
 1843              		.loc 1 1544 21 is_stmt 0 view .LVU586
 1844 001a 2369     		ldr	r3, [r4, #16]
1544:FreeRTOS/Src/queue.c ****                 {
 1845              		.loc 1 1544 19 view .LVU587
 1846 001c 23B9     		cbnz	r3, .L147
 1847              	.L137:
1557:FreeRTOS/Src/queue.c ****                 }
 1848              		.loc 1 1557 45 is_stmt 1 view .LVU588
1560:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 94


 1849              		.loc 1 1560 17 view .LVU589
 1850 001e FFF7FEFF 		bl	vPortExitCritical
 1851              	.LVL182:
1562:FreeRTOS/Src/queue.c **** 
 1852              		.loc 1 1562 52 view .LVU590
1564:FreeRTOS/Src/queue.c ****             }
 1853              		.loc 1 1564 17 view .LVU591
1564:FreeRTOS/Src/queue.c ****             }
 1854              		.loc 1 1564 24 is_stmt 0 view .LVU592
 1855 0022 0120     		movs	r0, #1
 1856              	.LVL183:
 1857              	.L134:
1564:FreeRTOS/Src/queue.c ****             }
 1858              		.loc 1 1564 24 view .LVU593
 1859              	.LBE43:
1649:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1860              		.loc 1 1649 1 view .LVU594
 1861 0024 05B0     		add	sp, sp, #20
 1862              	.LCFI29:
 1863              		.cfi_remember_state
 1864              		.cfi_def_cfa_offset 20
 1865              		@ sp needed
 1866 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 1867              	.LVL184:
 1868              	.L147:
 1869              	.LCFI30:
 1870              		.cfi_restore_state
 1871              	.LBB44:
1546:FreeRTOS/Src/queue.c ****                     {
 1872              		.loc 1 1546 21 is_stmt 1 view .LVU595
1546:FreeRTOS/Src/queue.c ****                     {
 1873              		.loc 1 1546 25 is_stmt 0 view .LVU596
 1874 0028 04F11000 		add	r0, r4, #16
 1875 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1876              	.LVL185:
1546:FreeRTOS/Src/queue.c ****                     {
 1877              		.loc 1 1546 23 discriminator 1 view .LVU597
 1878 0030 0028     		cmp	r0, #0
 1879 0032 F4D0     		beq	.L137
1548:FreeRTOS/Src/queue.c ****                     }
 1880              		.loc 1 1548 25 is_stmt 1 view .LVU598
 1881 0034 4FF0E023 		mov	r3, #-536813568
 1882 0038 4FF08052 		mov	r2, #268435456
 1883 003c C3F8042D 		str	r2, [r3, #3332]
1548:FreeRTOS/Src/queue.c ****                     }
 1884              		.loc 1 1548 25 view .LVU599
 1885              		.syntax unified
 1886              	@ 1548 "FreeRTOS/Src/queue.c" 1
 1887 0040 BFF34F8F 		dsb
 1888              	@ 0 "" 2
1548:FreeRTOS/Src/queue.c ****                     }
 1889              		.loc 1 1548 25 view .LVU600
 1890              	@ 1548 "FreeRTOS/Src/queue.c" 1
 1891 0044 BFF36F8F 		isb
 1892              	@ 0 "" 2
1548:FreeRTOS/Src/queue.c ****                     }
 1893              		.loc 1 1548 57 view .LVU601
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 95


 1894              		.thumb
 1895              		.syntax unified
 1896 0048 E9E7     		b	.L137
 1897              	.LVL186:
 1898              	.L150:
1572:FreeRTOS/Src/queue.c **** 
 1899              		.loc 1 1572 21 view .LVU602
 1900 004a FFF7FEFF 		bl	vPortExitCritical
 1901              	.LVL187:
1574:FreeRTOS/Src/queue.c ****                     traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 1902              		.loc 1 1574 57 view .LVU603
1575:FreeRTOS/Src/queue.c **** 
 1903              		.loc 1 1575 64 view .LVU604
1577:FreeRTOS/Src/queue.c ****                 }
 1904              		.loc 1 1577 21 view .LVU605
1577:FreeRTOS/Src/queue.c ****                 }
 1905              		.loc 1 1577 28 is_stmt 0 view .LVU606
 1906 004e 0020     		movs	r0, #0
 1907 0050 E8E7     		b	.L134
 1908              	.L151:
1583:FreeRTOS/Src/queue.c ****                     xEntryTimeSet = pdTRUE;
 1909              		.loc 1 1583 21 is_stmt 1 view .LVU607
 1910 0052 02A8     		add	r0, sp, #8
 1911 0054 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1912              	.LVL188:
1584:FreeRTOS/Src/queue.c ****                 }
 1913              		.loc 1 1584 21 view .LVU608
1584:FreeRTOS/Src/queue.c ****                 }
 1914              		.loc 1 1584 35 is_stmt 0 view .LVU609
 1915 0058 0126     		movs	r6, #1
 1916 005a 21E0     		b	.L140
 1917              	.LVL189:
 1918              	.L152:
1584:FreeRTOS/Src/queue.c ****                 }
 1919              		.loc 1 1584 35 view .LVU610
 1920              	.LBE44:
1599:FreeRTOS/Src/queue.c **** 
 1921              		.loc 1 1599 9 is_stmt 1 discriminator 1 view .LVU611
 1922 005c 0023     		movs	r3, #0
 1923 005e 84F84430 		strb	r3, [r4, #68]
 1924 0062 29E0     		b	.L141
 1925              	.L153:
1599:FreeRTOS/Src/queue.c **** 
 1926              		.loc 1 1599 9 discriminator 4 view .LVU612
 1927 0064 0023     		movs	r3, #0
 1928 0066 84F84530 		strb	r3, [r4, #69]
 1929 006a 2BE0     		b	.L142
 1930              	.L144:
1625:FreeRTOS/Src/queue.c ****                 ( void ) xTaskResumeAll();
 1931              		.loc 1 1625 17 view .LVU613
 1932 006c 2046     		mov	r0, r4
 1933 006e FFF7FEFF 		bl	prvUnlockQueue
 1934              	.LVL190:
1626:FreeRTOS/Src/queue.c ****             }
 1935              		.loc 1 1626 17 view .LVU614
1626:FreeRTOS/Src/queue.c ****             }
 1936              		.loc 1 1626 26 is_stmt 0 view .LVU615
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 96


 1937 0072 FFF7FEFF 		bl	xTaskResumeAll
 1938              	.LVL191:
 1939 0076 09E0     		b	.L135
 1940              	.L143:
1633:FreeRTOS/Src/queue.c ****             ( void ) xTaskResumeAll();
 1941              		.loc 1 1633 13 is_stmt 1 view .LVU616
 1942 0078 2046     		mov	r0, r4
 1943 007a FFF7FEFF 		bl	prvUnlockQueue
 1944              	.LVL192:
1634:FreeRTOS/Src/queue.c **** 
 1945              		.loc 1 1634 13 view .LVU617
1634:FreeRTOS/Src/queue.c **** 
 1946              		.loc 1 1634 22 is_stmt 0 view .LVU618
 1947 007e FFF7FEFF 		bl	xTaskResumeAll
 1948              	.LVL193:
1636:FreeRTOS/Src/queue.c ****             {
 1949              		.loc 1 1636 13 is_stmt 1 view .LVU619
1636:FreeRTOS/Src/queue.c ****             {
 1950              		.loc 1 1636 17 is_stmt 0 view .LVU620
 1951 0082 2046     		mov	r0, r4
 1952 0084 FFF7FEFF 		bl	prvIsQueueEmpty
 1953              	.LVL194:
1636:FreeRTOS/Src/queue.c ****             {
 1954              		.loc 1 1636 15 discriminator 1 view .LVU621
 1955 0088 0028     		cmp	r0, #0
 1956 008a 3FD1     		bne	.L148
 1957              	.LVL195:
 1958              	.L135:
1510:FreeRTOS/Src/queue.c **** 
 1959              		.loc 1 1510 63 is_stmt 1 view .LVU622
1513:FreeRTOS/Src/queue.c **** 
 1960              		.loc 1 1513 32 view .LVU623
1517:FreeRTOS/Src/queue.c **** 
 1961              		.loc 1 1517 103 view .LVU624
1522:FreeRTOS/Src/queue.c ****     }
 1962              		.loc 1 1522 110 view .LVU625
1526:FreeRTOS/Src/queue.c ****     {
 1963              		.loc 1 1526 5 view .LVU626
1528:FreeRTOS/Src/queue.c ****         {
 1964              		.loc 1 1528 9 view .LVU627
 1965 008c FFF7FEFF 		bl	vPortEnterCritical
 1966              	.LVL196:
 1967              	.LBB45:
1530:FreeRTOS/Src/queue.c **** 
 1968              		.loc 1 1530 13 view .LVU628
1530:FreeRTOS/Src/queue.c **** 
 1969              		.loc 1 1530 31 is_stmt 0 view .LVU629
 1970 0090 A56B     		ldr	r5, [r4, #56]
 1971              	.LVL197:
1534:FreeRTOS/Src/queue.c ****             {
 1972              		.loc 1 1534 13 is_stmt 1 view .LVU630
1534:FreeRTOS/Src/queue.c ****             {
 1973              		.loc 1 1534 15 is_stmt 0 view .LVU631
 1974 0092 002D     		cmp	r5, #0
 1975 0094 BBD1     		bne	.L149
1568:FreeRTOS/Src/queue.c ****                 {
 1976              		.loc 1 1568 17 is_stmt 1 view .LVU632
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 97


1568:FreeRTOS/Src/queue.c ****                 {
 1977              		.loc 1 1568 34 is_stmt 0 view .LVU633
 1978 0096 019B     		ldr	r3, [sp, #4]
1568:FreeRTOS/Src/queue.c ****                 {
 1979              		.loc 1 1568 19 view .LVU634
 1980 0098 002B     		cmp	r3, #0
 1981 009a D6D0     		beq	.L150
1579:FreeRTOS/Src/queue.c ****                 {
 1982              		.loc 1 1579 22 is_stmt 1 view .LVU635
1579:FreeRTOS/Src/queue.c ****                 {
 1983              		.loc 1 1579 24 is_stmt 0 view .LVU636
 1984 009c 002E     		cmp	r6, #0
 1985 009e D8D0     		beq	.L151
 1986              	.LVL198:
 1987              	.L140:
1589:FreeRTOS/Src/queue.c ****                 }
 1988              		.loc 1 1589 45 is_stmt 1 view .LVU637
 1989              	.LBE45:
1593:FreeRTOS/Src/queue.c **** 
 1990              		.loc 1 1593 9 view .LVU638
 1991 00a0 FFF7FEFF 		bl	vPortExitCritical
 1992              	.LVL199:
1598:FreeRTOS/Src/queue.c ****         prvLockQueue( pxQueue );
 1993              		.loc 1 1598 9 view .LVU639
 1994 00a4 FFF7FEFF 		bl	vTaskSuspendAll
 1995              	.LVL200:
1599:FreeRTOS/Src/queue.c **** 
 1996              		.loc 1 1599 9 view .LVU640
 1997 00a8 FFF7FEFF 		bl	vPortEnterCritical
 1998              	.LVL201:
1599:FreeRTOS/Src/queue.c **** 
 1999              		.loc 1 1599 9 discriminator 1 view .LVU641
 2000 00ac 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2001 00b0 5BB2     		sxtb	r3, r3
 2002 00b2 B3F1FF3F 		cmp	r3, #-1
 2003 00b6 D1D0     		beq	.L152
 2004              	.L141:
1599:FreeRTOS/Src/queue.c **** 
 2005              		.loc 1 1599 9 discriminator 3 view .LVU642
 2006 00b8 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2007 00bc 5BB2     		sxtb	r3, r3
 2008 00be B3F1FF3F 		cmp	r3, #-1
 2009 00c2 CFD0     		beq	.L153
 2010              	.L142:
1599:FreeRTOS/Src/queue.c **** 
 2011              		.loc 1 1599 9 discriminator 6 view .LVU643
 2012 00c4 FFF7FEFF 		bl	vPortExitCritical
 2013              	.LVL202:
1602:FreeRTOS/Src/queue.c ****         {
 2014              		.loc 1 1602 9 view .LVU644
1602:FreeRTOS/Src/queue.c ****         {
 2015              		.loc 1 1602 13 is_stmt 0 view .LVU645
 2016 00c8 01A9     		add	r1, sp, #4
 2017 00ca 02A8     		add	r0, sp, #8
 2018 00cc FFF7FEFF 		bl	xTaskCheckForTimeOut
 2019              	.LVL203:
1602:FreeRTOS/Src/queue.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 98


 2020              		.loc 1 1602 11 discriminator 1 view .LVU646
 2021 00d0 0028     		cmp	r0, #0
 2022 00d2 D1D1     		bne	.L143
1606:FreeRTOS/Src/queue.c ****             {
 2023              		.loc 1 1606 13 is_stmt 1 view .LVU647
1606:FreeRTOS/Src/queue.c ****             {
 2024              		.loc 1 1606 17 is_stmt 0 view .LVU648
 2025 00d4 2046     		mov	r0, r4
 2026 00d6 FFF7FEFF 		bl	prvIsQueueEmpty
 2027              	.LVL204:
1606:FreeRTOS/Src/queue.c ****             {
 2028              		.loc 1 1606 15 discriminator 1 view .LVU649
 2029 00da 0028     		cmp	r0, #0
 2030 00dc C6D0     		beq	.L144
1608:FreeRTOS/Src/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2031              		.loc 1 1608 58 is_stmt 1 view .LVU650
1609:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
 2032              		.loc 1 1609 17 view .LVU651
 2033 00de 0199     		ldr	r1, [sp, #4]
 2034 00e0 04F12400 		add	r0, r4, #36
 2035 00e4 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2036              	.LVL205:
1610:FreeRTOS/Src/queue.c **** 
 2037              		.loc 1 1610 17 view .LVU652
 2038 00e8 2046     		mov	r0, r4
 2039 00ea FFF7FEFF 		bl	prvUnlockQueue
 2040              	.LVL206:
1612:FreeRTOS/Src/queue.c ****                 {
 2041              		.loc 1 1612 17 view .LVU653
1612:FreeRTOS/Src/queue.c ****                 {
 2042              		.loc 1 1612 21 is_stmt 0 view .LVU654
 2043 00ee FFF7FEFF 		bl	xTaskResumeAll
 2044              	.LVL207:
1612:FreeRTOS/Src/queue.c ****                 {
 2045              		.loc 1 1612 19 discriminator 1 view .LVU655
 2046 00f2 0028     		cmp	r0, #0
 2047 00f4 CAD1     		bne	.L135
1614:FreeRTOS/Src/queue.c ****                 }
 2048              		.loc 1 1614 21 is_stmt 1 view .LVU656
 2049 00f6 4FF0E023 		mov	r3, #-536813568
 2050 00fa 4FF08052 		mov	r2, #268435456
 2051 00fe C3F8042D 		str	r2, [r3, #3332]
1614:FreeRTOS/Src/queue.c ****                 }
 2052              		.loc 1 1614 21 view .LVU657
 2053              		.syntax unified
 2054              	@ 1614 "FreeRTOS/Src/queue.c" 1
 2055 0102 BFF34F8F 		dsb
 2056              	@ 0 "" 2
1614:FreeRTOS/Src/queue.c ****                 }
 2057              		.loc 1 1614 21 view .LVU658
 2058              	@ 1614 "FreeRTOS/Src/queue.c" 1
 2059 0106 BFF36F8F 		isb
 2060              	@ 0 "" 2
1614:FreeRTOS/Src/queue.c ****                 }
 2061              		.loc 1 1614 43 view .LVU659
 2062              		.thumb
 2063              		.syntax unified
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 99


 2064 010a BFE7     		b	.L135
 2065              	.L148:
1641:FreeRTOS/Src/queue.c ****             }
 2066              		.loc 1 1641 24 is_stmt 0 view .LVU660
 2067 010c 0020     		movs	r0, #0
 2068 010e 89E7     		b	.L134
 2069              		.cfi_endproc
 2070              	.LFE139:
 2072              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2073              		.align	1
 2074              		.global	xQueueSemaphoreTake
 2075              		.syntax unified
 2076              		.thumb
 2077              		.thumb_func
 2079              	xQueueSemaphoreTake:
 2080              	.LVL208:
 2081              	.LFB140:
1654:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2082              		.loc 1 1654 1 is_stmt 1 view -0
 2083              		.cfi_startproc
 2084              		@ args = 0, pretend = 0, frame = 16
 2085              		@ frame_needed = 0, uses_anonymous_args = 0
1654:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2086              		.loc 1 1654 1 is_stmt 0 view .LVU662
 2087 0000 70B5     		push	{r4, r5, r6, lr}
 2088              	.LCFI31:
 2089              		.cfi_def_cfa_offset 16
 2090              		.cfi_offset 4, -16
 2091              		.cfi_offset 5, -12
 2092              		.cfi_offset 6, -8
 2093              		.cfi_offset 14, -4
 2094 0002 84B0     		sub	sp, sp, #16
 2095              	.LCFI32:
 2096              		.cfi_def_cfa_offset 32
 2097 0004 0446     		mov	r4, r0
 2098 0006 0191     		str	r1, [sp, #4]
1655:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
 2099              		.loc 1 1655 5 is_stmt 1 view .LVU663
 2100              	.LVL209:
1656:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 2101              		.loc 1 1656 5 view .LVU664
1657:FreeRTOS/Src/queue.c **** 
 2102              		.loc 1 1657 5 view .LVU665
1660:FreeRTOS/Src/queue.c ****     #endif
 2103              		.loc 1 1660 9 view .LVU666
1660:FreeRTOS/Src/queue.c ****     #endif
 2104              		.loc 1 1660 20 is_stmt 0 view .LVU667
 2105 0008 0026     		movs	r6, #0
1655:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
 2106              		.loc 1 1655 16 view .LVU668
 2107 000a 3546     		mov	r5, r6
 2108 000c 49E0     		b	.L155
 2109              	.LVL210:
 2110              	.L173:
 2111              	.LBB46:
1691:FreeRTOS/Src/queue.c **** 
 2112              		.loc 1 1691 46 is_stmt 1 view .LVU669
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 100


1695:FreeRTOS/Src/queue.c **** 
 2113              		.loc 1 1695 17 view .LVU670
1695:FreeRTOS/Src/queue.c **** 
 2114              		.loc 1 1695 46 is_stmt 0 view .LVU671
 2115 000e 013B     		subs	r3, r3, #1
 2116              	.LVL211:
1695:FreeRTOS/Src/queue.c **** 
 2117              		.loc 1 1695 44 view .LVU672
 2118 0010 A363     		str	r3, [r4, #56]
1699:FreeRTOS/Src/queue.c ****                     {
 2119              		.loc 1 1699 21 is_stmt 1 view .LVU673
1699:FreeRTOS/Src/queue.c ****                     {
 2120              		.loc 1 1699 32 is_stmt 0 view .LVU674
 2121 0012 2368     		ldr	r3, [r4]
 2122              	.LVL212:
1699:FreeRTOS/Src/queue.c ****                     {
 2123              		.loc 1 1699 23 view .LVU675
 2124 0014 33B1     		cbz	r3, .L170
 2125              	.LVL213:
 2126              	.L157:
1707:FreeRTOS/Src/queue.c ****                     }
 2127              		.loc 1 1707 49 is_stmt 1 view .LVU676
1714:FreeRTOS/Src/queue.c ****                 {
 2128              		.loc 1 1714 17 view .LVU677
1714:FreeRTOS/Src/queue.c ****                 {
 2129              		.loc 1 1714 21 is_stmt 0 view .LVU678
 2130 0016 2369     		ldr	r3, [r4, #16]
1714:FreeRTOS/Src/queue.c ****                 {
 2131              		.loc 1 1714 19 view .LVU679
 2132 0018 43B9     		cbnz	r3, .L171
 2133              	.L158:
1727:FreeRTOS/Src/queue.c ****                 }
 2134              		.loc 1 1727 45 is_stmt 1 view .LVU680
1730:FreeRTOS/Src/queue.c **** 
 2135              		.loc 1 1730 17 view .LVU681
 2136 001a FFF7FEFF 		bl	vPortExitCritical
 2137              	.LVL214:
1732:FreeRTOS/Src/queue.c **** 
 2138              		.loc 1 1732 58 view .LVU682
1734:FreeRTOS/Src/queue.c ****             }
 2139              		.loc 1 1734 17 view .LVU683
1734:FreeRTOS/Src/queue.c ****             }
 2140              		.loc 1 1734 24 is_stmt 0 view .LVU684
 2141 001e 0120     		movs	r0, #1
 2142              	.L154:
1734:FreeRTOS/Src/queue.c ****             }
 2143              		.loc 1 1734 24 view .LVU685
 2144              	.LBE46:
1874:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 2145              		.loc 1 1874 1 view .LVU686
 2146 0020 04B0     		add	sp, sp, #16
 2147              	.LCFI33:
 2148              		.cfi_remember_state
 2149              		.cfi_def_cfa_offset 16
 2150              		@ sp needed
 2151 0022 70BD     		pop	{r4, r5, r6, pc}
 2152              	.LVL215:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 101


 2153              	.L170:
 2154              	.LCFI34:
 2155              		.cfi_restore_state
 2156              	.LBB47:
1703:FreeRTOS/Src/queue.c ****                     }
 2157              		.loc 1 1703 25 is_stmt 1 view .LVU687
1703:FreeRTOS/Src/queue.c ****                     }
 2158              		.loc 1 1703 62 is_stmt 0 view .LVU688
 2159 0024 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2160              	.LVL216:
1703:FreeRTOS/Src/queue.c ****                     }
 2161              		.loc 1 1703 60 discriminator 1 view .LVU689
 2162 0028 A060     		str	r0, [r4, #8]
 2163 002a F4E7     		b	.L157
 2164              	.L171:
1716:FreeRTOS/Src/queue.c ****                     {
 2165              		.loc 1 1716 21 is_stmt 1 view .LVU690
1716:FreeRTOS/Src/queue.c ****                     {
 2166              		.loc 1 1716 25 is_stmt 0 view .LVU691
 2167 002c 04F11000 		add	r0, r4, #16
 2168 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2169              	.LVL217:
1716:FreeRTOS/Src/queue.c ****                     {
 2170              		.loc 1 1716 23 discriminator 1 view .LVU692
 2171 0034 0028     		cmp	r0, #0
 2172 0036 F0D0     		beq	.L158
1718:FreeRTOS/Src/queue.c ****                     }
 2173              		.loc 1 1718 25 is_stmt 1 view .LVU693
 2174 0038 4FF0E023 		mov	r3, #-536813568
 2175 003c 4FF08052 		mov	r2, #268435456
 2176 0040 C3F8042D 		str	r2, [r3, #3332]
1718:FreeRTOS/Src/queue.c ****                     }
 2177              		.loc 1 1718 25 view .LVU694
 2178              		.syntax unified
 2179              	@ 1718 "FreeRTOS/Src/queue.c" 1
 2180 0044 BFF34F8F 		dsb
 2181              	@ 0 "" 2
1718:FreeRTOS/Src/queue.c ****                     }
 2182              		.loc 1 1718 25 view .LVU695
 2183              	@ 1718 "FreeRTOS/Src/queue.c" 1
 2184 0048 BFF36F8F 		isb
 2185              	@ 0 "" 2
1718:FreeRTOS/Src/queue.c ****                     }
 2186              		.loc 1 1718 57 view .LVU696
 2187              		.thumb
 2188              		.syntax unified
 2189 004c E5E7     		b	.L158
 2190              	.L174:
1742:FreeRTOS/Src/queue.c **** 
 2191              		.loc 1 1742 21 view .LVU697
 2192 004e FFF7FEFF 		bl	vPortExitCritical
 2193              	.LVL218:
1744:FreeRTOS/Src/queue.c ****                     traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 2194              		.loc 1 1744 57 view .LVU698
1745:FreeRTOS/Src/queue.c **** 
 2195              		.loc 1 1745 70 view .LVU699
1747:FreeRTOS/Src/queue.c ****                 }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 102


 2196              		.loc 1 1747 21 view .LVU700
1747:FreeRTOS/Src/queue.c ****                 }
 2197              		.loc 1 1747 28 is_stmt 0 view .LVU701
 2198 0052 0020     		movs	r0, #0
 2199 0054 E4E7     		b	.L154
 2200              	.L175:
1753:FreeRTOS/Src/queue.c ****                     xEntryTimeSet = pdTRUE;
 2201              		.loc 1 1753 21 is_stmt 1 view .LVU702
 2202 0056 02A8     		add	r0, sp, #8
 2203 0058 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2204              	.LVL219:
1754:FreeRTOS/Src/queue.c ****                 }
 2205              		.loc 1 1754 21 view .LVU703
1754:FreeRTOS/Src/queue.c ****                 }
 2206              		.loc 1 1754 35 is_stmt 0 view .LVU704
 2207 005c 0125     		movs	r5, #1
 2208 005e 2AE0     		b	.L161
 2209              	.LVL220:
 2210              	.L176:
1754:FreeRTOS/Src/queue.c ****                 }
 2211              		.loc 1 1754 35 view .LVU705
 2212              	.LBE47:
1769:FreeRTOS/Src/queue.c **** 
 2213              		.loc 1 1769 9 is_stmt 1 discriminator 1 view .LVU706
 2214 0060 0023     		movs	r3, #0
 2215 0062 84F84430 		strb	r3, [r4, #68]
 2216 0066 32E0     		b	.L162
 2217              	.L177:
1769:FreeRTOS/Src/queue.c **** 
 2218              		.loc 1 1769 9 discriminator 4 view .LVU707
 2219 0068 0023     		movs	r3, #0
 2220 006a 84F84530 		strb	r3, [r4, #69]
 2221 006e 34E0     		b	.L163
 2222              	.L178:
1786:FreeRTOS/Src/queue.c ****                         {
 2223              		.loc 1 1786 25 view .LVU708
 2224 0070 FFF7FEFF 		bl	vPortEnterCritical
 2225              	.LVL221:
1788:FreeRTOS/Src/queue.c ****                         }
 2226              		.loc 1 1788 29 view .LVU709
1788:FreeRTOS/Src/queue.c ****                         }
 2227              		.loc 1 1788 52 is_stmt 0 view .LVU710
 2228 0074 A068     		ldr	r0, [r4, #8]
 2229 0076 FFF7FEFF 		bl	xTaskPriorityInherit
 2230              	.LVL222:
 2231 007a 0646     		mov	r6, r0
 2232              	.LVL223:
1790:FreeRTOS/Src/queue.c ****                     }
 2233              		.loc 1 1790 25 is_stmt 1 view .LVU711
 2234 007c FFF7FEFF 		bl	vPortExitCritical
 2235              	.LVL224:
1790:FreeRTOS/Src/queue.c ****                     }
 2236              		.loc 1 1790 25 is_stmt 0 view .LVU712
 2237 0080 3BE0     		b	.L166
 2238              	.L165:
1815:FreeRTOS/Src/queue.c ****                 ( void ) xTaskResumeAll();
 2239              		.loc 1 1815 17 is_stmt 1 view .LVU713
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 103


 2240 0082 2046     		mov	r0, r4
 2241 0084 FFF7FEFF 		bl	prvUnlockQueue
 2242              	.LVL225:
1816:FreeRTOS/Src/queue.c ****             }
 2243              		.loc 1 1816 17 view .LVU714
1816:FreeRTOS/Src/queue.c ****             }
 2244              		.loc 1 1816 26 is_stmt 0 view .LVU715
 2245 0088 FFF7FEFF 		bl	xTaskResumeAll
 2246              	.LVL226:
 2247 008c 09E0     		b	.L155
 2248              	.L164:
1822:FreeRTOS/Src/queue.c ****             ( void ) xTaskResumeAll();
 2249              		.loc 1 1822 13 is_stmt 1 view .LVU716
 2250 008e 2046     		mov	r0, r4
 2251 0090 FFF7FEFF 		bl	prvUnlockQueue
 2252              	.LVL227:
1823:FreeRTOS/Src/queue.c **** 
 2253              		.loc 1 1823 13 view .LVU717
1823:FreeRTOS/Src/queue.c **** 
 2254              		.loc 1 1823 22 is_stmt 0 view .LVU718
 2255 0094 FFF7FEFF 		bl	xTaskResumeAll
 2256              	.LVL228:
1829:FreeRTOS/Src/queue.c ****             {
 2257              		.loc 1 1829 13 is_stmt 1 view .LVU719
1829:FreeRTOS/Src/queue.c ****             {
 2258              		.loc 1 1829 17 is_stmt 0 view .LVU720
 2259 0098 2046     		mov	r0, r4
 2260 009a FFF7FEFF 		bl	prvIsQueueEmpty
 2261              	.LVL229:
1829:FreeRTOS/Src/queue.c ****             {
 2262              		.loc 1 1829 15 discriminator 1 view .LVU721
 2263 009e 0028     		cmp	r0, #0
 2264 00a0 42D1     		bne	.L172
 2265              	.LVL230:
 2266              	.L155:
1663:FreeRTOS/Src/queue.c **** 
 2267              		.loc 1 1663 59 is_stmt 1 view .LVU722
1666:FreeRTOS/Src/queue.c **** 
 2268              		.loc 1 1666 32 view .LVU723
1670:FreeRTOS/Src/queue.c **** 
 2269              		.loc 1 1670 45 view .LVU724
1675:FreeRTOS/Src/queue.c ****     }
 2270              		.loc 1 1675 110 view .LVU725
1679:FreeRTOS/Src/queue.c ****     {
 2271              		.loc 1 1679 5 view .LVU726
1681:FreeRTOS/Src/queue.c ****         {
 2272              		.loc 1 1681 9 view .LVU727
 2273 00a2 FFF7FEFF 		bl	vPortEnterCritical
 2274              	.LVL231:
 2275              	.LBB48:
1685:FreeRTOS/Src/queue.c **** 
 2276              		.loc 1 1685 13 view .LVU728
1685:FreeRTOS/Src/queue.c **** 
 2277              		.loc 1 1685 31 is_stmt 0 view .LVU729
 2278 00a6 A36B     		ldr	r3, [r4, #56]
 2279              	.LVL232:
1689:FreeRTOS/Src/queue.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 104


 2280              		.loc 1 1689 13 is_stmt 1 view .LVU730
1689:FreeRTOS/Src/queue.c ****             {
 2281              		.loc 1 1689 15 is_stmt 0 view .LVU731
 2282 00a8 002B     		cmp	r3, #0
 2283 00aa B0D1     		bne	.L173
1738:FreeRTOS/Src/queue.c ****                 {
 2284              		.loc 1 1738 17 is_stmt 1 view .LVU732
1738:FreeRTOS/Src/queue.c ****                 {
 2285              		.loc 1 1738 34 is_stmt 0 view .LVU733
 2286 00ac 019B     		ldr	r3, [sp, #4]
 2287              	.LVL233:
1738:FreeRTOS/Src/queue.c ****                 {
 2288              		.loc 1 1738 19 view .LVU734
 2289 00ae 002B     		cmp	r3, #0
 2290 00b0 CDD0     		beq	.L174
1749:FreeRTOS/Src/queue.c ****                 {
 2291              		.loc 1 1749 22 is_stmt 1 view .LVU735
1749:FreeRTOS/Src/queue.c ****                 {
 2292              		.loc 1 1749 24 is_stmt 0 view .LVU736
 2293 00b2 002D     		cmp	r5, #0
 2294 00b4 CFD0     		beq	.L175
 2295              	.LVL234:
 2296              	.L161:
1759:FreeRTOS/Src/queue.c ****                 }
 2297              		.loc 1 1759 45 is_stmt 1 view .LVU737
 2298              	.LBE48:
1763:FreeRTOS/Src/queue.c **** 
 2299              		.loc 1 1763 9 view .LVU738
 2300 00b6 FFF7FEFF 		bl	vPortExitCritical
 2301              	.LVL235:
1768:FreeRTOS/Src/queue.c ****         prvLockQueue( pxQueue );
 2302              		.loc 1 1768 9 view .LVU739
 2303 00ba FFF7FEFF 		bl	vTaskSuspendAll
 2304              	.LVL236:
1769:FreeRTOS/Src/queue.c **** 
 2305              		.loc 1 1769 9 view .LVU740
 2306 00be FFF7FEFF 		bl	vPortEnterCritical
 2307              	.LVL237:
1769:FreeRTOS/Src/queue.c **** 
 2308              		.loc 1 1769 9 discriminator 1 view .LVU741
 2309 00c2 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2310 00c6 5BB2     		sxtb	r3, r3
 2311 00c8 B3F1FF3F 		cmp	r3, #-1
 2312 00cc C8D0     		beq	.L176
 2313              	.L162:
1769:FreeRTOS/Src/queue.c **** 
 2314              		.loc 1 1769 9 discriminator 3 view .LVU742
 2315 00ce 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2316 00d2 5BB2     		sxtb	r3, r3
 2317 00d4 B3F1FF3F 		cmp	r3, #-1
 2318 00d8 C6D0     		beq	.L177
 2319              	.L163:
1769:FreeRTOS/Src/queue.c **** 
 2320              		.loc 1 1769 9 discriminator 6 view .LVU743
 2321 00da FFF7FEFF 		bl	vPortExitCritical
 2322              	.LVL238:
1772:FreeRTOS/Src/queue.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 105


 2323              		.loc 1 1772 9 view .LVU744
1772:FreeRTOS/Src/queue.c ****         {
 2324              		.loc 1 1772 13 is_stmt 0 view .LVU745
 2325 00de 01A9     		add	r1, sp, #4
 2326 00e0 02A8     		add	r0, sp, #8
 2327 00e2 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2328              	.LVL239:
1772:FreeRTOS/Src/queue.c ****         {
 2329              		.loc 1 1772 11 discriminator 1 view .LVU746
 2330 00e6 0028     		cmp	r0, #0
 2331 00e8 D1D1     		bne	.L164
1778:FreeRTOS/Src/queue.c ****             {
 2332              		.loc 1 1778 13 is_stmt 1 view .LVU747
1778:FreeRTOS/Src/queue.c ****             {
 2333              		.loc 1 1778 17 is_stmt 0 view .LVU748
 2334 00ea 2046     		mov	r0, r4
 2335 00ec FFF7FEFF 		bl	prvIsQueueEmpty
 2336              	.LVL240:
1778:FreeRTOS/Src/queue.c ****             {
 2337              		.loc 1 1778 15 discriminator 1 view .LVU749
 2338 00f0 0028     		cmp	r0, #0
 2339 00f2 C6D0     		beq	.L165
1780:FreeRTOS/Src/queue.c **** 
 2340              		.loc 1 1780 58 is_stmt 1 view .LVU750
1784:FreeRTOS/Src/queue.c ****                     {
 2341              		.loc 1 1784 21 view .LVU751
1784:FreeRTOS/Src/queue.c ****                     {
 2342              		.loc 1 1784 32 is_stmt 0 view .LVU752
 2343 00f4 2368     		ldr	r3, [r4]
1784:FreeRTOS/Src/queue.c ****                     {
 2344              		.loc 1 1784 23 view .LVU753
 2345 00f6 002B     		cmp	r3, #0
 2346 00f8 BAD0     		beq	.L178
 2347              	.L166:
1794:FreeRTOS/Src/queue.c ****                     }
 2348              		.loc 1 1794 49 is_stmt 1 view .LVU754
1799:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
 2349              		.loc 1 1799 17 view .LVU755
 2350 00fa 0199     		ldr	r1, [sp, #4]
 2351 00fc 04F12400 		add	r0, r4, #36
 2352 0100 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2353              	.LVL241:
1800:FreeRTOS/Src/queue.c **** 
 2354              		.loc 1 1800 17 view .LVU756
 2355 0104 2046     		mov	r0, r4
 2356 0106 FFF7FEFF 		bl	prvUnlockQueue
 2357              	.LVL242:
1802:FreeRTOS/Src/queue.c ****                 {
 2358              		.loc 1 1802 17 view .LVU757
1802:FreeRTOS/Src/queue.c ****                 {
 2359              		.loc 1 1802 21 is_stmt 0 view .LVU758
 2360 010a FFF7FEFF 		bl	xTaskResumeAll
 2361              	.LVL243:
1802:FreeRTOS/Src/queue.c ****                 {
 2362              		.loc 1 1802 19 discriminator 1 view .LVU759
 2363 010e 0028     		cmp	r0, #0
 2364 0110 C7D1     		bne	.L155
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 106


1804:FreeRTOS/Src/queue.c ****                 }
 2365              		.loc 1 1804 21 is_stmt 1 view .LVU760
 2366 0112 4FF0E023 		mov	r3, #-536813568
 2367 0116 4FF08052 		mov	r2, #268435456
 2368 011a C3F8042D 		str	r2, [r3, #3332]
1804:FreeRTOS/Src/queue.c ****                 }
 2369              		.loc 1 1804 21 view .LVU761
 2370              		.syntax unified
 2371              	@ 1804 "FreeRTOS/Src/queue.c" 1
 2372 011e BFF34F8F 		dsb
 2373              	@ 0 "" 2
1804:FreeRTOS/Src/queue.c ****                 }
 2374              		.loc 1 1804 21 view .LVU762
 2375              	@ 1804 "FreeRTOS/Src/queue.c" 1
 2376 0122 BFF36F8F 		isb
 2377              	@ 0 "" 2
1804:FreeRTOS/Src/queue.c ****                 }
 2378              		.loc 1 1804 43 view .LVU763
 2379              		.thumb
 2380              		.syntax unified
 2381 0126 BCE7     		b	.L155
 2382              	.L172:
1836:FreeRTOS/Src/queue.c ****                     {
 2383              		.loc 1 1836 21 view .LVU764
1836:FreeRTOS/Src/queue.c ****                     {
 2384              		.loc 1 1836 23 is_stmt 0 view .LVU765
 2385 0128 0EB9     		cbnz	r6, .L179
 2386              	.L168:
1863:FreeRTOS/Src/queue.c ****                 traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 2387              		.loc 1 1863 53 is_stmt 1 view .LVU766
1864:FreeRTOS/Src/queue.c **** 
 2388              		.loc 1 1864 66 view .LVU767
1866:FreeRTOS/Src/queue.c ****             }
 2389              		.loc 1 1866 17 view .LVU768
1866:FreeRTOS/Src/queue.c ****             }
 2390              		.loc 1 1866 24 is_stmt 0 view .LVU769
 2391 012a 0020     		movs	r0, #0
 2392 012c 78E7     		b	.L154
 2393              	.L179:
1838:FreeRTOS/Src/queue.c ****                         {
 2394              		.loc 1 1838 25 is_stmt 1 view .LVU770
 2395 012e FFF7FEFF 		bl	vPortEnterCritical
 2396              	.LVL244:
 2397              	.LBB49:
1840:FreeRTOS/Src/queue.c **** 
 2398              		.loc 1 1840 29 view .LVU771
1847:FreeRTOS/Src/queue.c **** 
 2399              		.loc 1 1847 29 view .LVU772
1847:FreeRTOS/Src/queue.c **** 
 2400              		.loc 1 1847 56 is_stmt 0 view .LVU773
 2401 0132 2046     		mov	r0, r4
 2402 0134 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2403              	.LVL245:
 2404 0138 0146     		mov	r1, r0
 2405              	.LVL246:
1856:FreeRTOS/Src/queue.c ****                         }
 2406              		.loc 1 1856 29 is_stmt 1 view .LVU774
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 107


 2407 013a A068     		ldr	r0, [r4, #8]
 2408              	.LVL247:
1856:FreeRTOS/Src/queue.c ****                         }
 2409              		.loc 1 1856 29 is_stmt 0 view .LVU775
 2410 013c FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2411              	.LVL248:
1856:FreeRTOS/Src/queue.c ****                         }
 2412              		.loc 1 1856 29 view .LVU776
 2413              	.LBE49:
1858:FreeRTOS/Src/queue.c ****                     }
 2414              		.loc 1 1858 25 is_stmt 1 view .LVU777
 2415 0140 FFF7FEFF 		bl	vPortExitCritical
 2416              	.LVL249:
 2417 0144 F1E7     		b	.L168
 2418              		.cfi_endproc
 2419              	.LFE140:
 2421              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 2422              		.align	1
 2423              		.global	xQueueTakeMutexRecursive
 2424              		.syntax unified
 2425              		.thumb
 2426              		.thumb_func
 2428              	xQueueTakeMutexRecursive:
 2429              	.LVL250:
 2430              	.LFB134:
 817:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
 2431              		.loc 1 817 5 view -0
 2432              		.cfi_startproc
 2433              		@ args = 0, pretend = 0, frame = 0
 2434              		@ frame_needed = 0, uses_anonymous_args = 0
 817:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
 2435              		.loc 1 817 5 is_stmt 0 view .LVU779
 2436 0000 70B5     		push	{r4, r5, r6, lr}
 2437              	.LCFI35:
 2438              		.cfi_def_cfa_offset 16
 2439              		.cfi_offset 4, -16
 2440              		.cfi_offset 5, -12
 2441              		.cfi_offset 6, -8
 2442              		.cfi_offset 14, -4
 2443 0002 0446     		mov	r4, r0
 2444 0004 0D46     		mov	r5, r1
 818:FreeRTOS/Src/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 2445              		.loc 1 818 9 is_stmt 1 view .LVU780
 819:FreeRTOS/Src/queue.c **** 
 2446              		.loc 1 819 9 view .LVU781
 2447              	.LVL251:
 821:FreeRTOS/Src/queue.c **** 
 2448              		.loc 1 821 68 view .LVU782
 823:FreeRTOS/Src/queue.c **** 
 2449              		.loc 1 823 32 view .LVU783
 828:FreeRTOS/Src/queue.c **** 
 2450              		.loc 1 828 45 view .LVU784
 830:FreeRTOS/Src/queue.c ****         {
 2451              		.loc 1 830 9 view .LVU785
 830:FreeRTOS/Src/queue.c ****         {
 2452              		.loc 1 830 34 is_stmt 0 view .LVU786
 2453 0006 8668     		ldr	r6, [r0, #8]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 108


 830:FreeRTOS/Src/queue.c ****         {
 2454              		.loc 1 830 51 view .LVU787
 2455 0008 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 2456              	.LVL252:
 830:FreeRTOS/Src/queue.c ****         {
 2457              		.loc 1 830 11 discriminator 1 view .LVU788
 2458 000c 8642     		cmp	r6, r0
 2459 000e 08D0     		beq	.L184
 837:FreeRTOS/Src/queue.c **** 
 2460              		.loc 1 837 13 is_stmt 1 view .LVU789
 837:FreeRTOS/Src/queue.c **** 
 2461              		.loc 1 837 23 is_stmt 0 view .LVU790
 2462 0010 2946     		mov	r1, r5
 2463 0012 2046     		mov	r0, r4
 2464 0014 FFF7FEFF 		bl	xQueueSemaphoreTake
 2465              	.LVL253:
 842:FreeRTOS/Src/queue.c ****             {
 2466              		.loc 1 842 13 is_stmt 1 view .LVU791
 842:FreeRTOS/Src/queue.c ****             {
 2467              		.loc 1 842 15 is_stmt 0 view .LVU792
 2468 0018 38B1     		cbz	r0, .L180
 844:FreeRTOS/Src/queue.c ****             }
 2469              		.loc 1 844 17 is_stmt 1 view .LVU793
 844:FreeRTOS/Src/queue.c ****             }
 2470              		.loc 1 844 40 is_stmt 0 view .LVU794
 2471 001a E368     		ldr	r3, [r4, #12]
 844:FreeRTOS/Src/queue.c ****             }
 2472              		.loc 1 844 63 view .LVU795
 2473 001c 0133     		adds	r3, r3, #1
 2474 001e E360     		str	r3, [r4, #12]
 848:FreeRTOS/Src/queue.c ****             }
 2475              		.loc 1 848 60 is_stmt 1 view .LVU796
 852:FreeRTOS/Src/queue.c **** 
 2476              		.loc 1 852 56 view .LVU797
 854:FreeRTOS/Src/queue.c ****     }
 2477              		.loc 1 854 9 view .LVU798
 854:FreeRTOS/Src/queue.c ****     }
 2478              		.loc 1 854 16 is_stmt 0 view .LVU799
 2479 0020 03E0     		b	.L180
 2480              	.LVL254:
 2481              	.L184:
 832:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
 2482              		.loc 1 832 13 is_stmt 1 view .LVU800
 832:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
 2483              		.loc 1 832 36 is_stmt 0 view .LVU801
 2484 0022 E368     		ldr	r3, [r4, #12]
 832:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
 2485              		.loc 1 832 59 view .LVU802
 2486 0024 0133     		adds	r3, r3, #1
 2487 0026 E360     		str	r3, [r4, #12]
 833:FreeRTOS/Src/queue.c ****         }
 2488              		.loc 1 833 13 is_stmt 1 view .LVU803
 2489              	.LVL255:
 833:FreeRTOS/Src/queue.c ****         }
 2490              		.loc 1 833 21 is_stmt 0 view .LVU804
 2491 0028 0120     		movs	r0, #1
 2492              	.LVL256:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 109


 2493              	.L180:
 855:FreeRTOS/Src/queue.c **** 
 2494              		.loc 1 855 5 view .LVU805
 2495 002a 70BD     		pop	{r4, r5, r6, pc}
 855:FreeRTOS/Src/queue.c **** 
 2496              		.loc 1 855 5 view .LVU806
 2497              		.cfi_endproc
 2498              	.LFE134:
 2500              		.section	.text.xQueuePeek,"ax",%progbits
 2501              		.align	1
 2502              		.global	xQueuePeek
 2503              		.syntax unified
 2504              		.thumb
 2505              		.thumb_func
 2507              	xQueuePeek:
 2508              	.LVL257:
 2509              	.LFB141:
1880:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2510              		.loc 1 1880 1 is_stmt 1 view -0
 2511              		.cfi_startproc
 2512              		@ args = 0, pretend = 0, frame = 16
 2513              		@ frame_needed = 0, uses_anonymous_args = 0
1880:FreeRTOS/Src/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2514              		.loc 1 1880 1 is_stmt 0 view .LVU808
 2515 0000 70B5     		push	{r4, r5, r6, lr}
 2516              	.LCFI36:
 2517              		.cfi_def_cfa_offset 16
 2518              		.cfi_offset 4, -16
 2519              		.cfi_offset 5, -12
 2520              		.cfi_offset 6, -8
 2521              		.cfi_offset 14, -4
 2522 0002 84B0     		sub	sp, sp, #16
 2523              	.LCFI37:
 2524              		.cfi_def_cfa_offset 32
 2525 0004 0446     		mov	r4, r0
 2526 0006 0E46     		mov	r6, r1
 2527 0008 0192     		str	r2, [sp, #4]
1881:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
 2528              		.loc 1 1881 5 is_stmt 1 view .LVU809
 2529              	.LVL258:
1882:FreeRTOS/Src/queue.c ****     int8_t * pcOriginalReadPosition;
 2530              		.loc 1 1882 5 view .LVU810
1883:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 2531              		.loc 1 1883 5 view .LVU811
1884:FreeRTOS/Src/queue.c **** 
 2532              		.loc 1 1884 5 view .LVU812
1881:FreeRTOS/Src/queue.c ****     TimeOut_t xTimeOut;
 2533              		.loc 1 1881 16 is_stmt 0 view .LVU813
 2534 000a 0025     		movs	r5, #0
 2535 000c 3EE0     		b	.L186
 2536              	.LVL259:
 2537              	.L200:
 2538              	.LBB50:
1915:FreeRTOS/Src/queue.c **** 
 2539              		.loc 1 1915 17 is_stmt 1 view .LVU814
1915:FreeRTOS/Src/queue.c **** 
 2540              		.loc 1 1915 40 is_stmt 0 view .LVU815
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 110


 2541 000e E568     		ldr	r5, [r4, #12]
 2542              	.LVL260:
1917:FreeRTOS/Src/queue.c ****                 traceQUEUE_PEEK( pxQueue );
 2543              		.loc 1 1917 17 is_stmt 1 view .LVU816
 2544 0010 3146     		mov	r1, r6
 2545 0012 2046     		mov	r0, r4
 2546 0014 FFF7FEFF 		bl	prvCopyDataFromQueue
 2547              	.LVL261:
1918:FreeRTOS/Src/queue.c **** 
 2548              		.loc 1 1918 43 view .LVU817
1921:FreeRTOS/Src/queue.c **** 
 2549              		.loc 1 1921 17 view .LVU818
1921:FreeRTOS/Src/queue.c **** 
 2550              		.loc 1 1921 46 is_stmt 0 view .LVU819
 2551 0018 E560     		str	r5, [r4, #12]
1925:FreeRTOS/Src/queue.c ****                 {
 2552              		.loc 1 1925 17 is_stmt 1 view .LVU820
1925:FreeRTOS/Src/queue.c ****                 {
 2553              		.loc 1 1925 21 is_stmt 0 view .LVU821
 2554 001a 636A     		ldr	r3, [r4, #36]
1925:FreeRTOS/Src/queue.c ****                 {
 2555              		.loc 1 1925 19 view .LVU822
 2556 001c 23B9     		cbnz	r3, .L198
 2557              	.L188:
1939:FreeRTOS/Src/queue.c ****                 }
 2558              		.loc 1 1939 45 is_stmt 1 view .LVU823
1942:FreeRTOS/Src/queue.c **** 
 2559              		.loc 1 1942 17 view .LVU824
 2560 001e FFF7FEFF 		bl	vPortExitCritical
 2561              	.LVL262:
1944:FreeRTOS/Src/queue.c **** 
 2562              		.loc 1 1944 49 view .LVU825
1946:FreeRTOS/Src/queue.c ****             }
 2563              		.loc 1 1946 17 view .LVU826
1946:FreeRTOS/Src/queue.c ****             }
 2564              		.loc 1 1946 24 is_stmt 0 view .LVU827
 2565 0022 0120     		movs	r0, #1
 2566              	.LVL263:
 2567              	.L185:
1946:FreeRTOS/Src/queue.c ****             }
 2568              		.loc 1 1946 24 view .LVU828
 2569              	.LBE50:
2032:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 2570              		.loc 1 2032 1 view .LVU829
 2571 0024 04B0     		add	sp, sp, #16
 2572              	.LCFI38:
 2573              		.cfi_remember_state
 2574              		.cfi_def_cfa_offset 16
 2575              		@ sp needed
 2576 0026 70BD     		pop	{r4, r5, r6, pc}
 2577              	.LVL264:
 2578              	.L198:
 2579              	.LCFI39:
 2580              		.cfi_restore_state
 2581              	.LBB51:
1927:FreeRTOS/Src/queue.c ****                     {
 2582              		.loc 1 1927 21 is_stmt 1 view .LVU830
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 111


1927:FreeRTOS/Src/queue.c ****                     {
 2583              		.loc 1 1927 25 is_stmt 0 view .LVU831
 2584 0028 04F12400 		add	r0, r4, #36
 2585 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2586              	.LVL265:
1927:FreeRTOS/Src/queue.c ****                     {
 2587              		.loc 1 1927 23 discriminator 1 view .LVU832
 2588 0030 0028     		cmp	r0, #0
 2589 0032 F4D0     		beq	.L188
1930:FreeRTOS/Src/queue.c ****                     }
 2590              		.loc 1 1930 25 is_stmt 1 view .LVU833
 2591 0034 4FF0E023 		mov	r3, #-536813568
 2592 0038 4FF08052 		mov	r2, #268435456
 2593 003c C3F8042D 		str	r2, [r3, #3332]
1930:FreeRTOS/Src/queue.c ****                     }
 2594              		.loc 1 1930 25 view .LVU834
 2595              		.syntax unified
 2596              	@ 1930 "FreeRTOS/Src/queue.c" 1
 2597 0040 BFF34F8F 		dsb
 2598              	@ 0 "" 2
1930:FreeRTOS/Src/queue.c ****                     }
 2599              		.loc 1 1930 25 view .LVU835
 2600              	@ 1930 "FreeRTOS/Src/queue.c" 1
 2601 0044 BFF36F8F 		isb
 2602              	@ 0 "" 2
1930:FreeRTOS/Src/queue.c ****                     }
 2603              		.loc 1 1930 57 view .LVU836
 2604              		.thumb
 2605              		.syntax unified
 2606 0048 E9E7     		b	.L188
 2607              	.LVL266:
 2608              	.L201:
1954:FreeRTOS/Src/queue.c **** 
 2609              		.loc 1 1954 21 view .LVU837
 2610 004a FFF7FEFF 		bl	vPortExitCritical
 2611              	.LVL267:
1956:FreeRTOS/Src/queue.c ****                     traceRETURN_xQueuePeek( errQUEUE_EMPTY );
 2612              		.loc 1 1956 54 view .LVU838
1957:FreeRTOS/Src/queue.c **** 
 2613              		.loc 1 1957 61 view .LVU839
1959:FreeRTOS/Src/queue.c ****                 }
 2614              		.loc 1 1959 21 view .LVU840
1959:FreeRTOS/Src/queue.c ****                 }
 2615              		.loc 1 1959 28 is_stmt 0 view .LVU841
 2616 004e 0020     		movs	r0, #0
 2617 0050 E8E7     		b	.L185
 2618              	.L202:
1966:FreeRTOS/Src/queue.c ****                     xEntryTimeSet = pdTRUE;
 2619              		.loc 1 1966 21 is_stmt 1 view .LVU842
 2620 0052 02A8     		add	r0, sp, #8
 2621 0054 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2622              	.LVL268:
1967:FreeRTOS/Src/queue.c ****                 }
 2623              		.loc 1 1967 21 view .LVU843
1967:FreeRTOS/Src/queue.c ****                 }
 2624              		.loc 1 1967 35 is_stmt 0 view .LVU844
 2625 0058 0125     		movs	r5, #1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 112


 2626 005a 21E0     		b	.L191
 2627              	.LVL269:
 2628              	.L203:
1967:FreeRTOS/Src/queue.c ****                 }
 2629              		.loc 1 1967 35 view .LVU845
 2630              	.LBE51:
1982:FreeRTOS/Src/queue.c **** 
 2631              		.loc 1 1982 9 is_stmt 1 discriminator 1 view .LVU846
 2632 005c 0023     		movs	r3, #0
 2633 005e 84F84430 		strb	r3, [r4, #68]
 2634 0062 29E0     		b	.L192
 2635              	.L204:
1982:FreeRTOS/Src/queue.c **** 
 2636              		.loc 1 1982 9 discriminator 4 view .LVU847
 2637 0064 0023     		movs	r3, #0
 2638 0066 84F84530 		strb	r3, [r4, #69]
 2639 006a 2BE0     		b	.L193
 2640              	.L195:
2008:FreeRTOS/Src/queue.c ****                 ( void ) xTaskResumeAll();
 2641              		.loc 1 2008 17 view .LVU848
 2642 006c 2046     		mov	r0, r4
 2643 006e FFF7FEFF 		bl	prvUnlockQueue
 2644              	.LVL270:
2009:FreeRTOS/Src/queue.c ****             }
 2645              		.loc 1 2009 17 view .LVU849
2009:FreeRTOS/Src/queue.c ****             }
 2646              		.loc 1 2009 26 is_stmt 0 view .LVU850
 2647 0072 FFF7FEFF 		bl	xTaskResumeAll
 2648              	.LVL271:
 2649 0076 09E0     		b	.L186
 2650              	.L194:
2016:FreeRTOS/Src/queue.c ****             ( void ) xTaskResumeAll();
 2651              		.loc 1 2016 13 is_stmt 1 view .LVU851
 2652 0078 2046     		mov	r0, r4
 2653 007a FFF7FEFF 		bl	prvUnlockQueue
 2654              	.LVL272:
2017:FreeRTOS/Src/queue.c **** 
 2655              		.loc 1 2017 13 view .LVU852
2017:FreeRTOS/Src/queue.c **** 
 2656              		.loc 1 2017 22 is_stmt 0 view .LVU853
 2657 007e FFF7FEFF 		bl	xTaskResumeAll
 2658              	.LVL273:
2019:FreeRTOS/Src/queue.c ****             {
 2659              		.loc 1 2019 13 is_stmt 1 view .LVU854
2019:FreeRTOS/Src/queue.c ****             {
 2660              		.loc 1 2019 17 is_stmt 0 view .LVU855
 2661 0082 2046     		mov	r0, r4
 2662 0084 FFF7FEFF 		bl	prvIsQueueEmpty
 2663              	.LVL274:
2019:FreeRTOS/Src/queue.c ****             {
 2664              		.loc 1 2019 15 discriminator 1 view .LVU856
 2665 0088 0028     		cmp	r0, #0
 2666 008a 3FD1     		bne	.L199
 2667              	.LVL275:
 2668              	.L186:
1886:FreeRTOS/Src/queue.c **** 
 2669              		.loc 1 1886 60 is_stmt 1 view .LVU857
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 113


1889:FreeRTOS/Src/queue.c **** 
 2670              		.loc 1 1889 32 view .LVU858
1893:FreeRTOS/Src/queue.c **** 
 2671              		.loc 1 1893 103 view .LVU859
1898:FreeRTOS/Src/queue.c ****     }
 2672              		.loc 1 1898 110 view .LVU860
1902:FreeRTOS/Src/queue.c ****     {
 2673              		.loc 1 1902 5 view .LVU861
1904:FreeRTOS/Src/queue.c ****         {
 2674              		.loc 1 1904 9 view .LVU862
 2675 008c FFF7FEFF 		bl	vPortEnterCritical
 2676              	.LVL276:
 2677              	.LBB52:
1906:FreeRTOS/Src/queue.c **** 
 2678              		.loc 1 1906 13 view .LVU863
1906:FreeRTOS/Src/queue.c **** 
 2679              		.loc 1 1906 31 is_stmt 0 view .LVU864
 2680 0090 A36B     		ldr	r3, [r4, #56]
 2681              	.LVL277:
1910:FreeRTOS/Src/queue.c ****             {
 2682              		.loc 1 1910 13 is_stmt 1 view .LVU865
1910:FreeRTOS/Src/queue.c ****             {
 2683              		.loc 1 1910 15 is_stmt 0 view .LVU866
 2684 0092 002B     		cmp	r3, #0
 2685 0094 BBD1     		bne	.L200
1950:FreeRTOS/Src/queue.c ****                 {
 2686              		.loc 1 1950 17 is_stmt 1 view .LVU867
1950:FreeRTOS/Src/queue.c ****                 {
 2687              		.loc 1 1950 34 is_stmt 0 view .LVU868
 2688 0096 019B     		ldr	r3, [sp, #4]
 2689              	.LVL278:
1950:FreeRTOS/Src/queue.c ****                 {
 2690              		.loc 1 1950 19 view .LVU869
 2691 0098 002B     		cmp	r3, #0
 2692 009a D6D0     		beq	.L201
1961:FreeRTOS/Src/queue.c ****                 {
 2693              		.loc 1 1961 22 is_stmt 1 view .LVU870
1961:FreeRTOS/Src/queue.c ****                 {
 2694              		.loc 1 1961 24 is_stmt 0 view .LVU871
 2695 009c 002D     		cmp	r5, #0
 2696 009e D8D0     		beq	.L202
 2697              	.LVL279:
 2698              	.L191:
1972:FreeRTOS/Src/queue.c ****                 }
 2699              		.loc 1 1972 45 is_stmt 1 view .LVU872
 2700              	.LBE52:
1976:FreeRTOS/Src/queue.c **** 
 2701              		.loc 1 1976 9 view .LVU873
 2702 00a0 FFF7FEFF 		bl	vPortExitCritical
 2703              	.LVL280:
1981:FreeRTOS/Src/queue.c ****         prvLockQueue( pxQueue );
 2704              		.loc 1 1981 9 view .LVU874
 2705 00a4 FFF7FEFF 		bl	vTaskSuspendAll
 2706              	.LVL281:
1982:FreeRTOS/Src/queue.c **** 
 2707              		.loc 1 1982 9 view .LVU875
 2708 00a8 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 114


 2709              	.LVL282:
1982:FreeRTOS/Src/queue.c **** 
 2710              		.loc 1 1982 9 discriminator 1 view .LVU876
 2711 00ac 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2712 00b0 5BB2     		sxtb	r3, r3
 2713 00b2 B3F1FF3F 		cmp	r3, #-1
 2714 00b6 D1D0     		beq	.L203
 2715              	.L192:
1982:FreeRTOS/Src/queue.c **** 
 2716              		.loc 1 1982 9 discriminator 3 view .LVU877
 2717 00b8 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2718 00bc 5BB2     		sxtb	r3, r3
 2719 00be B3F1FF3F 		cmp	r3, #-1
 2720 00c2 CFD0     		beq	.L204
 2721              	.L193:
1982:FreeRTOS/Src/queue.c **** 
 2722              		.loc 1 1982 9 discriminator 6 view .LVU878
 2723 00c4 FFF7FEFF 		bl	vPortExitCritical
 2724              	.LVL283:
1985:FreeRTOS/Src/queue.c ****         {
 2725              		.loc 1 1985 9 view .LVU879
1985:FreeRTOS/Src/queue.c ****         {
 2726              		.loc 1 1985 13 is_stmt 0 view .LVU880
 2727 00c8 01A9     		add	r1, sp, #4
 2728 00ca 02A8     		add	r0, sp, #8
 2729 00cc FFF7FEFF 		bl	xTaskCheckForTimeOut
 2730              	.LVL284:
1985:FreeRTOS/Src/queue.c ****         {
 2731              		.loc 1 1985 11 discriminator 1 view .LVU881
 2732 00d0 0028     		cmp	r0, #0
 2733 00d2 D1D1     		bne	.L194
1989:FreeRTOS/Src/queue.c ****             {
 2734              		.loc 1 1989 13 is_stmt 1 view .LVU882
1989:FreeRTOS/Src/queue.c ****             {
 2735              		.loc 1 1989 17 is_stmt 0 view .LVU883
 2736 00d4 2046     		mov	r0, r4
 2737 00d6 FFF7FEFF 		bl	prvIsQueueEmpty
 2738              	.LVL285:
1989:FreeRTOS/Src/queue.c ****             {
 2739              		.loc 1 1989 15 discriminator 1 view .LVU884
 2740 00da 0028     		cmp	r0, #0
 2741 00dc C6D0     		beq	.L195
1991:FreeRTOS/Src/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2742              		.loc 1 1991 55 is_stmt 1 view .LVU885
1992:FreeRTOS/Src/queue.c ****                 prvUnlockQueue( pxQueue );
 2743              		.loc 1 1992 17 view .LVU886
 2744 00de 0199     		ldr	r1, [sp, #4]
 2745 00e0 04F12400 		add	r0, r4, #36
 2746 00e4 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2747              	.LVL286:
1993:FreeRTOS/Src/queue.c **** 
 2748              		.loc 1 1993 17 view .LVU887
 2749 00e8 2046     		mov	r0, r4
 2750 00ea FFF7FEFF 		bl	prvUnlockQueue
 2751              	.LVL287:
1995:FreeRTOS/Src/queue.c ****                 {
 2752              		.loc 1 1995 17 view .LVU888
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 115


1995:FreeRTOS/Src/queue.c ****                 {
 2753              		.loc 1 1995 21 is_stmt 0 view .LVU889
 2754 00ee FFF7FEFF 		bl	xTaskResumeAll
 2755              	.LVL288:
1995:FreeRTOS/Src/queue.c ****                 {
 2756              		.loc 1 1995 19 discriminator 1 view .LVU890
 2757 00f2 0028     		cmp	r0, #0
 2758 00f4 CAD1     		bne	.L186
1997:FreeRTOS/Src/queue.c ****                 }
 2759              		.loc 1 1997 21 is_stmt 1 view .LVU891
 2760 00f6 4FF0E023 		mov	r3, #-536813568
 2761 00fa 4FF08052 		mov	r2, #268435456
 2762 00fe C3F8042D 		str	r2, [r3, #3332]
1997:FreeRTOS/Src/queue.c ****                 }
 2763              		.loc 1 1997 21 view .LVU892
 2764              		.syntax unified
 2765              	@ 1997 "FreeRTOS/Src/queue.c" 1
 2766 0102 BFF34F8F 		dsb
 2767              	@ 0 "" 2
1997:FreeRTOS/Src/queue.c ****                 }
 2768              		.loc 1 1997 21 view .LVU893
 2769              	@ 1997 "FreeRTOS/Src/queue.c" 1
 2770 0106 BFF36F8F 		isb
 2771              	@ 0 "" 2
1997:FreeRTOS/Src/queue.c ****                 }
 2772              		.loc 1 1997 43 view .LVU894
 2773              		.thumb
 2774              		.syntax unified
 2775 010a BFE7     		b	.L186
 2776              	.L199:
2024:FreeRTOS/Src/queue.c ****             }
 2777              		.loc 1 2024 24 is_stmt 0 view .LVU895
 2778 010c 0020     		movs	r0, #0
 2779 010e 89E7     		b	.L185
 2780              		.cfi_endproc
 2781              	.LFE141:
 2783              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2784              		.align	1
 2785              		.global	xQueueReceiveFromISR
 2786              		.syntax unified
 2787              		.thumb
 2788              		.thumb_func
 2790              	xQueueReceiveFromISR:
 2791              	.LVL289:
 2792              	.LFB142:
2038:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 2793              		.loc 1 2038 1 is_stmt 1 view -0
 2794              		.cfi_startproc
 2795              		@ args = 0, pretend = 0, frame = 0
 2796              		@ frame_needed = 0, uses_anonymous_args = 0
2038:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 2797              		.loc 1 2038 1 is_stmt 0 view .LVU897
 2798 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2799              	.LCFI40:
 2800              		.cfi_def_cfa_offset 24
 2801              		.cfi_offset 4, -24
 2802              		.cfi_offset 5, -20
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 116


 2803              		.cfi_offset 6, -16
 2804              		.cfi_offset 7, -12
 2805              		.cfi_offset 8, -8
 2806              		.cfi_offset 14, -4
2039:FreeRTOS/Src/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 2807              		.loc 1 2039 5 is_stmt 1 view .LVU898
2040:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 2808              		.loc 1 2040 5 view .LVU899
2041:FreeRTOS/Src/queue.c **** 
 2809              		.loc 1 2041 5 view .LVU900
 2810              	.LVL290:
2043:FreeRTOS/Src/queue.c **** 
 2811              		.loc 1 2043 83 view .LVU901
2045:FreeRTOS/Src/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2812              		.loc 1 2045 28 view .LVU902
2046:FreeRTOS/Src/queue.c **** 
 2813              		.loc 1 2046 95 view .LVU903
2062:FreeRTOS/Src/queue.c **** 
 2814              		.loc 1 2062 47 view .LVU904
2067:FreeRTOS/Src/queue.c ****     {
 2815              		.loc 1 2067 5 view .LVU905
 2816              	.LBB53:
 2817              	.LBI53:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2818              		.loc 2 229 34 view .LVU906
 2819              	.LBB54:
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2820              		.loc 2 231 5 view .LVU907
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2821              		.loc 2 233 5 view .LVU908
 2822              		.syntax unified
 2823              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2824 0004 EFF31185 		   mrs r5, basepri                                         
 2825 0008 4FF05003 	   mov r3, #80                                              
 2826 000c 83F31188 	   msr basepri, r3                                         
 2827 0010 BFF36F8F 	   isb                                                     
 2828 0014 BFF34F8F 	   dsb                                                     
 2829              	
 2830              	@ 0 "" 2
 2831              	.LVL291:
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 2832              		.loc 2 245 5 view .LVU909
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 2833              		.loc 2 245 5 is_stmt 0 view .LVU910
 2834              		.thumb
 2835              		.syntax unified
 2836              	.LBE54:
 2837              	.LBE53:
 2838              	.LBB55:
2069:FreeRTOS/Src/queue.c **** 
 2839              		.loc 1 2069 9 is_stmt 1 view .LVU911
2069:FreeRTOS/Src/queue.c **** 
 2840              		.loc 1 2069 27 is_stmt 0 view .LVU912
 2841 0018 866B     		ldr	r6, [r0, #56]
 2842              	.LVL292:
2072:FreeRTOS/Src/queue.c ****         {
 2843              		.loc 1 2072 9 is_stmt 1 view .LVU913
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 117


2072:FreeRTOS/Src/queue.c ****         {
 2844              		.loc 1 2072 11 is_stmt 0 view .LVU914
 2845 001a 26B9     		cbnz	r6, .L214
2123:FreeRTOS/Src/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2846              		.loc 1 2123 21 view .LVU915
 2847 001c 0020     		movs	r0, #0
 2848              	.LVL293:
 2849              	.L206:
2124:FreeRTOS/Src/queue.c ****         }
 2850              		.loc 1 2124 58 is_stmt 1 view .LVU916
 2851              	.LBE55:
2127:FreeRTOS/Src/queue.c **** 
 2852              		.loc 1 2127 5 view .LVU917
 2853              	.LBB58:
 2854              	.LBI58:
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2855              		.loc 2 249 30 view .LVU918
 2856              	.LBB59:
 2857              		.loc 2 251 5 view .LVU919
 2858              		.syntax unified
 2859              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2860 001e 85F31188 		   msr basepri, r5 
 2861              	@ 0 "" 2
 2862              		.thumb
 2863              		.syntax unified
 2864              	.LBE59:
 2865              	.LBE58:
2129:FreeRTOS/Src/queue.c **** 
 2866              		.loc 1 2129 48 view .LVU920
2131:FreeRTOS/Src/queue.c **** }
 2867              		.loc 1 2131 5 view .LVU921
2132:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 2868              		.loc 1 2132 1 is_stmt 0 view .LVU922
 2869 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2870              	.LVL294:
 2871              	.L214:
2132:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 2872              		.loc 1 2132 1 view .LVU923
 2873 0026 0446     		mov	r4, r0
 2874 0028 1746     		mov	r7, r2
 2875              	.LBB60:
 2876              	.LBB56:
2074:FreeRTOS/Src/queue.c **** 
 2877              		.loc 1 2074 13 is_stmt 1 view .LVU924
2074:FreeRTOS/Src/queue.c **** 
 2878              		.loc 1 2074 26 is_stmt 0 view .LVU925
 2879 002a 90F84480 		ldrb	r8, [r0, #68]	@ zero_extendqisi2
 2880 002e 4FFA88F8 		sxtb	r8, r8
 2881              	.LVL295:
2076:FreeRTOS/Src/queue.c **** 
 2882              		.loc 1 2076 51 is_stmt 1 view .LVU926
2078:FreeRTOS/Src/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 2883              		.loc 1 2078 13 view .LVU927
 2884 0032 FFF7FEFF 		bl	prvCopyDataFromQueue
 2885              	.LVL296:
2079:FreeRTOS/Src/queue.c **** 
 2886              		.loc 1 2079 13 view .LVU928
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 118


2079:FreeRTOS/Src/queue.c **** 
 2887              		.loc 1 2079 42 is_stmt 0 view .LVU929
 2888 0036 013E     		subs	r6, r6, #1
 2889              	.LVL297:
2079:FreeRTOS/Src/queue.c **** 
 2890              		.loc 1 2079 40 view .LVU930
 2891 0038 A663     		str	r6, [r4, #56]
2085:FreeRTOS/Src/queue.c ****             {
 2892              		.loc 1 2085 13 is_stmt 1 view .LVU931
2085:FreeRTOS/Src/queue.c ****             {
 2893              		.loc 1 2085 15 is_stmt 0 view .LVU932
 2894 003a B8F1FF3F 		cmp	r8, #-1
 2895 003e 0CD1     		bne	.L207
2087:FreeRTOS/Src/queue.c ****                 {
 2896              		.loc 1 2087 17 is_stmt 1 view .LVU933
2087:FreeRTOS/Src/queue.c ****                 {
 2897              		.loc 1 2087 21 is_stmt 0 view .LVU934
 2898 0040 2369     		ldr	r3, [r4, #16]
2087:FreeRTOS/Src/queue.c ****                 {
 2899              		.loc 1 2087 19 view .LVU935
 2900 0042 0BB9     		cbnz	r3, .L215
2119:FreeRTOS/Src/queue.c ****         }
 2901              		.loc 1 2119 21 view .LVU936
 2902 0044 0120     		movs	r0, #1
 2903 0046 EAE7     		b	.L206
 2904              	.L215:
2089:FreeRTOS/Src/queue.c ****                     {
 2905              		.loc 1 2089 21 is_stmt 1 view .LVU937
2089:FreeRTOS/Src/queue.c ****                     {
 2906              		.loc 1 2089 25 is_stmt 0 view .LVU938
 2907 0048 04F11000 		add	r0, r4, #16
 2908 004c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2909              	.LVL298:
2089:FreeRTOS/Src/queue.c ****                     {
 2910              		.loc 1 2089 23 discriminator 1 view .LVU939
 2911 0050 78B1     		cbz	r0, .L210
2093:FreeRTOS/Src/queue.c ****                         {
 2912              		.loc 1 2093 25 is_stmt 1 view .LVU940
2093:FreeRTOS/Src/queue.c ****                         {
 2913              		.loc 1 2093 27 is_stmt 0 view .LVU941
 2914 0052 87B1     		cbz	r7, .L211
2095:FreeRTOS/Src/queue.c ****                         }
 2915              		.loc 1 2095 29 is_stmt 1 view .LVU942
2095:FreeRTOS/Src/queue.c ****                         }
 2916              		.loc 1 2095 56 is_stmt 0 view .LVU943
 2917 0054 0120     		movs	r0, #1
 2918 0056 3860     		str	r0, [r7]
 2919 0058 E1E7     		b	.L206
 2920              	.L207:
2116:FreeRTOS/Src/queue.c ****             }
 2921              		.loc 1 2116 17 is_stmt 1 view .LVU944
 2922              	.LBB57:
2116:FreeRTOS/Src/queue.c ****             }
 2923              		.loc 1 2116 17 view .LVU945
 2924 005a FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 2925              	.LVL299:
2116:FreeRTOS/Src/queue.c ****             }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 119


 2926              		.loc 1 2116 17 discriminator 1 view .LVU946
 2927 005e 8045     		cmp	r8, r0
 2928 0060 0BD2     		bcs	.L212
2116:FreeRTOS/Src/queue.c ****             }
 2929              		.loc 1 2116 17 discriminator 1 view .LVU947
2116:FreeRTOS/Src/queue.c ****             }
 2930              		.loc 1 2116 17 discriminator 1 view .LVU948
 2931 0062 08F10108 		add	r8, r8, #1
 2932              	.LVL300:
2116:FreeRTOS/Src/queue.c ****             }
 2933              		.loc 1 2116 17 is_stmt 0 discriminator 1 view .LVU949
 2934 0066 4FFA88F8 		sxtb	r8, r8
 2935              	.LVL301:
2116:FreeRTOS/Src/queue.c ****             }
 2936              		.loc 1 2116 17 discriminator 1 view .LVU950
 2937 006a 84F84480 		strb	r8, [r4, #68]
 2938              	.LBE57:
2119:FreeRTOS/Src/queue.c ****         }
 2939              		.loc 1 2119 21 view .LVU951
 2940 006e 0120     		movs	r0, #1
 2941              	.LVL302:
2119:FreeRTOS/Src/queue.c ****         }
 2942              		.loc 1 2119 21 view .LVU952
 2943 0070 D5E7     		b	.L206
 2944              	.LVL303:
 2945              	.L210:
2119:FreeRTOS/Src/queue.c ****         }
 2946              		.loc 1 2119 21 view .LVU953
 2947 0072 0120     		movs	r0, #1
 2948 0074 D3E7     		b	.L206
 2949              	.L211:
 2950 0076 0120     		movs	r0, #1
 2951 0078 D1E7     		b	.L206
 2952              	.LVL304:
 2953              	.L212:
2119:FreeRTOS/Src/queue.c ****         }
 2954              		.loc 1 2119 21 view .LVU954
 2955 007a 0120     		movs	r0, #1
 2956              	.LVL305:
2119:FreeRTOS/Src/queue.c ****         }
 2957              		.loc 1 2119 21 view .LVU955
 2958 007c CFE7     		b	.L206
 2959              	.LBE56:
 2960              	.LBE60:
 2961              		.cfi_endproc
 2962              	.LFE142:
 2964              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2965              		.align	1
 2966              		.global	xQueuePeekFromISR
 2967              		.syntax unified
 2968              		.thumb
 2969              		.thumb_func
 2971              	xQueuePeekFromISR:
 2972              	.LVL306:
 2973              	.LFB143:
2137:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 2974              		.loc 1 2137 1 is_stmt 1 view -0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 120


 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 0
 2977              		@ frame_needed = 0, uses_anonymous_args = 0
2137:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 2978              		.loc 1 2137 1 is_stmt 0 view .LVU957
 2979 0000 70B5     		push	{r4, r5, r6, lr}
 2980              	.LCFI41:
 2981              		.cfi_def_cfa_offset 16
 2982              		.cfi_offset 4, -16
 2983              		.cfi_offset 5, -12
 2984              		.cfi_offset 6, -8
 2985              		.cfi_offset 14, -4
2138:FreeRTOS/Src/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 2986              		.loc 1 2138 5 is_stmt 1 view .LVU958
2139:FreeRTOS/Src/queue.c ****     int8_t * pcOriginalReadPosition;
 2987              		.loc 1 2139 5 view .LVU959
2140:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 2988              		.loc 1 2140 5 view .LVU960
2141:FreeRTOS/Src/queue.c **** 
 2989              		.loc 1 2141 5 view .LVU961
 2990              	.LVL307:
2143:FreeRTOS/Src/queue.c **** 
 2991              		.loc 1 2143 53 view .LVU962
2145:FreeRTOS/Src/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2992              		.loc 1 2145 28 view .LVU963
2146:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2993              		.loc 1 2146 95 view .LVU964
2147:FreeRTOS/Src/queue.c **** 
 2994              		.loc 1 2147 45 view .LVU965
2163:FreeRTOS/Src/queue.c **** 
 2995              		.loc 1 2163 47 view .LVU966
2168:FreeRTOS/Src/queue.c ****     {
 2996              		.loc 1 2168 5 view .LVU967
 2997              	.LBB61:
 2998              	.LBI61:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2999              		.loc 2 229 34 view .LVU968
 3000              	.LBB62:
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3001              		.loc 2 231 5 view .LVU969
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3002              		.loc 2 233 5 view .LVU970
 3003              		.syntax unified
 3004              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3005 0002 EFF31185 		   mrs r5, basepri                                         
 3006 0006 4FF05003 	   mov r3, #80                                              
 3007 000a 83F31188 	   msr basepri, r3                                         
 3008 000e BFF36F8F 	   isb                                                     
 3009 0012 BFF34F8F 	   dsb                                                     
 3010              	
 3011              	@ 0 "" 2
 3012              	.LVL308:
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 3013              		.loc 2 245 5 view .LVU971
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 3014              		.loc 2 245 5 is_stmt 0 view .LVU972
 3015              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 121


 3016              		.syntax unified
 3017              	.LBE62:
 3018              	.LBE61:
2171:FreeRTOS/Src/queue.c ****         {
 3019              		.loc 1 2171 9 is_stmt 1 view .LVU973
2171:FreeRTOS/Src/queue.c ****         {
 3020              		.loc 1 2171 20 is_stmt 0 view .LVU974
 3021 0016 836B     		ldr	r3, [r0, #56]
2171:FreeRTOS/Src/queue.c ****         {
 3022              		.loc 1 2171 11 view .LVU975
 3023 0018 1BB9     		cbnz	r3, .L220
2185:FreeRTOS/Src/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 3024              		.loc 1 2185 21 view .LVU976
 3025 001a 0020     		movs	r0, #0
 3026              	.LVL309:
 3027              	.L217:
2186:FreeRTOS/Src/queue.c ****         }
 3028              		.loc 1 2186 55 is_stmt 1 view .LVU977
2189:FreeRTOS/Src/queue.c **** 
 3029              		.loc 1 2189 5 view .LVU978
 3030              	.LBB63:
 3031              	.LBI63:
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 3032              		.loc 2 249 30 view .LVU979
 3033              	.LBB64:
 3034              		.loc 2 251 5 view .LVU980
 3035              		.syntax unified
 3036              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3037 001c 85F31188 		   msr basepri, r5 
 3038              	@ 0 "" 2
 3039              		.thumb
 3040              		.syntax unified
 3041              	.LBE64:
 3042              	.LBE63:
2191:FreeRTOS/Src/queue.c **** 
 3043              		.loc 1 2191 45 view .LVU981
2193:FreeRTOS/Src/queue.c **** }
 3044              		.loc 1 2193 5 view .LVU982
2194:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3045              		.loc 1 2194 1 is_stmt 0 view .LVU983
 3046 0020 70BD     		pop	{r4, r5, r6, pc}
 3047              	.LVL310:
 3048              	.L220:
2194:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3049              		.loc 1 2194 1 view .LVU984
 3050 0022 0446     		mov	r4, r0
2173:FreeRTOS/Src/queue.c **** 
 3051              		.loc 1 2173 48 is_stmt 1 view .LVU985
2177:FreeRTOS/Src/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 3052              		.loc 1 2177 13 view .LVU986
2177:FreeRTOS/Src/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 3053              		.loc 1 2177 36 is_stmt 0 view .LVU987
 3054 0024 C668     		ldr	r6, [r0, #12]
 3055              	.LVL311:
2178:FreeRTOS/Src/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 3056              		.loc 1 2178 13 is_stmt 1 view .LVU988
 3057 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 122


 3058              	.LVL312:
2179:FreeRTOS/Src/queue.c **** 
 3059              		.loc 1 2179 13 view .LVU989
2179:FreeRTOS/Src/queue.c **** 
 3060              		.loc 1 2179 42 is_stmt 0 view .LVU990
 3061 002a E660     		str	r6, [r4, #12]
2181:FreeRTOS/Src/queue.c ****         }
 3062              		.loc 1 2181 13 is_stmt 1 view .LVU991
 3063              	.LVL313:
2181:FreeRTOS/Src/queue.c ****         }
 3064              		.loc 1 2181 21 is_stmt 0 view .LVU992
 3065 002c 0120     		movs	r0, #1
 3066 002e F5E7     		b	.L217
 3067              		.cfi_endproc
 3068              	.LFE143:
 3070              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 3071              		.align	1
 3072              		.global	uxQueueMessagesWaiting
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3077              	uxQueueMessagesWaiting:
 3078              	.LVL314:
 3079              	.LFB144:
2198:FreeRTOS/Src/queue.c ****     UBaseType_t uxReturn;
 3080              		.loc 1 2198 1 is_stmt 1 view -0
 3081              		.cfi_startproc
 3082              		@ args = 0, pretend = 0, frame = 0
 3083              		@ frame_needed = 0, uses_anonymous_args = 0
2198:FreeRTOS/Src/queue.c ****     UBaseType_t uxReturn;
 3084              		.loc 1 2198 1 is_stmt 0 view .LVU994
 3085 0000 10B5     		push	{r4, lr}
 3086              	.LCFI42:
 3087              		.cfi_def_cfa_offset 8
 3088              		.cfi_offset 4, -8
 3089              		.cfi_offset 14, -4
 3090 0002 0446     		mov	r4, r0
2199:FreeRTOS/Src/queue.c **** 
 3091              		.loc 1 2199 5 is_stmt 1 view .LVU995
2201:FreeRTOS/Src/queue.c **** 
 3092              		.loc 1 2201 48 view .LVU996
2203:FreeRTOS/Src/queue.c **** 
 3093              		.loc 1 2203 27 view .LVU997
2205:FreeRTOS/Src/queue.c ****     {
 3094              		.loc 1 2205 5 view .LVU998
 3095 0004 FFF7FEFF 		bl	vPortEnterCritical
 3096              	.LVL315:
2207:FreeRTOS/Src/queue.c ****     }
 3097              		.loc 1 2207 9 view .LVU999
2207:FreeRTOS/Src/queue.c ****     }
 3098              		.loc 1 2207 18 is_stmt 0 view .LVU1000
 3099 0008 A46B     		ldr	r4, [r4, #56]
 3100              	.LVL316:
2209:FreeRTOS/Src/queue.c **** 
 3101              		.loc 1 2209 5 is_stmt 1 view .LVU1001
 3102 000a FFF7FEFF 		bl	vPortExitCritical
 3103              	.LVL317:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 123


2211:FreeRTOS/Src/queue.c **** 
 3104              		.loc 1 2211 51 view .LVU1002
2213:FreeRTOS/Src/queue.c **** }
 3105              		.loc 1 2213 5 view .LVU1003
2214:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3106              		.loc 1 2214 1 is_stmt 0 view .LVU1004
 3107 000e 2046     		mov	r0, r4
 3108 0010 10BD     		pop	{r4, pc}
2214:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3109              		.loc 1 2214 1 view .LVU1005
 3110              		.cfi_endproc
 3111              	.LFE144:
 3113              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3114              		.align	1
 3115              		.global	uxQueueSpacesAvailable
 3116              		.syntax unified
 3117              		.thumb
 3118              		.thumb_func
 3120              	uxQueueSpacesAvailable:
 3121              	.LVL318:
 3122              	.LFB145:
2218:FreeRTOS/Src/queue.c ****     UBaseType_t uxReturn;
 3123              		.loc 1 2218 1 is_stmt 1 view -0
 3124              		.cfi_startproc
 3125              		@ args = 0, pretend = 0, frame = 0
 3126              		@ frame_needed = 0, uses_anonymous_args = 0
2218:FreeRTOS/Src/queue.c ****     UBaseType_t uxReturn;
 3127              		.loc 1 2218 1 is_stmt 0 view .LVU1007
 3128 0000 10B5     		push	{r4, lr}
 3129              	.LCFI43:
 3130              		.cfi_def_cfa_offset 8
 3131              		.cfi_offset 4, -8
 3132              		.cfi_offset 14, -4
 3133 0002 0446     		mov	r4, r0
2219:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 3134              		.loc 1 2219 5 is_stmt 1 view .LVU1008
2220:FreeRTOS/Src/queue.c **** 
 3135              		.loc 1 2220 5 view .LVU1009
 3136              	.LVL319:
2222:FreeRTOS/Src/queue.c **** 
 3137              		.loc 1 2222 48 view .LVU1010
2224:FreeRTOS/Src/queue.c **** 
 3138              		.loc 1 2224 28 view .LVU1011
2226:FreeRTOS/Src/queue.c ****     {
 3139              		.loc 1 2226 5 view .LVU1012
 3140 0004 FFF7FEFF 		bl	vPortEnterCritical
 3141              	.LVL320:
2228:FreeRTOS/Src/queue.c ****     }
 3142              		.loc 1 2228 9 view .LVU1013
2228:FreeRTOS/Src/queue.c ****     }
 3143              		.loc 1 2228 45 is_stmt 0 view .LVU1014
 3144 0008 E36B     		ldr	r3, [r4, #60]
2228:FreeRTOS/Src/queue.c ****     }
 3145              		.loc 1 2228 65 view .LVU1015
 3146 000a A46B     		ldr	r4, [r4, #56]
 3147              	.LVL321:
2228:FreeRTOS/Src/queue.c ****     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 124


 3148              		.loc 1 2228 18 view .LVU1016
 3149 000c 1C1B     		subs	r4, r3, r4
 3150              	.LVL322:
2230:FreeRTOS/Src/queue.c **** 
 3151              		.loc 1 2230 5 is_stmt 1 view .LVU1017
 3152 000e FFF7FEFF 		bl	vPortExitCritical
 3153              	.LVL323:
2232:FreeRTOS/Src/queue.c **** 
 3154              		.loc 1 2232 51 view .LVU1018
2234:FreeRTOS/Src/queue.c **** }
 3155              		.loc 1 2234 5 view .LVU1019
2235:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3156              		.loc 1 2235 1 is_stmt 0 view .LVU1020
 3157 0012 2046     		mov	r0, r4
 3158 0014 10BD     		pop	{r4, pc}
2235:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3159              		.loc 1 2235 1 view .LVU1021
 3160              		.cfi_endproc
 3161              	.LFE145:
 3163              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3164              		.align	1
 3165              		.global	uxQueueMessagesWaitingFromISR
 3166              		.syntax unified
 3167              		.thumb
 3168              		.thumb_func
 3170              	uxQueueMessagesWaitingFromISR:
 3171              	.LVL324:
 3172              	.LFB146:
2239:FreeRTOS/Src/queue.c ****     UBaseType_t uxReturn;
 3173              		.loc 1 2239 1 is_stmt 1 view -0
 3174              		.cfi_startproc
 3175              		@ args = 0, pretend = 0, frame = 0
 3176              		@ frame_needed = 0, uses_anonymous_args = 0
 3177              		@ link register save eliminated.
2240:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 3178              		.loc 1 2240 5 view .LVU1023
2241:FreeRTOS/Src/queue.c **** 
 3179              		.loc 1 2241 5 view .LVU1024
2243:FreeRTOS/Src/queue.c **** 
 3180              		.loc 1 2243 55 view .LVU1025
2245:FreeRTOS/Src/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3181              		.loc 1 2245 28 view .LVU1026
2246:FreeRTOS/Src/queue.c **** 
 3182              		.loc 1 2246 5 view .LVU1027
2246:FreeRTOS/Src/queue.c **** 
 3183              		.loc 1 2246 14 is_stmt 0 view .LVU1028
 3184 0000 806B     		ldr	r0, [r0, #56]
 3185              	.LVL325:
2248:FreeRTOS/Src/queue.c **** 
 3186              		.loc 1 2248 58 is_stmt 1 view .LVU1029
2250:FreeRTOS/Src/queue.c **** }
 3187              		.loc 1 2250 5 view .LVU1030
2251:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3188              		.loc 1 2251 1 is_stmt 0 view .LVU1031
 3189 0002 7047     		bx	lr
 3190              		.cfi_endproc
 3191              	.LFE146:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 125


 3193              		.section	.text.uxQueueGetQueueItemSize,"ax",%progbits
 3194              		.align	1
 3195              		.global	uxQueueGetQueueItemSize
 3196              		.syntax unified
 3197              		.thumb
 3198              		.thumb_func
 3200              	uxQueueGetQueueItemSize:
 3201              	.LVL326:
 3202              	.LFB148:
2344:FreeRTOS/Src/queue.c ****     traceENTER_uxQueueGetQueueItemSize( xQueue );
 3203              		.loc 1 2344 1 is_stmt 1 view -0
 3204              		.cfi_startproc
 3205              		@ args = 0, pretend = 0, frame = 0
 3206              		@ frame_needed = 0, uses_anonymous_args = 0
 3207              		@ link register save eliminated.
2345:FreeRTOS/Src/queue.c **** 
 3208              		.loc 1 2345 49 view .LVU1033
2347:FreeRTOS/Src/queue.c **** 
 3209              		.loc 1 2347 80 view .LVU1034
2349:FreeRTOS/Src/queue.c **** }
 3210              		.loc 1 2349 5 view .LVU1035
2350:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3211              		.loc 1 2350 1 is_stmt 0 view .LVU1036
 3212 0000 006C     		ldr	r0, [r0, #64]
 3213              	.LVL327:
2350:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3214              		.loc 1 2350 1 view .LVU1037
 3215 0002 7047     		bx	lr
 3216              		.cfi_endproc
 3217              	.LFE148:
 3219              		.section	.text.uxQueueGetQueueLength,"ax",%progbits
 3220              		.align	1
 3221              		.global	uxQueueGetQueueLength
 3222              		.syntax unified
 3223              		.thumb
 3224              		.thumb_func
 3226              	uxQueueGetQueueLength:
 3227              	.LVL328:
 3228              	.LFB149:
2354:FreeRTOS/Src/queue.c ****     traceENTER_uxQueueGetQueueLength( xQueue );
 3229              		.loc 1 2354 1 is_stmt 1 view -0
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 0
 3232              		@ frame_needed = 0, uses_anonymous_args = 0
 3233              		@ link register save eliminated.
2355:FreeRTOS/Src/queue.c **** 
 3234              		.loc 1 2355 47 view .LVU1039
2357:FreeRTOS/Src/queue.c **** 
 3235              		.loc 1 2357 76 view .LVU1040
2359:FreeRTOS/Src/queue.c **** }
 3236              		.loc 1 2359 5 view .LVU1041
2360:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3237              		.loc 1 2360 1 is_stmt 0 view .LVU1042
 3238 0000 C06B     		ldr	r0, [r0, #60]
 3239              	.LVL329:
2360:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3240              		.loc 1 2360 1 view .LVU1043
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 126


 3241 0002 7047     		bx	lr
 3242              		.cfi_endproc
 3243              	.LFE149:
 3245              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3246              		.align	1
 3247              		.global	xQueueIsQueueEmptyFromISR
 3248              		.syntax unified
 3249              		.thumb
 3250              		.thumb_func
 3252              	xQueueIsQueueEmptyFromISR:
 3253              	.LVL330:
 3254              	.LFB155:
2636:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 3255              		.loc 1 2636 1 is_stmt 1 view -0
 3256              		.cfi_startproc
 3257              		@ args = 0, pretend = 0, frame = 0
 3258              		@ frame_needed = 0, uses_anonymous_args = 0
 3259              		@ link register save eliminated.
2637:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 3260              		.loc 1 2637 5 view .LVU1045
2638:FreeRTOS/Src/queue.c **** 
 3261              		.loc 1 2638 5 view .LVU1046
2640:FreeRTOS/Src/queue.c **** 
 3262              		.loc 1 2640 51 view .LVU1047
2642:FreeRTOS/Src/queue.c **** 
 3263              		.loc 1 2642 28 view .LVU1048
2644:FreeRTOS/Src/queue.c ****     {
 3264              		.loc 1 2644 5 view .LVU1049
2644:FreeRTOS/Src/queue.c ****     {
 3265              		.loc 1 2644 16 is_stmt 0 view .LVU1050
 3266 0000 836B     		ldr	r3, [r0, #56]
2644:FreeRTOS/Src/queue.c ****     {
 3267              		.loc 1 2644 7 view .LVU1051
 3268 0002 0BB9     		cbnz	r3, .L230
2646:FreeRTOS/Src/queue.c ****     }
 3269              		.loc 1 2646 17 view .LVU1052
 3270 0004 0120     		movs	r0, #1
 3271              	.LVL331:
2646:FreeRTOS/Src/queue.c ****     }
 3272              		.loc 1 2646 17 view .LVU1053
 3273 0006 7047     		bx	lr
 3274              	.LVL332:
 3275              	.L230:
2650:FreeRTOS/Src/queue.c ****     }
 3276              		.loc 1 2650 17 view .LVU1054
 3277 0008 0020     		movs	r0, #0
 3278              	.LVL333:
2653:FreeRTOS/Src/queue.c **** 
 3279              		.loc 1 2653 53 is_stmt 1 view .LVU1055
2655:FreeRTOS/Src/queue.c **** }
 3280              		.loc 1 2655 5 view .LVU1056
2656:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3281              		.loc 1 2656 1 is_stmt 0 view .LVU1057
 3282 000a 7047     		bx	lr
 3283              		.cfi_endproc
 3284              	.LFE155:
 3286              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 127


 3287              		.align	1
 3288              		.global	xQueueIsQueueFullFromISR
 3289              		.syntax unified
 3290              		.thumb
 3291              		.thumb_func
 3293              	xQueueIsQueueFullFromISR:
 3294              	.LVL334:
 3295              	.LFB157:
2678:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2679:FreeRTOS/Src/queue.c **** 
2680:FreeRTOS/Src/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2681:FreeRTOS/Src/queue.c **** {
 3296              		.loc 1 2681 1 is_stmt 1 view -0
 3297              		.cfi_startproc
 3298              		@ args = 0, pretend = 0, frame = 0
 3299              		@ frame_needed = 0, uses_anonymous_args = 0
 3300              		@ link register save eliminated.
2682:FreeRTOS/Src/queue.c ****     BaseType_t xReturn;
 3301              		.loc 1 2682 5 view .LVU1059
2683:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 3302              		.loc 1 2683 5 view .LVU1060
2684:FreeRTOS/Src/queue.c **** 
2685:FreeRTOS/Src/queue.c ****     traceENTER_xQueueIsQueueFullFromISR( xQueue );
 3303              		.loc 1 2685 50 view .LVU1061
2686:FreeRTOS/Src/queue.c **** 
2687:FreeRTOS/Src/queue.c ****     configASSERT( pxQueue );
 3304              		.loc 1 2687 28 view .LVU1062
2688:FreeRTOS/Src/queue.c **** 
2689:FreeRTOS/Src/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3305              		.loc 1 2689 5 view .LVU1063
 3306              		.loc 1 2689 16 is_stmt 0 view .LVU1064
 3307 0000 826B     		ldr	r2, [r0, #56]
 3308              		.loc 1 2689 46 view .LVU1065
 3309 0002 C36B     		ldr	r3, [r0, #60]
 3310              		.loc 1 2689 7 view .LVU1066
 3311 0004 9A42     		cmp	r2, r3
 3312 0006 01D0     		beq	.L234
2690:FreeRTOS/Src/queue.c ****     {
2691:FreeRTOS/Src/queue.c ****         xReturn = pdTRUE;
2692:FreeRTOS/Src/queue.c ****     }
2693:FreeRTOS/Src/queue.c ****     else
2694:FreeRTOS/Src/queue.c ****     {
2695:FreeRTOS/Src/queue.c ****         xReturn = pdFALSE;
 3313              		.loc 1 2695 17 view .LVU1067
 3314 0008 0020     		movs	r0, #0
 3315              	.LVL335:
2696:FreeRTOS/Src/queue.c ****     }
2697:FreeRTOS/Src/queue.c **** 
2698:FreeRTOS/Src/queue.c ****     traceRETURN_xQueueIsQueueFullFromISR( xReturn );
 3316              		.loc 1 2698 52 is_stmt 1 view .LVU1068
2699:FreeRTOS/Src/queue.c **** 
2700:FreeRTOS/Src/queue.c ****     return xReturn;
 3317              		.loc 1 2700 5 view .LVU1069
2701:FreeRTOS/Src/queue.c **** }
 3318              		.loc 1 2701 1 is_stmt 0 view .LVU1070
 3319 000a 7047     		bx	lr
 3320              	.LVL336:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 128


 3321              	.L234:
2691:FreeRTOS/Src/queue.c ****     }
 3322              		.loc 1 2691 17 view .LVU1071
 3323 000c 0120     		movs	r0, #1
 3324              	.LVL337:
2691:FreeRTOS/Src/queue.c ****     }
 3325              		.loc 1 2691 17 view .LVU1072
 3326 000e 7047     		bx	lr
 3327              		.cfi_endproc
 3328              	.LFE157:
 3330              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3331              		.align	1
 3332              		.global	vQueueAddToRegistry
 3333              		.syntax unified
 3334              		.thumb
 3335              		.thumb_func
 3337              	vQueueAddToRegistry:
 3338              	.LVL338:
 3339              	.LFB158:
2702:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2703:FreeRTOS/Src/queue.c **** 
2704:FreeRTOS/Src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2705:FreeRTOS/Src/queue.c **** 
2706:FreeRTOS/Src/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2707:FreeRTOS/Src/queue.c ****                              const void * pvItemToQueue,
2708:FreeRTOS/Src/queue.c ****                              TickType_t xTicksToWait )
2709:FreeRTOS/Src/queue.c ****     {
2710:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
2711:FreeRTOS/Src/queue.c ****         Queue_t * const pxQueue = xQueue;
2712:FreeRTOS/Src/queue.c **** 
2713:FreeRTOS/Src/queue.c ****         traceENTER_xQueueCRSend( xQueue, pvItemToQueue, xTicksToWait );
2714:FreeRTOS/Src/queue.c **** 
2715:FreeRTOS/Src/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2716:FreeRTOS/Src/queue.c ****          * is required to prevent an interrupt removing something from the queue
2717:FreeRTOS/Src/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2718:FreeRTOS/Src/queue.c ****         portDISABLE_INTERRUPTS();
2719:FreeRTOS/Src/queue.c ****         {
2720:FreeRTOS/Src/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2721:FreeRTOS/Src/queue.c ****             {
2722:FreeRTOS/Src/queue.c ****                 /* The queue is full - do we want to block or just leave without
2723:FreeRTOS/Src/queue.c ****                  * posting? */
2724:FreeRTOS/Src/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2725:FreeRTOS/Src/queue.c ****                 {
2726:FreeRTOS/Src/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2727:FreeRTOS/Src/queue.c ****                      * return indicating that we need to block. */
2728:FreeRTOS/Src/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2729:FreeRTOS/Src/queue.c ****                     portENABLE_INTERRUPTS();
2730:FreeRTOS/Src/queue.c ****                     return errQUEUE_BLOCKED;
2731:FreeRTOS/Src/queue.c ****                 }
2732:FreeRTOS/Src/queue.c ****                 else
2733:FreeRTOS/Src/queue.c ****                 {
2734:FreeRTOS/Src/queue.c ****                     portENABLE_INTERRUPTS();
2735:FreeRTOS/Src/queue.c ****                     return errQUEUE_FULL;
2736:FreeRTOS/Src/queue.c ****                 }
2737:FreeRTOS/Src/queue.c ****             }
2738:FreeRTOS/Src/queue.c ****         }
2739:FreeRTOS/Src/queue.c ****         portENABLE_INTERRUPTS();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 129


2740:FreeRTOS/Src/queue.c **** 
2741:FreeRTOS/Src/queue.c ****         portDISABLE_INTERRUPTS();
2742:FreeRTOS/Src/queue.c ****         {
2743:FreeRTOS/Src/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2744:FreeRTOS/Src/queue.c ****             {
2745:FreeRTOS/Src/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2746:FreeRTOS/Src/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2747:FreeRTOS/Src/queue.c ****                 xReturn = pdPASS;
2748:FreeRTOS/Src/queue.c **** 
2749:FreeRTOS/Src/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2750:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2751:FreeRTOS/Src/queue.c ****                 {
2752:FreeRTOS/Src/queue.c ****                     /* In this instance the co-routine could be placed directly
2753:FreeRTOS/Src/queue.c ****                      * into the ready list as we are within a critical section.
2754:FreeRTOS/Src/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2755:FreeRTOS/Src/queue.c ****                      * the event were caused from within an interrupt. */
2756:FreeRTOS/Src/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2757:FreeRTOS/Src/queue.c ****                     {
2758:FreeRTOS/Src/queue.c ****                         /* The co-routine waiting has a higher priority so record
2759:FreeRTOS/Src/queue.c ****                          * that a yield might be appropriate. */
2760:FreeRTOS/Src/queue.c ****                         xReturn = errQUEUE_YIELD;
2761:FreeRTOS/Src/queue.c ****                     }
2762:FreeRTOS/Src/queue.c ****                     else
2763:FreeRTOS/Src/queue.c ****                     {
2764:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2765:FreeRTOS/Src/queue.c ****                     }
2766:FreeRTOS/Src/queue.c ****                 }
2767:FreeRTOS/Src/queue.c ****                 else
2768:FreeRTOS/Src/queue.c ****                 {
2769:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2770:FreeRTOS/Src/queue.c ****                 }
2771:FreeRTOS/Src/queue.c ****             }
2772:FreeRTOS/Src/queue.c ****             else
2773:FreeRTOS/Src/queue.c ****             {
2774:FreeRTOS/Src/queue.c ****                 xReturn = errQUEUE_FULL;
2775:FreeRTOS/Src/queue.c ****             }
2776:FreeRTOS/Src/queue.c ****         }
2777:FreeRTOS/Src/queue.c ****         portENABLE_INTERRUPTS();
2778:FreeRTOS/Src/queue.c **** 
2779:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueCRSend( xReturn );
2780:FreeRTOS/Src/queue.c **** 
2781:FreeRTOS/Src/queue.c ****         return xReturn;
2782:FreeRTOS/Src/queue.c ****     }
2783:FreeRTOS/Src/queue.c **** 
2784:FreeRTOS/Src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2785:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2786:FreeRTOS/Src/queue.c **** 
2787:FreeRTOS/Src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2788:FreeRTOS/Src/queue.c **** 
2789:FreeRTOS/Src/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2790:FreeRTOS/Src/queue.c ****                                 void * pvBuffer,
2791:FreeRTOS/Src/queue.c ****                                 TickType_t xTicksToWait )
2792:FreeRTOS/Src/queue.c ****     {
2793:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
2794:FreeRTOS/Src/queue.c ****         Queue_t * const pxQueue = xQueue;
2795:FreeRTOS/Src/queue.c **** 
2796:FreeRTOS/Src/queue.c ****         traceENTER_xQueueCRReceive( xQueue, pvBuffer, xTicksToWait );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 130


2797:FreeRTOS/Src/queue.c **** 
2798:FreeRTOS/Src/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2799:FreeRTOS/Src/queue.c ****          * is required to prevent an interrupt adding something to the queue
2800:FreeRTOS/Src/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2801:FreeRTOS/Src/queue.c ****         portDISABLE_INTERRUPTS();
2802:FreeRTOS/Src/queue.c ****         {
2803:FreeRTOS/Src/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2804:FreeRTOS/Src/queue.c ****             {
2805:FreeRTOS/Src/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2806:FreeRTOS/Src/queue.c ****                  * leave with nothing? */
2807:FreeRTOS/Src/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2808:FreeRTOS/Src/queue.c ****                 {
2809:FreeRTOS/Src/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2810:FreeRTOS/Src/queue.c ****                      * indicating that we need to block. */
2811:FreeRTOS/Src/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2812:FreeRTOS/Src/queue.c ****                     portENABLE_INTERRUPTS();
2813:FreeRTOS/Src/queue.c ****                     return errQUEUE_BLOCKED;
2814:FreeRTOS/Src/queue.c ****                 }
2815:FreeRTOS/Src/queue.c ****                 else
2816:FreeRTOS/Src/queue.c ****                 {
2817:FreeRTOS/Src/queue.c ****                     portENABLE_INTERRUPTS();
2818:FreeRTOS/Src/queue.c ****                     return errQUEUE_FULL;
2819:FreeRTOS/Src/queue.c ****                 }
2820:FreeRTOS/Src/queue.c ****             }
2821:FreeRTOS/Src/queue.c ****             else
2822:FreeRTOS/Src/queue.c ****             {
2823:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2824:FreeRTOS/Src/queue.c ****             }
2825:FreeRTOS/Src/queue.c ****         }
2826:FreeRTOS/Src/queue.c ****         portENABLE_INTERRUPTS();
2827:FreeRTOS/Src/queue.c **** 
2828:FreeRTOS/Src/queue.c ****         portDISABLE_INTERRUPTS();
2829:FreeRTOS/Src/queue.c ****         {
2830:FreeRTOS/Src/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2831:FreeRTOS/Src/queue.c ****             {
2832:FreeRTOS/Src/queue.c ****                 /* Data is available from the queue. */
2833:FreeRTOS/Src/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2834:FreeRTOS/Src/queue.c **** 
2835:FreeRTOS/Src/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2836:FreeRTOS/Src/queue.c ****                 {
2837:FreeRTOS/Src/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2838:FreeRTOS/Src/queue.c ****                 }
2839:FreeRTOS/Src/queue.c ****                 else
2840:FreeRTOS/Src/queue.c ****                 {
2841:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2842:FreeRTOS/Src/queue.c ****                 }
2843:FreeRTOS/Src/queue.c **** 
2844:FreeRTOS/Src/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2845:FreeRTOS/Src/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2846:FreeRTOS/Src/queue.c **** 
2847:FreeRTOS/Src/queue.c ****                 xReturn = pdPASS;
2848:FreeRTOS/Src/queue.c **** 
2849:FreeRTOS/Src/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2850:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2851:FreeRTOS/Src/queue.c ****                 {
2852:FreeRTOS/Src/queue.c ****                     /* In this instance the co-routine could be placed directly
2853:FreeRTOS/Src/queue.c ****                      * into the ready list as we are within a critical section.
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 131


2854:FreeRTOS/Src/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2855:FreeRTOS/Src/queue.c ****                      * the event were caused from within an interrupt. */
2856:FreeRTOS/Src/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2857:FreeRTOS/Src/queue.c ****                     {
2858:FreeRTOS/Src/queue.c ****                         xReturn = errQUEUE_YIELD;
2859:FreeRTOS/Src/queue.c ****                     }
2860:FreeRTOS/Src/queue.c ****                     else
2861:FreeRTOS/Src/queue.c ****                     {
2862:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2863:FreeRTOS/Src/queue.c ****                     }
2864:FreeRTOS/Src/queue.c ****                 }
2865:FreeRTOS/Src/queue.c ****                 else
2866:FreeRTOS/Src/queue.c ****                 {
2867:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2868:FreeRTOS/Src/queue.c ****                 }
2869:FreeRTOS/Src/queue.c ****             }
2870:FreeRTOS/Src/queue.c ****             else
2871:FreeRTOS/Src/queue.c ****             {
2872:FreeRTOS/Src/queue.c ****                 xReturn = pdFAIL;
2873:FreeRTOS/Src/queue.c ****             }
2874:FreeRTOS/Src/queue.c ****         }
2875:FreeRTOS/Src/queue.c ****         portENABLE_INTERRUPTS();
2876:FreeRTOS/Src/queue.c **** 
2877:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueCRReceive( xReturn );
2878:FreeRTOS/Src/queue.c **** 
2879:FreeRTOS/Src/queue.c ****         return xReturn;
2880:FreeRTOS/Src/queue.c ****     }
2881:FreeRTOS/Src/queue.c **** 
2882:FreeRTOS/Src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2883:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2884:FreeRTOS/Src/queue.c **** 
2885:FreeRTOS/Src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2886:FreeRTOS/Src/queue.c **** 
2887:FreeRTOS/Src/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2888:FreeRTOS/Src/queue.c ****                                     const void * pvItemToQueue,
2889:FreeRTOS/Src/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2890:FreeRTOS/Src/queue.c ****     {
2891:FreeRTOS/Src/queue.c ****         Queue_t * const pxQueue = xQueue;
2892:FreeRTOS/Src/queue.c **** 
2893:FreeRTOS/Src/queue.c ****         traceENTER_xQueueCRSendFromISR( xQueue, pvItemToQueue, xCoRoutinePreviouslyWoken );
2894:FreeRTOS/Src/queue.c **** 
2895:FreeRTOS/Src/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2896:FreeRTOS/Src/queue.c ****          * exit without doing anything. */
2897:FreeRTOS/Src/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2898:FreeRTOS/Src/queue.c ****         {
2899:FreeRTOS/Src/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2900:FreeRTOS/Src/queue.c **** 
2901:FreeRTOS/Src/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2902:FreeRTOS/Src/queue.c ****              * co-routine has not already been woken. */
2903:FreeRTOS/Src/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2904:FreeRTOS/Src/queue.c ****             {
2905:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2906:FreeRTOS/Src/queue.c ****                 {
2907:FreeRTOS/Src/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2908:FreeRTOS/Src/queue.c ****                     {
2909:FreeRTOS/Src/queue.c ****                         return pdTRUE;
2910:FreeRTOS/Src/queue.c ****                     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 132


2911:FreeRTOS/Src/queue.c ****                     else
2912:FreeRTOS/Src/queue.c ****                     {
2913:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2914:FreeRTOS/Src/queue.c ****                     }
2915:FreeRTOS/Src/queue.c ****                 }
2916:FreeRTOS/Src/queue.c ****                 else
2917:FreeRTOS/Src/queue.c ****                 {
2918:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2919:FreeRTOS/Src/queue.c ****                 }
2920:FreeRTOS/Src/queue.c ****             }
2921:FreeRTOS/Src/queue.c ****             else
2922:FreeRTOS/Src/queue.c ****             {
2923:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2924:FreeRTOS/Src/queue.c ****             }
2925:FreeRTOS/Src/queue.c ****         }
2926:FreeRTOS/Src/queue.c ****         else
2927:FreeRTOS/Src/queue.c ****         {
2928:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
2929:FreeRTOS/Src/queue.c ****         }
2930:FreeRTOS/Src/queue.c **** 
2931:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueCRSendFromISR( xCoRoutinePreviouslyWoken );
2932:FreeRTOS/Src/queue.c **** 
2933:FreeRTOS/Src/queue.c ****         return xCoRoutinePreviouslyWoken;
2934:FreeRTOS/Src/queue.c ****     }
2935:FreeRTOS/Src/queue.c **** 
2936:FreeRTOS/Src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2937:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2938:FreeRTOS/Src/queue.c **** 
2939:FreeRTOS/Src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2940:FreeRTOS/Src/queue.c **** 
2941:FreeRTOS/Src/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2942:FreeRTOS/Src/queue.c ****                                        void * pvBuffer,
2943:FreeRTOS/Src/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2944:FreeRTOS/Src/queue.c ****     {
2945:FreeRTOS/Src/queue.c ****         BaseType_t xReturn;
2946:FreeRTOS/Src/queue.c ****         Queue_t * const pxQueue = xQueue;
2947:FreeRTOS/Src/queue.c **** 
2948:FreeRTOS/Src/queue.c ****         traceENTER_xQueueCRReceiveFromISR( xQueue, pvBuffer, pxCoRoutineWoken );
2949:FreeRTOS/Src/queue.c **** 
2950:FreeRTOS/Src/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2951:FreeRTOS/Src/queue.c ****          * not then just leave without doing anything. */
2952:FreeRTOS/Src/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2953:FreeRTOS/Src/queue.c ****         {
2954:FreeRTOS/Src/queue.c ****             /* Copy the data from the queue. */
2955:FreeRTOS/Src/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2956:FreeRTOS/Src/queue.c **** 
2957:FreeRTOS/Src/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2958:FreeRTOS/Src/queue.c ****             {
2959:FreeRTOS/Src/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2960:FreeRTOS/Src/queue.c ****             }
2961:FreeRTOS/Src/queue.c ****             else
2962:FreeRTOS/Src/queue.c ****             {
2963:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2964:FreeRTOS/Src/queue.c ****             }
2965:FreeRTOS/Src/queue.c **** 
2966:FreeRTOS/Src/queue.c ****             --( pxQueue->uxMessagesWaiting );
2967:FreeRTOS/Src/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 133


2968:FreeRTOS/Src/queue.c **** 
2969:FreeRTOS/Src/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2970:FreeRTOS/Src/queue.c ****             {
2971:FreeRTOS/Src/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2972:FreeRTOS/Src/queue.c ****                 {
2973:FreeRTOS/Src/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2974:FreeRTOS/Src/queue.c ****                     {
2975:FreeRTOS/Src/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2976:FreeRTOS/Src/queue.c ****                     }
2977:FreeRTOS/Src/queue.c ****                     else
2978:FreeRTOS/Src/queue.c ****                     {
2979:FreeRTOS/Src/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2980:FreeRTOS/Src/queue.c ****                     }
2981:FreeRTOS/Src/queue.c ****                 }
2982:FreeRTOS/Src/queue.c ****                 else
2983:FreeRTOS/Src/queue.c ****                 {
2984:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2985:FreeRTOS/Src/queue.c ****                 }
2986:FreeRTOS/Src/queue.c ****             }
2987:FreeRTOS/Src/queue.c ****             else
2988:FreeRTOS/Src/queue.c ****             {
2989:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2990:FreeRTOS/Src/queue.c ****             }
2991:FreeRTOS/Src/queue.c **** 
2992:FreeRTOS/Src/queue.c ****             xReturn = pdPASS;
2993:FreeRTOS/Src/queue.c ****         }
2994:FreeRTOS/Src/queue.c ****         else
2995:FreeRTOS/Src/queue.c ****         {
2996:FreeRTOS/Src/queue.c ****             xReturn = pdFAIL;
2997:FreeRTOS/Src/queue.c ****         }
2998:FreeRTOS/Src/queue.c **** 
2999:FreeRTOS/Src/queue.c ****         traceRETURN_xQueueCRReceiveFromISR( xReturn );
3000:FreeRTOS/Src/queue.c **** 
3001:FreeRTOS/Src/queue.c ****         return xReturn;
3002:FreeRTOS/Src/queue.c ****     }
3003:FreeRTOS/Src/queue.c **** 
3004:FreeRTOS/Src/queue.c **** #endif /* configUSE_CO_ROUTINES */
3005:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
3006:FreeRTOS/Src/queue.c **** 
3007:FreeRTOS/Src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
3008:FreeRTOS/Src/queue.c **** 
3009:FreeRTOS/Src/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
3010:FreeRTOS/Src/queue.c ****                               const char * pcQueueName )
3011:FreeRTOS/Src/queue.c ****     {
 3340              		.loc 1 3011 5 is_stmt 1 view -0
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 0
 3343              		@ frame_needed = 0, uses_anonymous_args = 0
 3344              		@ link register save eliminated.
3012:FreeRTOS/Src/queue.c ****         UBaseType_t ux;
 3345              		.loc 1 3012 9 view .LVU1074
3013:FreeRTOS/Src/queue.c ****         QueueRegistryItem_t * pxEntryToWrite = NULL;
 3346              		.loc 1 3013 9 view .LVU1075
3014:FreeRTOS/Src/queue.c **** 
3015:FreeRTOS/Src/queue.c ****         traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );
 3347              		.loc 1 3015 62 view .LVU1076
3016:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 134


3017:FreeRTOS/Src/queue.c ****         configASSERT( xQueue );
 3348              		.loc 1 3017 31 view .LVU1077
3018:FreeRTOS/Src/queue.c **** 
3019:FreeRTOS/Src/queue.c ****         if( pcQueueName != NULL )
 3349              		.loc 1 3019 9 view .LVU1078
 3350              		.loc 1 3019 11 is_stmt 0 view .LVU1079
 3351 0000 21B1     		cbz	r1, .L246
3011:FreeRTOS/Src/queue.c ****         UBaseType_t ux;
 3352              		.loc 1 3011 5 view .LVU1080
 3353 0002 10B4     		push	{r4}
 3354              	.LCFI44:
 3355              		.cfi_def_cfa_offset 4
 3356              		.cfi_offset 4, -4
 3357 0004 0C46     		mov	r4, r1
3013:FreeRTOS/Src/queue.c **** 
 3358              		.loc 1 3013 31 view .LVU1081
 3359 0006 0021     		movs	r1, #0
 3360              	.LVL339:
3020:FreeRTOS/Src/queue.c ****         {
3021:FreeRTOS/Src/queue.c ****             /* See if there is an empty space in the registry.  A NULL name denotes
3022:FreeRTOS/Src/queue.c ****              * a free slot. */
3023:FreeRTOS/Src/queue.c ****             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3361              		.loc 1 3023 21 view .LVU1082
 3362 0008 0B46     		mov	r3, r1
 3363 000a 05E0     		b	.L236
 3364              	.LVL340:
 3365              	.L246:
 3366              	.LCFI45:
 3367              		.cfi_def_cfa_offset 0
 3368              		.cfi_restore 4
 3369              		.loc 1 3023 21 view .LVU1083
 3370 000c 7047     		bx	lr
 3371              	.LVL341:
 3372              	.L248:
 3373              	.LCFI46:
 3374              		.cfi_def_cfa_offset 4
 3375              		.cfi_offset 4, -4
3024:FreeRTOS/Src/queue.c ****             {
3025:FreeRTOS/Src/queue.c ****                 /* Replace an existing entry if the queue is already in the registry. */
3026:FreeRTOS/Src/queue.c ****                 if( xQueue == xQueueRegistry[ ux ].xHandle )
3027:FreeRTOS/Src/queue.c ****                 {
3028:FreeRTOS/Src/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 3376              		.loc 1 3028 21 is_stmt 1 view .LVU1084
 3377              		.loc 1 3028 36 is_stmt 0 view .LVU1085
 3378 000e 0F49     		ldr	r1, .L249
 3379              	.LVL342:
 3380              		.loc 1 3028 36 view .LVU1086
 3381 0010 01EBC301 		add	r1, r1, r3, lsl #3
 3382              	.LVL343:
3029:FreeRTOS/Src/queue.c ****                     break;
 3383              		.loc 1 3029 21 is_stmt 1 view .LVU1087
3030:FreeRTOS/Src/queue.c ****                 }
3031:FreeRTOS/Src/queue.c ****                 /* Otherwise, store in the next empty location */
3032:FreeRTOS/Src/queue.c ****                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL )
3033:FreeRTOS/Src/queue.c ****                 {
3034:FreeRTOS/Src/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
3035:FreeRTOS/Src/queue.c ****                 }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 135


3036:FreeRTOS/Src/queue.c ****                 else
3037:FreeRTOS/Src/queue.c ****                 {
3038:FreeRTOS/Src/queue.c ****                     mtCOVERAGE_TEST_MARKER();
3039:FreeRTOS/Src/queue.c ****                 }
3040:FreeRTOS/Src/queue.c ****             }
3041:FreeRTOS/Src/queue.c ****         }
3042:FreeRTOS/Src/queue.c **** 
3043:FreeRTOS/Src/queue.c ****         if( pxEntryToWrite != NULL )
 3384              		.loc 1 3043 9 view .LVU1088
 3385 0014 14E0     		b	.L239
 3386              	.LVL344:
 3387              	.L240:
3038:FreeRTOS/Src/queue.c ****                 }
 3388              		.loc 1 3038 45 view .LVU1089
3023:FreeRTOS/Src/queue.c ****             {
 3389              		.loc 1 3023 93 discriminator 2 view .LVU1090
 3390 0016 0133     		adds	r3, r3, #1
 3391              	.LVL345:
 3392              	.L236:
3023:FreeRTOS/Src/queue.c ****             {
 3393              		.loc 1 3023 46 discriminator 1 view .LVU1091
 3394 0018 032B     		cmp	r3, #3
 3395 001a 10D8     		bhi	.L247
3026:FreeRTOS/Src/queue.c ****                 {
 3396              		.loc 1 3026 17 view .LVU1092
3026:FreeRTOS/Src/queue.c ****                 {
 3397              		.loc 1 3026 51 is_stmt 0 view .LVU1093
 3398 001c 0B4A     		ldr	r2, .L249
 3399 001e 02EBC302 		add	r2, r2, r3, lsl #3
 3400 0022 5268     		ldr	r2, [r2, #4]
3026:FreeRTOS/Src/queue.c ****                 {
 3401              		.loc 1 3026 19 view .LVU1094
 3402 0024 8242     		cmp	r2, r0
 3403 0026 F2D0     		beq	.L248
3032:FreeRTOS/Src/queue.c ****                 {
 3404              		.loc 1 3032 22 is_stmt 1 view .LVU1095
3032:FreeRTOS/Src/queue.c ****                 {
 3405              		.loc 1 3032 24 is_stmt 0 view .LVU1096
 3406 0028 0029     		cmp	r1, #0
 3407 002a F4D1     		bne	.L240
3032:FreeRTOS/Src/queue.c ****                 {
 3408              		.loc 1 3032 78 discriminator 1 view .LVU1097
 3409 002c 074A     		ldr	r2, .L249
 3410 002e 52F83320 		ldr	r2, [r2, r3, lsl #3]
3032:FreeRTOS/Src/queue.c ****                 {
 3411              		.loc 1 3032 53 discriminator 1 view .LVU1098
 3412 0032 002A     		cmp	r2, #0
 3413 0034 EFD1     		bne	.L240
3034:FreeRTOS/Src/queue.c ****                 }
 3414              		.loc 1 3034 21 is_stmt 1 view .LVU1099
3034:FreeRTOS/Src/queue.c ****                 }
 3415              		.loc 1 3034 36 is_stmt 0 view .LVU1100
 3416 0036 0549     		ldr	r1, .L249
 3417              	.LVL346:
3034:FreeRTOS/Src/queue.c ****                 }
 3418              		.loc 1 3034 36 view .LVU1101
 3419 0038 01EBC301 		add	r1, r1, r3, lsl #3
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 136


 3420 003c EBE7     		b	.L240
 3421              	.LVL347:
 3422              	.L247:
 3423              		.loc 1 3043 9 is_stmt 1 view .LVU1102
 3424              		.loc 1 3043 11 is_stmt 0 view .LVU1103
 3425 003e 09B1     		cbz	r1, .L235
 3426              	.L239:
3044:FreeRTOS/Src/queue.c ****         {
3045:FreeRTOS/Src/queue.c ****             /* Store the information on this queue. */
3046:FreeRTOS/Src/queue.c ****             pxEntryToWrite->pcQueueName = pcQueueName;
 3427              		.loc 1 3046 13 is_stmt 1 view .LVU1104
 3428              		.loc 1 3046 41 is_stmt 0 view .LVU1105
 3429 0040 0C60     		str	r4, [r1]
3047:FreeRTOS/Src/queue.c ****             pxEntryToWrite->xHandle = xQueue;
 3430              		.loc 1 3047 13 is_stmt 1 view .LVU1106
 3431              		.loc 1 3047 37 is_stmt 0 view .LVU1107
 3432 0042 4860     		str	r0, [r1, #4]
 3433              	.LVL348:
3048:FreeRTOS/Src/queue.c **** 
3049:FreeRTOS/Src/queue.c ****             traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 3434              		.loc 1 3049 59 is_stmt 1 view .LVU1108
3050:FreeRTOS/Src/queue.c ****         }
3051:FreeRTOS/Src/queue.c **** 
3052:FreeRTOS/Src/queue.c ****         traceRETURN_vQueueAddToRegistry();
 3435              		.loc 1 3052 42 view .LVU1109
 3436              	.L235:
3053:FreeRTOS/Src/queue.c ****     }
 3437              		.loc 1 3053 5 is_stmt 0 view .LVU1110
 3438 0044 5DF8044B 		ldr	r4, [sp], #4
 3439              	.LCFI47:
 3440              		.cfi_restore 4
 3441              		.cfi_def_cfa_offset 0
 3442              	.LVL349:
 3443              		.loc 1 3053 5 view .LVU1111
 3444 0048 7047     		bx	lr
 3445              	.L250:
 3446 004a 00BF     		.align	2
 3447              	.L249:
 3448 004c 00000000 		.word	xQueueRegistry
 3449              		.cfi_endproc
 3450              	.LFE158:
 3452              		.section	.text.pcQueueGetName,"ax",%progbits
 3453              		.align	1
 3454              		.global	pcQueueGetName
 3455              		.syntax unified
 3456              		.thumb
 3457              		.thumb_func
 3459              	pcQueueGetName:
 3460              	.LVL350:
 3461              	.LFB159:
3054:FreeRTOS/Src/queue.c **** 
3055:FreeRTOS/Src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
3056:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
3057:FreeRTOS/Src/queue.c **** 
3058:FreeRTOS/Src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
3059:FreeRTOS/Src/queue.c **** 
3060:FreeRTOS/Src/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 137


3061:FreeRTOS/Src/queue.c ****     {
 3462              		.loc 1 3061 5 is_stmt 1 view -0
 3463              		.cfi_startproc
 3464              		@ args = 0, pretend = 0, frame = 0
 3465              		@ frame_needed = 0, uses_anonymous_args = 0
 3466              		@ link register save eliminated.
3062:FreeRTOS/Src/queue.c ****         UBaseType_t ux;
 3467              		.loc 1 3062 9 view .LVU1113
3063:FreeRTOS/Src/queue.c ****         const char * pcReturn = NULL;
 3468              		.loc 1 3063 9 view .LVU1114
3064:FreeRTOS/Src/queue.c **** 
3065:FreeRTOS/Src/queue.c ****         traceENTER_pcQueueGetName( xQueue );
 3469              		.loc 1 3065 44 view .LVU1115
3066:FreeRTOS/Src/queue.c **** 
3067:FreeRTOS/Src/queue.c ****         configASSERT( xQueue );
 3470              		.loc 1 3067 31 view .LVU1116
3068:FreeRTOS/Src/queue.c **** 
3069:FreeRTOS/Src/queue.c ****         /* Note there is nothing here to protect against another task adding or
3070:FreeRTOS/Src/queue.c ****          * removing entries from the registry while it is being searched. */
3071:FreeRTOS/Src/queue.c **** 
3072:FreeRTOS/Src/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3471              		.loc 1 3072 9 view .LVU1117
 3472              		.loc 1 3072 17 is_stmt 0 view .LVU1118
 3473 0000 0023     		movs	r3, #0
 3474              	.LVL351:
 3475              	.L252:
 3476              		.loc 1 3072 42 is_stmt 1 discriminator 1 view .LVU1119
 3477 0002 032B     		cmp	r3, #3
 3478 0004 0BD8     		bhi	.L256
3073:FreeRTOS/Src/queue.c ****         {
3074:FreeRTOS/Src/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 3479              		.loc 1 3074 13 view .LVU1120
 3480              		.loc 1 3074 37 is_stmt 0 view .LVU1121
 3481 0006 074A     		ldr	r2, .L258
 3482 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3483 000c 5268     		ldr	r2, [r2, #4]
 3484              		.loc 1 3074 15 view .LVU1122
 3485 000e 8242     		cmp	r2, r0
 3486 0010 01D0     		beq	.L257
3075:FreeRTOS/Src/queue.c ****             {
3076:FreeRTOS/Src/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
3077:FreeRTOS/Src/queue.c ****                 break;
3078:FreeRTOS/Src/queue.c ****             }
3079:FreeRTOS/Src/queue.c ****             else
3080:FreeRTOS/Src/queue.c ****             {
3081:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 3487              		.loc 1 3081 41 is_stmt 1 view .LVU1123
3072:FreeRTOS/Src/queue.c ****         {
 3488              		.loc 1 3072 89 discriminator 2 view .LVU1124
 3489 0012 0133     		adds	r3, r3, #1
 3490              	.LVL352:
3072:FreeRTOS/Src/queue.c ****         {
 3491              		.loc 1 3072 89 is_stmt 0 discriminator 2 view .LVU1125
 3492 0014 F5E7     		b	.L252
 3493              	.LVL353:
 3494              	.L257:
3076:FreeRTOS/Src/queue.c ****                 break;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 138


 3495              		.loc 1 3076 17 is_stmt 1 view .LVU1126
3076:FreeRTOS/Src/queue.c ****                 break;
 3496              		.loc 1 3076 26 is_stmt 0 view .LVU1127
 3497 0016 034A     		ldr	r2, .L258
 3498 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 3499              	.LVL354:
3077:FreeRTOS/Src/queue.c ****             }
 3500              		.loc 1 3077 17 is_stmt 1 view .LVU1128
 3501 001c 7047     		bx	lr
 3502              	.LVL355:
 3503              	.L256:
3063:FreeRTOS/Src/queue.c **** 
 3504              		.loc 1 3063 22 is_stmt 0 view .LVU1129
 3505 001e 0020     		movs	r0, #0
 3506              	.LVL356:
3082:FreeRTOS/Src/queue.c ****             }
3083:FreeRTOS/Src/queue.c ****         }
3084:FreeRTOS/Src/queue.c **** 
3085:FreeRTOS/Src/queue.c ****         traceRETURN_pcQueueGetName( pcReturn );
 3507              		.loc 1 3085 47 is_stmt 1 view .LVU1130
3086:FreeRTOS/Src/queue.c **** 
3087:FreeRTOS/Src/queue.c ****         return pcReturn;
 3508              		.loc 1 3087 9 view .LVU1131
3088:FreeRTOS/Src/queue.c ****     }
 3509              		.loc 1 3088 5 is_stmt 0 view .LVU1132
 3510 0020 7047     		bx	lr
 3511              	.L259:
 3512 0022 00BF     		.align	2
 3513              	.L258:
 3514 0024 00000000 		.word	xQueueRegistry
 3515              		.cfi_endproc
 3516              	.LFE159:
 3518              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3519              		.align	1
 3520              		.global	vQueueUnregisterQueue
 3521              		.syntax unified
 3522              		.thumb
 3523              		.thumb_func
 3525              	vQueueUnregisterQueue:
 3526              	.LVL357:
 3527              	.LFB160:
3089:FreeRTOS/Src/queue.c **** 
3090:FreeRTOS/Src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
3091:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
3092:FreeRTOS/Src/queue.c **** 
3093:FreeRTOS/Src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
3094:FreeRTOS/Src/queue.c **** 
3095:FreeRTOS/Src/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
3096:FreeRTOS/Src/queue.c ****     {
 3528              		.loc 1 3096 5 is_stmt 1 view -0
 3529              		.cfi_startproc
 3530              		@ args = 0, pretend = 0, frame = 0
 3531              		@ frame_needed = 0, uses_anonymous_args = 0
 3532              		@ link register save eliminated.
3097:FreeRTOS/Src/queue.c ****         UBaseType_t ux;
 3533              		.loc 1 3097 9 view .LVU1134
3098:FreeRTOS/Src/queue.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 139


3099:FreeRTOS/Src/queue.c ****         traceENTER_vQueueUnregisterQueue( xQueue );
 3534              		.loc 1 3099 51 view .LVU1135
3100:FreeRTOS/Src/queue.c **** 
3101:FreeRTOS/Src/queue.c ****         configASSERT( xQueue );
 3535              		.loc 1 3101 31 view .LVU1136
3102:FreeRTOS/Src/queue.c **** 
3103:FreeRTOS/Src/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
3104:FreeRTOS/Src/queue.c ****          * registry. */
3105:FreeRTOS/Src/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3536              		.loc 1 3105 9 view .LVU1137
 3537              		.loc 1 3105 17 is_stmt 0 view .LVU1138
 3538 0000 0023     		movs	r3, #0
 3539              	.LVL358:
 3540              	.L261:
 3541              		.loc 1 3105 42 is_stmt 1 discriminator 1 view .LVU1139
 3542 0002 032B     		cmp	r3, #3
 3543 0004 0FD8     		bhi	.L265
3106:FreeRTOS/Src/queue.c ****         {
3107:FreeRTOS/Src/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 3544              		.loc 1 3107 13 view .LVU1140
 3545              		.loc 1 3107 37 is_stmt 0 view .LVU1141
 3546 0006 084A     		ldr	r2, .L267
 3547 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3548 000c 5268     		ldr	r2, [r2, #4]
 3549              		.loc 1 3107 15 view .LVU1142
 3550 000e 8242     		cmp	r2, r0
 3551 0010 01D0     		beq	.L266
3108:FreeRTOS/Src/queue.c ****             {
3109:FreeRTOS/Src/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
3110:FreeRTOS/Src/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
3111:FreeRTOS/Src/queue.c **** 
3112:FreeRTOS/Src/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
3113:FreeRTOS/Src/queue.c ****                  * appear in the registry twice if it is added, removed, then
3114:FreeRTOS/Src/queue.c ****                  * added again. */
3115:FreeRTOS/Src/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
3116:FreeRTOS/Src/queue.c ****                 break;
3117:FreeRTOS/Src/queue.c ****             }
3118:FreeRTOS/Src/queue.c ****             else
3119:FreeRTOS/Src/queue.c ****             {
3120:FreeRTOS/Src/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 3552              		.loc 1 3120 41 is_stmt 1 view .LVU1143
3105:FreeRTOS/Src/queue.c ****         {
 3553              		.loc 1 3105 89 discriminator 2 view .LVU1144
 3554 0012 0133     		adds	r3, r3, #1
 3555              	.LVL359:
3105:FreeRTOS/Src/queue.c ****         {
 3556              		.loc 1 3105 89 is_stmt 0 discriminator 2 view .LVU1145
 3557 0014 F5E7     		b	.L261
 3558              	.LVL360:
 3559              	.L266:
3110:FreeRTOS/Src/queue.c **** 
 3560              		.loc 1 3110 17 is_stmt 1 view .LVU1146
3110:FreeRTOS/Src/queue.c **** 
 3561              		.loc 1 3110 50 is_stmt 0 view .LVU1147
 3562 0016 044A     		ldr	r2, .L267
 3563 0018 0021     		movs	r1, #0
 3564 001a 42F83310 		str	r1, [r2, r3, lsl #3]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 140


3115:FreeRTOS/Src/queue.c ****                 break;
 3565              		.loc 1 3115 17 is_stmt 1 view .LVU1148
3115:FreeRTOS/Src/queue.c ****                 break;
 3566              		.loc 1 3115 46 is_stmt 0 view .LVU1149
 3567 001e 02EBC302 		add	r2, r2, r3, lsl #3
 3568 0022 5160     		str	r1, [r2, #4]
3116:FreeRTOS/Src/queue.c ****             }
 3569              		.loc 1 3116 17 is_stmt 1 view .LVU1150
 3570 0024 7047     		bx	lr
 3571              	.L265:
3121:FreeRTOS/Src/queue.c ****             }
3122:FreeRTOS/Src/queue.c ****         }
3123:FreeRTOS/Src/queue.c **** 
3124:FreeRTOS/Src/queue.c ****         traceRETURN_vQueueUnregisterQueue();
3125:FreeRTOS/Src/queue.c ****     }
 3572              		.loc 1 3125 5 is_stmt 0 view .LVU1151
 3573 0026 7047     		bx	lr
 3574              	.L268:
 3575              		.align	2
 3576              	.L267:
 3577 0028 00000000 		.word	xQueueRegistry
 3578              		.cfi_endproc
 3579              	.LFE160:
 3581              		.section	.text.vQueueDelete,"ax",%progbits
 3582              		.align	1
 3583              		.global	vQueueDelete
 3584              		.syntax unified
 3585              		.thumb
 3586              		.thumb_func
 3588              	vQueueDelete:
 3589              	.LVL361:
 3590              	.LFB147:
2255:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 3591              		.loc 1 2255 1 is_stmt 1 view -0
 3592              		.cfi_startproc
 3593              		@ args = 0, pretend = 0, frame = 0
 3594              		@ frame_needed = 0, uses_anonymous_args = 0
2255:FreeRTOS/Src/queue.c ****     Queue_t * const pxQueue = xQueue;
 3595              		.loc 1 2255 1 is_stmt 0 view .LVU1153
 3596 0000 10B5     		push	{r4, lr}
 3597              	.LCFI48:
 3598              		.cfi_def_cfa_offset 8
 3599              		.cfi_offset 4, -8
 3600              		.cfi_offset 14, -4
 3601 0002 0446     		mov	r4, r0
2256:FreeRTOS/Src/queue.c **** 
 3602              		.loc 1 2256 5 is_stmt 1 view .LVU1154
 3603              	.LVL362:
2258:FreeRTOS/Src/queue.c **** 
 3604              		.loc 1 2258 38 view .LVU1155
2260:FreeRTOS/Src/queue.c ****     traceQUEUE_DELETE( pxQueue );
 3605              		.loc 1 2260 28 view .LVU1156
2261:FreeRTOS/Src/queue.c **** 
 3606              		.loc 1 2261 33 view .LVU1157
2265:FreeRTOS/Src/queue.c ****     }
 3607              		.loc 1 2265 9 view .LVU1158
 3608 0004 FFF7FEFF 		bl	vQueueUnregisterQueue
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 141


 3609              	.LVL363:
2273:FreeRTOS/Src/queue.c ****     }
 3610              		.loc 1 2273 9 view .LVU1159
 3611 0008 2046     		mov	r0, r4
 3612 000a FFF7FEFF 		bl	vPortFree
 3613              	.LVL364:
2296:FreeRTOS/Src/queue.c **** }
 3614              		.loc 1 2296 31 view .LVU1160
2297:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3615              		.loc 1 2297 1 is_stmt 0 view .LVU1161
 3616 000e 10BD     		pop	{r4, pc}
2297:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 3617              		.loc 1 2297 1 view .LVU1162
 3618              		.cfi_endproc
 3619              	.LFE147:
 3621              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 3622              		.align	1
 3623              		.global	vQueueWaitForMessageRestricted
 3624              		.syntax unified
 3625              		.thumb
 3626              		.thumb_func
 3628              	vQueueWaitForMessageRestricted:
 3629              	.LVL365:
 3630              	.LFB161:
3126:FreeRTOS/Src/queue.c **** 
3127:FreeRTOS/Src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
3128:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
3129:FreeRTOS/Src/queue.c **** 
3130:FreeRTOS/Src/queue.c **** #if ( configUSE_TIMERS == 1 )
3131:FreeRTOS/Src/queue.c **** 
3132:FreeRTOS/Src/queue.c ****     void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
3133:FreeRTOS/Src/queue.c ****                                          TickType_t xTicksToWait,
3134:FreeRTOS/Src/queue.c ****                                          const BaseType_t xWaitIndefinitely )
3135:FreeRTOS/Src/queue.c ****     {
 3631              		.loc 1 3135 5 is_stmt 1 view -0
 3632              		.cfi_startproc
 3633              		@ args = 0, pretend = 0, frame = 0
 3634              		@ frame_needed = 0, uses_anonymous_args = 0
 3635              		.loc 1 3135 5 is_stmt 0 view .LVU1164
 3636 0000 70B5     		push	{r4, r5, r6, lr}
 3637              	.LCFI49:
 3638              		.cfi_def_cfa_offset 16
 3639              		.cfi_offset 4, -16
 3640              		.cfi_offset 5, -12
 3641              		.cfi_offset 6, -8
 3642              		.cfi_offset 14, -4
 3643 0002 0446     		mov	r4, r0
 3644 0004 0D46     		mov	r5, r1
 3645 0006 1646     		mov	r6, r2
3136:FreeRTOS/Src/queue.c ****         Queue_t * const pxQueue = xQueue;
 3646              		.loc 1 3136 9 is_stmt 1 view .LVU1165
 3647              	.LVL366:
3137:FreeRTOS/Src/queue.c **** 
3138:FreeRTOS/Src/queue.c ****         traceENTER_vQueueWaitForMessageRestricted( xQueue, xTicksToWait, xWaitIndefinitely );
 3648              		.loc 1 3138 93 view .LVU1166
3139:FreeRTOS/Src/queue.c **** 
3140:FreeRTOS/Src/queue.c ****         /* This function should not be called by application code hence the
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 142


3141:FreeRTOS/Src/queue.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3142:FreeRTOS/Src/queue.c ****          * designed for use by kernel code, and has special calling requirements.
3143:FreeRTOS/Src/queue.c ****          * It can result in vListInsert() being called on a list that can only
3144:FreeRTOS/Src/queue.c ****          * possibly ever have one item in it, so the list will be fast, but even
3145:FreeRTOS/Src/queue.c ****          * so it should be called with the scheduler locked and not from a critical
3146:FreeRTOS/Src/queue.c ****          * section. */
3147:FreeRTOS/Src/queue.c **** 
3148:FreeRTOS/Src/queue.c ****         /* Only do anything if there are no messages in the queue.  This function
3149:FreeRTOS/Src/queue.c ****          *  will not actually cause the task to block, just place it on a blocked
3150:FreeRTOS/Src/queue.c ****          *  list.  It will not block until the scheduler is unlocked - at which
3151:FreeRTOS/Src/queue.c ****          *  time a yield will be performed.  If an item is added to the queue while
3152:FreeRTOS/Src/queue.c ****          *  the queue is locked, and the calling task blocks on the queue, then the
3153:FreeRTOS/Src/queue.c ****          *  calling task will be immediately unblocked when the queue is unlocked. */
3154:FreeRTOS/Src/queue.c ****         prvLockQueue( pxQueue );
 3649              		.loc 1 3154 9 view .LVU1167
 3650 0008 FFF7FEFF 		bl	vPortEnterCritical
 3651              	.LVL367:
 3652              		.loc 1 3154 9 discriminator 1 view .LVU1168
 3653 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3654 0010 5BB2     		sxtb	r3, r3
 3655 0012 B3F1FF3F 		cmp	r3, #-1
 3656 0016 0DD0     		beq	.L276
 3657              	.L272:
 3658              		.loc 1 3154 9 discriminator 3 view .LVU1169
 3659 0018 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3660 001c 5BB2     		sxtb	r3, r3
 3661 001e B3F1FF3F 		cmp	r3, #-1
 3662 0022 0BD0     		beq	.L277
 3663              	.L273:
 3664              		.loc 1 3154 9 discriminator 6 view .LVU1170
 3665 0024 FFF7FEFF 		bl	vPortExitCritical
 3666              	.LVL368:
3155:FreeRTOS/Src/queue.c **** 
3156:FreeRTOS/Src/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3667              		.loc 1 3156 9 view .LVU1171
 3668              		.loc 1 3156 20 is_stmt 0 view .LVU1172
 3669 0028 A36B     		ldr	r3, [r4, #56]
 3670              		.loc 1 3156 11 view .LVU1173
 3671 002a 5BB1     		cbz	r3, .L278
 3672              	.L274:
3157:FreeRTOS/Src/queue.c ****         {
3158:FreeRTOS/Src/queue.c ****             /* There is nothing in the queue, block for the specified period. */
3159:FreeRTOS/Src/queue.c ****             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xW
3160:FreeRTOS/Src/queue.c ****         }
3161:FreeRTOS/Src/queue.c ****         else
3162:FreeRTOS/Src/queue.c ****         {
3163:FreeRTOS/Src/queue.c ****             mtCOVERAGE_TEST_MARKER();
 3673              		.loc 1 3163 37 is_stmt 1 view .LVU1174
3164:FreeRTOS/Src/queue.c ****         }
3165:FreeRTOS/Src/queue.c **** 
3166:FreeRTOS/Src/queue.c ****         prvUnlockQueue( pxQueue );
 3674              		.loc 1 3166 9 view .LVU1175
 3675 002c 2046     		mov	r0, r4
 3676 002e FFF7FEFF 		bl	prvUnlockQueue
 3677              	.LVL369:
3167:FreeRTOS/Src/queue.c **** 
3168:FreeRTOS/Src/queue.c ****         traceRETURN_vQueueWaitForMessageRestricted();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 143


 3678              		.loc 1 3168 53 view .LVU1176
3169:FreeRTOS/Src/queue.c ****     }
 3679              		.loc 1 3169 5 is_stmt 0 view .LVU1177
 3680 0032 70BD     		pop	{r4, r5, r6, pc}
 3681              	.LVL370:
 3682              	.L276:
3154:FreeRTOS/Src/queue.c **** 
 3683              		.loc 1 3154 9 is_stmt 1 discriminator 1 view .LVU1178
 3684 0034 0023     		movs	r3, #0
 3685 0036 84F84430 		strb	r3, [r4, #68]
 3686 003a EDE7     		b	.L272
 3687              	.L277:
3154:FreeRTOS/Src/queue.c **** 
 3688              		.loc 1 3154 9 discriminator 4 view .LVU1179
 3689 003c 0023     		movs	r3, #0
 3690 003e 84F84530 		strb	r3, [r4, #69]
 3691 0042 EFE7     		b	.L273
 3692              	.L278:
3159:FreeRTOS/Src/queue.c ****         }
 3693              		.loc 1 3159 13 view .LVU1180
 3694 0044 3246     		mov	r2, r6
 3695 0046 2946     		mov	r1, r5
 3696 0048 04F12400 		add	r0, r4, #36
 3697 004c FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 3698              	.LVL371:
 3699 0050 ECE7     		b	.L274
 3700              		.cfi_endproc
 3701              	.LFE161:
 3703              		.global	xQueueRegistry
 3704              		.section	.bss.xQueueRegistry,"aw",%nobits
 3705              		.align	2
 3708              	xQueueRegistry:
 3709 0000 00000000 		.space	32
 3709      00000000 
 3709      00000000 
 3709      00000000 
 3709      00000000 
 3710              		.text
 3711              	.Letext0:
 3712              		.file 3 "D:/Tools/arm-gnu-toolchain/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h"
 3713              		.file 4 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 3714              		.file 5 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 3715              		.file 6 "FreeRTOS/Inc/list.h"
 3716              		.file 7 "FreeRTOS/Inc/task.h"
 3717              		.file 8 "FreeRTOS/Inc/queue.h"
 3718              		.file 9 "FreeRTOS/Inc/portable.h"
 3719              		.file 10 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/string.h"
 3720              		.file 11 "<built-in>"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 144


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:19     .text.prvGetDisinheritPriorityAfterTimeout:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:24     .text.prvGetDisinheritPriorityAfterTimeout:00000000 prvGetDisinheritPriorityAfterTimeout
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:58     .text.prvIsQueueFull:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:63     .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:111    .text.prvIsQueueEmpty:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:116    .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:161    .text.prvCopyDataToQueue:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:166    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:325    .text.prvCopyDataFromQueue:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:330    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:390    .text.prvUnlockQueue:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:395    .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:520    .text.xQueueGenericReset:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:526    .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:700    .text.prvInitialiseNewQueue:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:705    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:758    .text.xQueueGenericCreate:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:764    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:879    .text.xQueueCreateCountingSemaphore:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:885    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:955    .text.xQueueGenericSend:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:961    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1241   .text.prvInitialiseMutex:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1246   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1294   .text.xQueueCreateMutex:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1300   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1342   .text.xQueueGiveMutexRecursive:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1348   .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1419   .text.xQueueGenericSendFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1425   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1601   .text.xQueueGiveFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1607   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1792   .text.xQueueReceive:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:1798   .text.xQueueReceive:00000000 xQueueReceive
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2073   .text.xQueueSemaphoreTake:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2079   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2422   .text.xQueueTakeMutexRecursive:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2428   .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2501   .text.xQueuePeek:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2507   .text.xQueuePeek:00000000 xQueuePeek
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2784   .text.xQueueReceiveFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2790   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2965   .text.xQueuePeekFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:2971   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3071   .text.uxQueueMessagesWaiting:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3077   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3114   .text.uxQueueSpacesAvailable:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3120   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3164   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3170   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3194   .text.uxQueueGetQueueItemSize:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3200   .text.uxQueueGetQueueItemSize:00000000 uxQueueGetQueueItemSize
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3220   .text.uxQueueGetQueueLength:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3226   .text.uxQueueGetQueueLength:00000000 uxQueueGetQueueLength
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3246   .text.xQueueIsQueueEmptyFromISR:00000000 $t
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s 			page 145


C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3252   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3287   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3293   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3331   .text.vQueueAddToRegistry:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3337   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3448   .text.vQueueAddToRegistry:0000004c $d
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3708   .bss.xQueueRegistry:00000000 xQueueRegistry
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3453   .text.pcQueueGetName:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3459   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3514   .text.pcQueueGetName:00000024 $d
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3519   .text.vQueueUnregisterQueue:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3525   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3577   .text.vQueueUnregisterQueue:00000028 $d
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3582   .text.vQueueDelete:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3588   .text.vQueueDelete:00000000 vQueueDelete
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3622   .text.vQueueWaitForMessageRestricted:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3628   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted
C:\Users\Dawn\AppData\Local\Temp\ccVwO18p.s:3705   .bss.xQueueRegistry:00000000 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskGetCurrentTaskHandle
uxTaskGetNumberOfTasks
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
