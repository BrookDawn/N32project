ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 23, 1
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"heap_4.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "FreeRTOS/MemMang/heap_4.c"
  18              		.section	.text.prvHeapInit,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvHeapInit:
  25              	.LFB134:
   1:FreeRTOS/MemMang/heap_4.c **** /*
   2:FreeRTOS/MemMang/heap_4.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/MemMang/heap_4.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/MemMang/heap_4.c ****  *
   5:FreeRTOS/MemMang/heap_4.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/MemMang/heap_4.c ****  *
   7:FreeRTOS/MemMang/heap_4.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/MemMang/heap_4.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/MemMang/heap_4.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/MemMang/heap_4.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/MemMang/heap_4.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/MemMang/heap_4.c ****  * subject to the following conditions:
  13:FreeRTOS/MemMang/heap_4.c ****  *
  14:FreeRTOS/MemMang/heap_4.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/MemMang/heap_4.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/MemMang/heap_4.c ****  *
  17:FreeRTOS/MemMang/heap_4.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/MemMang/heap_4.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/MemMang/heap_4.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/MemMang/heap_4.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/MemMang/heap_4.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/MemMang/heap_4.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/MemMang/heap_4.c ****  *
  24:FreeRTOS/MemMang/heap_4.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/MemMang/heap_4.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/MemMang/heap_4.c ****  *
  27:FreeRTOS/MemMang/heap_4.c ****  */
  28:FreeRTOS/MemMang/heap_4.c **** 
  29:FreeRTOS/MemMang/heap_4.c **** /*
  30:FreeRTOS/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  31:FreeRTOS/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  32:FreeRTOS/MemMang/heap_4.c ****  * limits memory fragmentation.
  33:FreeRTOS/MemMang/heap_4.c ****  *
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 2


  34:FreeRTOS/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  35:FreeRTOS/MemMang/heap_4.c ****  * memory management pages of https://www.FreeRTOS.org for more information.
  36:FreeRTOS/MemMang/heap_4.c ****  */
  37:FreeRTOS/MemMang/heap_4.c **** #include <stdlib.h>
  38:FreeRTOS/MemMang/heap_4.c **** #include <string.h>
  39:FreeRTOS/MemMang/heap_4.c **** 
  40:FreeRTOS/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  41:FreeRTOS/MemMang/heap_4.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  42:FreeRTOS/MemMang/heap_4.c ****  * task.h is included from an application file. */
  43:FreeRTOS/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  44:FreeRTOS/MemMang/heap_4.c **** 
  45:FreeRTOS/MemMang/heap_4.c **** #include "FreeRTOS.h"
  46:FreeRTOS/MemMang/heap_4.c **** #include "task.h"
  47:FreeRTOS/MemMang/heap_4.c **** 
  48:FreeRTOS/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  49:FreeRTOS/MemMang/heap_4.c **** 
  50:FreeRTOS/MemMang/heap_4.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  51:FreeRTOS/MemMang/heap_4.c ****     #error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  52:FreeRTOS/MemMang/heap_4.c **** #endif
  53:FreeRTOS/MemMang/heap_4.c **** 
  54:FreeRTOS/MemMang/heap_4.c **** #ifndef configHEAP_CLEAR_MEMORY_ON_FREE
  55:FreeRTOS/MemMang/heap_4.c ****     #define configHEAP_CLEAR_MEMORY_ON_FREE    0
  56:FreeRTOS/MemMang/heap_4.c **** #endif
  57:FreeRTOS/MemMang/heap_4.c **** 
  58:FreeRTOS/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  59:FreeRTOS/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE    ( ( size_t ) ( xHeapStructSize << 1 ) )
  60:FreeRTOS/MemMang/heap_4.c **** 
  61:FreeRTOS/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  62:FreeRTOS/MemMang/heap_4.c **** #define heapBITS_PER_BYTE         ( ( size_t ) 8 )
  63:FreeRTOS/MemMang/heap_4.c **** 
  64:FreeRTOS/MemMang/heap_4.c **** /* Max value that fits in a size_t type. */
  65:FreeRTOS/MemMang/heap_4.c **** #define heapSIZE_MAX              ( ~( ( size_t ) 0 ) )
  66:FreeRTOS/MemMang/heap_4.c **** 
  67:FreeRTOS/MemMang/heap_4.c **** /* Check if multiplying a and b will result in overflow. */
  68:FreeRTOS/MemMang/heap_4.c **** #define heapMULTIPLY_WILL_OVERFLOW( a, b )     ( ( ( a ) > 0 ) && ( ( b ) > ( heapSIZE_MAX / ( a ) 
  69:FreeRTOS/MemMang/heap_4.c **** 
  70:FreeRTOS/MemMang/heap_4.c **** /* Check if adding a and b will result in overflow. */
  71:FreeRTOS/MemMang/heap_4.c **** #define heapADD_WILL_OVERFLOW( a, b )          ( ( a ) > ( heapSIZE_MAX - ( b ) ) )
  72:FreeRTOS/MemMang/heap_4.c **** 
  73:FreeRTOS/MemMang/heap_4.c **** /* Check if the subtraction operation ( a - b ) will result in underflow. */
  74:FreeRTOS/MemMang/heap_4.c **** #define heapSUBTRACT_WILL_UNDERFLOW( a, b )    ( ( a ) < ( b ) )
  75:FreeRTOS/MemMang/heap_4.c **** 
  76:FreeRTOS/MemMang/heap_4.c **** /* MSB of the xBlockSize member of an BlockLink_t structure is used to track
  77:FreeRTOS/MemMang/heap_4.c ****  * the allocation status of a block.  When MSB of the xBlockSize member of
  78:FreeRTOS/MemMang/heap_4.c ****  * an BlockLink_t structure is set then the block belongs to the application.
  79:FreeRTOS/MemMang/heap_4.c ****  * When the bit is free the block is still part of the free heap space. */
  80:FreeRTOS/MemMang/heap_4.c **** #define heapBLOCK_ALLOCATED_BITMASK    ( ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BY
  81:FreeRTOS/MemMang/heap_4.c **** #define heapBLOCK_SIZE_IS_VALID( xBlockSize )    ( ( ( xBlockSize ) & heapBLOCK_ALLOCATED_BITMASK )
  82:FreeRTOS/MemMang/heap_4.c **** #define heapBLOCK_IS_ALLOCATED( pxBlock )        ( ( ( pxBlock->xBlockSize ) & heapBLOCK_ALLOCATED_
  83:FreeRTOS/MemMang/heap_4.c **** #define heapALLOCATE_BLOCK( pxBlock )            ( ( pxBlock->xBlockSize ) |= heapBLOCK_ALLOCATED_B
  84:FreeRTOS/MemMang/heap_4.c **** #define heapFREE_BLOCK( pxBlock )                ( ( pxBlock->xBlockSize ) &= ~heapBLOCK_ALLOCATED_
  85:FreeRTOS/MemMang/heap_4.c **** 
  86:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  87:FreeRTOS/MemMang/heap_4.c **** 
  88:FreeRTOS/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
  89:FreeRTOS/MemMang/heap_4.c **** #if ( configAPPLICATION_ALLOCATED_HEAP == 1 )
  90:FreeRTOS/MemMang/heap_4.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 3


  91:FreeRTOS/MemMang/heap_4.c **** /* The application writer has already defined the array used for the RTOS
  92:FreeRTOS/MemMang/heap_4.c **** * heap - probably so it can be placed in a special segment or address. */
  93:FreeRTOS/MemMang/heap_4.c ****     extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  94:FreeRTOS/MemMang/heap_4.c **** #else
  95:FreeRTOS/MemMang/heap_4.c ****     PRIVILEGED_DATA static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  96:FreeRTOS/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  97:FreeRTOS/MemMang/heap_4.c **** 
  98:FreeRTOS/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
  99:FreeRTOS/MemMang/heap_4.c ****  * of their memory address. */
 100:FreeRTOS/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
 101:FreeRTOS/MemMang/heap_4.c **** {
 102:FreeRTOS/MemMang/heap_4.c ****     struct A_BLOCK_LINK * pxNextFreeBlock; /**< The next free block in the list. */
 103:FreeRTOS/MemMang/heap_4.c ****     size_t xBlockSize;                     /**< The size of the free block. */
 104:FreeRTOS/MemMang/heap_4.c **** } BlockLink_t;
 105:FreeRTOS/MemMang/heap_4.c **** 
 106:FreeRTOS/MemMang/heap_4.c **** /* Setting configENABLE_HEAP_PROTECTOR to 1 enables heap block pointers
 107:FreeRTOS/MemMang/heap_4.c ****  * protection using an application supplied canary value to catch heap
 108:FreeRTOS/MemMang/heap_4.c ****  * corruption should a heap buffer overflow occur.
 109:FreeRTOS/MemMang/heap_4.c ****  */
 110:FreeRTOS/MemMang/heap_4.c **** #if ( configENABLE_HEAP_PROTECTOR == 1 )
 111:FreeRTOS/MemMang/heap_4.c **** 
 112:FreeRTOS/MemMang/heap_4.c **** /**
 113:FreeRTOS/MemMang/heap_4.c ****  * @brief Application provided function to get a random value to be used as canary.
 114:FreeRTOS/MemMang/heap_4.c ****  *
 115:FreeRTOS/MemMang/heap_4.c ****  * @param pxHeapCanary [out] Output parameter to return the canary value.
 116:FreeRTOS/MemMang/heap_4.c ****  */
 117:FreeRTOS/MemMang/heap_4.c ****     extern void vApplicationGetRandomHeapCanary( portPOINTER_SIZE_TYPE * pxHeapCanary );
 118:FreeRTOS/MemMang/heap_4.c **** 
 119:FreeRTOS/MemMang/heap_4.c **** /* Canary value for protecting internal heap pointers. */
 120:FreeRTOS/MemMang/heap_4.c ****     PRIVILEGED_DATA static portPOINTER_SIZE_TYPE xHeapCanary;
 121:FreeRTOS/MemMang/heap_4.c **** 
 122:FreeRTOS/MemMang/heap_4.c **** /* Macro to load/store BlockLink_t pointers to memory. By XORing the
 123:FreeRTOS/MemMang/heap_4.c ****  * pointers with a random canary value, heap overflows will result
 124:FreeRTOS/MemMang/heap_4.c ****  * in randomly unpredictable pointer values which will be caught by
 125:FreeRTOS/MemMang/heap_4.c ****  * heapVALIDATE_BLOCK_POINTER assert. */
 126:FreeRTOS/MemMang/heap_4.c ****     #define heapPROTECT_BLOCK_POINTER( pxBlock )    ( ( BlockLink_t * ) ( ( ( portPOINTER_SIZE_TYPE
 127:FreeRTOS/MemMang/heap_4.c **** #else
 128:FreeRTOS/MemMang/heap_4.c **** 
 129:FreeRTOS/MemMang/heap_4.c ****     #define heapPROTECT_BLOCK_POINTER( pxBlock )    ( pxBlock )
 130:FreeRTOS/MemMang/heap_4.c **** 
 131:FreeRTOS/MemMang/heap_4.c **** #endif /* configENABLE_HEAP_PROTECTOR */
 132:FreeRTOS/MemMang/heap_4.c **** 
 133:FreeRTOS/MemMang/heap_4.c **** /* Assert that a heap block pointer is within the heap bounds. */
 134:FreeRTOS/MemMang/heap_4.c **** #define heapVALIDATE_BLOCK_POINTER( pxBlock )                          \
 135:FreeRTOS/MemMang/heap_4.c ****     configASSERT( ( ( uint8_t * ) ( pxBlock ) >= &( ucHeap[ 0 ] ) ) && \
 136:FreeRTOS/MemMang/heap_4.c ****                   ( ( uint8_t * ) ( pxBlock ) <= &( ucHeap[ configTOTAL_HEAP_SIZE - 1 ] ) ) )
 137:FreeRTOS/MemMang/heap_4.c **** 
 138:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 139:FreeRTOS/MemMang/heap_4.c **** 
 140:FreeRTOS/MemMang/heap_4.c **** /*
 141:FreeRTOS/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
 142:FreeRTOS/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
 143:FreeRTOS/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
 144:FreeRTOS/MemMang/heap_4.c ****  * adjacent to each other.
 145:FreeRTOS/MemMang/heap_4.c ****  */
 146:FreeRTOS/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) PRIVILEGED_FUNCTION;
 147:FreeRTOS/MemMang/heap_4.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 4


 148:FreeRTOS/MemMang/heap_4.c **** /*
 149:FreeRTOS/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
 150:FreeRTOS/MemMang/heap_4.c ****  * pvPortMalloc() is called.
 151:FreeRTOS/MemMang/heap_4.c ****  */
 152:FreeRTOS/MemMang/heap_4.c **** static void prvHeapInit( void ) PRIVILEGED_FUNCTION;
 153:FreeRTOS/MemMang/heap_4.c **** 
 154:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 155:FreeRTOS/MemMang/heap_4.c **** 
 156:FreeRTOS/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
 157:FreeRTOS/MemMang/heap_4.c ****  * block must by correctly byte aligned. */
 158:FreeRTOS/MemMang/heap_4.c **** static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
 159:FreeRTOS/MemMang/heap_4.c **** 
 160:FreeRTOS/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
 161:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static BlockLink_t xStart;
 162:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static BlockLink_t * pxEnd = NULL;
 163:FreeRTOS/MemMang/heap_4.c **** 
 164:FreeRTOS/MemMang/heap_4.c **** /* Keeps track of the number of calls to allocate and free memory as well as the
 165:FreeRTOS/MemMang/heap_4.c ****  * number of free bytes remaining, but says nothing about fragmentation. */
 166:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xFreeBytesRemaining = ( size_t ) 0U;
 167:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xMinimumEverFreeBytesRemaining = ( size_t ) 0U;
 168:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulAllocations = ( size_t ) 0U;
 169:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;
 170:FreeRTOS/MemMang/heap_4.c **** 
 171:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 172:FreeRTOS/MemMang/heap_4.c **** 
 173:FreeRTOS/MemMang/heap_4.c **** void * pvPortMalloc( size_t xWantedSize )
 174:FreeRTOS/MemMang/heap_4.c **** {
 175:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxBlock;
 176:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxPreviousBlock;
 177:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxNewBlockLink;
 178:FreeRTOS/MemMang/heap_4.c ****     void * pvReturn = NULL;
 179:FreeRTOS/MemMang/heap_4.c ****     size_t xAdditionalRequiredSize;
 180:FreeRTOS/MemMang/heap_4.c **** 
 181:FreeRTOS/MemMang/heap_4.c ****     if( xWantedSize > 0 )
 182:FreeRTOS/MemMang/heap_4.c ****     {
 183:FreeRTOS/MemMang/heap_4.c ****         /* The wanted size must be increased so it can contain a BlockLink_t
 184:FreeRTOS/MemMang/heap_4.c ****          * structure in addition to the requested amount of bytes. */
 185:FreeRTOS/MemMang/heap_4.c ****         if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 186:FreeRTOS/MemMang/heap_4.c ****         {
 187:FreeRTOS/MemMang/heap_4.c ****             xWantedSize += xHeapStructSize;
 188:FreeRTOS/MemMang/heap_4.c **** 
 189:FreeRTOS/MemMang/heap_4.c ****             /* Ensure that blocks are always aligned to the required number
 190:FreeRTOS/MemMang/heap_4.c ****              * of bytes. */
 191:FreeRTOS/MemMang/heap_4.c ****             if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 192:FreeRTOS/MemMang/heap_4.c ****             {
 193:FreeRTOS/MemMang/heap_4.c ****                 /* Byte alignment required. */
 194:FreeRTOS/MemMang/heap_4.c ****                 xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_M
 195:FreeRTOS/MemMang/heap_4.c **** 
 196:FreeRTOS/MemMang/heap_4.c ****                 if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 197:FreeRTOS/MemMang/heap_4.c ****                 {
 198:FreeRTOS/MemMang/heap_4.c ****                     xWantedSize += xAdditionalRequiredSize;
 199:FreeRTOS/MemMang/heap_4.c ****                 }
 200:FreeRTOS/MemMang/heap_4.c ****                 else
 201:FreeRTOS/MemMang/heap_4.c ****                 {
 202:FreeRTOS/MemMang/heap_4.c ****                     xWantedSize = 0;
 203:FreeRTOS/MemMang/heap_4.c ****                 }
 204:FreeRTOS/MemMang/heap_4.c ****             }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 5


 205:FreeRTOS/MemMang/heap_4.c ****             else
 206:FreeRTOS/MemMang/heap_4.c ****             {
 207:FreeRTOS/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 208:FreeRTOS/MemMang/heap_4.c ****             }
 209:FreeRTOS/MemMang/heap_4.c ****         }
 210:FreeRTOS/MemMang/heap_4.c ****         else
 211:FreeRTOS/MemMang/heap_4.c ****         {
 212:FreeRTOS/MemMang/heap_4.c ****             xWantedSize = 0;
 213:FreeRTOS/MemMang/heap_4.c ****         }
 214:FreeRTOS/MemMang/heap_4.c ****     }
 215:FreeRTOS/MemMang/heap_4.c ****     else
 216:FreeRTOS/MemMang/heap_4.c ****     {
 217:FreeRTOS/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 218:FreeRTOS/MemMang/heap_4.c ****     }
 219:FreeRTOS/MemMang/heap_4.c **** 
 220:FreeRTOS/MemMang/heap_4.c ****     vTaskSuspendAll();
 221:FreeRTOS/MemMang/heap_4.c ****     {
 222:FreeRTOS/MemMang/heap_4.c ****         /* If this is the first call to malloc then the heap will require
 223:FreeRTOS/MemMang/heap_4.c ****          * initialisation to setup the list of free blocks. */
 224:FreeRTOS/MemMang/heap_4.c ****         if( pxEnd == NULL )
 225:FreeRTOS/MemMang/heap_4.c ****         {
 226:FreeRTOS/MemMang/heap_4.c ****             prvHeapInit();
 227:FreeRTOS/MemMang/heap_4.c ****         }
 228:FreeRTOS/MemMang/heap_4.c ****         else
 229:FreeRTOS/MemMang/heap_4.c ****         {
 230:FreeRTOS/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 231:FreeRTOS/MemMang/heap_4.c ****         }
 232:FreeRTOS/MemMang/heap_4.c **** 
 233:FreeRTOS/MemMang/heap_4.c ****         /* Check the block size we are trying to allocate is not so large that the
 234:FreeRTOS/MemMang/heap_4.c ****          * top bit is set.  The top bit of the block size member of the BlockLink_t
 235:FreeRTOS/MemMang/heap_4.c ****          * structure is used to determine who owns the block - the application or
 236:FreeRTOS/MemMang/heap_4.c ****          * the kernel, so it must be free. */
 237:FreeRTOS/MemMang/heap_4.c ****         if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 238:FreeRTOS/MemMang/heap_4.c ****         {
 239:FreeRTOS/MemMang/heap_4.c ****             if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 240:FreeRTOS/MemMang/heap_4.c ****             {
 241:FreeRTOS/MemMang/heap_4.c ****                 /* Traverse the list from the start (lowest address) block until
 242:FreeRTOS/MemMang/heap_4.c ****                  * one of adequate size is found. */
 243:FreeRTOS/MemMang/heap_4.c ****                 pxPreviousBlock = &xStart;
 244:FreeRTOS/MemMang/heap_4.c ****                 pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 245:FreeRTOS/MemMang/heap_4.c ****                 heapVALIDATE_BLOCK_POINTER( pxBlock );
 246:FreeRTOS/MemMang/heap_4.c **** 
 247:FreeRTOS/MemMang/heap_4.c ****                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapP
 248:FreeRTOS/MemMang/heap_4.c ****                 {
 249:FreeRTOS/MemMang/heap_4.c ****                     pxPreviousBlock = pxBlock;
 250:FreeRTOS/MemMang/heap_4.c ****                     pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 251:FreeRTOS/MemMang/heap_4.c ****                     heapVALIDATE_BLOCK_POINTER( pxBlock );
 252:FreeRTOS/MemMang/heap_4.c ****                 }
 253:FreeRTOS/MemMang/heap_4.c **** 
 254:FreeRTOS/MemMang/heap_4.c ****                 /* If the end marker was reached then a block of adequate size
 255:FreeRTOS/MemMang/heap_4.c ****                  * was not found. */
 256:FreeRTOS/MemMang/heap_4.c ****                 if( pxBlock != pxEnd )
 257:FreeRTOS/MemMang/heap_4.c ****                 {
 258:FreeRTOS/MemMang/heap_4.c ****                     /* Return the memory space pointed to - jumping over the
 259:FreeRTOS/MemMang/heap_4.c ****                      * BlockLink_t structure at its start. */
 260:FreeRTOS/MemMang/heap_4.c ****                     pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBl
 261:FreeRTOS/MemMang/heap_4.c ****                     heapVALIDATE_BLOCK_POINTER( pvReturn );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 6


 262:FreeRTOS/MemMang/heap_4.c **** 
 263:FreeRTOS/MemMang/heap_4.c ****                     /* This block is being returned for use so must be taken out
 264:FreeRTOS/MemMang/heap_4.c ****                      * of the list of free blocks. */
 265:FreeRTOS/MemMang/heap_4.c ****                     pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 266:FreeRTOS/MemMang/heap_4.c **** 
 267:FreeRTOS/MemMang/heap_4.c ****                     /* If the block is larger than required it can be split into
 268:FreeRTOS/MemMang/heap_4.c ****                      * two. */
 269:FreeRTOS/MemMang/heap_4.c ****                     configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) =
 270:FreeRTOS/MemMang/heap_4.c **** 
 271:FreeRTOS/MemMang/heap_4.c ****                     if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 272:FreeRTOS/MemMang/heap_4.c ****                     {
 273:FreeRTOS/MemMang/heap_4.c ****                         /* This block is to be split into two.  Create a new
 274:FreeRTOS/MemMang/heap_4.c ****                          * block following the number of bytes requested. The void
 275:FreeRTOS/MemMang/heap_4.c ****                          * cast is used to prevent byte alignment warnings from the
 276:FreeRTOS/MemMang/heap_4.c ****                          * compiler. */
 277:FreeRTOS/MemMang/heap_4.c ****                         pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 278:FreeRTOS/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 279:FreeRTOS/MemMang/heap_4.c **** 
 280:FreeRTOS/MemMang/heap_4.c ****                         /* Calculate the sizes of two blocks split from the
 281:FreeRTOS/MemMang/heap_4.c ****                          * single block. */
 282:FreeRTOS/MemMang/heap_4.c ****                         pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 283:FreeRTOS/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 284:FreeRTOS/MemMang/heap_4.c **** 
 285:FreeRTOS/MemMang/heap_4.c ****                         /* Insert the new block into the list of free blocks. */
 286:FreeRTOS/MemMang/heap_4.c ****                         pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 287:FreeRTOS/MemMang/heap_4.c ****                         pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLin
 288:FreeRTOS/MemMang/heap_4.c ****                     }
 289:FreeRTOS/MemMang/heap_4.c ****                     else
 290:FreeRTOS/MemMang/heap_4.c ****                     {
 291:FreeRTOS/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 292:FreeRTOS/MemMang/heap_4.c ****                     }
 293:FreeRTOS/MemMang/heap_4.c **** 
 294:FreeRTOS/MemMang/heap_4.c ****                     xFreeBytesRemaining -= pxBlock->xBlockSize;
 295:FreeRTOS/MemMang/heap_4.c **** 
 296:FreeRTOS/MemMang/heap_4.c ****                     if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 297:FreeRTOS/MemMang/heap_4.c ****                     {
 298:FreeRTOS/MemMang/heap_4.c ****                         xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 299:FreeRTOS/MemMang/heap_4.c ****                     }
 300:FreeRTOS/MemMang/heap_4.c ****                     else
 301:FreeRTOS/MemMang/heap_4.c ****                     {
 302:FreeRTOS/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 303:FreeRTOS/MemMang/heap_4.c ****                     }
 304:FreeRTOS/MemMang/heap_4.c **** 
 305:FreeRTOS/MemMang/heap_4.c ****                     /* The block is being returned - it is allocated and owned
 306:FreeRTOS/MemMang/heap_4.c ****                      * by the application and has no "next" block. */
 307:FreeRTOS/MemMang/heap_4.c ****                     heapALLOCATE_BLOCK( pxBlock );
 308:FreeRTOS/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 309:FreeRTOS/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 310:FreeRTOS/MemMang/heap_4.c ****                 }
 311:FreeRTOS/MemMang/heap_4.c ****                 else
 312:FreeRTOS/MemMang/heap_4.c ****                 {
 313:FreeRTOS/MemMang/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 314:FreeRTOS/MemMang/heap_4.c ****                 }
 315:FreeRTOS/MemMang/heap_4.c ****             }
 316:FreeRTOS/MemMang/heap_4.c ****             else
 317:FreeRTOS/MemMang/heap_4.c ****             {
 318:FreeRTOS/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 7


 319:FreeRTOS/MemMang/heap_4.c ****             }
 320:FreeRTOS/MemMang/heap_4.c ****         }
 321:FreeRTOS/MemMang/heap_4.c ****         else
 322:FreeRTOS/MemMang/heap_4.c ****         {
 323:FreeRTOS/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 324:FreeRTOS/MemMang/heap_4.c ****         }
 325:FreeRTOS/MemMang/heap_4.c **** 
 326:FreeRTOS/MemMang/heap_4.c ****         traceMALLOC( pvReturn, xWantedSize );
 327:FreeRTOS/MemMang/heap_4.c ****     }
 328:FreeRTOS/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 329:FreeRTOS/MemMang/heap_4.c **** 
 330:FreeRTOS/MemMang/heap_4.c ****     #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
 331:FreeRTOS/MemMang/heap_4.c ****     {
 332:FreeRTOS/MemMang/heap_4.c ****         if( pvReturn == NULL )
 333:FreeRTOS/MemMang/heap_4.c ****         {
 334:FreeRTOS/MemMang/heap_4.c ****             vApplicationMallocFailedHook();
 335:FreeRTOS/MemMang/heap_4.c ****         }
 336:FreeRTOS/MemMang/heap_4.c ****         else
 337:FreeRTOS/MemMang/heap_4.c ****         {
 338:FreeRTOS/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 339:FreeRTOS/MemMang/heap_4.c ****         }
 340:FreeRTOS/MemMang/heap_4.c ****     }
 341:FreeRTOS/MemMang/heap_4.c ****     #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */
 342:FreeRTOS/MemMang/heap_4.c **** 
 343:FreeRTOS/MemMang/heap_4.c ****     configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 344:FreeRTOS/MemMang/heap_4.c ****     return pvReturn;
 345:FreeRTOS/MemMang/heap_4.c **** }
 346:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 347:FreeRTOS/MemMang/heap_4.c **** 
 348:FreeRTOS/MemMang/heap_4.c **** void vPortFree( void * pv )
 349:FreeRTOS/MemMang/heap_4.c **** {
 350:FreeRTOS/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 351:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxLink;
 352:FreeRTOS/MemMang/heap_4.c **** 
 353:FreeRTOS/MemMang/heap_4.c ****     if( pv != NULL )
 354:FreeRTOS/MemMang/heap_4.c ****     {
 355:FreeRTOS/MemMang/heap_4.c ****         /* The memory being freed will have an BlockLink_t structure immediately
 356:FreeRTOS/MemMang/heap_4.c ****          * before it. */
 357:FreeRTOS/MemMang/heap_4.c ****         puc -= xHeapStructSize;
 358:FreeRTOS/MemMang/heap_4.c **** 
 359:FreeRTOS/MemMang/heap_4.c ****         /* This casting is to keep the compiler from issuing warnings. */
 360:FreeRTOS/MemMang/heap_4.c ****         pxLink = ( void * ) puc;
 361:FreeRTOS/MemMang/heap_4.c **** 
 362:FreeRTOS/MemMang/heap_4.c ****         heapVALIDATE_BLOCK_POINTER( pxLink );
 363:FreeRTOS/MemMang/heap_4.c ****         configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 364:FreeRTOS/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 365:FreeRTOS/MemMang/heap_4.c **** 
 366:FreeRTOS/MemMang/heap_4.c ****         if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 367:FreeRTOS/MemMang/heap_4.c ****         {
 368:FreeRTOS/MemMang/heap_4.c ****             if( pxLink->pxNextFreeBlock == NULL )
 369:FreeRTOS/MemMang/heap_4.c ****             {
 370:FreeRTOS/MemMang/heap_4.c ****                 /* The block is being returned to the heap - it is no longer
 371:FreeRTOS/MemMang/heap_4.c ****                  * allocated. */
 372:FreeRTOS/MemMang/heap_4.c ****                 heapFREE_BLOCK( pxLink );
 373:FreeRTOS/MemMang/heap_4.c ****                 #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
 374:FreeRTOS/MemMang/heap_4.c ****                 {
 375:FreeRTOS/MemMang/heap_4.c ****                     /* Check for underflow as this can occur if xBlockSize is
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 8


 376:FreeRTOS/MemMang/heap_4.c ****                      * overwritten in a heap block. */
 377:FreeRTOS/MemMang/heap_4.c ****                     if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 378:FreeRTOS/MemMang/heap_4.c ****                     {
 379:FreeRTOS/MemMang/heap_4.c ****                         ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStruct
 380:FreeRTOS/MemMang/heap_4.c ****                     }
 381:FreeRTOS/MemMang/heap_4.c ****                 }
 382:FreeRTOS/MemMang/heap_4.c ****                 #endif
 383:FreeRTOS/MemMang/heap_4.c **** 
 384:FreeRTOS/MemMang/heap_4.c ****                 vTaskSuspendAll();
 385:FreeRTOS/MemMang/heap_4.c ****                 {
 386:FreeRTOS/MemMang/heap_4.c ****                     /* Add this block to the list of free blocks. */
 387:FreeRTOS/MemMang/heap_4.c ****                     xFreeBytesRemaining += pxLink->xBlockSize;
 388:FreeRTOS/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 389:FreeRTOS/MemMang/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 390:FreeRTOS/MemMang/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 391:FreeRTOS/MemMang/heap_4.c ****                 }
 392:FreeRTOS/MemMang/heap_4.c ****                 ( void ) xTaskResumeAll();
 393:FreeRTOS/MemMang/heap_4.c ****             }
 394:FreeRTOS/MemMang/heap_4.c ****             else
 395:FreeRTOS/MemMang/heap_4.c ****             {
 396:FreeRTOS/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 397:FreeRTOS/MemMang/heap_4.c ****             }
 398:FreeRTOS/MemMang/heap_4.c ****         }
 399:FreeRTOS/MemMang/heap_4.c ****         else
 400:FreeRTOS/MemMang/heap_4.c ****         {
 401:FreeRTOS/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 402:FreeRTOS/MemMang/heap_4.c ****         }
 403:FreeRTOS/MemMang/heap_4.c ****     }
 404:FreeRTOS/MemMang/heap_4.c **** }
 405:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 406:FreeRTOS/MemMang/heap_4.c **** 
 407:FreeRTOS/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 408:FreeRTOS/MemMang/heap_4.c **** {
 409:FreeRTOS/MemMang/heap_4.c ****     return xFreeBytesRemaining;
 410:FreeRTOS/MemMang/heap_4.c **** }
 411:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 412:FreeRTOS/MemMang/heap_4.c **** 
 413:FreeRTOS/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 414:FreeRTOS/MemMang/heap_4.c **** {
 415:FreeRTOS/MemMang/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 416:FreeRTOS/MemMang/heap_4.c **** }
 417:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 418:FreeRTOS/MemMang/heap_4.c **** 
 419:FreeRTOS/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 420:FreeRTOS/MemMang/heap_4.c **** {
 421:FreeRTOS/MemMang/heap_4.c ****     /* This just exists to keep the linker quiet. */
 422:FreeRTOS/MemMang/heap_4.c **** }
 423:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 424:FreeRTOS/MemMang/heap_4.c **** 
 425:FreeRTOS/MemMang/heap_4.c **** void * pvPortCalloc( size_t xNum,
 426:FreeRTOS/MemMang/heap_4.c ****                      size_t xSize )
 427:FreeRTOS/MemMang/heap_4.c **** {
 428:FreeRTOS/MemMang/heap_4.c ****     void * pv = NULL;
 429:FreeRTOS/MemMang/heap_4.c **** 
 430:FreeRTOS/MemMang/heap_4.c ****     if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 431:FreeRTOS/MemMang/heap_4.c ****     {
 432:FreeRTOS/MemMang/heap_4.c ****         pv = pvPortMalloc( xNum * xSize );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 9


 433:FreeRTOS/MemMang/heap_4.c **** 
 434:FreeRTOS/MemMang/heap_4.c ****         if( pv != NULL )
 435:FreeRTOS/MemMang/heap_4.c ****         {
 436:FreeRTOS/MemMang/heap_4.c ****             ( void ) memset( pv, 0, xNum * xSize );
 437:FreeRTOS/MemMang/heap_4.c ****         }
 438:FreeRTOS/MemMang/heap_4.c ****     }
 439:FreeRTOS/MemMang/heap_4.c **** 
 440:FreeRTOS/MemMang/heap_4.c ****     return pv;
 441:FreeRTOS/MemMang/heap_4.c **** }
 442:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 443:FreeRTOS/MemMang/heap_4.c **** 
 444:FreeRTOS/MemMang/heap_4.c **** static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
 445:FreeRTOS/MemMang/heap_4.c **** {
  26              		.loc 1 445 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 446:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxFirstFreeBlock;
  31              		.loc 1 446 5 view .LVU1
 447:FreeRTOS/MemMang/heap_4.c ****     portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
  32              		.loc 1 447 5 view .LVU2
 448:FreeRTOS/MemMang/heap_4.c ****     size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  33              		.loc 1 448 5 view .LVU3
  34              	.LVL0:
 449:FreeRTOS/MemMang/heap_4.c **** 
 450:FreeRTOS/MemMang/heap_4.c ****     /* Ensure the heap starts on a correctly aligned boundary. */
 451:FreeRTOS/MemMang/heap_4.c ****     uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
  35              		.loc 1 451 5 view .LVU4
  36              		.loc 1 451 20 is_stmt 0 view .LVU5
  37 0000 104A     		ldr	r2, .L4
  38              	.LVL1:
 452:FreeRTOS/MemMang/heap_4.c **** 
 453:FreeRTOS/MemMang/heap_4.c ****     if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  39              		.loc 1 453 5 is_stmt 1 view .LVU6
  40              		.loc 1 453 7 is_stmt 0 view .LVU7
  41 0002 12F0070F 		tst	r2, #7
  42 0006 1AD0     		beq	.L3
 454:FreeRTOS/MemMang/heap_4.c ****     {
 455:FreeRTOS/MemMang/heap_4.c ****         uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
  43              		.loc 1 455 9 is_stmt 1 view .LVU8
  44              		.loc 1 455 24 is_stmt 0 view .LVU9
  45 0008 D11D     		adds	r1, r2, #7
  46              	.LVL2:
 456:FreeRTOS/MemMang/heap_4.c ****         uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
  47              		.loc 1 456 9 is_stmt 1 view .LVU10
  48              		.loc 1 456 24 is_stmt 0 view .LVU11
  49 000a 21F00701 		bic	r1, r1, #7
  50              	.LVL3:
 457:FreeRTOS/MemMang/heap_4.c ****         xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
  51              		.loc 1 457 9 is_stmt 1 view .LVU12
  52              		.loc 1 457 24 is_stmt 0 view .LVU13
  53 000e C1F5C053 		rsb	r3, r1, #6144
  54 0012 1344     		add	r3, r3, r2
  55              	.LVL4:
 456:FreeRTOS/MemMang/heap_4.c ****         uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
  56              		.loc 1 456 24 view .LVU14
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 10


  57 0014 0A46     		mov	r2, r1
  58              	.LVL5:
  59              	.L2:
 458:FreeRTOS/MemMang/heap_4.c ****     }
 459:FreeRTOS/MemMang/heap_4.c **** 
 460:FreeRTOS/MemMang/heap_4.c ****     #if ( configENABLE_HEAP_PROTECTOR == 1 )
 461:FreeRTOS/MemMang/heap_4.c ****     {
 462:FreeRTOS/MemMang/heap_4.c ****         vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
 463:FreeRTOS/MemMang/heap_4.c ****     }
 464:FreeRTOS/MemMang/heap_4.c ****     #endif
 465:FreeRTOS/MemMang/heap_4.c **** 
 466:FreeRTOS/MemMang/heap_4.c ****     /* xStart is used to hold a pointer to the first item in the list of free
 467:FreeRTOS/MemMang/heap_4.c ****      * blocks.  The void cast is used to prevent compiler warnings. */
 468:FreeRTOS/MemMang/heap_4.c ****     xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
  60              		.loc 1 468 5 is_stmt 1 view .LVU15
  61              		.loc 1 468 28 is_stmt 0 view .LVU16
  62 0016 0C48     		ldr	r0, .L4+4
  63 0018 0260     		str	r2, [r0]
 469:FreeRTOS/MemMang/heap_4.c ****     xStart.xBlockSize = ( size_t ) 0;
  64              		.loc 1 469 5 is_stmt 1 view .LVU17
  65              		.loc 1 469 23 is_stmt 0 view .LVU18
  66 001a 0021     		movs	r1, #0
  67 001c 4160     		str	r1, [r0, #4]
 470:FreeRTOS/MemMang/heap_4.c **** 
 471:FreeRTOS/MemMang/heap_4.c ****     /* pxEnd is used to mark the end of the list of free blocks and is inserted
 472:FreeRTOS/MemMang/heap_4.c ****      * at the end of the heap space. */
 473:FreeRTOS/MemMang/heap_4.c ****     uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
  68              		.loc 1 473 5 is_stmt 1 view .LVU19
  69              		.loc 1 473 18 is_stmt 0 view .LVU20
  70 001e 1344     		add	r3, r3, r2
  71              	.LVL6:
 474:FreeRTOS/MemMang/heap_4.c ****     uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
  72              		.loc 1 474 5 is_stmt 1 view .LVU21
  73              		.loc 1 474 18 is_stmt 0 view .LVU22
  74 0020 083B     		subs	r3, r3, #8
  75              	.LVL7:
 475:FreeRTOS/MemMang/heap_4.c ****     uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
  76              		.loc 1 475 5 is_stmt 1 view .LVU23
  77              		.loc 1 475 18 is_stmt 0 view .LVU24
  78 0022 23F00703 		bic	r3, r3, #7
  79              	.LVL8:
 476:FreeRTOS/MemMang/heap_4.c ****     pxEnd = ( BlockLink_t * ) uxEndAddress;
  80              		.loc 1 476 5 is_stmt 1 view .LVU25
  81              		.loc 1 476 11 is_stmt 0 view .LVU26
  82 0026 0948     		ldr	r0, .L4+8
  83 0028 0360     		str	r3, [r0]
 477:FreeRTOS/MemMang/heap_4.c ****     pxEnd->xBlockSize = 0;
  84              		.loc 1 477 5 is_stmt 1 view .LVU27
  85              		.loc 1 477 23 is_stmt 0 view .LVU28
  86 002a 5960     		str	r1, [r3, #4]
 478:FreeRTOS/MemMang/heap_4.c ****     pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
  87              		.loc 1 478 5 is_stmt 1 view .LVU29
  88              		.loc 1 478 28 is_stmt 0 view .LVU30
  89 002c 1960     		str	r1, [r3]
 479:FreeRTOS/MemMang/heap_4.c **** 
 480:FreeRTOS/MemMang/heap_4.c ****     /* To start with there is a single free block that is sized to take up the
 481:FreeRTOS/MemMang/heap_4.c ****      * entire heap space, minus the space taken by pxEnd. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 11


 482:FreeRTOS/MemMang/heap_4.c ****     pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
  90              		.loc 1 482 5 is_stmt 1 view .LVU31
  91              	.LVL9:
 483:FreeRTOS/MemMang/heap_4.c ****     pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFre
  92              		.loc 1 483 5 view .LVU32
  93              		.loc 1 483 62 is_stmt 0 view .LVU33
  94 002e 991A     		subs	r1, r3, r2
  95              		.loc 1 483 34 view .LVU34
  96 0030 5160     		str	r1, [r2, #4]
 484:FreeRTOS/MemMang/heap_4.c ****     pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
  97              		.loc 1 484 5 is_stmt 1 view .LVU35
  98              		.loc 1 484 39 is_stmt 0 view .LVU36
  99 0032 1360     		str	r3, [r2]
 485:FreeRTOS/MemMang/heap_4.c **** 
 486:FreeRTOS/MemMang/heap_4.c ****     /* Only one block exists - and it covers the entire usable heap space. */
 487:FreeRTOS/MemMang/heap_4.c ****     xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 100              		.loc 1 487 5 is_stmt 1 view .LVU37
 101              		.loc 1 487 36 is_stmt 0 view .LVU38
 102 0034 064B     		ldr	r3, .L4+12
 103              	.LVL10:
 104              		.loc 1 487 36 view .LVU39
 105 0036 1960     		str	r1, [r3]
 488:FreeRTOS/MemMang/heap_4.c ****     xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 106              		.loc 1 488 5 is_stmt 1 view .LVU40
 107              		.loc 1 488 25 is_stmt 0 view .LVU41
 108 0038 064B     		ldr	r3, .L4+16
 109 003a 1960     		str	r1, [r3]
 489:FreeRTOS/MemMang/heap_4.c **** }
 110              		.loc 1 489 1 view .LVU42
 111 003c 7047     		bx	lr
 112              	.LVL11:
 113              	.L3:
 448:FreeRTOS/MemMang/heap_4.c **** 
 114              		.loc 1 448 12 view .LVU43
 115 003e 4FF4C053 		mov	r3, #6144
 116 0042 E8E7     		b	.L2
 117              	.L5:
 118              		.align	2
 119              	.L4:
 120 0044 00000000 		.word	ucHeap
 121 0048 00000000 		.word	xStart
 122 004c 00000000 		.word	pxEnd
 123 0050 00000000 		.word	xMinimumEverFreeBytesRemaining
 124 0054 00000000 		.word	xFreeBytesRemaining
 125              		.cfi_endproc
 126              	.LFE134:
 128              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 129              		.align	1
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 134              	prvInsertBlockIntoFreeList:
 135              	.LVL12:
 136              	.LFB135:
 490:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 491:FreeRTOS/MemMang/heap_4.c **** 
 492:FreeRTOS/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 12


 493:FreeRTOS/MemMang/heap_4.c **** {
 137              		.loc 1 493 1 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 494:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxIterator;
 142              		.loc 1 494 5 view .LVU45
 495:FreeRTOS/MemMang/heap_4.c ****     uint8_t * puc;
 143              		.loc 1 495 5 view .LVU46
 496:FreeRTOS/MemMang/heap_4.c **** 
 497:FreeRTOS/MemMang/heap_4.c ****     /* Iterate through the list until a block is found that has a higher address
 498:FreeRTOS/MemMang/heap_4.c ****      * than the block being inserted. */
 499:FreeRTOS/MemMang/heap_4.c ****     for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockTo
 144              		.loc 1 499 5 view .LVU47
 145              		.loc 1 499 21 is_stmt 0 view .LVU48
 146 0000 164B     		ldr	r3, .L21
 147              	.LVL13:
 148              	.L7:
 149              		.loc 1 499 89 is_stmt 1 discriminator 1 view .LVU49
 150 0002 1A46     		mov	r2, r3
 151              		.loc 1 499 32 is_stmt 0 discriminator 1 view .LVU50
 152 0004 1B68     		ldr	r3, [r3]
 153              	.LVL14:
 154              		.loc 1 499 89 discriminator 1 view .LVU51
 155 0006 8342     		cmp	r3, r0
 156 0008 FBD3     		bcc	.L7
 500:FreeRTOS/MemMang/heap_4.c ****     {
 501:FreeRTOS/MemMang/heap_4.c ****         /* Nothing to do here, just iterate to the right position. */
 502:FreeRTOS/MemMang/heap_4.c ****     }
 503:FreeRTOS/MemMang/heap_4.c **** 
 504:FreeRTOS/MemMang/heap_4.c ****     if( pxIterator != &xStart )
 157              		.loc 1 504 5 is_stmt 1 view .LVU52
 505:FreeRTOS/MemMang/heap_4.c ****     {
 506:FreeRTOS/MemMang/heap_4.c ****         heapVALIDATE_BLOCK_POINTER( pxIterator );
 158              		.loc 1 506 49 view .LVU53
 507:FreeRTOS/MemMang/heap_4.c ****     }
 508:FreeRTOS/MemMang/heap_4.c **** 
 509:FreeRTOS/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted after
 510:FreeRTOS/MemMang/heap_4.c ****      * make a contiguous block of memory? */
 511:FreeRTOS/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxIterator;
 159              		.loc 1 511 5 view .LVU54
 160              	.LVL15:
 512:FreeRTOS/MemMang/heap_4.c **** 
 513:FreeRTOS/MemMang/heap_4.c ****     if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 161              		.loc 1 513 5 view .LVU55
 162              		.loc 1 513 27 is_stmt 0 view .LVU56
 163 000a 5168     		ldr	r1, [r2, #4]
 164              		.loc 1 513 15 view .LVU57
 165 000c 02EB010C 		add	ip, r2, r1
 166              		.loc 1 513 7 view .LVU58
 167 0010 8445     		cmp	ip, r0
 168 0012 09D0     		beq	.L19
 169              	.L8:
 514:FreeRTOS/MemMang/heap_4.c ****     {
 515:FreeRTOS/MemMang/heap_4.c ****         pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 516:FreeRTOS/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 13


 517:FreeRTOS/MemMang/heap_4.c ****     }
 518:FreeRTOS/MemMang/heap_4.c ****     else
 519:FreeRTOS/MemMang/heap_4.c ****     {
 520:FreeRTOS/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 170              		.loc 1 520 33 is_stmt 1 view .LVU59
 521:FreeRTOS/MemMang/heap_4.c ****     }
 522:FreeRTOS/MemMang/heap_4.c **** 
 523:FreeRTOS/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted before
 524:FreeRTOS/MemMang/heap_4.c ****      * make a contiguous block of memory? */
 525:FreeRTOS/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxBlockToInsert;
 171              		.loc 1 525 5 view .LVU60
 172              	.LVL16:
 526:FreeRTOS/MemMang/heap_4.c **** 
 527:FreeRTOS/MemMang/heap_4.c ****     if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterato
 173              		.loc 1 527 5 view .LVU61
 174              		.loc 1 527 32 is_stmt 0 view .LVU62
 175 0014 4168     		ldr	r1, [r0, #4]
 176              		.loc 1 527 15 view .LVU63
 177 0016 00EB010C 		add	ip, r0, r1
 178              		.loc 1 527 7 view .LVU64
 179 001a 6345     		cmp	r3, ip
 180 001c 09D0     		beq	.L20
 528:FreeRTOS/MemMang/heap_4.c ****     {
 529:FreeRTOS/MemMang/heap_4.c ****         if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 530:FreeRTOS/MemMang/heap_4.c ****         {
 531:FreeRTOS/MemMang/heap_4.c ****             /* Form one big block from the two blocks. */
 532:FreeRTOS/MemMang/heap_4.c ****             pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )
 533:FreeRTOS/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlo
 534:FreeRTOS/MemMang/heap_4.c ****         }
 535:FreeRTOS/MemMang/heap_4.c ****         else
 536:FreeRTOS/MemMang/heap_4.c ****         {
 537:FreeRTOS/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 538:FreeRTOS/MemMang/heap_4.c ****         }
 539:FreeRTOS/MemMang/heap_4.c ****     }
 540:FreeRTOS/MemMang/heap_4.c ****     else
 541:FreeRTOS/MemMang/heap_4.c ****     {
 542:FreeRTOS/MemMang/heap_4.c ****         pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 181              		.loc 1 542 9 is_stmt 1 view .LVU65
 182              		.loc 1 542 42 is_stmt 0 view .LVU66
 183 001e 0360     		str	r3, [r0]
 543:FreeRTOS/MemMang/heap_4.c ****     }
 544:FreeRTOS/MemMang/heap_4.c **** 
 545:FreeRTOS/MemMang/heap_4.c ****     /* If the block being inserted plugged a gab, so was merged with the block
 546:FreeRTOS/MemMang/heap_4.c ****      * before and the block after, then it's pxNextFreeBlock pointer will have
 547:FreeRTOS/MemMang/heap_4.c ****      * already been set, and should not be set here as that would make it point
 548:FreeRTOS/MemMang/heap_4.c ****      * to itself. */
 549:FreeRTOS/MemMang/heap_4.c ****     if( pxIterator != pxBlockToInsert )
 184              		.loc 1 549 5 is_stmt 1 view .LVU67
 185              		.loc 1 549 7 is_stmt 0 view .LVU68
 186 0020 9042     		cmp	r0, r2
 187 0022 19D0     		beq	.L16
 550:FreeRTOS/MemMang/heap_4.c ****     {
 551:FreeRTOS/MemMang/heap_4.c ****         pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 188              		.loc 1 551 9 is_stmt 1 view .LVU69
 189              		.loc 1 551 37 is_stmt 0 view .LVU70
 190 0024 1060     		str	r0, [r2]
 552:FreeRTOS/MemMang/heap_4.c ****     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 14


 553:FreeRTOS/MemMang/heap_4.c ****     else
 554:FreeRTOS/MemMang/heap_4.c ****     {
 555:FreeRTOS/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 191              		.loc 1 555 33 is_stmt 1 view .LVU71
 192 0026 7047     		bx	lr
 193              	.LVL17:
 194              	.L19:
 515:FreeRTOS/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 195              		.loc 1 515 9 view .LVU72
 515:FreeRTOS/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 196              		.loc 1 515 50 is_stmt 0 view .LVU73
 197 0028 4068     		ldr	r0, [r0, #4]
 198              	.LVL18:
 515:FreeRTOS/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 199              		.loc 1 515 32 view .LVU74
 200 002a 0144     		add	r1, r1, r0
 201 002c 5160     		str	r1, [r2, #4]
 516:FreeRTOS/MemMang/heap_4.c ****     }
 202              		.loc 1 516 9 is_stmt 1 view .LVU75
 203              	.LVL19:
 516:FreeRTOS/MemMang/heap_4.c ****     }
 204              		.loc 1 516 25 is_stmt 0 view .LVU76
 205 002e 1046     		mov	r0, r2
 206 0030 F0E7     		b	.L8
 207              	.LVL20:
 208              	.L20:
 493:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxIterator;
 209              		.loc 1 493 1 view .LVU77
 210 0032 10B4     		push	{r4}
 211              	.LCFI0:
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 4, -4
 529:FreeRTOS/MemMang/heap_4.c ****         {
 214              		.loc 1 529 9 is_stmt 1 view .LVU78
 529:FreeRTOS/MemMang/heap_4.c ****         {
 215              		.loc 1 529 70 is_stmt 0 view .LVU79
 216 0034 0A4C     		ldr	r4, .L21+4
 217 0036 2468     		ldr	r4, [r4]
 529:FreeRTOS/MemMang/heap_4.c ****         {
 218              		.loc 1 529 11 view .LVU80
 219 0038 A342     		cmp	r3, r4
 220 003a 0BD0     		beq	.L10
 532:FreeRTOS/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlo
 221              		.loc 1 532 13 is_stmt 1 view .LVU81
 532:FreeRTOS/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlo
 222              		.loc 1 532 100 is_stmt 0 view .LVU82
 223 003c 5B68     		ldr	r3, [r3, #4]
 532:FreeRTOS/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlo
 224              		.loc 1 532 41 view .LVU83
 225 003e 1944     		add	r1, r1, r3
 226 0040 4160     		str	r1, [r0, #4]
 533:FreeRTOS/MemMang/heap_4.c ****         }
 227              		.loc 1 533 13 is_stmt 1 view .LVU84
 533:FreeRTOS/MemMang/heap_4.c ****         }
 228              		.loc 1 533 48 is_stmt 0 view .LVU85
 229 0042 1368     		ldr	r3, [r2]
 533:FreeRTOS/MemMang/heap_4.c ****         }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 15


 230              		.loc 1 533 104 view .LVU86
 231 0044 1B68     		ldr	r3, [r3]
 533:FreeRTOS/MemMang/heap_4.c ****         }
 232              		.loc 1 533 46 view .LVU87
 233 0046 0360     		str	r3, [r0]
 234              	.L11:
 549:FreeRTOS/MemMang/heap_4.c ****     {
 235              		.loc 1 549 5 is_stmt 1 view .LVU88
 549:FreeRTOS/MemMang/heap_4.c ****     {
 236              		.loc 1 549 7 is_stmt 0 view .LVU89
 237 0048 9042     		cmp	r0, r2
 238 004a 00D0     		beq	.L6
 551:FreeRTOS/MemMang/heap_4.c ****     }
 239              		.loc 1 551 9 is_stmt 1 view .LVU90
 551:FreeRTOS/MemMang/heap_4.c ****     }
 240              		.loc 1 551 37 is_stmt 0 view .LVU91
 241 004c 1060     		str	r0, [r2]
 242              		.loc 1 555 33 is_stmt 1 view .LVU92
 243              	.L6:
 556:FreeRTOS/MemMang/heap_4.c ****     }
 557:FreeRTOS/MemMang/heap_4.c **** }
 244              		.loc 1 557 1 is_stmt 0 view .LVU93
 245 004e 5DF8044B 		ldr	r4, [sp], #4
 246              	.LCFI1:
 247              		.cfi_remember_state
 248              		.cfi_restore 4
 249              		.cfi_def_cfa_offset 0
 250 0052 7047     		bx	lr
 251              	.L10:
 252              	.LCFI2:
 253              		.cfi_restore_state
 537:FreeRTOS/MemMang/heap_4.c ****         }
 254              		.loc 1 537 13 is_stmt 1 view .LVU94
 537:FreeRTOS/MemMang/heap_4.c ****         }
 255              		.loc 1 537 46 is_stmt 0 view .LVU95
 256 0054 0460     		str	r4, [r0]
 257 0056 F7E7     		b	.L11
 258              	.L16:
 259              	.LCFI3:
 260              		.cfi_def_cfa_offset 0
 261              		.cfi_restore 4
 537:FreeRTOS/MemMang/heap_4.c ****         }
 262              		.loc 1 537 46 view .LVU96
 263 0058 7047     		bx	lr
 264              	.L22:
 265 005a 00BF     		.align	2
 266              	.L21:
 267 005c 00000000 		.word	xStart
 268 0060 00000000 		.word	pxEnd
 269              		.cfi_endproc
 270              	.LFE135:
 272              		.section	.text.pvPortMalloc,"ax",%progbits
 273              		.align	1
 274              		.global	pvPortMalloc
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 16


 279              	pvPortMalloc:
 280              	.LVL21:
 281              	.LFB128:
 174:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxBlock;
 282              		.loc 1 174 1 is_stmt 1 view -0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 174:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxBlock;
 286              		.loc 1 174 1 is_stmt 0 view .LVU98
 287 0000 70B5     		push	{r4, r5, r6, lr}
 288              	.LCFI4:
 289              		.cfi_def_cfa_offset 16
 290              		.cfi_offset 4, -16
 291              		.cfi_offset 5, -12
 292              		.cfi_offset 6, -8
 293              		.cfi_offset 14, -4
 175:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxPreviousBlock;
 294              		.loc 1 175 5 is_stmt 1 view .LVU99
 176:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxNewBlockLink;
 295              		.loc 1 176 5 view .LVU100
 177:FreeRTOS/MemMang/heap_4.c ****     void * pvReturn = NULL;
 296              		.loc 1 177 5 view .LVU101
 178:FreeRTOS/MemMang/heap_4.c ****     size_t xAdditionalRequiredSize;
 297              		.loc 1 178 5 view .LVU102
 298              	.LVL22:
 179:FreeRTOS/MemMang/heap_4.c **** 
 299              		.loc 1 179 5 view .LVU103
 181:FreeRTOS/MemMang/heap_4.c ****     {
 300              		.loc 1 181 5 view .LVU104
 181:FreeRTOS/MemMang/heap_4.c ****     {
 301              		.loc 1 181 7 is_stmt 0 view .LVU105
 302 0002 0446     		mov	r4, r0
 303 0004 70B1     		cbz	r0, .L24
 185:FreeRTOS/MemMang/heap_4.c ****         {
 304              		.loc 1 185 9 is_stmt 1 view .LVU106
 185:FreeRTOS/MemMang/heap_4.c ****         {
 305              		.loc 1 185 11 is_stmt 0 view .LVU107
 306 0006 10F1090F 		cmn	r0, #9
 307 000a 0AD8     		bhi	.L36
 187:FreeRTOS/MemMang/heap_4.c **** 
 308              		.loc 1 187 13 is_stmt 1 view .LVU108
 187:FreeRTOS/MemMang/heap_4.c **** 
 309              		.loc 1 187 25 is_stmt 0 view .LVU109
 310 000c 0834     		adds	r4, r4, #8
 311              	.LVL23:
 191:FreeRTOS/MemMang/heap_4.c ****             {
 312              		.loc 1 191 13 is_stmt 1 view .LVU110
 191:FreeRTOS/MemMang/heap_4.c ****             {
 313              		.loc 1 191 15 is_stmt 0 view .LVU111
 314 000e 14F00703 		ands	r3, r4, #7
 315 0012 07D0     		beq	.L24
 194:FreeRTOS/MemMang/heap_4.c **** 
 316              		.loc 1 194 17 is_stmt 1 view .LVU112
 194:FreeRTOS/MemMang/heap_4.c **** 
 317              		.loc 1 194 41 is_stmt 0 view .LVU113
 318 0014 C3F10802 		rsb	r2, r3, #8
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 17


 319              	.LVL24:
 196:FreeRTOS/MemMang/heap_4.c ****                 {
 320              		.loc 1 196 17 is_stmt 1 view .LVU114
 196:FreeRTOS/MemMang/heap_4.c ****                 {
 321              		.loc 1 196 21 is_stmt 0 view .LVU115
 322 0018 093B     		subs	r3, r3, #9
 196:FreeRTOS/MemMang/heap_4.c ****                 {
 323              		.loc 1 196 19 view .LVU116
 324 001a A342     		cmp	r3, r4
 325 001c 11D3     		bcc	.L37
 198:FreeRTOS/MemMang/heap_4.c ****                 }
 326              		.loc 1 198 21 is_stmt 1 view .LVU117
 198:FreeRTOS/MemMang/heap_4.c ****                 }
 327              		.loc 1 198 33 is_stmt 0 view .LVU118
 328 001e 1444     		add	r4, r4, r2
 329              	.LVL25:
 198:FreeRTOS/MemMang/heap_4.c ****                 }
 330              		.loc 1 198 33 view .LVU119
 331 0020 00E0     		b	.L24
 332              	.LVL26:
 333              	.L36:
 212:FreeRTOS/MemMang/heap_4.c ****         }
 334              		.loc 1 212 25 view .LVU120
 335 0022 0024     		movs	r4, #0
 336              	.LVL27:
 337              	.L24:
 217:FreeRTOS/MemMang/heap_4.c ****     }
 338              		.loc 1 217 33 is_stmt 1 view .LVU121
 220:FreeRTOS/MemMang/heap_4.c ****     {
 339              		.loc 1 220 5 view .LVU122
 340 0024 FFF7FEFF 		bl	vTaskSuspendAll
 341              	.LVL28:
 224:FreeRTOS/MemMang/heap_4.c ****         {
 342              		.loc 1 224 9 view .LVU123
 224:FreeRTOS/MemMang/heap_4.c ****         {
 343              		.loc 1 224 19 is_stmt 0 view .LVU124
 344 0028 2B4B     		ldr	r3, .L45
 345 002a 1B68     		ldr	r3, [r3]
 224:FreeRTOS/MemMang/heap_4.c ****         {
 346              		.loc 1 224 11 view .LVU125
 347 002c 5BB1     		cbz	r3, .L40
 348              	.L25:
 230:FreeRTOS/MemMang/heap_4.c ****         }
 349              		.loc 1 230 37 is_stmt 1 view .LVU126
 237:FreeRTOS/MemMang/heap_4.c ****         {
 350              		.loc 1 237 9 view .LVU127
 237:FreeRTOS/MemMang/heap_4.c ****         {
 351              		.loc 1 237 11 is_stmt 0 view .LVU128
 352 002e 002C     		cmp	r4, #0
 353 0030 0CDB     		blt	.L41
 239:FreeRTOS/MemMang/heap_4.c ****             {
 354              		.loc 1 239 13 is_stmt 1 view .LVU129
 239:FreeRTOS/MemMang/heap_4.c ****             {
 355              		.loc 1 239 15 is_stmt 0 view .LVU130
 356 0032 94B1     		cbz	r4, .L42
 239:FreeRTOS/MemMang/heap_4.c ****             {
 357              		.loc 1 239 54 discriminator 1 view .LVU131
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 18


 358 0034 294B     		ldr	r3, .L45+4
 359 0036 1E68     		ldr	r6, [r3]
 239:FreeRTOS/MemMang/heap_4.c ****             {
 360              		.loc 1 239 37 discriminator 1 view .LVU132
 361 0038 A642     		cmp	r6, r4
 362 003a 12D3     		bcc	.L43
 243:FreeRTOS/MemMang/heap_4.c ****                 pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 363              		.loc 1 243 17 is_stmt 1 view .LVU133
 364              	.LVL29:
 244:FreeRTOS/MemMang/heap_4.c ****                 heapVALIDATE_BLOCK_POINTER( pxBlock );
 365              		.loc 1 244 17 view .LVU134
 244:FreeRTOS/MemMang/heap_4.c ****                 heapVALIDATE_BLOCK_POINTER( pxBlock );
 366              		.loc 1 244 25 is_stmt 0 view .LVU135
 367 003c 2849     		ldr	r1, .L45+8
 368 003e 0B68     		ldr	r3, [r1]
 369              	.LVL30:
 245:FreeRTOS/MemMang/heap_4.c **** 
 370              		.loc 1 245 54 is_stmt 1 view .LVU136
 247:FreeRTOS/MemMang/heap_4.c ****                 {
 371              		.loc 1 247 17 view .LVU137
 247:FreeRTOS/MemMang/heap_4.c ****                 {
 372              		.loc 1 247 22 is_stmt 0 view .LVU138
 373 0040 15E0     		b	.L31
 374              	.LVL31:
 375              	.L37:
 202:FreeRTOS/MemMang/heap_4.c ****                 }
 376              		.loc 1 202 33 view .LVU139
 377 0042 0024     		movs	r4, #0
 378              	.LVL32:
 202:FreeRTOS/MemMang/heap_4.c ****                 }
 379              		.loc 1 202 33 view .LVU140
 380 0044 EEE7     		b	.L24
 381              	.LVL33:
 382              	.L40:
 226:FreeRTOS/MemMang/heap_4.c ****         }
 383              		.loc 1 226 13 is_stmt 1 view .LVU141
 384 0046 FFF7FEFF 		bl	prvHeapInit
 385              	.LVL34:
 386 004a F0E7     		b	.L25
 387              	.L41:
 323:FreeRTOS/MemMang/heap_4.c ****         }
 388              		.loc 1 323 37 view .LVU142
 326:FreeRTOS/MemMang/heap_4.c ****     }
 389              		.loc 1 326 45 view .LVU143
 328:FreeRTOS/MemMang/heap_4.c **** 
 390              		.loc 1 328 5 view .LVU144
 328:FreeRTOS/MemMang/heap_4.c **** 
 391              		.loc 1 328 14 is_stmt 0 view .LVU145
 392 004c FFF7FEFF 		bl	xTaskResumeAll
 393              	.LVL35:
 332:FreeRTOS/MemMang/heap_4.c ****         {
 394              		.loc 1 332 9 is_stmt 1 view .LVU146
 178:FreeRTOS/MemMang/heap_4.c ****     size_t xAdditionalRequiredSize;
 395              		.loc 1 178 12 is_stmt 0 view .LVU147
 396 0050 0025     		movs	r5, #0
 397              	.LVL36:
 398              	.L27:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 19


 334:FreeRTOS/MemMang/heap_4.c ****         }
 399              		.loc 1 334 13 is_stmt 1 view .LVU148
 400 0052 FFF7FEFF 		bl	vApplicationMallocFailedHook
 401              	.LVL37:
 338:FreeRTOS/MemMang/heap_4.c ****         }
 402              		.loc 1 338 37 view .LVU149
 343:FreeRTOS/MemMang/heap_4.c ****     return pvReturn;
 403              		.loc 1 343 90 view .LVU150
 344:FreeRTOS/MemMang/heap_4.c **** }
 404              		.loc 1 344 5 view .LVU151
 405              	.L23:
 345:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 406              		.loc 1 345 1 is_stmt 0 view .LVU152
 407 0056 2846     		mov	r0, r5
 408 0058 70BD     		pop	{r4, r5, r6, pc}
 409              	.LVL38:
 410              	.L42:
 323:FreeRTOS/MemMang/heap_4.c ****         }
 411              		.loc 1 323 37 is_stmt 1 view .LVU153
 326:FreeRTOS/MemMang/heap_4.c ****     }
 412              		.loc 1 326 45 view .LVU154
 328:FreeRTOS/MemMang/heap_4.c **** 
 413              		.loc 1 328 5 view .LVU155
 328:FreeRTOS/MemMang/heap_4.c **** 
 414              		.loc 1 328 14 is_stmt 0 view .LVU156
 415 005a FFF7FEFF 		bl	xTaskResumeAll
 416              	.LVL39:
 332:FreeRTOS/MemMang/heap_4.c ****         {
 417              		.loc 1 332 9 is_stmt 1 view .LVU157
 178:FreeRTOS/MemMang/heap_4.c ****     size_t xAdditionalRequiredSize;
 418              		.loc 1 178 12 is_stmt 0 view .LVU158
 419 005e 0025     		movs	r5, #0
 420 0060 F7E7     		b	.L27
 421              	.L43:
 323:FreeRTOS/MemMang/heap_4.c ****         }
 422              		.loc 1 323 37 is_stmt 1 view .LVU159
 326:FreeRTOS/MemMang/heap_4.c ****     }
 423              		.loc 1 326 45 view .LVU160
 328:FreeRTOS/MemMang/heap_4.c **** 
 424              		.loc 1 328 5 view .LVU161
 328:FreeRTOS/MemMang/heap_4.c **** 
 425              		.loc 1 328 14 is_stmt 0 view .LVU162
 426 0062 FFF7FEFF 		bl	xTaskResumeAll
 427              	.LVL40:
 332:FreeRTOS/MemMang/heap_4.c ****         {
 428              		.loc 1 332 9 is_stmt 1 view .LVU163
 178:FreeRTOS/MemMang/heap_4.c ****     size_t xAdditionalRequiredSize;
 429              		.loc 1 178 12 is_stmt 0 view .LVU164
 430 0066 0025     		movs	r5, #0
 431 0068 F3E7     		b	.L27
 432              	.LVL41:
 433              	.L38:
 249:FreeRTOS/MemMang/heap_4.c ****                     pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 434              		.loc 1 249 37 view .LVU165
 435 006a 1946     		mov	r1, r3
 436              	.LVL42:
 250:FreeRTOS/MemMang/heap_4.c ****                     heapVALIDATE_BLOCK_POINTER( pxBlock );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 20


 437              		.loc 1 250 29 view .LVU166
 438 006c 1346     		mov	r3, r2
 439              	.LVL43:
 440              	.L31:
 251:FreeRTOS/MemMang/heap_4.c ****                 }
 441              		.loc 1 251 58 is_stmt 1 view .LVU167
 247:FreeRTOS/MemMang/heap_4.c ****                 {
 442              		.loc 1 247 62 view .LVU168
 247:FreeRTOS/MemMang/heap_4.c ****                 {
 443              		.loc 1 247 33 is_stmt 0 view .LVU169
 444 006e 5A68     		ldr	r2, [r3, #4]
 247:FreeRTOS/MemMang/heap_4.c ****                 {
 445              		.loc 1 247 62 view .LVU170
 446 0070 A242     		cmp	r2, r4
 447 0072 02D2     		bcs	.L30
 247:FreeRTOS/MemMang/heap_4.c ****                 {
 448              		.loc 1 247 74 discriminator 1 view .LVU171
 449 0074 1A68     		ldr	r2, [r3]
 247:FreeRTOS/MemMang/heap_4.c ****                 {
 450              		.loc 1 247 62 discriminator 1 view .LVU172
 451 0076 002A     		cmp	r2, #0
 452 0078 F7D1     		bne	.L38
 453              	.L30:
 256:FreeRTOS/MemMang/heap_4.c ****                 {
 454              		.loc 1 256 17 is_stmt 1 view .LVU173
 256:FreeRTOS/MemMang/heap_4.c ****                 {
 455              		.loc 1 256 29 is_stmt 0 view .LVU174
 456 007a 174A     		ldr	r2, .L45
 457 007c 1268     		ldr	r2, [r2]
 256:FreeRTOS/MemMang/heap_4.c ****                 {
 458              		.loc 1 256 19 view .LVU175
 459 007e 9A42     		cmp	r2, r3
 460 0080 25D0     		beq	.L44
 260:FreeRTOS/MemMang/heap_4.c ****                     heapVALIDATE_BLOCK_POINTER( pvReturn );
 461              		.loc 1 260 21 is_stmt 1 view .LVU176
 260:FreeRTOS/MemMang/heap_4.c ****                     heapVALIDATE_BLOCK_POINTER( pvReturn );
 462              		.loc 1 260 61 is_stmt 0 view .LVU177
 463 0082 0D68     		ldr	r5, [r1]
 260:FreeRTOS/MemMang/heap_4.c ****                     heapVALIDATE_BLOCK_POINTER( pvReturn );
 464              		.loc 1 260 30 view .LVU178
 465 0084 0835     		adds	r5, r5, #8
 466              	.LVL44:
 261:FreeRTOS/MemMang/heap_4.c **** 
 467              		.loc 1 261 59 is_stmt 1 view .LVU179
 265:FreeRTOS/MemMang/heap_4.c **** 
 468              		.loc 1 265 21 view .LVU180
 265:FreeRTOS/MemMang/heap_4.c **** 
 469              		.loc 1 265 63 is_stmt 0 view .LVU181
 470 0086 1A68     		ldr	r2, [r3]
 265:FreeRTOS/MemMang/heap_4.c **** 
 471              		.loc 1 265 54 view .LVU182
 472 0088 0A60     		str	r2, [r1]
 269:FreeRTOS/MemMang/heap_4.c **** 
 473              		.loc 1 269 105 is_stmt 1 view .LVU183
 271:FreeRTOS/MemMang/heap_4.c ****                     {
 474              		.loc 1 271 21 view .LVU184
 271:FreeRTOS/MemMang/heap_4.c ****                     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 21


 475              		.loc 1 271 34 is_stmt 0 view .LVU185
 476 008a 5868     		ldr	r0, [r3, #4]
 271:FreeRTOS/MemMang/heap_4.c ****                     {
 477              		.loc 1 271 47 view .LVU186
 478 008c 001B     		subs	r0, r0, r4
 271:FreeRTOS/MemMang/heap_4.c ****                     {
 479              		.loc 1 271 23 view .LVU187
 480 008e 1028     		cmp	r0, #16
 481 0090 05D9     		bls	.L33
 277:FreeRTOS/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 482              		.loc 1 277 25 is_stmt 1 view .LVU188
 277:FreeRTOS/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 483              		.loc 1 277 40 is_stmt 0 view .LVU189
 484 0092 1A19     		adds	r2, r3, r4
 485              	.LVL45:
 278:FreeRTOS/MemMang/heap_4.c **** 
 486              		.loc 1 278 105 is_stmt 1 view .LVU190
 282:FreeRTOS/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 487              		.loc 1 282 25 view .LVU191
 282:FreeRTOS/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 488              		.loc 1 282 52 is_stmt 0 view .LVU192
 489 0094 5060     		str	r0, [r2, #4]
 283:FreeRTOS/MemMang/heap_4.c **** 
 490              		.loc 1 283 25 is_stmt 1 view .LVU193
 283:FreeRTOS/MemMang/heap_4.c **** 
 491              		.loc 1 283 45 is_stmt 0 view .LVU194
 492 0096 5C60     		str	r4, [r3, #4]
 286:FreeRTOS/MemMang/heap_4.c ****                         pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLin
 493              		.loc 1 286 25 is_stmt 1 view .LVU195
 286:FreeRTOS/MemMang/heap_4.c ****                         pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLin
 494              		.loc 1 286 74 is_stmt 0 view .LVU196
 495 0098 0868     		ldr	r0, [r1]
 286:FreeRTOS/MemMang/heap_4.c ****                         pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLin
 496              		.loc 1 286 57 view .LVU197
 497 009a 1851     		str	r0, [r3, r4]
 287:FreeRTOS/MemMang/heap_4.c ****                     }
 498              		.loc 1 287 25 is_stmt 1 view .LVU198
 287:FreeRTOS/MemMang/heap_4.c ****                     }
 499              		.loc 1 287 58 is_stmt 0 view .LVU199
 500 009c 0A60     		str	r2, [r1]
 501              	.LVL46:
 502              	.L33:
 291:FreeRTOS/MemMang/heap_4.c ****                     }
 503              		.loc 1 291 49 is_stmt 1 view .LVU200
 294:FreeRTOS/MemMang/heap_4.c **** 
 504              		.loc 1 294 21 view .LVU201
 294:FreeRTOS/MemMang/heap_4.c **** 
 505              		.loc 1 294 51 is_stmt 0 view .LVU202
 506 009e 5968     		ldr	r1, [r3, #4]
 507              	.LVL47:
 294:FreeRTOS/MemMang/heap_4.c **** 
 508              		.loc 1 294 41 view .LVU203
 509 00a0 761A     		subs	r6, r6, r1
 510 00a2 0E48     		ldr	r0, .L45+4
 511 00a4 0660     		str	r6, [r0]
 296:FreeRTOS/MemMang/heap_4.c ****                     {
 512              		.loc 1 296 21 is_stmt 1 view .LVU204
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 22


 296:FreeRTOS/MemMang/heap_4.c ****                     {
 513              		.loc 1 296 45 is_stmt 0 view .LVU205
 514 00a6 0F48     		ldr	r0, .L45+12
 515 00a8 0068     		ldr	r0, [r0]
 296:FreeRTOS/MemMang/heap_4.c ****                     {
 516              		.loc 1 296 23 view .LVU206
 517 00aa 8642     		cmp	r6, r0
 518 00ac 01D2     		bcs	.L34
 298:FreeRTOS/MemMang/heap_4.c ****                     }
 519              		.loc 1 298 25 is_stmt 1 view .LVU207
 298:FreeRTOS/MemMang/heap_4.c ****                     }
 520              		.loc 1 298 56 is_stmt 0 view .LVU208
 521 00ae 0D48     		ldr	r0, .L45+12
 522 00b0 0660     		str	r6, [r0]
 523              	.L34:
 302:FreeRTOS/MemMang/heap_4.c ****                     }
 524              		.loc 1 302 49 is_stmt 1 view .LVU209
 307:FreeRTOS/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 525              		.loc 1 307 21 view .LVU210
 526 00b2 41F00041 		orr	r1, r1, #-2147483648
 527 00b6 5960     		str	r1, [r3, #4]
 308:FreeRTOS/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 528              		.loc 1 308 21 view .LVU211
 308:FreeRTOS/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 529              		.loc 1 308 46 is_stmt 0 view .LVU212
 530 00b8 0022     		movs	r2, #0
 531 00ba 1A60     		str	r2, [r3]
 309:FreeRTOS/MemMang/heap_4.c ****                 }
 532              		.loc 1 309 21 is_stmt 1 view .LVU213
 309:FreeRTOS/MemMang/heap_4.c ****                 }
 533              		.loc 1 309 51 is_stmt 0 view .LVU214
 534 00bc 0A4A     		ldr	r2, .L45+16
 535 00be 1368     		ldr	r3, [r2]
 536              	.LVL48:
 309:FreeRTOS/MemMang/heap_4.c ****                 }
 537              		.loc 1 309 51 view .LVU215
 538 00c0 0133     		adds	r3, r3, #1
 539 00c2 1360     		str	r3, [r2]
 323:FreeRTOS/MemMang/heap_4.c ****         }
 540              		.loc 1 323 37 is_stmt 1 view .LVU216
 326:FreeRTOS/MemMang/heap_4.c ****     }
 541              		.loc 1 326 45 view .LVU217
 328:FreeRTOS/MemMang/heap_4.c **** 
 542              		.loc 1 328 5 view .LVU218
 328:FreeRTOS/MemMang/heap_4.c **** 
 543              		.loc 1 328 14 is_stmt 0 view .LVU219
 544 00c4 FFF7FEFF 		bl	xTaskResumeAll
 545              	.LVL49:
 332:FreeRTOS/MemMang/heap_4.c ****         {
 546              		.loc 1 332 9 is_stmt 1 view .LVU220
 332:FreeRTOS/MemMang/heap_4.c ****         {
 547              		.loc 1 332 11 is_stmt 0 view .LVU221
 548 00c8 002D     		cmp	r5, #0
 549 00ca C4D1     		bne	.L23
 550 00cc C1E7     		b	.L27
 551              	.LVL50:
 552              	.L44:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 23


 323:FreeRTOS/MemMang/heap_4.c ****         }
 553              		.loc 1 323 37 is_stmt 1 view .LVU222
 326:FreeRTOS/MemMang/heap_4.c ****     }
 554              		.loc 1 326 45 view .LVU223
 328:FreeRTOS/MemMang/heap_4.c **** 
 555              		.loc 1 328 5 view .LVU224
 328:FreeRTOS/MemMang/heap_4.c **** 
 556              		.loc 1 328 14 is_stmt 0 view .LVU225
 557 00ce FFF7FEFF 		bl	xTaskResumeAll
 558              	.LVL51:
 332:FreeRTOS/MemMang/heap_4.c ****         {
 559              		.loc 1 332 9 is_stmt 1 view .LVU226
 178:FreeRTOS/MemMang/heap_4.c ****     size_t xAdditionalRequiredSize;
 560              		.loc 1 178 12 is_stmt 0 view .LVU227
 561 00d2 0025     		movs	r5, #0
 562 00d4 BDE7     		b	.L27
 563              	.L46:
 564 00d6 00BF     		.align	2
 565              	.L45:
 566 00d8 00000000 		.word	pxEnd
 567 00dc 00000000 		.word	xFreeBytesRemaining
 568 00e0 00000000 		.word	xStart
 569 00e4 00000000 		.word	xMinimumEverFreeBytesRemaining
 570 00e8 00000000 		.word	xNumberOfSuccessfulAllocations
 571              		.cfi_endproc
 572              	.LFE128:
 574              		.section	.text.vPortFree,"ax",%progbits
 575              		.align	1
 576              		.global	vPortFree
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 581              	vPortFree:
 582              	.LVL52:
 583              	.LFB129:
 349:FreeRTOS/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 584              		.loc 1 349 1 is_stmt 1 view -0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 350:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxLink;
 588              		.loc 1 350 5 view .LVU229
 351:FreeRTOS/MemMang/heap_4.c **** 
 589              		.loc 1 351 5 view .LVU230
 353:FreeRTOS/MemMang/heap_4.c ****     {
 590              		.loc 1 353 5 view .LVU231
 353:FreeRTOS/MemMang/heap_4.c ****     {
 591              		.loc 1 353 7 is_stmt 0 view .LVU232
 592 0000 10B3     		cbz	r0, .L50
 349:FreeRTOS/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 593              		.loc 1 349 1 view .LVU233
 594 0002 38B5     		push	{r3, r4, r5, lr}
 595              	.LCFI5:
 596              		.cfi_def_cfa_offset 16
 597              		.cfi_offset 3, -16
 598              		.cfi_offset 4, -12
 599              		.cfi_offset 5, -8
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 24


 600              		.cfi_offset 14, -4
 601 0004 0446     		mov	r4, r0
 357:FreeRTOS/MemMang/heap_4.c **** 
 602              		.loc 1 357 9 is_stmt 1 view .LVU234
 357:FreeRTOS/MemMang/heap_4.c **** 
 603              		.loc 1 357 13 is_stmt 0 view .LVU235
 604 0006 A0F10805 		sub	r5, r0, #8
 605              	.LVL53:
 360:FreeRTOS/MemMang/heap_4.c **** 
 606              		.loc 1 360 9 is_stmt 1 view .LVU236
 362:FreeRTOS/MemMang/heap_4.c ****         configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 607              		.loc 1 362 45 view .LVU237
 363:FreeRTOS/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 608              		.loc 1 363 62 view .LVU238
 364:FreeRTOS/MemMang/heap_4.c **** 
 609              		.loc 1 364 56 view .LVU239
 366:FreeRTOS/MemMang/heap_4.c ****         {
 610              		.loc 1 366 9 view .LVU240
 366:FreeRTOS/MemMang/heap_4.c ****         {
 611              		.loc 1 366 13 is_stmt 0 view .LVU241
 612 000a 50F8043C 		ldr	r3, [r0, #-4]
 366:FreeRTOS/MemMang/heap_4.c ****         {
 613              		.loc 1 366 11 view .LVU242
 614 000e 002B     		cmp	r3, #0
 615 0010 00DB     		blt	.L53
 616              	.LVL54:
 617              	.L47:
 404:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 618              		.loc 1 404 1 view .LVU243
 619 0012 38BD     		pop	{r3, r4, r5, pc}
 620              	.LVL55:
 621              	.L53:
 368:FreeRTOS/MemMang/heap_4.c ****             {
 622              		.loc 1 368 13 is_stmt 1 view .LVU244
 368:FreeRTOS/MemMang/heap_4.c ****             {
 623              		.loc 1 368 23 is_stmt 0 view .LVU245
 624 0014 50F8082C 		ldr	r2, [r0, #-8]
 368:FreeRTOS/MemMang/heap_4.c ****             {
 625              		.loc 1 368 15 view .LVU246
 626 0018 002A     		cmp	r2, #0
 627 001a FAD1     		bne	.L47
 372:FreeRTOS/MemMang/heap_4.c ****                 #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
 628              		.loc 1 372 17 is_stmt 1 view .LVU247
 629 001c 23F00043 		bic	r3, r3, #-2147483648
 630 0020 40F8043C 		str	r3, [r0, #-4]
 384:FreeRTOS/MemMang/heap_4.c ****                 {
 631              		.loc 1 384 17 view .LVU248
 632 0024 FFF7FEFF 		bl	vTaskSuspendAll
 633              	.LVL56:
 387:FreeRTOS/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 634              		.loc 1 387 21 view .LVU249
 387:FreeRTOS/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 635              		.loc 1 387 50 is_stmt 0 view .LVU250
 636 0028 54F8041C 		ldr	r1, [r4, #-4]
 387:FreeRTOS/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 637              		.loc 1 387 41 view .LVU251
 638 002c 074A     		ldr	r2, .L54
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 25


 639 002e 1368     		ldr	r3, [r2]
 640 0030 0B44     		add	r3, r3, r1
 641 0032 1360     		str	r3, [r2]
 388:FreeRTOS/MemMang/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 642              		.loc 1 388 56 is_stmt 1 view .LVU252
 389:FreeRTOS/MemMang/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 643              		.loc 1 389 21 view .LVU253
 644 0034 2846     		mov	r0, r5
 645 0036 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 646              	.LVL57:
 390:FreeRTOS/MemMang/heap_4.c ****                 }
 647              		.loc 1 390 21 view .LVU254
 390:FreeRTOS/MemMang/heap_4.c ****                 }
 648              		.loc 1 390 45 is_stmt 0 view .LVU255
 649 003a 054A     		ldr	r2, .L54+4
 650 003c 1368     		ldr	r3, [r2]
 651 003e 0133     		adds	r3, r3, #1
 652 0040 1360     		str	r3, [r2]
 392:FreeRTOS/MemMang/heap_4.c ****             }
 653              		.loc 1 392 17 is_stmt 1 view .LVU256
 392:FreeRTOS/MemMang/heap_4.c ****             }
 654              		.loc 1 392 26 is_stmt 0 view .LVU257
 655 0042 FFF7FEFF 		bl	xTaskResumeAll
 656              	.LVL58:
 401:FreeRTOS/MemMang/heap_4.c ****         }
 657              		.loc 1 401 37 is_stmt 1 view .LVU258
 404:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 658              		.loc 1 404 1 is_stmt 0 view .LVU259
 659 0046 E4E7     		b	.L47
 660              	.LVL59:
 661              	.L50:
 662              	.LCFI6:
 663              		.cfi_def_cfa_offset 0
 664              		.cfi_restore 3
 665              		.cfi_restore 4
 666              		.cfi_restore 5
 667              		.cfi_restore 14
 404:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 668              		.loc 1 404 1 view .LVU260
 669 0048 7047     		bx	lr
 670              	.L55:
 671 004a 00BF     		.align	2
 672              	.L54:
 673 004c 00000000 		.word	xFreeBytesRemaining
 674 0050 00000000 		.word	xNumberOfSuccessfulFrees
 675              		.cfi_endproc
 676              	.LFE129:
 678              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 679              		.align	1
 680              		.global	xPortGetFreeHeapSize
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 685              	xPortGetFreeHeapSize:
 686              	.LFB130:
 408:FreeRTOS/MemMang/heap_4.c ****     return xFreeBytesRemaining;
 687              		.loc 1 408 1 is_stmt 1 view -0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 26


 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              		@ link register save eliminated.
 409:FreeRTOS/MemMang/heap_4.c **** }
 692              		.loc 1 409 5 view .LVU262
 410:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 693              		.loc 1 410 1 is_stmt 0 view .LVU263
 694 0000 014B     		ldr	r3, .L57
 695 0002 1868     		ldr	r0, [r3]
 696 0004 7047     		bx	lr
 697              	.L58:
 698 0006 00BF     		.align	2
 699              	.L57:
 700 0008 00000000 		.word	xFreeBytesRemaining
 701              		.cfi_endproc
 702              	.LFE130:
 704              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 705              		.align	1
 706              		.global	xPortGetMinimumEverFreeHeapSize
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 711              	xPortGetMinimumEverFreeHeapSize:
 712              	.LFB131:
 414:FreeRTOS/MemMang/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 713              		.loc 1 414 1 is_stmt 1 view -0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 0, uses_anonymous_args = 0
 717              		@ link register save eliminated.
 415:FreeRTOS/MemMang/heap_4.c **** }
 718              		.loc 1 415 5 view .LVU265
 416:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 719              		.loc 1 416 1 is_stmt 0 view .LVU266
 720 0000 014B     		ldr	r3, .L60
 721 0002 1868     		ldr	r0, [r3]
 722 0004 7047     		bx	lr
 723              	.L61:
 724 0006 00BF     		.align	2
 725              	.L60:
 726 0008 00000000 		.word	xMinimumEverFreeBytesRemaining
 727              		.cfi_endproc
 728              	.LFE131:
 730              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 731              		.align	1
 732              		.global	vPortInitialiseBlocks
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 737              	vPortInitialiseBlocks:
 738              	.LFB132:
 420:FreeRTOS/MemMang/heap_4.c ****     /* This just exists to keep the linker quiet. */
 739              		.loc 1 420 1 is_stmt 1 view -0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 27


 743              		@ link register save eliminated.
 422:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 744              		.loc 1 422 1 view .LVU268
 745 0000 7047     		bx	lr
 746              		.cfi_endproc
 747              	.LFE132:
 749              		.section	.text.pvPortCalloc,"ax",%progbits
 750              		.align	1
 751              		.global	pvPortCalloc
 752              		.syntax unified
 753              		.thumb
 754              		.thumb_func
 756              	pvPortCalloc:
 757              	.LVL60:
 758              	.LFB133:
 427:FreeRTOS/MemMang/heap_4.c ****     void * pv = NULL;
 759              		.loc 1 427 1 view -0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 0, uses_anonymous_args = 0
 427:FreeRTOS/MemMang/heap_4.c ****     void * pv = NULL;
 763              		.loc 1 427 1 is_stmt 0 view .LVU270
 764 0000 38B5     		push	{r3, r4, r5, lr}
 765              	.LCFI7:
 766              		.cfi_def_cfa_offset 16
 767              		.cfi_offset 3, -16
 768              		.cfi_offset 4, -12
 769              		.cfi_offset 5, -8
 770              		.cfi_offset 14, -4
 428:FreeRTOS/MemMang/heap_4.c **** 
 771              		.loc 1 428 5 is_stmt 1 view .LVU271
 772              	.LVL61:
 430:FreeRTOS/MemMang/heap_4.c ****     {
 773              		.loc 1 430 5 view .LVU272
 430:FreeRTOS/MemMang/heap_4.c ****     {
 774              		.loc 1 430 9 is_stmt 0 view .LVU273
 775 0002 0346     		mov	r3, r0
 776 0004 20B1     		cbz	r0, .L64
 777 0006 0022     		movs	r2, #0
 778 0008 A1FB0040 		umull	r4, r0, r1, r0
 779              	.LVL62:
 430:FreeRTOS/MemMang/heap_4.c ****     {
 780              		.loc 1 430 9 view .LVU274
 781 000c 68B9     		cbnz	r0, .L70
 782              	.L65:
 430:FreeRTOS/MemMang/heap_4.c ****     {
 783              		.loc 1 430 9 discriminator 1 view .LVU275
 784 000e 72B9     		cbnz	r2, .L68
 785              	.L64:
 432:FreeRTOS/MemMang/heap_4.c **** 
 786              		.loc 1 432 9 is_stmt 1 view .LVU276
 432:FreeRTOS/MemMang/heap_4.c **** 
 787              		.loc 1 432 14 is_stmt 0 view .LVU277
 788 0010 01FB03F4 		mul	r4, r1, r3
 789 0014 2046     		mov	r0, r4
 790 0016 FFF7FEFF 		bl	pvPortMalloc
 791              	.LVL63:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 28


 434:FreeRTOS/MemMang/heap_4.c ****         {
 792              		.loc 1 434 9 is_stmt 1 view .LVU278
 434:FreeRTOS/MemMang/heap_4.c ****         {
 793              		.loc 1 434 11 is_stmt 0 view .LVU279
 794 001a 0546     		mov	r5, r0
 795 001c 18B1     		cbz	r0, .L63
 436:FreeRTOS/MemMang/heap_4.c ****         }
 796              		.loc 1 436 13 is_stmt 1 view .LVU280
 436:FreeRTOS/MemMang/heap_4.c ****         }
 797              		.loc 1 436 22 is_stmt 0 view .LVU281
 798 001e 2246     		mov	r2, r4
 799 0020 0021     		movs	r1, #0
 800 0022 FFF7FEFF 		bl	memset
 801              	.LVL64:
 802              	.L63:
 441:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 803              		.loc 1 441 1 view .LVU282
 804 0026 2846     		mov	r0, r5
 805 0028 38BD     		pop	{r3, r4, r5, pc}
 806              	.LVL65:
 807              	.L70:
 441:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 808              		.loc 1 441 1 view .LVU283
 809 002a 0122     		movs	r2, #1
 810 002c EFE7     		b	.L65
 811              	.L68:
 428:FreeRTOS/MemMang/heap_4.c **** 
 812              		.loc 1 428 12 view .LVU284
 813 002e 0025     		movs	r5, #0
 440:FreeRTOS/MemMang/heap_4.c **** }
 814              		.loc 1 440 5 is_stmt 1 view .LVU285
 440:FreeRTOS/MemMang/heap_4.c **** }
 815              		.loc 1 440 12 is_stmt 0 view .LVU286
 816 0030 F9E7     		b	.L63
 817              		.cfi_endproc
 818              	.LFE133:
 820              		.section	.text.vPortGetHeapStats,"ax",%progbits
 821              		.align	1
 822              		.global	vPortGetHeapStats
 823              		.syntax unified
 824              		.thumb
 825              		.thumb_func
 827              	vPortGetHeapStats:
 828              	.LVL66:
 829              	.LFB136:
 558:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 559:FreeRTOS/MemMang/heap_4.c **** 
 560:FreeRTOS/MemMang/heap_4.c **** void vPortGetHeapStats( HeapStats_t * pxHeapStats )
 561:FreeRTOS/MemMang/heap_4.c **** {
 830              		.loc 1 561 1 is_stmt 1 view -0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 0
 833              		@ frame_needed = 0, uses_anonymous_args = 0
 834              		.loc 1 561 1 is_stmt 0 view .LVU288
 835 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 836              	.LCFI8:
 837              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 29


 838              		.cfi_offset 3, -24
 839              		.cfi_offset 4, -20
 840              		.cfi_offset 5, -16
 841              		.cfi_offset 6, -12
 842              		.cfi_offset 7, -8
 843              		.cfi_offset 14, -4
 844 0002 0746     		mov	r7, r0
 562:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxBlock;
 845              		.loc 1 562 5 is_stmt 1 view .LVU289
 563:FreeRTOS/MemMang/heap_4.c ****     size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable
 846              		.loc 1 563 5 view .LVU290
 847              	.LVL67:
 564:FreeRTOS/MemMang/heap_4.c **** 
 565:FreeRTOS/MemMang/heap_4.c ****     vTaskSuspendAll();
 848              		.loc 1 565 5 view .LVU291
 849 0004 FFF7FEFF 		bl	vTaskSuspendAll
 850              	.LVL68:
 566:FreeRTOS/MemMang/heap_4.c ****     {
 567:FreeRTOS/MemMang/heap_4.c ****         pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 851              		.loc 1 567 9 view .LVU292
 852              		.loc 1 567 17 is_stmt 0 view .LVU293
 853 0008 174B     		ldr	r3, .L82
 854 000a 1B68     		ldr	r3, [r3]
 855              	.LVL69:
 568:FreeRTOS/MemMang/heap_4.c **** 
 569:FreeRTOS/MemMang/heap_4.c ****         /* pxBlock will be NULL if the heap has not been initialised.  The heap
 570:FreeRTOS/MemMang/heap_4.c ****          * is initialised automatically when the first allocation is made. */
 571:FreeRTOS/MemMang/heap_4.c ****         if( pxBlock != NULL )
 856              		.loc 1 571 9 is_stmt 1 view .LVU294
 857              		.loc 1 571 11 is_stmt 0 view .LVU295
 858 000c 23B1     		cbz	r3, .L81
 563:FreeRTOS/MemMang/heap_4.c **** 
 859              		.loc 1 563 39 view .LVU296
 860 000e 4FF0FF36 		mov	r6, #-1
 563:FreeRTOS/MemMang/heap_4.c **** 
 861              		.loc 1 563 25 view .LVU297
 862 0012 0025     		movs	r5, #0
 563:FreeRTOS/MemMang/heap_4.c **** 
 863              		.loc 1 563 12 view .LVU298
 864 0014 2C46     		mov	r4, r5
 865 0016 1AE0     		b	.L72
 866              	.L81:
 563:FreeRTOS/MemMang/heap_4.c **** 
 867              		.loc 1 563 39 view .LVU299
 868 0018 4FF0FF36 		mov	r6, #-1
 563:FreeRTOS/MemMang/heap_4.c **** 
 869              		.loc 1 563 25 view .LVU300
 870 001c 0025     		movs	r5, #0
 563:FreeRTOS/MemMang/heap_4.c **** 
 871              		.loc 1 563 12 view .LVU301
 872 001e 2C46     		mov	r4, r5
 873              	.LVL70:
 874              	.L73:
 572:FreeRTOS/MemMang/heap_4.c ****         {
 573:FreeRTOS/MemMang/heap_4.c ****             while( pxBlock != pxEnd )
 574:FreeRTOS/MemMang/heap_4.c ****             {
 575:FreeRTOS/MemMang/heap_4.c ****                 /* Increment the number of blocks and record the largest block seen
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 30


 576:FreeRTOS/MemMang/heap_4.c ****                  * so far. */
 577:FreeRTOS/MemMang/heap_4.c ****                 xBlocks++;
 578:FreeRTOS/MemMang/heap_4.c **** 
 579:FreeRTOS/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize > xMaxSize )
 580:FreeRTOS/MemMang/heap_4.c ****                 {
 581:FreeRTOS/MemMang/heap_4.c ****                     xMaxSize = pxBlock->xBlockSize;
 582:FreeRTOS/MemMang/heap_4.c ****                 }
 583:FreeRTOS/MemMang/heap_4.c **** 
 584:FreeRTOS/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize < xMinSize )
 585:FreeRTOS/MemMang/heap_4.c ****                 {
 586:FreeRTOS/MemMang/heap_4.c ****                     xMinSize = pxBlock->xBlockSize;
 587:FreeRTOS/MemMang/heap_4.c ****                 }
 588:FreeRTOS/MemMang/heap_4.c **** 
 589:FreeRTOS/MemMang/heap_4.c ****                 /* Move to the next block in the chain until the last block is
 590:FreeRTOS/MemMang/heap_4.c ****                  * reached. */
 591:FreeRTOS/MemMang/heap_4.c ****                 pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 592:FreeRTOS/MemMang/heap_4.c ****             }
 593:FreeRTOS/MemMang/heap_4.c ****         }
 594:FreeRTOS/MemMang/heap_4.c ****     }
 595:FreeRTOS/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 875              		.loc 1 595 5 is_stmt 1 view .LVU302
 876              		.loc 1 595 14 is_stmt 0 view .LVU303
 877 0020 FFF7FEFF 		bl	xTaskResumeAll
 878              	.LVL71:
 596:FreeRTOS/MemMang/heap_4.c **** 
 597:FreeRTOS/MemMang/heap_4.c ****     pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 879              		.loc 1 597 5 is_stmt 1 view .LVU304
 880              		.loc 1 597 49 is_stmt 0 view .LVU305
 881 0024 7D60     		str	r5, [r7, #4]
 598:FreeRTOS/MemMang/heap_4.c ****     pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 882              		.loc 1 598 5 is_stmt 1 view .LVU306
 883              		.loc 1 598 50 is_stmt 0 view .LVU307
 884 0026 BE60     		str	r6, [r7, #8]
 599:FreeRTOS/MemMang/heap_4.c ****     pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 885              		.loc 1 599 5 is_stmt 1 view .LVU308
 886              		.loc 1 599 38 is_stmt 0 view .LVU309
 887 0028 FC60     		str	r4, [r7, #12]
 600:FreeRTOS/MemMang/heap_4.c **** 
 601:FreeRTOS/MemMang/heap_4.c ****     taskENTER_CRITICAL();
 888              		.loc 1 601 5 is_stmt 1 view .LVU310
 889 002a FFF7FEFF 		bl	vPortEnterCritical
 890              	.LVL72:
 602:FreeRTOS/MemMang/heap_4.c ****     {
 603:FreeRTOS/MemMang/heap_4.c ****         pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 891              		.loc 1 603 9 view .LVU311
 892              		.loc 1 603 49 is_stmt 0 view .LVU312
 893 002e 0F4B     		ldr	r3, .L82+4
 894 0030 1B68     		ldr	r3, [r3]
 895 0032 3B60     		str	r3, [r7]
 604:FreeRTOS/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 896              		.loc 1 604 9 is_stmt 1 view .LVU313
 897              		.loc 1 604 53 is_stmt 0 view .LVU314
 898 0034 0E4B     		ldr	r3, .L82+8
 899 0036 1B68     		ldr	r3, [r3]
 900 0038 7B61     		str	r3, [r7, #20]
 605:FreeRTOS/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 901              		.loc 1 605 9 is_stmt 1 view .LVU315
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 31


 902              		.loc 1 605 47 is_stmt 0 view .LVU316
 903 003a 0E4B     		ldr	r3, .L82+12
 904 003c 1B68     		ldr	r3, [r3]
 905 003e BB61     		str	r3, [r7, #24]
 606:FreeRTOS/MemMang/heap_4.c ****         pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 906              		.loc 1 606 9 is_stmt 1 view .LVU317
 907              		.loc 1 606 53 is_stmt 0 view .LVU318
 908 0040 0D4B     		ldr	r3, .L82+16
 909 0042 1B68     		ldr	r3, [r3]
 910 0044 3B61     		str	r3, [r7, #16]
 607:FreeRTOS/MemMang/heap_4.c ****     }
 608:FreeRTOS/MemMang/heap_4.c ****     taskEXIT_CRITICAL();
 911              		.loc 1 608 5 is_stmt 1 view .LVU319
 912 0046 FFF7FEFF 		bl	vPortExitCritical
 913              	.LVL73:
 609:FreeRTOS/MemMang/heap_4.c **** }
 914              		.loc 1 609 1 is_stmt 0 view .LVU320
 915 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 916              	.LVL74:
 917              	.L75:
 591:FreeRTOS/MemMang/heap_4.c ****             }
 918              		.loc 1 591 17 is_stmt 1 view .LVU321
 591:FreeRTOS/MemMang/heap_4.c ****             }
 919              		.loc 1 591 25 is_stmt 0 view .LVU322
 920 004c 1B68     		ldr	r3, [r3]
 921              	.LVL75:
 922              	.L72:
 573:FreeRTOS/MemMang/heap_4.c ****             {
 923              		.loc 1 573 28 is_stmt 1 view .LVU323
 924 004e 0B4A     		ldr	r2, .L82+20
 925 0050 1268     		ldr	r2, [r2]
 926 0052 9A42     		cmp	r2, r3
 927 0054 E4D0     		beq	.L73
 577:FreeRTOS/MemMang/heap_4.c **** 
 928              		.loc 1 577 17 view .LVU324
 577:FreeRTOS/MemMang/heap_4.c **** 
 929              		.loc 1 577 24 is_stmt 0 view .LVU325
 930 0056 0134     		adds	r4, r4, #1
 931              	.LVL76:
 579:FreeRTOS/MemMang/heap_4.c ****                 {
 932              		.loc 1 579 17 is_stmt 1 view .LVU326
 579:FreeRTOS/MemMang/heap_4.c ****                 {
 933              		.loc 1 579 28 is_stmt 0 view .LVU327
 934 0058 5A68     		ldr	r2, [r3, #4]
 579:FreeRTOS/MemMang/heap_4.c ****                 {
 935              		.loc 1 579 19 view .LVU328
 936 005a AA42     		cmp	r2, r5
 937 005c 00D9     		bls	.L74
 581:FreeRTOS/MemMang/heap_4.c ****                 }
 938              		.loc 1 581 30 view .LVU329
 939 005e 1546     		mov	r5, r2
 940              	.LVL77:
 941              	.L74:
 584:FreeRTOS/MemMang/heap_4.c ****                 {
 942              		.loc 1 584 17 is_stmt 1 view .LVU330
 584:FreeRTOS/MemMang/heap_4.c ****                 {
 943              		.loc 1 584 19 is_stmt 0 view .LVU331
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 32


 944 0060 B242     		cmp	r2, r6
 945 0062 F3D2     		bcs	.L75
 586:FreeRTOS/MemMang/heap_4.c ****                 }
 946              		.loc 1 586 30 view .LVU332
 947 0064 1646     		mov	r6, r2
 948              	.LVL78:
 586:FreeRTOS/MemMang/heap_4.c ****                 }
 949              		.loc 1 586 30 view .LVU333
 950 0066 F1E7     		b	.L75
 951              	.L83:
 952              		.align	2
 953              	.L82:
 954 0068 00000000 		.word	xStart
 955 006c 00000000 		.word	xFreeBytesRemaining
 956 0070 00000000 		.word	xNumberOfSuccessfulAllocations
 957 0074 00000000 		.word	xNumberOfSuccessfulFrees
 958 0078 00000000 		.word	xMinimumEverFreeBytesRemaining
 959 007c 00000000 		.word	pxEnd
 960              		.cfi_endproc
 961              	.LFE136:
 963              		.section	.text.vPortHeapResetState,"ax",%progbits
 964              		.align	1
 965              		.global	vPortHeapResetState
 966              		.syntax unified
 967              		.thumb
 968              		.thumb_func
 970              	vPortHeapResetState:
 971              	.LFB137:
 610:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 611:FreeRTOS/MemMang/heap_4.c **** 
 612:FreeRTOS/MemMang/heap_4.c **** /*
 613:FreeRTOS/MemMang/heap_4.c ****  * Reset the state in this file. This state is normally initialized at start up.
 614:FreeRTOS/MemMang/heap_4.c ****  * This function must be called by the application before restarting the
 615:FreeRTOS/MemMang/heap_4.c ****  * scheduler.
 616:FreeRTOS/MemMang/heap_4.c ****  */
 617:FreeRTOS/MemMang/heap_4.c **** void vPortHeapResetState( void )
 618:FreeRTOS/MemMang/heap_4.c **** {
 972              		.loc 1 618 1 is_stmt 1 view -0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 0
 975              		@ frame_needed = 0, uses_anonymous_args = 0
 976              		@ link register save eliminated.
 619:FreeRTOS/MemMang/heap_4.c ****     pxEnd = NULL;
 977              		.loc 1 619 5 view .LVU335
 978              		.loc 1 619 11 is_stmt 0 view .LVU336
 979 0000 0023     		movs	r3, #0
 980 0002 054A     		ldr	r2, .L85
 981 0004 1360     		str	r3, [r2]
 620:FreeRTOS/MemMang/heap_4.c **** 
 621:FreeRTOS/MemMang/heap_4.c ****     xFreeBytesRemaining = ( size_t ) 0U;
 982              		.loc 1 621 5 is_stmt 1 view .LVU337
 983              		.loc 1 621 25 is_stmt 0 view .LVU338
 984 0006 054A     		ldr	r2, .L85+4
 985 0008 1360     		str	r3, [r2]
 622:FreeRTOS/MemMang/heap_4.c ****     xMinimumEverFreeBytesRemaining = ( size_t ) 0U;
 986              		.loc 1 622 5 is_stmt 1 view .LVU339
 987              		.loc 1 622 36 is_stmt 0 view .LVU340
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 33


 988 000a 054A     		ldr	r2, .L85+8
 989 000c 1360     		str	r3, [r2]
 623:FreeRTOS/MemMang/heap_4.c ****     xNumberOfSuccessfulAllocations = ( size_t ) 0U;
 990              		.loc 1 623 5 is_stmt 1 view .LVU341
 991              		.loc 1 623 36 is_stmt 0 view .LVU342
 992 000e 054A     		ldr	r2, .L85+12
 993 0010 1360     		str	r3, [r2]
 624:FreeRTOS/MemMang/heap_4.c ****     xNumberOfSuccessfulFrees = ( size_t ) 0U;
 994              		.loc 1 624 5 is_stmt 1 view .LVU343
 995              		.loc 1 624 30 is_stmt 0 view .LVU344
 996 0012 054A     		ldr	r2, .L85+16
 997 0014 1360     		str	r3, [r2]
 625:FreeRTOS/MemMang/heap_4.c **** }
 998              		.loc 1 625 1 view .LVU345
 999 0016 7047     		bx	lr
 1000              	.L86:
 1001              		.align	2
 1002              	.L85:
 1003 0018 00000000 		.word	pxEnd
 1004 001c 00000000 		.word	xFreeBytesRemaining
 1005 0020 00000000 		.word	xMinimumEverFreeBytesRemaining
 1006 0024 00000000 		.word	xNumberOfSuccessfulAllocations
 1007 0028 00000000 		.word	xNumberOfSuccessfulFrees
 1008              		.cfi_endproc
 1009              	.LFE137:
 1011              		.section	.bss.xNumberOfSuccessfulFrees,"aw",%nobits
 1012              		.align	2
 1015              	xNumberOfSuccessfulFrees:
 1016 0000 00000000 		.space	4
 1017              		.section	.bss.xNumberOfSuccessfulAllocations,"aw",%nobits
 1018              		.align	2
 1021              	xNumberOfSuccessfulAllocations:
 1022 0000 00000000 		.space	4
 1023              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
 1024              		.align	2
 1027              	xMinimumEverFreeBytesRemaining:
 1028 0000 00000000 		.space	4
 1029              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
 1030              		.align	2
 1033              	xFreeBytesRemaining:
 1034 0000 00000000 		.space	4
 1035              		.section	.bss.pxEnd,"aw",%nobits
 1036              		.align	2
 1039              	pxEnd:
 1040 0000 00000000 		.space	4
 1041              		.section	.bss.xStart,"aw",%nobits
 1042              		.align	2
 1045              	xStart:
 1046 0000 00000000 		.space	8
 1046      00000000 
 1047              		.section	.bss.ucHeap,"aw",%nobits
 1048              		.align	2
 1051              	ucHeap:
 1052 0000 00000000 		.space	6144
 1052      00000000 
 1052      00000000 
 1052      00000000 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 34


 1052      00000000 
 1053              		.text
 1054              	.Letext0:
 1055              		.file 2 "D:/Tools/arm-gnu-toolchain/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h"
 1056              		.file 3 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 1057              		.file 4 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 1058              		.file 5 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
 1059              		.file 6 "FreeRTOS/Inc/portable.h"
 1060              		.file 7 "FreeRTOS/Inc/task.h"
 1061              		.file 8 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/string.h"
 1062              		.file 9 "<built-in>"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 heap_4.c
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:19     .text.prvHeapInit:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:24     .text.prvHeapInit:00000000 prvHeapInit
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:120    .text.prvHeapInit:00000044 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1051   .bss.ucHeap:00000000 ucHeap
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1045   .bss.xStart:00000000 xStart
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1039   .bss.pxEnd:00000000 pxEnd
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1027   .bss.xMinimumEverFreeBytesRemaining:00000000 xMinimumEverFreeBytesRemaining
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1033   .bss.xFreeBytesRemaining:00000000 xFreeBytesRemaining
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:129    .text.prvInsertBlockIntoFreeList:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:134    .text.prvInsertBlockIntoFreeList:00000000 prvInsertBlockIntoFreeList
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:267    .text.prvInsertBlockIntoFreeList:0000005c $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:273    .text.pvPortMalloc:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:279    .text.pvPortMalloc:00000000 pvPortMalloc
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:566    .text.pvPortMalloc:000000d8 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1021   .bss.xNumberOfSuccessfulAllocations:00000000 xNumberOfSuccessfulAllocations
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:575    .text.vPortFree:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:581    .text.vPortFree:00000000 vPortFree
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:673    .text.vPortFree:0000004c $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1015   .bss.xNumberOfSuccessfulFrees:00000000 xNumberOfSuccessfulFrees
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:679    .text.xPortGetFreeHeapSize:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:685    .text.xPortGetFreeHeapSize:00000000 xPortGetFreeHeapSize
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:700    .text.xPortGetFreeHeapSize:00000008 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:705    .text.xPortGetMinimumEverFreeHeapSize:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:711    .text.xPortGetMinimumEverFreeHeapSize:00000000 xPortGetMinimumEverFreeHeapSize
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:726    .text.xPortGetMinimumEverFreeHeapSize:00000008 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:731    .text.vPortInitialiseBlocks:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:737    .text.vPortInitialiseBlocks:00000000 vPortInitialiseBlocks
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:750    .text.pvPortCalloc:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:756    .text.pvPortCalloc:00000000 pvPortCalloc
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:821    .text.vPortGetHeapStats:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:827    .text.vPortGetHeapStats:00000000 vPortGetHeapStats
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:954    .text.vPortGetHeapStats:00000068 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:964    .text.vPortHeapResetState:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:970    .text.vPortHeapResetState:00000000 vPortHeapResetState
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1003   .text.vPortHeapResetState:00000018 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1012   .bss.xNumberOfSuccessfulFrees:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1018   .bss.xNumberOfSuccessfulAllocations:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1024   .bss.xMinimumEverFreeBytesRemaining:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1030   .bss.xFreeBytesRemaining:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1036   .bss.pxEnd:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1042   .bss.xStart:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccx086eo.s:1048   .bss.ucHeap:00000000 $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
vApplicationMallocFailedHook
memset
vPortEnterCritical
vPortExitCritical
