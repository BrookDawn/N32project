ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 23, 1
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"event_groups.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "FreeRTOS/Src/event_groups.c"
  18              		.section	.text.prvTestWaitCondition,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvTestWaitCondition:
  25              	.LVL0:
  26              	.LFB137:
   1:FreeRTOS/Src/event_groups.c **** /*
   2:FreeRTOS/Src/event_groups.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/Src/event_groups.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/Src/event_groups.c ****  *
   5:FreeRTOS/Src/event_groups.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/Src/event_groups.c ****  *
   7:FreeRTOS/Src/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/Src/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/Src/event_groups.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/Src/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/Src/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/Src/event_groups.c ****  * subject to the following conditions:
  13:FreeRTOS/Src/event_groups.c ****  *
  14:FreeRTOS/Src/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/Src/event_groups.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/Src/event_groups.c ****  *
  17:FreeRTOS/Src/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/Src/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/Src/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/Src/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/Src/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/Src/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/Src/event_groups.c ****  *
  24:FreeRTOS/Src/event_groups.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/Src/event_groups.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/Src/event_groups.c ****  *
  27:FreeRTOS/Src/event_groups.c ****  */
  28:FreeRTOS/Src/event_groups.c **** 
  29:FreeRTOS/Src/event_groups.c **** /* Standard includes. */
  30:FreeRTOS/Src/event_groups.c **** #include <stdlib.h>
  31:FreeRTOS/Src/event_groups.c **** 
  32:FreeRTOS/Src/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 2


  33:FreeRTOS/Src/event_groups.c ****  * all the API functions to use the MPU wrappers. That should only be done when
  34:FreeRTOS/Src/event_groups.c ****  * task.h is included from an application file. */
  35:FreeRTOS/Src/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/Src/event_groups.c **** 
  37:FreeRTOS/Src/event_groups.c **** /* FreeRTOS includes. */
  38:FreeRTOS/Src/event_groups.c **** #include "FreeRTOS.h"
  39:FreeRTOS/Src/event_groups.c **** #include "task.h"
  40:FreeRTOS/Src/event_groups.c **** #include "timers.h"
  41:FreeRTOS/Src/event_groups.c **** #include "event_groups.h"
  42:FreeRTOS/Src/event_groups.c **** 
  43:FreeRTOS/Src/event_groups.c **** /* The MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:FreeRTOS/Src/event_groups.c ****  * for the header files above, but not in this file, in order to generate the
  45:FreeRTOS/Src/event_groups.c ****  * correct privileged Vs unprivileged linkage and placement. */
  46:FreeRTOS/Src/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  47:FreeRTOS/Src/event_groups.c **** 
  48:FreeRTOS/Src/event_groups.c **** /* This entire source file will be skipped if the application is not configured
  49:FreeRTOS/Src/event_groups.c ****  * to include event groups functionality. This #if is closed at the very bottom
  50:FreeRTOS/Src/event_groups.c ****  * of this file. If you want to include event groups then ensure
  51:FreeRTOS/Src/event_groups.c ****  * configUSE_EVENT_GROUPS is set to 1 in FreeRTOSConfig.h. */
  52:FreeRTOS/Src/event_groups.c **** #if ( configUSE_EVENT_GROUPS == 1 )
  53:FreeRTOS/Src/event_groups.c **** 
  54:FreeRTOS/Src/event_groups.c ****     typedef struct EventGroupDef_t
  55:FreeRTOS/Src/event_groups.c ****     {
  56:FreeRTOS/Src/event_groups.c ****         EventBits_t uxEventBits;
  57:FreeRTOS/Src/event_groups.c ****         List_t xTasksWaitingForBits; /**< List of tasks waiting for a bit to be set. */
  58:FreeRTOS/Src/event_groups.c **** 
  59:FreeRTOS/Src/event_groups.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
  60:FreeRTOS/Src/event_groups.c ****             UBaseType_t uxEventGroupNumber;
  61:FreeRTOS/Src/event_groups.c ****         #endif
  62:FreeRTOS/Src/event_groups.c **** 
  63:FreeRTOS/Src/event_groups.c ****         #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  64:FreeRTOS/Src/event_groups.c ****             uint8_t ucStaticallyAllocated; /**< Set to pdTRUE if the event group is statically allo
  65:FreeRTOS/Src/event_groups.c ****         #endif
  66:FreeRTOS/Src/event_groups.c ****     } EventGroup_t;
  67:FreeRTOS/Src/event_groups.c **** 
  68:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
  69:FreeRTOS/Src/event_groups.c **** 
  70:FreeRTOS/Src/event_groups.c **** /*
  71:FreeRTOS/Src/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  72:FreeRTOS/Src/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  73:FreeRTOS/Src/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  74:FreeRTOS/Src/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  75:FreeRTOS/Src/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  76:FreeRTOS/Src/event_groups.c ****  * in uxCurrentEventBits.
  77:FreeRTOS/Src/event_groups.c ****  */
  78:FreeRTOS/Src/event_groups.c ****     static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
  79:FreeRTOS/Src/event_groups.c ****                                             const EventBits_t uxBitsToWaitFor,
  80:FreeRTOS/Src/event_groups.c ****                                             const BaseType_t xWaitForAllBits ) PRIVILEGED_FUNCTION;
  81:FreeRTOS/Src/event_groups.c **** 
  82:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
  83:FreeRTOS/Src/event_groups.c **** 
  84:FreeRTOS/Src/event_groups.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
  85:FreeRTOS/Src/event_groups.c **** 
  86:FreeRTOS/Src/event_groups.c ****         EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
  87:FreeRTOS/Src/event_groups.c ****         {
  88:FreeRTOS/Src/event_groups.c ****             EventGroup_t * pxEventBits;
  89:FreeRTOS/Src/event_groups.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 3


  90:FreeRTOS/Src/event_groups.c ****             traceENTER_xEventGroupCreateStatic( pxEventGroupBuffer );
  91:FreeRTOS/Src/event_groups.c **** 
  92:FreeRTOS/Src/event_groups.c ****             /* A StaticEventGroup_t object must be provided. */
  93:FreeRTOS/Src/event_groups.c ****             configASSERT( pxEventGroupBuffer );
  94:FreeRTOS/Src/event_groups.c **** 
  95:FreeRTOS/Src/event_groups.c ****             #if ( configASSERT_DEFINED == 1 )
  96:FreeRTOS/Src/event_groups.c ****             {
  97:FreeRTOS/Src/event_groups.c ****                 /* Sanity check that the size of the structure used to declare a
  98:FreeRTOS/Src/event_groups.c ****                  * variable of type StaticEventGroup_t equals the size of the real
  99:FreeRTOS/Src/event_groups.c ****                  * event group structure. */
 100:FreeRTOS/Src/event_groups.c ****                 volatile size_t xSize = sizeof( StaticEventGroup_t );
 101:FreeRTOS/Src/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 102:FreeRTOS/Src/event_groups.c ****             }
 103:FreeRTOS/Src/event_groups.c ****             #endif /* configASSERT_DEFINED */
 104:FreeRTOS/Src/event_groups.c **** 
 105:FreeRTOS/Src/event_groups.c ****             /* The user has provided a statically allocated event group - use it. */
 106:FreeRTOS/Src/event_groups.c ****             /* MISRA Ref 11.3.1 [Misaligned access] */
 107:FreeRTOS/Src/event_groups.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 108:FreeRTOS/Src/event_groups.c ****             /* coverity[misra_c_2012_rule_11_3_violation] */
 109:FreeRTOS/Src/event_groups.c ****             pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer;
 110:FreeRTOS/Src/event_groups.c **** 
 111:FreeRTOS/Src/event_groups.c ****             if( pxEventBits != NULL )
 112:FreeRTOS/Src/event_groups.c ****             {
 113:FreeRTOS/Src/event_groups.c ****                 pxEventBits->uxEventBits = 0;
 114:FreeRTOS/Src/event_groups.c ****                 vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 115:FreeRTOS/Src/event_groups.c **** 
 116:FreeRTOS/Src/event_groups.c ****                 #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 117:FreeRTOS/Src/event_groups.c ****                 {
 118:FreeRTOS/Src/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note that
 119:FreeRTOS/Src/event_groups.c ****                      * this event group was created statically in case the event group
 120:FreeRTOS/Src/event_groups.c ****                      * is later deleted. */
 121:FreeRTOS/Src/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdTRUE;
 122:FreeRTOS/Src/event_groups.c ****                 }
 123:FreeRTOS/Src/event_groups.c ****                 #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 124:FreeRTOS/Src/event_groups.c **** 
 125:FreeRTOS/Src/event_groups.c ****                 traceEVENT_GROUP_CREATE( pxEventBits );
 126:FreeRTOS/Src/event_groups.c ****             }
 127:FreeRTOS/Src/event_groups.c ****             else
 128:FreeRTOS/Src/event_groups.c ****             {
 129:FreeRTOS/Src/event_groups.c ****                 /* xEventGroupCreateStatic should only ever be called with
 130:FreeRTOS/Src/event_groups.c ****                  * pxEventGroupBuffer pointing to a pre-allocated (compile time
 131:FreeRTOS/Src/event_groups.c ****                  * allocated) StaticEventGroup_t variable. */
 132:FreeRTOS/Src/event_groups.c ****                 traceEVENT_GROUP_CREATE_FAILED();
 133:FreeRTOS/Src/event_groups.c ****             }
 134:FreeRTOS/Src/event_groups.c **** 
 135:FreeRTOS/Src/event_groups.c ****             traceRETURN_xEventGroupCreateStatic( pxEventBits );
 136:FreeRTOS/Src/event_groups.c **** 
 137:FreeRTOS/Src/event_groups.c ****             return pxEventBits;
 138:FreeRTOS/Src/event_groups.c ****         }
 139:FreeRTOS/Src/event_groups.c **** 
 140:FreeRTOS/Src/event_groups.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 141:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 142:FreeRTOS/Src/event_groups.c **** 
 143:FreeRTOS/Src/event_groups.c ****     #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 144:FreeRTOS/Src/event_groups.c **** 
 145:FreeRTOS/Src/event_groups.c ****         EventGroupHandle_t xEventGroupCreate( void )
 146:FreeRTOS/Src/event_groups.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 4


 147:FreeRTOS/Src/event_groups.c ****             EventGroup_t * pxEventBits;
 148:FreeRTOS/Src/event_groups.c **** 
 149:FreeRTOS/Src/event_groups.c ****             traceENTER_xEventGroupCreate();
 150:FreeRTOS/Src/event_groups.c **** 
 151:FreeRTOS/Src/event_groups.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
 152:FreeRTOS/Src/event_groups.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 153:FreeRTOS/Src/event_groups.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
 154:FreeRTOS/Src/event_groups.c ****             pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 155:FreeRTOS/Src/event_groups.c **** 
 156:FreeRTOS/Src/event_groups.c ****             if( pxEventBits != NULL )
 157:FreeRTOS/Src/event_groups.c ****             {
 158:FreeRTOS/Src/event_groups.c ****                 pxEventBits->uxEventBits = 0;
 159:FreeRTOS/Src/event_groups.c ****                 vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 160:FreeRTOS/Src/event_groups.c **** 
 161:FreeRTOS/Src/event_groups.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 162:FreeRTOS/Src/event_groups.c ****                 {
 163:FreeRTOS/Src/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note this
 164:FreeRTOS/Src/event_groups.c ****                      * event group was allocated statically in case the event group is
 165:FreeRTOS/Src/event_groups.c ****                      * later deleted. */
 166:FreeRTOS/Src/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdFALSE;
 167:FreeRTOS/Src/event_groups.c ****                 }
 168:FreeRTOS/Src/event_groups.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 169:FreeRTOS/Src/event_groups.c **** 
 170:FreeRTOS/Src/event_groups.c ****                 traceEVENT_GROUP_CREATE( pxEventBits );
 171:FreeRTOS/Src/event_groups.c ****             }
 172:FreeRTOS/Src/event_groups.c ****             else
 173:FreeRTOS/Src/event_groups.c ****             {
 174:FreeRTOS/Src/event_groups.c ****                 traceEVENT_GROUP_CREATE_FAILED();
 175:FreeRTOS/Src/event_groups.c ****             }
 176:FreeRTOS/Src/event_groups.c **** 
 177:FreeRTOS/Src/event_groups.c ****             traceRETURN_xEventGroupCreate( pxEventBits );
 178:FreeRTOS/Src/event_groups.c **** 
 179:FreeRTOS/Src/event_groups.c ****             return pxEventBits;
 180:FreeRTOS/Src/event_groups.c ****         }
 181:FreeRTOS/Src/event_groups.c **** 
 182:FreeRTOS/Src/event_groups.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 183:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 184:FreeRTOS/Src/event_groups.c **** 
 185:FreeRTOS/Src/event_groups.c ****     EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
 186:FreeRTOS/Src/event_groups.c ****                                  const EventBits_t uxBitsToSet,
 187:FreeRTOS/Src/event_groups.c ****                                  const EventBits_t uxBitsToWaitFor,
 188:FreeRTOS/Src/event_groups.c ****                                  TickType_t xTicksToWait )
 189:FreeRTOS/Src/event_groups.c ****     {
 190:FreeRTOS/Src/event_groups.c ****         EventBits_t uxOriginalBitValue, uxReturn;
 191:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 192:FreeRTOS/Src/event_groups.c ****         BaseType_t xAlreadyYielded;
 193:FreeRTOS/Src/event_groups.c ****         BaseType_t xTimeoutOccurred = pdFALSE;
 194:FreeRTOS/Src/event_groups.c **** 
 195:FreeRTOS/Src/event_groups.c ****         traceENTER_xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 196:FreeRTOS/Src/event_groups.c **** 
 197:FreeRTOS/Src/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 198:FreeRTOS/Src/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 199:FreeRTOS/Src/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 200:FreeRTOS/Src/event_groups.c ****         {
 201:FreeRTOS/Src/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 202:FreeRTOS/Src/event_groups.c ****         }
 203:FreeRTOS/Src/event_groups.c ****         #endif
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 5


 204:FreeRTOS/Src/event_groups.c **** 
 205:FreeRTOS/Src/event_groups.c ****         vTaskSuspendAll();
 206:FreeRTOS/Src/event_groups.c ****         {
 207:FreeRTOS/Src/event_groups.c ****             uxOriginalBitValue = pxEventBits->uxEventBits;
 208:FreeRTOS/Src/event_groups.c **** 
 209:FreeRTOS/Src/event_groups.c ****             ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 210:FreeRTOS/Src/event_groups.c **** 
 211:FreeRTOS/Src/event_groups.c ****             if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 212:FreeRTOS/Src/event_groups.c ****             {
 213:FreeRTOS/Src/event_groups.c ****                 /* All the rendezvous bits are now set - no need to block. */
 214:FreeRTOS/Src/event_groups.c ****                 uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 215:FreeRTOS/Src/event_groups.c **** 
 216:FreeRTOS/Src/event_groups.c ****                 /* Rendezvous always clear the bits.  They will have been cleared
 217:FreeRTOS/Src/event_groups.c ****                  * already unless this is the only task in the rendezvous. */
 218:FreeRTOS/Src/event_groups.c ****                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 219:FreeRTOS/Src/event_groups.c **** 
 220:FreeRTOS/Src/event_groups.c ****                 xTicksToWait = 0;
 221:FreeRTOS/Src/event_groups.c ****             }
 222:FreeRTOS/Src/event_groups.c ****             else
 223:FreeRTOS/Src/event_groups.c ****             {
 224:FreeRTOS/Src/event_groups.c ****                 if( xTicksToWait != ( TickType_t ) 0 )
 225:FreeRTOS/Src/event_groups.c ****                 {
 226:FreeRTOS/Src/event_groups.c ****                     traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 227:FreeRTOS/Src/event_groups.c **** 
 228:FreeRTOS/Src/event_groups.c ****                     /* Store the bits that the calling task is waiting for in the
 229:FreeRTOS/Src/event_groups.c ****                      * task's event list item so the kernel knows when a match is
 230:FreeRTOS/Src/event_groups.c ****                      * found.  Then enter the blocked state. */
 231:FreeRTOS/Src/event_groups.c ****                     vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBit
 232:FreeRTOS/Src/event_groups.c **** 
 233:FreeRTOS/Src/event_groups.c ****                     /* This assignment is obsolete as uxReturn will get set after
 234:FreeRTOS/Src/event_groups.c ****                      * the task unblocks, but some compilers mistakenly generate a
 235:FreeRTOS/Src/event_groups.c ****                      * warning about uxReturn being returned without being set if the
 236:FreeRTOS/Src/event_groups.c ****                      * assignment is omitted. */
 237:FreeRTOS/Src/event_groups.c ****                     uxReturn = 0;
 238:FreeRTOS/Src/event_groups.c ****                 }
 239:FreeRTOS/Src/event_groups.c ****                 else
 240:FreeRTOS/Src/event_groups.c ****                 {
 241:FreeRTOS/Src/event_groups.c ****                     /* The rendezvous bits were not set, but no block time was
 242:FreeRTOS/Src/event_groups.c ****                      * specified - just return the current event bit value. */
 243:FreeRTOS/Src/event_groups.c ****                     uxReturn = pxEventBits->uxEventBits;
 244:FreeRTOS/Src/event_groups.c ****                     xTimeoutOccurred = pdTRUE;
 245:FreeRTOS/Src/event_groups.c ****                 }
 246:FreeRTOS/Src/event_groups.c ****             }
 247:FreeRTOS/Src/event_groups.c ****         }
 248:FreeRTOS/Src/event_groups.c ****         xAlreadyYielded = xTaskResumeAll();
 249:FreeRTOS/Src/event_groups.c **** 
 250:FreeRTOS/Src/event_groups.c ****         if( xTicksToWait != ( TickType_t ) 0 )
 251:FreeRTOS/Src/event_groups.c ****         {
 252:FreeRTOS/Src/event_groups.c ****             if( xAlreadyYielded == pdFALSE )
 253:FreeRTOS/Src/event_groups.c ****             {
 254:FreeRTOS/Src/event_groups.c ****                 taskYIELD_WITHIN_API();
 255:FreeRTOS/Src/event_groups.c ****             }
 256:FreeRTOS/Src/event_groups.c ****             else
 257:FreeRTOS/Src/event_groups.c ****             {
 258:FreeRTOS/Src/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 259:FreeRTOS/Src/event_groups.c ****             }
 260:FreeRTOS/Src/event_groups.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 6


 261:FreeRTOS/Src/event_groups.c ****             /* The task blocked to wait for its required bits to be set - at this
 262:FreeRTOS/Src/event_groups.c ****              * point either the required bits were set or the block time expired.  If
 263:FreeRTOS/Src/event_groups.c ****              * the required bits were set they will have been stored in the task's
 264:FreeRTOS/Src/event_groups.c ****              * event list item, and they should now be retrieved then cleared. */
 265:FreeRTOS/Src/event_groups.c ****             uxReturn = uxTaskResetEventItemValue();
 266:FreeRTOS/Src/event_groups.c **** 
 267:FreeRTOS/Src/event_groups.c ****             if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 268:FreeRTOS/Src/event_groups.c ****             {
 269:FreeRTOS/Src/event_groups.c ****                 /* The task timed out, just return the current event bit value. */
 270:FreeRTOS/Src/event_groups.c ****                 taskENTER_CRITICAL();
 271:FreeRTOS/Src/event_groups.c ****                 {
 272:FreeRTOS/Src/event_groups.c ****                     uxReturn = pxEventBits->uxEventBits;
 273:FreeRTOS/Src/event_groups.c **** 
 274:FreeRTOS/Src/event_groups.c ****                     /* Although the task got here because it timed out before the
 275:FreeRTOS/Src/event_groups.c ****                      * bits it was waiting for were set, it is possible that since it
 276:FreeRTOS/Src/event_groups.c ****                      * unblocked another task has set the bits.  If this is the case
 277:FreeRTOS/Src/event_groups.c ****                      * then it needs to clear the bits before exiting. */
 278:FreeRTOS/Src/event_groups.c ****                     if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 279:FreeRTOS/Src/event_groups.c ****                     {
 280:FreeRTOS/Src/event_groups.c ****                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 281:FreeRTOS/Src/event_groups.c ****                     }
 282:FreeRTOS/Src/event_groups.c ****                     else
 283:FreeRTOS/Src/event_groups.c ****                     {
 284:FreeRTOS/Src/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 285:FreeRTOS/Src/event_groups.c ****                     }
 286:FreeRTOS/Src/event_groups.c ****                 }
 287:FreeRTOS/Src/event_groups.c ****                 taskEXIT_CRITICAL();
 288:FreeRTOS/Src/event_groups.c **** 
 289:FreeRTOS/Src/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 290:FreeRTOS/Src/event_groups.c ****             }
 291:FreeRTOS/Src/event_groups.c ****             else
 292:FreeRTOS/Src/event_groups.c ****             {
 293:FreeRTOS/Src/event_groups.c ****                 /* The task unblocked because the bits were set. */
 294:FreeRTOS/Src/event_groups.c ****             }
 295:FreeRTOS/Src/event_groups.c **** 
 296:FreeRTOS/Src/event_groups.c ****             /* Control bits might be set as the task had blocked should not be
 297:FreeRTOS/Src/event_groups.c ****              * returned. */
 298:FreeRTOS/Src/event_groups.c ****             uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 299:FreeRTOS/Src/event_groups.c ****         }
 300:FreeRTOS/Src/event_groups.c **** 
 301:FreeRTOS/Src/event_groups.c ****         traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 302:FreeRTOS/Src/event_groups.c **** 
 303:FreeRTOS/Src/event_groups.c ****         /* Prevent compiler warnings when trace macros are not used. */
 304:FreeRTOS/Src/event_groups.c ****         ( void ) xTimeoutOccurred;
 305:FreeRTOS/Src/event_groups.c **** 
 306:FreeRTOS/Src/event_groups.c ****         traceRETURN_xEventGroupSync( uxReturn );
 307:FreeRTOS/Src/event_groups.c **** 
 308:FreeRTOS/Src/event_groups.c ****         return uxReturn;
 309:FreeRTOS/Src/event_groups.c ****     }
 310:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 311:FreeRTOS/Src/event_groups.c **** 
 312:FreeRTOS/Src/event_groups.c ****     EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
 313:FreeRTOS/Src/event_groups.c ****                                      const EventBits_t uxBitsToWaitFor,
 314:FreeRTOS/Src/event_groups.c ****                                      const BaseType_t xClearOnExit,
 315:FreeRTOS/Src/event_groups.c ****                                      const BaseType_t xWaitForAllBits,
 316:FreeRTOS/Src/event_groups.c ****                                      TickType_t xTicksToWait )
 317:FreeRTOS/Src/event_groups.c ****     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 7


 318:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 319:FreeRTOS/Src/event_groups.c ****         EventBits_t uxReturn, uxControlBits = 0;
 320:FreeRTOS/Src/event_groups.c ****         BaseType_t xWaitConditionMet, xAlreadyYielded;
 321:FreeRTOS/Src/event_groups.c ****         BaseType_t xTimeoutOccurred = pdFALSE;
 322:FreeRTOS/Src/event_groups.c **** 
 323:FreeRTOS/Src/event_groups.c ****         traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits
 324:FreeRTOS/Src/event_groups.c **** 
 325:FreeRTOS/Src/event_groups.c ****         /* Check the user is not attempting to wait on the bits used by the kernel
 326:FreeRTOS/Src/event_groups.c ****          * itself, and that at least one bit is being requested. */
 327:FreeRTOS/Src/event_groups.c ****         configASSERT( xEventGroup );
 328:FreeRTOS/Src/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 329:FreeRTOS/Src/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 330:FreeRTOS/Src/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 331:FreeRTOS/Src/event_groups.c ****         {
 332:FreeRTOS/Src/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 333:FreeRTOS/Src/event_groups.c ****         }
 334:FreeRTOS/Src/event_groups.c ****         #endif
 335:FreeRTOS/Src/event_groups.c **** 
 336:FreeRTOS/Src/event_groups.c ****         vTaskSuspendAll();
 337:FreeRTOS/Src/event_groups.c ****         {
 338:FreeRTOS/Src/event_groups.c ****             const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 339:FreeRTOS/Src/event_groups.c **** 
 340:FreeRTOS/Src/event_groups.c ****             /* Check to see if the wait condition is already met or not. */
 341:FreeRTOS/Src/event_groups.c ****             xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitFor
 342:FreeRTOS/Src/event_groups.c **** 
 343:FreeRTOS/Src/event_groups.c ****             if( xWaitConditionMet != pdFALSE )
 344:FreeRTOS/Src/event_groups.c ****             {
 345:FreeRTOS/Src/event_groups.c ****                 /* The wait condition has already been met so there is no need to
 346:FreeRTOS/Src/event_groups.c ****                  * block. */
 347:FreeRTOS/Src/event_groups.c ****                 uxReturn = uxCurrentEventBits;
 348:FreeRTOS/Src/event_groups.c ****                 xTicksToWait = ( TickType_t ) 0;
 349:FreeRTOS/Src/event_groups.c **** 
 350:FreeRTOS/Src/event_groups.c ****                 /* Clear the wait bits if requested to do so. */
 351:FreeRTOS/Src/event_groups.c ****                 if( xClearOnExit != pdFALSE )
 352:FreeRTOS/Src/event_groups.c ****                 {
 353:FreeRTOS/Src/event_groups.c ****                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 354:FreeRTOS/Src/event_groups.c ****                 }
 355:FreeRTOS/Src/event_groups.c ****                 else
 356:FreeRTOS/Src/event_groups.c ****                 {
 357:FreeRTOS/Src/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 358:FreeRTOS/Src/event_groups.c ****                 }
 359:FreeRTOS/Src/event_groups.c ****             }
 360:FreeRTOS/Src/event_groups.c ****             else if( xTicksToWait == ( TickType_t ) 0 )
 361:FreeRTOS/Src/event_groups.c ****             {
 362:FreeRTOS/Src/event_groups.c ****                 /* The wait condition has not been met, but no block time was
 363:FreeRTOS/Src/event_groups.c ****                  * specified, so just return the current value. */
 364:FreeRTOS/Src/event_groups.c ****                 uxReturn = uxCurrentEventBits;
 365:FreeRTOS/Src/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 366:FreeRTOS/Src/event_groups.c ****             }
 367:FreeRTOS/Src/event_groups.c ****             else
 368:FreeRTOS/Src/event_groups.c ****             {
 369:FreeRTOS/Src/event_groups.c ****                 /* The task is going to block to wait for its required bits to be
 370:FreeRTOS/Src/event_groups.c ****                  * set.  uxControlBits are used to remember the specified behaviour of
 371:FreeRTOS/Src/event_groups.c ****                  * this call to xEventGroupWaitBits() - for use when the event bits
 372:FreeRTOS/Src/event_groups.c ****                  * unblock the task. */
 373:FreeRTOS/Src/event_groups.c ****                 if( xClearOnExit != pdFALSE )
 374:FreeRTOS/Src/event_groups.c ****                 {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 8


 375:FreeRTOS/Src/event_groups.c ****                     uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 376:FreeRTOS/Src/event_groups.c ****                 }
 377:FreeRTOS/Src/event_groups.c ****                 else
 378:FreeRTOS/Src/event_groups.c ****                 {
 379:FreeRTOS/Src/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 380:FreeRTOS/Src/event_groups.c ****                 }
 381:FreeRTOS/Src/event_groups.c **** 
 382:FreeRTOS/Src/event_groups.c ****                 if( xWaitForAllBits != pdFALSE )
 383:FreeRTOS/Src/event_groups.c ****                 {
 384:FreeRTOS/Src/event_groups.c ****                     uxControlBits |= eventWAIT_FOR_ALL_BITS;
 385:FreeRTOS/Src/event_groups.c ****                 }
 386:FreeRTOS/Src/event_groups.c ****                 else
 387:FreeRTOS/Src/event_groups.c ****                 {
 388:FreeRTOS/Src/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 389:FreeRTOS/Src/event_groups.c ****                 }
 390:FreeRTOS/Src/event_groups.c **** 
 391:FreeRTOS/Src/event_groups.c ****                 /* Store the bits that the calling task is waiting for in the
 392:FreeRTOS/Src/event_groups.c ****                  * task's event list item so the kernel knows when a match is
 393:FreeRTOS/Src/event_groups.c ****                  * found.  Then enter the blocked state. */
 394:FreeRTOS/Src/event_groups.c ****                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToW
 395:FreeRTOS/Src/event_groups.c **** 
 396:FreeRTOS/Src/event_groups.c ****                 /* This is obsolete as it will get set after the task unblocks, but
 397:FreeRTOS/Src/event_groups.c ****                  * some compilers mistakenly generate a warning about the variable
 398:FreeRTOS/Src/event_groups.c ****                  * being returned without being set if it is not done. */
 399:FreeRTOS/Src/event_groups.c ****                 uxReturn = 0;
 400:FreeRTOS/Src/event_groups.c **** 
 401:FreeRTOS/Src/event_groups.c ****                 traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 402:FreeRTOS/Src/event_groups.c ****             }
 403:FreeRTOS/Src/event_groups.c ****         }
 404:FreeRTOS/Src/event_groups.c ****         xAlreadyYielded = xTaskResumeAll();
 405:FreeRTOS/Src/event_groups.c **** 
 406:FreeRTOS/Src/event_groups.c ****         if( xTicksToWait != ( TickType_t ) 0 )
 407:FreeRTOS/Src/event_groups.c ****         {
 408:FreeRTOS/Src/event_groups.c ****             if( xAlreadyYielded == pdFALSE )
 409:FreeRTOS/Src/event_groups.c ****             {
 410:FreeRTOS/Src/event_groups.c ****                 taskYIELD_WITHIN_API();
 411:FreeRTOS/Src/event_groups.c ****             }
 412:FreeRTOS/Src/event_groups.c ****             else
 413:FreeRTOS/Src/event_groups.c ****             {
 414:FreeRTOS/Src/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 415:FreeRTOS/Src/event_groups.c ****             }
 416:FreeRTOS/Src/event_groups.c **** 
 417:FreeRTOS/Src/event_groups.c ****             /* The task blocked to wait for its required bits to be set - at this
 418:FreeRTOS/Src/event_groups.c ****              * point either the required bits were set or the block time expired.  If
 419:FreeRTOS/Src/event_groups.c ****              * the required bits were set they will have been stored in the task's
 420:FreeRTOS/Src/event_groups.c ****              * event list item, and they should now be retrieved then cleared. */
 421:FreeRTOS/Src/event_groups.c ****             uxReturn = uxTaskResetEventItemValue();
 422:FreeRTOS/Src/event_groups.c **** 
 423:FreeRTOS/Src/event_groups.c ****             if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 424:FreeRTOS/Src/event_groups.c ****             {
 425:FreeRTOS/Src/event_groups.c ****                 taskENTER_CRITICAL();
 426:FreeRTOS/Src/event_groups.c ****                 {
 427:FreeRTOS/Src/event_groups.c ****                     /* The task timed out, just return the current event bit value. */
 428:FreeRTOS/Src/event_groups.c ****                     uxReturn = pxEventBits->uxEventBits;
 429:FreeRTOS/Src/event_groups.c **** 
 430:FreeRTOS/Src/event_groups.c ****                     /* It is possible that the event bits were updated between this
 431:FreeRTOS/Src/event_groups.c ****                      * task leaving the Blocked state and running again. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 9


 432:FreeRTOS/Src/event_groups.c ****                     if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFAL
 433:FreeRTOS/Src/event_groups.c ****                     {
 434:FreeRTOS/Src/event_groups.c ****                         if( xClearOnExit != pdFALSE )
 435:FreeRTOS/Src/event_groups.c ****                         {
 436:FreeRTOS/Src/event_groups.c ****                             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 437:FreeRTOS/Src/event_groups.c ****                         }
 438:FreeRTOS/Src/event_groups.c ****                         else
 439:FreeRTOS/Src/event_groups.c ****                         {
 440:FreeRTOS/Src/event_groups.c ****                             mtCOVERAGE_TEST_MARKER();
 441:FreeRTOS/Src/event_groups.c ****                         }
 442:FreeRTOS/Src/event_groups.c ****                     }
 443:FreeRTOS/Src/event_groups.c ****                     else
 444:FreeRTOS/Src/event_groups.c ****                     {
 445:FreeRTOS/Src/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 446:FreeRTOS/Src/event_groups.c ****                     }
 447:FreeRTOS/Src/event_groups.c **** 
 448:FreeRTOS/Src/event_groups.c ****                     xTimeoutOccurred = pdTRUE;
 449:FreeRTOS/Src/event_groups.c ****                 }
 450:FreeRTOS/Src/event_groups.c ****                 taskEXIT_CRITICAL();
 451:FreeRTOS/Src/event_groups.c ****             }
 452:FreeRTOS/Src/event_groups.c ****             else
 453:FreeRTOS/Src/event_groups.c ****             {
 454:FreeRTOS/Src/event_groups.c ****                 /* The task unblocked because the bits were set. */
 455:FreeRTOS/Src/event_groups.c ****             }
 456:FreeRTOS/Src/event_groups.c **** 
 457:FreeRTOS/Src/event_groups.c ****             /* The task blocked so control bits may have been set. */
 458:FreeRTOS/Src/event_groups.c ****             uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 459:FreeRTOS/Src/event_groups.c ****         }
 460:FreeRTOS/Src/event_groups.c **** 
 461:FreeRTOS/Src/event_groups.c ****         traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 462:FreeRTOS/Src/event_groups.c **** 
 463:FreeRTOS/Src/event_groups.c ****         /* Prevent compiler warnings when trace macros are not used. */
 464:FreeRTOS/Src/event_groups.c ****         ( void ) xTimeoutOccurred;
 465:FreeRTOS/Src/event_groups.c **** 
 466:FreeRTOS/Src/event_groups.c ****         traceRETURN_xEventGroupWaitBits( uxReturn );
 467:FreeRTOS/Src/event_groups.c **** 
 468:FreeRTOS/Src/event_groups.c ****         return uxReturn;
 469:FreeRTOS/Src/event_groups.c ****     }
 470:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 471:FreeRTOS/Src/event_groups.c **** 
 472:FreeRTOS/Src/event_groups.c ****     EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
 473:FreeRTOS/Src/event_groups.c ****                                       const EventBits_t uxBitsToClear )
 474:FreeRTOS/Src/event_groups.c ****     {
 475:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 476:FreeRTOS/Src/event_groups.c ****         EventBits_t uxReturn;
 477:FreeRTOS/Src/event_groups.c **** 
 478:FreeRTOS/Src/event_groups.c ****         traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );
 479:FreeRTOS/Src/event_groups.c **** 
 480:FreeRTOS/Src/event_groups.c ****         /* Check the user is not attempting to clear the bits used by the kernel
 481:FreeRTOS/Src/event_groups.c ****          * itself. */
 482:FreeRTOS/Src/event_groups.c ****         configASSERT( xEventGroup );
 483:FreeRTOS/Src/event_groups.c ****         configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 484:FreeRTOS/Src/event_groups.c **** 
 485:FreeRTOS/Src/event_groups.c ****         taskENTER_CRITICAL();
 486:FreeRTOS/Src/event_groups.c ****         {
 487:FreeRTOS/Src/event_groups.c ****             traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 488:FreeRTOS/Src/event_groups.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 10


 489:FreeRTOS/Src/event_groups.c ****             /* The value returned is the event group value prior to the bits being
 490:FreeRTOS/Src/event_groups.c ****              * cleared. */
 491:FreeRTOS/Src/event_groups.c ****             uxReturn = pxEventBits->uxEventBits;
 492:FreeRTOS/Src/event_groups.c **** 
 493:FreeRTOS/Src/event_groups.c ****             /* Clear the bits. */
 494:FreeRTOS/Src/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToClear;
 495:FreeRTOS/Src/event_groups.c ****         }
 496:FreeRTOS/Src/event_groups.c ****         taskEXIT_CRITICAL();
 497:FreeRTOS/Src/event_groups.c **** 
 498:FreeRTOS/Src/event_groups.c ****         traceRETURN_xEventGroupClearBits( uxReturn );
 499:FreeRTOS/Src/event_groups.c **** 
 500:FreeRTOS/Src/event_groups.c ****         return uxReturn;
 501:FreeRTOS/Src/event_groups.c ****     }
 502:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 503:FreeRTOS/Src/event_groups.c **** 
 504:FreeRTOS/Src/event_groups.c ****     #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configU
 505:FreeRTOS/Src/event_groups.c **** 
 506:FreeRTOS/Src/event_groups.c ****         BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
 507:FreeRTOS/Src/event_groups.c ****                                                 const EventBits_t uxBitsToClear )
 508:FreeRTOS/Src/event_groups.c ****         {
 509:FreeRTOS/Src/event_groups.c ****             BaseType_t xReturn;
 510:FreeRTOS/Src/event_groups.c **** 
 511:FreeRTOS/Src/event_groups.c ****             traceENTER_xEventGroupClearBitsFromISR( xEventGroup, uxBitsToClear );
 512:FreeRTOS/Src/event_groups.c **** 
 513:FreeRTOS/Src/event_groups.c ****             traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 514:FreeRTOS/Src/event_groups.c ****             xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEven
 515:FreeRTOS/Src/event_groups.c **** 
 516:FreeRTOS/Src/event_groups.c ****             traceRETURN_xEventGroupClearBitsFromISR( xReturn );
 517:FreeRTOS/Src/event_groups.c **** 
 518:FreeRTOS/Src/event_groups.c ****             return xReturn;
 519:FreeRTOS/Src/event_groups.c ****         }
 520:FreeRTOS/Src/event_groups.c **** 
 521:FreeRTOS/Src/event_groups.c ****     #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && 
 522:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 523:FreeRTOS/Src/event_groups.c **** 
 524:FreeRTOS/Src/event_groups.c ****     EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 525:FreeRTOS/Src/event_groups.c ****     {
 526:FreeRTOS/Src/event_groups.c ****         UBaseType_t uxSavedInterruptStatus;
 527:FreeRTOS/Src/event_groups.c ****         EventGroup_t const * const pxEventBits = xEventGroup;
 528:FreeRTOS/Src/event_groups.c ****         EventBits_t uxReturn;
 529:FreeRTOS/Src/event_groups.c **** 
 530:FreeRTOS/Src/event_groups.c ****         traceENTER_xEventGroupGetBitsFromISR( xEventGroup );
 531:FreeRTOS/Src/event_groups.c **** 
 532:FreeRTOS/Src/event_groups.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
 533:FreeRTOS/Src/event_groups.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
 534:FreeRTOS/Src/event_groups.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
 535:FreeRTOS/Src/event_groups.c ****         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 536:FreeRTOS/Src/event_groups.c ****         {
 537:FreeRTOS/Src/event_groups.c ****             uxReturn = pxEventBits->uxEventBits;
 538:FreeRTOS/Src/event_groups.c ****         }
 539:FreeRTOS/Src/event_groups.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 540:FreeRTOS/Src/event_groups.c **** 
 541:FreeRTOS/Src/event_groups.c ****         traceRETURN_xEventGroupGetBitsFromISR( uxReturn );
 542:FreeRTOS/Src/event_groups.c **** 
 543:FreeRTOS/Src/event_groups.c ****         return uxReturn;
 544:FreeRTOS/Src/event_groups.c ****     }
 545:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 11


 546:FreeRTOS/Src/event_groups.c **** 
 547:FreeRTOS/Src/event_groups.c ****     EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
 548:FreeRTOS/Src/event_groups.c ****                                     const EventBits_t uxBitsToSet )
 549:FreeRTOS/Src/event_groups.c ****     {
 550:FreeRTOS/Src/event_groups.c ****         ListItem_t * pxListItem;
 551:FreeRTOS/Src/event_groups.c ****         ListItem_t * pxNext;
 552:FreeRTOS/Src/event_groups.c ****         ListItem_t const * pxListEnd;
 553:FreeRTOS/Src/event_groups.c ****         List_t const * pxList;
 554:FreeRTOS/Src/event_groups.c ****         EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 555:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 556:FreeRTOS/Src/event_groups.c ****         BaseType_t xMatchFound = pdFALSE;
 557:FreeRTOS/Src/event_groups.c **** 
 558:FreeRTOS/Src/event_groups.c ****         traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );
 559:FreeRTOS/Src/event_groups.c **** 
 560:FreeRTOS/Src/event_groups.c ****         /* Check the user is not attempting to set the bits used by the kernel
 561:FreeRTOS/Src/event_groups.c ****          * itself. */
 562:FreeRTOS/Src/event_groups.c ****         configASSERT( xEventGroup );
 563:FreeRTOS/Src/event_groups.c ****         configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 564:FreeRTOS/Src/event_groups.c **** 
 565:FreeRTOS/Src/event_groups.c ****         pxList = &( pxEventBits->xTasksWaitingForBits );
 566:FreeRTOS/Src/event_groups.c ****         pxListEnd = listGET_END_MARKER( pxList );
 567:FreeRTOS/Src/event_groups.c ****         vTaskSuspendAll();
 568:FreeRTOS/Src/event_groups.c ****         {
 569:FreeRTOS/Src/event_groups.c ****             traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 570:FreeRTOS/Src/event_groups.c **** 
 571:FreeRTOS/Src/event_groups.c ****             pxListItem = listGET_HEAD_ENTRY( pxList );
 572:FreeRTOS/Src/event_groups.c **** 
 573:FreeRTOS/Src/event_groups.c ****             /* Set the bits. */
 574:FreeRTOS/Src/event_groups.c ****             pxEventBits->uxEventBits |= uxBitsToSet;
 575:FreeRTOS/Src/event_groups.c **** 
 576:FreeRTOS/Src/event_groups.c ****             /* See if the new bit value should unblock any tasks. */
 577:FreeRTOS/Src/event_groups.c ****             while( pxListItem != pxListEnd )
 578:FreeRTOS/Src/event_groups.c ****             {
 579:FreeRTOS/Src/event_groups.c ****                 pxNext = listGET_NEXT( pxListItem );
 580:FreeRTOS/Src/event_groups.c ****                 uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 581:FreeRTOS/Src/event_groups.c ****                 xMatchFound = pdFALSE;
 582:FreeRTOS/Src/event_groups.c **** 
 583:FreeRTOS/Src/event_groups.c ****                 /* Split the bits waited for from the control bits. */
 584:FreeRTOS/Src/event_groups.c ****                 uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 585:FreeRTOS/Src/event_groups.c ****                 uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 586:FreeRTOS/Src/event_groups.c **** 
 587:FreeRTOS/Src/event_groups.c ****                 if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 588:FreeRTOS/Src/event_groups.c ****                 {
 589:FreeRTOS/Src/event_groups.c ****                     /* Just looking for single bit being set. */
 590:FreeRTOS/Src/event_groups.c ****                     if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 591:FreeRTOS/Src/event_groups.c ****                     {
 592:FreeRTOS/Src/event_groups.c ****                         xMatchFound = pdTRUE;
 593:FreeRTOS/Src/event_groups.c ****                     }
 594:FreeRTOS/Src/event_groups.c ****                     else
 595:FreeRTOS/Src/event_groups.c ****                     {
 596:FreeRTOS/Src/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 597:FreeRTOS/Src/event_groups.c ****                     }
 598:FreeRTOS/Src/event_groups.c ****                 }
 599:FreeRTOS/Src/event_groups.c ****                 else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 600:FreeRTOS/Src/event_groups.c ****                 {
 601:FreeRTOS/Src/event_groups.c ****                     /* All bits are set. */
 602:FreeRTOS/Src/event_groups.c ****                     xMatchFound = pdTRUE;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 12


 603:FreeRTOS/Src/event_groups.c ****                 }
 604:FreeRTOS/Src/event_groups.c ****                 else
 605:FreeRTOS/Src/event_groups.c ****                 {
 606:FreeRTOS/Src/event_groups.c ****                     /* Need all bits to be set, but not all the bits were set. */
 607:FreeRTOS/Src/event_groups.c ****                 }
 608:FreeRTOS/Src/event_groups.c **** 
 609:FreeRTOS/Src/event_groups.c ****                 if( xMatchFound != pdFALSE )
 610:FreeRTOS/Src/event_groups.c ****                 {
 611:FreeRTOS/Src/event_groups.c ****                     /* The bits match.  Should the bits be cleared on exit? */
 612:FreeRTOS/Src/event_groups.c ****                     if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 613:FreeRTOS/Src/event_groups.c ****                     {
 614:FreeRTOS/Src/event_groups.c ****                         uxBitsToClear |= uxBitsWaitedFor;
 615:FreeRTOS/Src/event_groups.c ****                     }
 616:FreeRTOS/Src/event_groups.c ****                     else
 617:FreeRTOS/Src/event_groups.c ****                     {
 618:FreeRTOS/Src/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 619:FreeRTOS/Src/event_groups.c ****                     }
 620:FreeRTOS/Src/event_groups.c **** 
 621:FreeRTOS/Src/event_groups.c ****                     /* Store the actual event flag value in the task's event list
 622:FreeRTOS/Src/event_groups.c ****                      * item before removing the task from the event list.  The
 623:FreeRTOS/Src/event_groups.c ****                      * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 624:FreeRTOS/Src/event_groups.c ****                      * that is was unblocked due to its required bits matching, rather
 625:FreeRTOS/Src/event_groups.c ****                      * than because it timed out. */
 626:FreeRTOS/Src/event_groups.c ****                     vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | event
 627:FreeRTOS/Src/event_groups.c ****                 }
 628:FreeRTOS/Src/event_groups.c **** 
 629:FreeRTOS/Src/event_groups.c ****                 /* Move onto the next list item.  Note pxListItem->pxNext is not
 630:FreeRTOS/Src/event_groups.c ****                  * used here as the list item may have been removed from the event list
 631:FreeRTOS/Src/event_groups.c ****                  * and inserted into the ready/pending reading list. */
 632:FreeRTOS/Src/event_groups.c ****                 pxListItem = pxNext;
 633:FreeRTOS/Src/event_groups.c ****             }
 634:FreeRTOS/Src/event_groups.c **** 
 635:FreeRTOS/Src/event_groups.c ****             /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 636:FreeRTOS/Src/event_groups.c ****              * bit was set in the control word. */
 637:FreeRTOS/Src/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToClear;
 638:FreeRTOS/Src/event_groups.c ****         }
 639:FreeRTOS/Src/event_groups.c ****         ( void ) xTaskResumeAll();
 640:FreeRTOS/Src/event_groups.c **** 
 641:FreeRTOS/Src/event_groups.c ****         traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );
 642:FreeRTOS/Src/event_groups.c **** 
 643:FreeRTOS/Src/event_groups.c ****         return pxEventBits->uxEventBits;
 644:FreeRTOS/Src/event_groups.c ****     }
 645:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 646:FreeRTOS/Src/event_groups.c **** 
 647:FreeRTOS/Src/event_groups.c ****     void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 648:FreeRTOS/Src/event_groups.c ****     {
 649:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 650:FreeRTOS/Src/event_groups.c ****         const List_t * pxTasksWaitingForBits;
 651:FreeRTOS/Src/event_groups.c **** 
 652:FreeRTOS/Src/event_groups.c ****         traceENTER_vEventGroupDelete( xEventGroup );
 653:FreeRTOS/Src/event_groups.c **** 
 654:FreeRTOS/Src/event_groups.c ****         configASSERT( pxEventBits );
 655:FreeRTOS/Src/event_groups.c **** 
 656:FreeRTOS/Src/event_groups.c ****         pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 657:FreeRTOS/Src/event_groups.c **** 
 658:FreeRTOS/Src/event_groups.c ****         vTaskSuspendAll();
 659:FreeRTOS/Src/event_groups.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 13


 660:FreeRTOS/Src/event_groups.c ****             traceEVENT_GROUP_DELETE( xEventGroup );
 661:FreeRTOS/Src/event_groups.c **** 
 662:FreeRTOS/Src/event_groups.c ****             while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 663:FreeRTOS/Src/event_groups.c ****             {
 664:FreeRTOS/Src/event_groups.c ****                 /* Unblock the task, returning 0 as the event list is being deleted
 665:FreeRTOS/Src/event_groups.c ****                  * and cannot therefore have any bits set. */
 666:FreeRTOS/Src/event_groups.c ****                 configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( p
 667:FreeRTOS/Src/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNB
 668:FreeRTOS/Src/event_groups.c ****             }
 669:FreeRTOS/Src/event_groups.c ****         }
 670:FreeRTOS/Src/event_groups.c ****         ( void ) xTaskResumeAll();
 671:FreeRTOS/Src/event_groups.c **** 
 672:FreeRTOS/Src/event_groups.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
 673:FreeRTOS/Src/event_groups.c ****         {
 674:FreeRTOS/Src/event_groups.c ****             /* The event group can only have been allocated dynamically - free
 675:FreeRTOS/Src/event_groups.c ****              * it again. */
 676:FreeRTOS/Src/event_groups.c ****             vPortFree( pxEventBits );
 677:FreeRTOS/Src/event_groups.c ****         }
 678:FreeRTOS/Src/event_groups.c ****         #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1
 679:FreeRTOS/Src/event_groups.c ****         {
 680:FreeRTOS/Src/event_groups.c ****             /* The event group could have been allocated statically or
 681:FreeRTOS/Src/event_groups.c ****              * dynamically, so check before attempting to free the memory. */
 682:FreeRTOS/Src/event_groups.c ****             if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 683:FreeRTOS/Src/event_groups.c ****             {
 684:FreeRTOS/Src/event_groups.c ****                 vPortFree( pxEventBits );
 685:FreeRTOS/Src/event_groups.c ****             }
 686:FreeRTOS/Src/event_groups.c ****             else
 687:FreeRTOS/Src/event_groups.c ****             {
 688:FreeRTOS/Src/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 689:FreeRTOS/Src/event_groups.c ****             }
 690:FreeRTOS/Src/event_groups.c ****         }
 691:FreeRTOS/Src/event_groups.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 692:FreeRTOS/Src/event_groups.c **** 
 693:FreeRTOS/Src/event_groups.c ****         traceRETURN_vEventGroupDelete();
 694:FreeRTOS/Src/event_groups.c ****     }
 695:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 696:FreeRTOS/Src/event_groups.c **** 
 697:FreeRTOS/Src/event_groups.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 698:FreeRTOS/Src/event_groups.c ****         BaseType_t xEventGroupGetStaticBuffer( EventGroupHandle_t xEventGroup,
 699:FreeRTOS/Src/event_groups.c ****                                                StaticEventGroup_t ** ppxEventGroupBuffer )
 700:FreeRTOS/Src/event_groups.c ****         {
 701:FreeRTOS/Src/event_groups.c ****             BaseType_t xReturn;
 702:FreeRTOS/Src/event_groups.c ****             EventGroup_t * pxEventBits = xEventGroup;
 703:FreeRTOS/Src/event_groups.c **** 
 704:FreeRTOS/Src/event_groups.c ****             traceENTER_xEventGroupGetStaticBuffer( xEventGroup, ppxEventGroupBuffer );
 705:FreeRTOS/Src/event_groups.c **** 
 706:FreeRTOS/Src/event_groups.c ****             configASSERT( pxEventBits );
 707:FreeRTOS/Src/event_groups.c ****             configASSERT( ppxEventGroupBuffer );
 708:FreeRTOS/Src/event_groups.c **** 
 709:FreeRTOS/Src/event_groups.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 710:FreeRTOS/Src/event_groups.c ****             {
 711:FreeRTOS/Src/event_groups.c ****                 /* Check if the event group was statically allocated. */
 712:FreeRTOS/Src/event_groups.c ****                 if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdTRUE )
 713:FreeRTOS/Src/event_groups.c ****                 {
 714:FreeRTOS/Src/event_groups.c ****                     /* MISRA Ref 11.3.1 [Misaligned access] */
 715:FreeRTOS/Src/event_groups.c ****                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA
 716:FreeRTOS/Src/event_groups.c ****                     /* coverity[misra_c_2012_rule_11_3_violation] */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 14


 717:FreeRTOS/Src/event_groups.c ****                     *ppxEventGroupBuffer = ( StaticEventGroup_t * ) pxEventBits;
 718:FreeRTOS/Src/event_groups.c ****                     xReturn = pdTRUE;
 719:FreeRTOS/Src/event_groups.c ****                 }
 720:FreeRTOS/Src/event_groups.c ****                 else
 721:FreeRTOS/Src/event_groups.c ****                 {
 722:FreeRTOS/Src/event_groups.c ****                     xReturn = pdFALSE;
 723:FreeRTOS/Src/event_groups.c ****                 }
 724:FreeRTOS/Src/event_groups.c ****             }
 725:FreeRTOS/Src/event_groups.c ****             #else /* configSUPPORT_DYNAMIC_ALLOCATION */
 726:FreeRTOS/Src/event_groups.c ****             {
 727:FreeRTOS/Src/event_groups.c ****                 /* Event group must have been statically allocated. */
 728:FreeRTOS/Src/event_groups.c ****                 /* MISRA Ref 11.3.1 [Misaligned access] */
 729:FreeRTOS/Src/event_groups.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
 730:FreeRTOS/Src/event_groups.c ****                 /* coverity[misra_c_2012_rule_11_3_violation] */
 731:FreeRTOS/Src/event_groups.c ****                 *ppxEventGroupBuffer = ( StaticEventGroup_t * ) pxEventBits;
 732:FreeRTOS/Src/event_groups.c ****                 xReturn = pdTRUE;
 733:FreeRTOS/Src/event_groups.c ****             }
 734:FreeRTOS/Src/event_groups.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 735:FreeRTOS/Src/event_groups.c **** 
 736:FreeRTOS/Src/event_groups.c ****             traceRETURN_xEventGroupGetStaticBuffer( xReturn );
 737:FreeRTOS/Src/event_groups.c **** 
 738:FreeRTOS/Src/event_groups.c ****             return xReturn;
 739:FreeRTOS/Src/event_groups.c ****         }
 740:FreeRTOS/Src/event_groups.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 741:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 742:FreeRTOS/Src/event_groups.c **** 
 743:FreeRTOS/Src/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 744:FreeRTOS/Src/event_groups.c ****  * an interrupt. */
 745:FreeRTOS/Src/event_groups.c ****     void vEventGroupSetBitsCallback( void * pvEventGroup,
 746:FreeRTOS/Src/event_groups.c ****                                      uint32_t ulBitsToSet )
 747:FreeRTOS/Src/event_groups.c ****     {
 748:FreeRTOS/Src/event_groups.c ****         traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );
 749:FreeRTOS/Src/event_groups.c **** 
 750:FreeRTOS/Src/event_groups.c ****         /* MISRA Ref 11.5.4 [Callback function parameter] */
 751:FreeRTOS/Src/event_groups.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115
 752:FreeRTOS/Src/event_groups.c ****         /* coverity[misra_c_2012_rule_11_5_violation] */
 753:FreeRTOS/Src/event_groups.c ****         ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 754:FreeRTOS/Src/event_groups.c **** 
 755:FreeRTOS/Src/event_groups.c ****         traceRETURN_vEventGroupSetBitsCallback();
 756:FreeRTOS/Src/event_groups.c ****     }
 757:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 758:FreeRTOS/Src/event_groups.c **** 
 759:FreeRTOS/Src/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 760:FreeRTOS/Src/event_groups.c ****  * an interrupt. */
 761:FreeRTOS/Src/event_groups.c ****     void vEventGroupClearBitsCallback( void * pvEventGroup,
 762:FreeRTOS/Src/event_groups.c ****                                        uint32_t ulBitsToClear )
 763:FreeRTOS/Src/event_groups.c ****     {
 764:FreeRTOS/Src/event_groups.c ****         traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );
 765:FreeRTOS/Src/event_groups.c **** 
 766:FreeRTOS/Src/event_groups.c ****         /* MISRA Ref 11.5.4 [Callback function parameter] */
 767:FreeRTOS/Src/event_groups.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115
 768:FreeRTOS/Src/event_groups.c ****         /* coverity[misra_c_2012_rule_11_5_violation] */
 769:FreeRTOS/Src/event_groups.c ****         ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 770:FreeRTOS/Src/event_groups.c **** 
 771:FreeRTOS/Src/event_groups.c ****         traceRETURN_vEventGroupClearBitsCallback();
 772:FreeRTOS/Src/event_groups.c ****     }
 773:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 15


 774:FreeRTOS/Src/event_groups.c **** 
 775:FreeRTOS/Src/event_groups.c ****     static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
 776:FreeRTOS/Src/event_groups.c ****                                             const EventBits_t uxBitsToWaitFor,
 777:FreeRTOS/Src/event_groups.c ****                                             const BaseType_t xWaitForAllBits )
 778:FreeRTOS/Src/event_groups.c ****     {
  27              		.loc 1 778 5 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 779:FreeRTOS/Src/event_groups.c ****         BaseType_t xWaitConditionMet = pdFALSE;
  32              		.loc 1 779 9 view .LVU1
 780:FreeRTOS/Src/event_groups.c **** 
 781:FreeRTOS/Src/event_groups.c ****         if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 781 9 view .LVU2
  34              		.loc 1 781 11 is_stmt 0 view .LVU3
  35 0000 1AB9     		cbnz	r2, .L2
 782:FreeRTOS/Src/event_groups.c ****         {
 783:FreeRTOS/Src/event_groups.c ****             /* Task only has to wait for one bit within uxBitsToWaitFor to be
 784:FreeRTOS/Src/event_groups.c ****              * set.  Is one already set? */
 785:FreeRTOS/Src/event_groups.c ****             if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  36              		.loc 1 785 13 is_stmt 1 view .LVU4
  37              		.loc 1 785 15 is_stmt 0 view .LVU5
  38 0002 0842     		tst	r0, r1
  39 0004 05D1     		bne	.L4
 779:FreeRTOS/Src/event_groups.c **** 
  40              		.loc 1 779 20 view .LVU6
  41 0006 1046     		mov	r0, r2
  42              	.LVL1:
 779:FreeRTOS/Src/event_groups.c **** 
  43              		.loc 1 779 20 view .LVU7
  44 0008 7047     		bx	lr
  45              	.LVL2:
  46              	.L2:
 786:FreeRTOS/Src/event_groups.c ****             {
 787:FreeRTOS/Src/event_groups.c ****                 xWaitConditionMet = pdTRUE;
 788:FreeRTOS/Src/event_groups.c ****             }
 789:FreeRTOS/Src/event_groups.c ****             else
 790:FreeRTOS/Src/event_groups.c ****             {
 791:FreeRTOS/Src/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 792:FreeRTOS/Src/event_groups.c ****             }
 793:FreeRTOS/Src/event_groups.c ****         }
 794:FreeRTOS/Src/event_groups.c ****         else
 795:FreeRTOS/Src/event_groups.c ****         {
 796:FreeRTOS/Src/event_groups.c ****             /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 797:FreeRTOS/Src/event_groups.c ****              * Are they set already? */
 798:FreeRTOS/Src/event_groups.c ****             if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  47              		.loc 1 798 13 is_stmt 1 view .LVU8
  48              		.loc 1 798 15 is_stmt 0 view .LVU9
  49 000a 8143     		bics	r1, r1, r0
  50              	.LVL3:
  51              		.loc 1 798 15 view .LVU10
  52 000c 03D0     		beq	.L5
 779:FreeRTOS/Src/event_groups.c **** 
  53              		.loc 1 779 20 view .LVU11
  54 000e 0020     		movs	r0, #0
  55              	.LVL4:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 16


 779:FreeRTOS/Src/event_groups.c **** 
  56              		.loc 1 779 20 view .LVU12
  57 0010 7047     		bx	lr
  58              	.LVL5:
  59              	.L4:
 787:FreeRTOS/Src/event_groups.c ****             }
  60              		.loc 1 787 35 view .LVU13
  61 0012 0120     		movs	r0, #1
  62              	.LVL6:
 787:FreeRTOS/Src/event_groups.c ****             }
  63              		.loc 1 787 35 view .LVU14
  64 0014 7047     		bx	lr
  65              	.LVL7:
  66              	.L5:
 799:FreeRTOS/Src/event_groups.c ****             {
 800:FreeRTOS/Src/event_groups.c ****                 xWaitConditionMet = pdTRUE;
  67              		.loc 1 800 35 view .LVU15
  68 0016 0120     		movs	r0, #1
  69              	.LVL8:
 801:FreeRTOS/Src/event_groups.c ****             }
 802:FreeRTOS/Src/event_groups.c ****             else
 803:FreeRTOS/Src/event_groups.c ****             {
 804:FreeRTOS/Src/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
  70              		.loc 1 804 41 is_stmt 1 view .LVU16
 805:FreeRTOS/Src/event_groups.c ****             }
 806:FreeRTOS/Src/event_groups.c ****         }
 807:FreeRTOS/Src/event_groups.c **** 
 808:FreeRTOS/Src/event_groups.c ****         return xWaitConditionMet;
  71              		.loc 1 808 9 view .LVU17
 809:FreeRTOS/Src/event_groups.c ****     }
  72              		.loc 1 809 5 is_stmt 0 view .LVU18
  73 0018 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE137:
  77              		.section	.text.xEventGroupCreate,"ax",%progbits
  78              		.align	1
  79              		.global	xEventGroupCreate
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	xEventGroupCreate:
  85              	.LFB128:
 146:FreeRTOS/Src/event_groups.c ****             EventGroup_t * pxEventBits;
  86              		.loc 1 146 9 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 10B5     		push	{r4, lr}
  91              	.LCFI0:
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 4, -8
  94              		.cfi_offset 14, -4
 147:FreeRTOS/Src/event_groups.c **** 
  95              		.loc 1 147 13 view .LVU20
 149:FreeRTOS/Src/event_groups.c **** 
  96              		.loc 1 149 43 view .LVU21
 154:FreeRTOS/Src/event_groups.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 17


  97              		.loc 1 154 13 view .LVU22
 154:FreeRTOS/Src/event_groups.c **** 
  98              		.loc 1 154 46 is_stmt 0 view .LVU23
  99 0002 1820     		movs	r0, #24
 100 0004 FFF7FEFF 		bl	pvPortMalloc
 101              	.LVL9:
 156:FreeRTOS/Src/event_groups.c ****             {
 102              		.loc 1 156 13 is_stmt 1 view .LVU24
 156:FreeRTOS/Src/event_groups.c ****             {
 103              		.loc 1 156 15 is_stmt 0 view .LVU25
 104 0008 0446     		mov	r4, r0
 105 000a 20B1     		cbz	r0, .L6
 158:FreeRTOS/Src/event_groups.c ****                 vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 106              		.loc 1 158 17 is_stmt 1 view .LVU26
 158:FreeRTOS/Src/event_groups.c ****                 vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 107              		.loc 1 158 42 is_stmt 0 view .LVU27
 108 000c 0023     		movs	r3, #0
 109 000e 40F8043B 		str	r3, [r0], #4
 110              	.LVL10:
 159:FreeRTOS/Src/event_groups.c **** 
 111              		.loc 1 159 17 is_stmt 1 view .LVU28
 112 0012 FFF7FEFF 		bl	vListInitialise
 113              	.LVL11:
 170:FreeRTOS/Src/event_groups.c ****             }
 114              		.loc 1 170 55 view .LVU29
 174:FreeRTOS/Src/event_groups.c ****             }
 115              		.loc 1 174 49 view .LVU30
 177:FreeRTOS/Src/event_groups.c **** 
 116              		.loc 1 177 57 view .LVU31
 179:FreeRTOS/Src/event_groups.c ****         }
 117              		.loc 1 179 13 view .LVU32
 118              	.L6:
 180:FreeRTOS/Src/event_groups.c **** 
 119              		.loc 1 180 9 is_stmt 0 view .LVU33
 120 0016 2046     		mov	r0, r4
 121 0018 10BD     		pop	{r4, pc}
 180:FreeRTOS/Src/event_groups.c **** 
 122              		.loc 1 180 9 view .LVU34
 123              		.cfi_endproc
 124              	.LFE128:
 126              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 127              		.align	1
 128              		.global	xEventGroupWaitBits
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 133              	xEventGroupWaitBits:
 134              	.LVL12:
 135              	.LFB130:
 317:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 136              		.loc 1 317 5 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 4, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 317:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 140              		.loc 1 317 5 is_stmt 0 view .LVU36
 141 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 18


 142              	.LCFI1:
 143              		.cfi_def_cfa_offset 32
 144              		.cfi_offset 3, -32
 145              		.cfi_offset 4, -28
 146              		.cfi_offset 5, -24
 147              		.cfi_offset 6, -20
 148              		.cfi_offset 7, -16
 149              		.cfi_offset 8, -12
 150              		.cfi_offset 9, -8
 151              		.cfi_offset 14, -4
 152 0004 0646     		mov	r6, r0
 153 0006 0D46     		mov	r5, r1
 154 0008 9046     		mov	r8, r2
 155 000a 1F46     		mov	r7, r3
 156 000c DDF82090 		ldr	r9, [sp, #32]
 318:FreeRTOS/Src/event_groups.c ****         EventBits_t uxReturn, uxControlBits = 0;
 157              		.loc 1 318 9 is_stmt 1 view .LVU37
 158              	.LVL13:
 319:FreeRTOS/Src/event_groups.c ****         BaseType_t xWaitConditionMet, xAlreadyYielded;
 159              		.loc 1 319 9 view .LVU38
 320:FreeRTOS/Src/event_groups.c ****         BaseType_t xTimeoutOccurred = pdFALSE;
 160              		.loc 1 320 9 view .LVU39
 321:FreeRTOS/Src/event_groups.c **** 
 161              		.loc 1 321 9 view .LVU40
 323:FreeRTOS/Src/event_groups.c **** 
 162              		.loc 1 323 116 view .LVU41
 327:FreeRTOS/Src/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 163              		.loc 1 327 36 view .LVU42
 328:FreeRTOS/Src/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 164              		.loc 1 328 81 view .LVU43
 329:FreeRTOS/Src/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 165              		.loc 1 329 45 view .LVU44
 332:FreeRTOS/Src/event_groups.c ****         }
 166              		.loc 1 332 114 view .LVU45
 336:FreeRTOS/Src/event_groups.c ****         {
 167              		.loc 1 336 9 view .LVU46
 168 0010 FFF7FEFF 		bl	vTaskSuspendAll
 169              	.LVL14:
 170              	.LBB6:
 338:FreeRTOS/Src/event_groups.c **** 
 171              		.loc 1 338 13 view .LVU47
 338:FreeRTOS/Src/event_groups.c **** 
 172              		.loc 1 338 31 is_stmt 0 view .LVU48
 173 0014 3468     		ldr	r4, [r6]
 174              	.LVL15:
 341:FreeRTOS/Src/event_groups.c **** 
 175              		.loc 1 341 13 is_stmt 1 view .LVU49
 341:FreeRTOS/Src/event_groups.c **** 
 176              		.loc 1 341 33 is_stmt 0 view .LVU50
 177 0016 3A46     		mov	r2, r7
 178 0018 2946     		mov	r1, r5
 179 001a 2046     		mov	r0, r4
 180 001c FFF7FEFF 		bl	prvTestWaitCondition
 181              	.LVL16:
 343:FreeRTOS/Src/event_groups.c ****             {
 182              		.loc 1 343 13 is_stmt 1 view .LVU51
 343:FreeRTOS/Src/event_groups.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 19


 183              		.loc 1 343 15 is_stmt 0 view .LVU52
 184 0020 10B3     		cbz	r0, .L10
 347:FreeRTOS/Src/event_groups.c ****                 xTicksToWait = ( TickType_t ) 0;
 185              		.loc 1 347 17 is_stmt 1 view .LVU53
 186              	.LVL17:
 348:FreeRTOS/Src/event_groups.c **** 
 187              		.loc 1 348 17 view .LVU54
 351:FreeRTOS/Src/event_groups.c ****                 {
 188              		.loc 1 351 17 view .LVU55
 351:FreeRTOS/Src/event_groups.c ****                 {
 189              		.loc 1 351 19 is_stmt 0 view .LVU56
 190 0022 B8F1000F 		cmp	r8, #0
 191 0026 33D0     		beq	.L18
 353:FreeRTOS/Src/event_groups.c ****                 }
 192              		.loc 1 353 21 is_stmt 1 view .LVU57
 353:FreeRTOS/Src/event_groups.c ****                 }
 193              		.loc 1 353 46 is_stmt 0 view .LVU58
 194 0028 24EA0503 		bic	r3, r4, r5
 195 002c 3360     		str	r3, [r6]
 348:FreeRTOS/Src/event_groups.c **** 
 196              		.loc 1 348 30 view .LVU59
 197 002e 4FF00009 		mov	r9, #0
 198              	.LVL18:
 199              	.L11:
 401:FreeRTOS/Src/event_groups.c ****             }
 200              		.loc 1 401 81 is_stmt 1 view .LVU60
 201              	.LBE6:
 404:FreeRTOS/Src/event_groups.c **** 
 202              		.loc 1 404 9 view .LVU61
 404:FreeRTOS/Src/event_groups.c **** 
 203              		.loc 1 404 27 is_stmt 0 view .LVU62
 204 0032 FFF7FEFF 		bl	xTaskResumeAll
 205              	.LVL19:
 406:FreeRTOS/Src/event_groups.c ****         {
 206              		.loc 1 406 9 is_stmt 1 view .LVU63
 406:FreeRTOS/Src/event_groups.c ****         {
 207              		.loc 1 406 11 is_stmt 0 view .LVU64
 208 0036 B9F1000F 		cmp	r9, #0
 209 003a 12D0     		beq	.L9
 408:FreeRTOS/Src/event_groups.c ****             {
 210              		.loc 1 408 13 is_stmt 1 view .LVU65
 408:FreeRTOS/Src/event_groups.c ****             {
 211              		.loc 1 408 15 is_stmt 0 view .LVU66
 212 003c 48B9     		cbnz	r0, .L15
 410:FreeRTOS/Src/event_groups.c ****             }
 213              		.loc 1 410 17 is_stmt 1 view .LVU67
 214 003e 4FF0E023 		mov	r3, #-536813568
 215 0042 4FF08052 		mov	r2, #268435456
 216 0046 C3F8042D 		str	r2, [r3, #3332]
 410:FreeRTOS/Src/event_groups.c ****             }
 217              		.loc 1 410 17 view .LVU68
 218              		.syntax unified
 219              	@ 410 "FreeRTOS/Src/event_groups.c" 1
 220 004a BFF34F8F 		dsb
 221              	@ 0 "" 2
 410:FreeRTOS/Src/event_groups.c ****             }
 222              		.loc 1 410 17 view .LVU69
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 20


 223              	@ 410 "FreeRTOS/Src/event_groups.c" 1
 224 004e BFF36F8F 		isb
 225              	@ 0 "" 2
 410:FreeRTOS/Src/event_groups.c ****             }
 226              		.loc 1 410 39 view .LVU70
 227              		.thumb
 228              		.syntax unified
 229              	.L15:
 414:FreeRTOS/Src/event_groups.c ****             }
 230              		.loc 1 414 41 view .LVU71
 421:FreeRTOS/Src/event_groups.c **** 
 231              		.loc 1 421 13 view .LVU72
 421:FreeRTOS/Src/event_groups.c **** 
 232              		.loc 1 421 24 is_stmt 0 view .LVU73
 233 0052 FFF7FEFF 		bl	uxTaskResetEventItemValue
 234              	.LVL20:
 421:FreeRTOS/Src/event_groups.c **** 
 235              		.loc 1 421 24 view .LVU74
 236 0056 0446     		mov	r4, r0
 237              	.LVL21:
 423:FreeRTOS/Src/event_groups.c ****             {
 238              		.loc 1 423 13 is_stmt 1 view .LVU75
 423:FreeRTOS/Src/event_groups.c ****             {
 239              		.loc 1 423 15 is_stmt 0 view .LVU76
 240 0058 10F0007F 		tst	r0, #33554432
 241 005c 1BD0     		beq	.L21
 242              	.LVL22:
 243              	.L16:
 455:FreeRTOS/Src/event_groups.c **** 
 244              		.loc 1 455 13 is_stmt 1 view .LVU77
 458:FreeRTOS/Src/event_groups.c ****         }
 245              		.loc 1 458 13 view .LVU78
 458:FreeRTOS/Src/event_groups.c ****         }
 246              		.loc 1 458 22 is_stmt 0 view .LVU79
 247 005e 24F07F44 		bic	r4, r4, #-16777216
 248              	.LVL23:
 461:FreeRTOS/Src/event_groups.c **** 
 249              		.loc 1 461 9 is_stmt 1 view .LVU80
 464:FreeRTOS/Src/event_groups.c **** 
 250              		.loc 1 464 9 view .LVU81
 466:FreeRTOS/Src/event_groups.c **** 
 251              		.loc 1 466 52 view .LVU82
 468:FreeRTOS/Src/event_groups.c ****     }
 252              		.loc 1 468 9 view .LVU83
 253              	.L9:
 469:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 254              		.loc 1 469 5 is_stmt 0 view .LVU84
 255 0062 2046     		mov	r0, r4
 256 0064 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 257              	.LVL24:
 258              	.L10:
 259              	.LBB7:
 360:FreeRTOS/Src/event_groups.c ****             {
 260              		.loc 1 360 18 is_stmt 1 view .LVU85
 360:FreeRTOS/Src/event_groups.c ****             {
 261              		.loc 1 360 20 is_stmt 0 view .LVU86
 262 0068 B9F1000F 		cmp	r9, #0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 21


 263 006c E1D0     		beq	.L11
 373:FreeRTOS/Src/event_groups.c ****                 {
 264              		.loc 1 373 17 is_stmt 1 view .LVU87
 373:FreeRTOS/Src/event_groups.c ****                 {
 265              		.loc 1 373 19 is_stmt 0 view .LVU88
 266 006e B8F1000F 		cmp	r8, #0
 267 0072 0AD1     		bne	.L19
 268              	.LBE7:
 319:FreeRTOS/Src/event_groups.c ****         BaseType_t xWaitConditionMet, xAlreadyYielded;
 269              		.loc 1 319 31 view .LVU89
 270 0074 0021     		movs	r1, #0
 271              	.L12:
 272              	.LVL25:
 273              	.LBB8:
 379:FreeRTOS/Src/event_groups.c ****                 }
 274              		.loc 1 379 45 is_stmt 1 view .LVU90
 382:FreeRTOS/Src/event_groups.c ****                 {
 275              		.loc 1 382 17 view .LVU91
 382:FreeRTOS/Src/event_groups.c ****                 {
 276              		.loc 1 382 19 is_stmt 0 view .LVU92
 277 0076 0FB1     		cbz	r7, .L13
 384:FreeRTOS/Src/event_groups.c ****                 }
 278              		.loc 1 384 21 is_stmt 1 view .LVU93
 384:FreeRTOS/Src/event_groups.c ****                 }
 279              		.loc 1 384 35 is_stmt 0 view .LVU94
 280 0078 41F08061 		orr	r1, r1, #67108864
 281              	.LVL26:
 282              	.L13:
 388:FreeRTOS/Src/event_groups.c ****                 }
 283              		.loc 1 388 45 is_stmt 1 view .LVU95
 394:FreeRTOS/Src/event_groups.c **** 
 284              		.loc 1 394 17 view .LVU96
 285 007c 4A46     		mov	r2, r9
 286 007e 2943     		orrs	r1, r1, r5
 287              	.LVL27:
 394:FreeRTOS/Src/event_groups.c **** 
 288              		.loc 1 394 17 is_stmt 0 view .LVU97
 289 0080 301D     		adds	r0, r6, #4
 290              	.LVL28:
 394:FreeRTOS/Src/event_groups.c **** 
 291              		.loc 1 394 17 view .LVU98
 292 0082 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 293              	.LVL29:
 399:FreeRTOS/Src/event_groups.c **** 
 294              		.loc 1 399 17 is_stmt 1 view .LVU99
 399:FreeRTOS/Src/event_groups.c **** 
 295              		.loc 1 399 26 is_stmt 0 view .LVU100
 296 0086 0024     		movs	r4, #0
 297              	.LVL30:
 399:FreeRTOS/Src/event_groups.c **** 
 298              		.loc 1 399 26 view .LVU101
 299 0088 D3E7     		b	.L11
 300              	.LVL31:
 301              	.L19:
 375:FreeRTOS/Src/event_groups.c ****                 }
 302              		.loc 1 375 35 view .LVU102
 303 008a 4FF08071 		mov	r1, #16777216
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 22


 304 008e F2E7     		b	.L12
 305              	.LVL32:
 306              	.L18:
 348:FreeRTOS/Src/event_groups.c **** 
 307              		.loc 1 348 30 view .LVU103
 308 0090 4FF00009 		mov	r9, #0
 309 0094 CDE7     		b	.L11
 310              	.LVL33:
 311              	.L21:
 348:FreeRTOS/Src/event_groups.c **** 
 312              		.loc 1 348 30 view .LVU104
 313              	.LBE8:
 425:FreeRTOS/Src/event_groups.c ****                 {
 314              		.loc 1 425 17 is_stmt 1 view .LVU105
 315 0096 FFF7FEFF 		bl	vPortEnterCritical
 316              	.LVL34:
 428:FreeRTOS/Src/event_groups.c **** 
 317              		.loc 1 428 21 view .LVU106
 428:FreeRTOS/Src/event_groups.c **** 
 318              		.loc 1 428 30 is_stmt 0 view .LVU107
 319 009a 3468     		ldr	r4, [r6]
 320              	.LVL35:
 432:FreeRTOS/Src/event_groups.c ****                     {
 321              		.loc 1 432 21 is_stmt 1 view .LVU108
 432:FreeRTOS/Src/event_groups.c ****                     {
 322              		.loc 1 432 25 is_stmt 0 view .LVU109
 323 009c 3A46     		mov	r2, r7
 324 009e 2946     		mov	r1, r5
 325 00a0 2046     		mov	r0, r4
 326 00a2 FFF7FEFF 		bl	prvTestWaitCondition
 327              	.LVL36:
 432:FreeRTOS/Src/event_groups.c ****                     {
 328              		.loc 1 432 23 discriminator 1 view .LVU110
 329 00a6 28B1     		cbz	r0, .L17
 434:FreeRTOS/Src/event_groups.c ****                         {
 330              		.loc 1 434 25 is_stmt 1 view .LVU111
 434:FreeRTOS/Src/event_groups.c ****                         {
 331              		.loc 1 434 27 is_stmt 0 view .LVU112
 332 00a8 B8F1000F 		cmp	r8, #0
 333 00ac 02D0     		beq	.L17
 436:FreeRTOS/Src/event_groups.c ****                         }
 334              		.loc 1 436 29 is_stmt 1 view .LVU113
 436:FreeRTOS/Src/event_groups.c ****                         }
 335              		.loc 1 436 54 is_stmt 0 view .LVU114
 336 00ae 24EA0505 		bic	r5, r4, r5
 337              	.LVL37:
 436:FreeRTOS/Src/event_groups.c ****                         }
 338              		.loc 1 436 54 view .LVU115
 339 00b2 3560     		str	r5, [r6]
 340              	.L17:
 445:FreeRTOS/Src/event_groups.c ****                     }
 341              		.loc 1 445 49 is_stmt 1 view .LVU116
 448:FreeRTOS/Src/event_groups.c ****                 }
 342              		.loc 1 448 21 view .LVU117
 343              	.LVL38:
 450:FreeRTOS/Src/event_groups.c ****             }
 344              		.loc 1 450 17 view .LVU118
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 23


 345 00b4 FFF7FEFF 		bl	vPortExitCritical
 346              	.LVL39:
 347 00b8 D1E7     		b	.L16
 348              		.cfi_endproc
 349              	.LFE130:
 351              		.section	.text.xEventGroupClearBits,"ax",%progbits
 352              		.align	1
 353              		.global	xEventGroupClearBits
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 358              	xEventGroupClearBits:
 359              	.LVL40:
 360              	.LFB131:
 474:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 361              		.loc 1 474 5 view -0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 474:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 365              		.loc 1 474 5 is_stmt 0 view .LVU120
 366 0000 70B5     		push	{r4, r5, r6, lr}
 367              	.LCFI2:
 368              		.cfi_def_cfa_offset 16
 369              		.cfi_offset 4, -16
 370              		.cfi_offset 5, -12
 371              		.cfi_offset 6, -8
 372              		.cfi_offset 14, -4
 373 0002 0546     		mov	r5, r0
 374 0004 0C46     		mov	r4, r1
 475:FreeRTOS/Src/event_groups.c ****         EventBits_t uxReturn;
 375              		.loc 1 475 9 is_stmt 1 view .LVU121
 376              	.LVL41:
 476:FreeRTOS/Src/event_groups.c **** 
 377              		.loc 1 476 9 view .LVU122
 478:FreeRTOS/Src/event_groups.c **** 
 378              		.loc 1 478 70 view .LVU123
 482:FreeRTOS/Src/event_groups.c ****         configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 379              		.loc 1 482 36 view .LVU124
 483:FreeRTOS/Src/event_groups.c **** 
 380              		.loc 1 483 79 view .LVU125
 485:FreeRTOS/Src/event_groups.c ****         {
 381              		.loc 1 485 9 view .LVU126
 382 0006 FFF7FEFF 		bl	vPortEnterCritical
 383              	.LVL42:
 487:FreeRTOS/Src/event_groups.c **** 
 384              		.loc 1 487 70 view .LVU127
 491:FreeRTOS/Src/event_groups.c **** 
 385              		.loc 1 491 13 view .LVU128
 491:FreeRTOS/Src/event_groups.c **** 
 386              		.loc 1 491 22 is_stmt 0 view .LVU129
 387 000a 2E68     		ldr	r6, [r5]
 388              	.LVL43:
 494:FreeRTOS/Src/event_groups.c ****         }
 389              		.loc 1 494 13 is_stmt 1 view .LVU130
 494:FreeRTOS/Src/event_groups.c ****         }
 390              		.loc 1 494 38 is_stmt 0 view .LVU131
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 24


 391 000c 26EA0404 		bic	r4, r6, r4
 392              	.LVL44:
 494:FreeRTOS/Src/event_groups.c ****         }
 393              		.loc 1 494 38 view .LVU132
 394 0010 2C60     		str	r4, [r5]
 496:FreeRTOS/Src/event_groups.c **** 
 395              		.loc 1 496 9 is_stmt 1 view .LVU133
 396 0012 FFF7FEFF 		bl	vPortExitCritical
 397              	.LVL45:
 498:FreeRTOS/Src/event_groups.c **** 
 398              		.loc 1 498 53 view .LVU134
 500:FreeRTOS/Src/event_groups.c ****     }
 399              		.loc 1 500 9 view .LVU135
 501:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 400              		.loc 1 501 5 is_stmt 0 view .LVU136
 401 0016 3046     		mov	r0, r6
 402 0018 70BD     		pop	{r4, r5, r6, pc}
 501:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 403              		.loc 1 501 5 view .LVU137
 404              		.cfi_endproc
 405              	.LFE131:
 407              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 408              		.align	1
 409              		.global	xEventGroupGetBitsFromISR
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 414              	xEventGroupGetBitsFromISR:
 415              	.LVL46:
 416              	.LFB132:
 525:FreeRTOS/Src/event_groups.c ****         UBaseType_t uxSavedInterruptStatus;
 417              		.loc 1 525 5 is_stmt 1 view -0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 526:FreeRTOS/Src/event_groups.c ****         EventGroup_t const * const pxEventBits = xEventGroup;
 422              		.loc 1 526 9 view .LVU139
 527:FreeRTOS/Src/event_groups.c ****         EventBits_t uxReturn;
 423              		.loc 1 527 9 view .LVU140
 528:FreeRTOS/Src/event_groups.c **** 
 424              		.loc 1 528 9 view .LVU141
 530:FreeRTOS/Src/event_groups.c **** 
 425              		.loc 1 530 60 view .LVU142
 535:FreeRTOS/Src/event_groups.c ****         {
 426              		.loc 1 535 9 view .LVU143
 427              	.LBB9:
 428              	.LBI9:
 429              		.file 2 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 25


   9:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  32:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-OFF* */
  34:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  35:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern "C" {
  36:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  37:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-ON* */
  38:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  40:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  41:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  44:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  45:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  46:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  47:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  48:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  49:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  50:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR          char
  51:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT         float
  52:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE        double
  53:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG          long
  54:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT         short
  55:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE    uint32_t
  56:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE     long
  57:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  58:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE   StackType_t;
  59:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef long             BaseType_t;
  60:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long    UBaseType_t;
  61:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  62:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint16_t     TickType_t;
  64:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 26


  66:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint32_t     TickType_t;
  67:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  69:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  71:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_TYPE_IS_ATOMIC    1
  72:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
  73:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint64_t TickType_t;
  74:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffffffffffULL
  75:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #else /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  76:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  77:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  78:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  81:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH      ( -1 )
  82:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  83:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT    8
  84:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDONT_DISCARD      __attribute__( ( used ) )
  85:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  86:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  87:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  88:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD()                                     \
  89:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  90:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  91:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  92:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  93:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  94:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  95:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  96:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  97:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  98:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  99:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
 100:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
 101:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) \
 102:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     do                                           \
 103:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                            \
 104:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( xSwitchRequired != pdFALSE )         \
 105:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 106:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT_TO_SCHEDULER();        \
 107:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             portYIELD();                         \
 108:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 109:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else                                     \
 110:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 111:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT();                     \
 112:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 113:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     } while( 0 )
 114:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x )    portEND_SWITCHING_ISR( x )
 115:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 118:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 119:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 120:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 121:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 122:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 27


 123:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 124:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()                      vPortEnterCritical()
 125:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()                       vPortExitCritical()
 126:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 128:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 130:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 131:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 132:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParameters )
 133:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParameters )
 134:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 138:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 139:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xExpec
 140:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 141:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 142:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 144:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 145:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 146:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 147:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 149:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 151:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBi
 152:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 153:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint8_t ucReturn;
 154:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 156:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ucReturn;
 158:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 159:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 161:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configMAX_PRIORITIES > 32 )
 162:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITI
 163:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 164:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 166:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities ) |= 
 167:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities ) &= 
 168:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 31UL 
 172:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 174:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 175:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 176:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 178:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     void vPortValidateInterruptPriority( void );
 179:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 28


 180:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 181:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 182:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 183:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 184:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE              __inline
 186:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 187:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 188:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 189:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 190:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 192:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulCurrentInterrupt;
 194:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     BaseType_t xReturn;
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 196:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     /* Obtain the number of the currently executing interrupt. */
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 198:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 199:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     if( ulCurrentInterrupt == 0 )
 200:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 201:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdFALSE;
 202:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 203:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     else
 204:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 205:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdTRUE;
 206:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 207:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     return xReturn;
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 210:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 212:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 214:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulNewBASEPRI;
 216:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 217:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 218:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 219:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %0, %1                                              \n" \
 220:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %0                                         \n" \
 221:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 222:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 223:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 224:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     );
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 226:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 430              		.loc 2 229 34 view .LVU144
 431              	.LBB10:
 230:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 432              		.loc 2 231 5 view .LVU145
 232:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 29


 433              		.loc 2 233 5 view .LVU146
 434              		.syntax unified
 435              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 436 0000 EFF31183 		   mrs r3, basepri                                         
 437 0004 4FF05002 	   mov r2, #80                                              
 438 0008 82F31188 	   msr basepri, r2                                         
 439 000c BFF36F8F 	   isb                                                     
 440 0010 BFF34F8F 	   dsb                                                     
 441              	
 442              	@ 0 "" 2
 443              	.LVL47:
 234:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 235:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mrs %0, basepri                                         \n" \
 236:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %1, %2                                              \n" \
 237:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %1                                         \n" \
 238:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 239:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 240:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRI
 241:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     );
 242:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 243:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     /* This return will not be reached but is necessary to prevent compiler
 244:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      * warnings. */
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     return ulOriginalBASEPRI;
 444              		.loc 2 245 5 view .LVU147
 445              		.loc 2 245 5 is_stmt 0 view .LVU148
 446              		.thumb
 447              		.syntax unified
 448              	.LBE10:
 449              	.LBE9:
 537:FreeRTOS/Src/event_groups.c ****         }
 450              		.loc 1 537 13 is_stmt 1 view .LVU149
 537:FreeRTOS/Src/event_groups.c ****         }
 451              		.loc 1 537 22 is_stmt 0 view .LVU150
 452 0014 0068     		ldr	r0, [r0]
 453              	.LVL48:
 539:FreeRTOS/Src/event_groups.c **** 
 454              		.loc 1 539 9 is_stmt 1 view .LVU151
 455              	.LBB11:
 456              	.LBI11:
 246:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 247:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 457              		.loc 2 249 30 view .LVU152
 458              	.LBB12:
 250:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 459              		.loc 2 251 5 view .LVU153
 460              		.syntax unified
 461              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 462 0016 83F31188 		   msr basepri, r3 
 463              	@ 0 "" 2
 464              	.LVL49:
 465              		.loc 2 251 5 is_stmt 0 view .LVU154
 466              		.thumb
 467              		.syntax unified
 468              	.LBE12:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 30


 469              	.LBE11:
 541:FreeRTOS/Src/event_groups.c **** 
 470              		.loc 1 541 58 is_stmt 1 view .LVU155
 543:FreeRTOS/Src/event_groups.c ****     }
 471              		.loc 1 543 9 view .LVU156
 544:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 472              		.loc 1 544 5 is_stmt 0 view .LVU157
 473 001a 7047     		bx	lr
 474              		.cfi_endproc
 475              	.LFE132:
 477              		.section	.text.xEventGroupSetBits,"ax",%progbits
 478              		.align	1
 479              		.global	xEventGroupSetBits
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 484              	xEventGroupSetBits:
 485              	.LVL50:
 486              	.LFB133:
 549:FreeRTOS/Src/event_groups.c ****         ListItem_t * pxListItem;
 487              		.loc 1 549 5 is_stmt 1 view -0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 549:FreeRTOS/Src/event_groups.c ****         ListItem_t * pxListItem;
 491              		.loc 1 549 5 is_stmt 0 view .LVU159
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              	.LCFI3:
 494              		.cfi_def_cfa_offset 24
 495              		.cfi_offset 3, -24
 496              		.cfi_offset 4, -20
 497              		.cfi_offset 5, -16
 498              		.cfi_offset 6, -12
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 0446     		mov	r4, r0
 502 0004 0D46     		mov	r5, r1
 550:FreeRTOS/Src/event_groups.c ****         ListItem_t * pxNext;
 503              		.loc 1 550 9 is_stmt 1 view .LVU160
 551:FreeRTOS/Src/event_groups.c ****         ListItem_t const * pxListEnd;
 504              		.loc 1 551 9 view .LVU161
 552:FreeRTOS/Src/event_groups.c ****         List_t const * pxList;
 505              		.loc 1 552 9 view .LVU162
 553:FreeRTOS/Src/event_groups.c ****         EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 506              		.loc 1 553 9 view .LVU163
 554:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 507              		.loc 1 554 9 view .LVU164
 508              	.LVL51:
 555:FreeRTOS/Src/event_groups.c ****         BaseType_t xMatchFound = pdFALSE;
 509              		.loc 1 555 9 view .LVU165
 556:FreeRTOS/Src/event_groups.c **** 
 510              		.loc 1 556 9 view .LVU166
 558:FreeRTOS/Src/event_groups.c **** 
 511              		.loc 1 558 66 view .LVU167
 562:FreeRTOS/Src/event_groups.c ****         configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 512              		.loc 1 562 36 view .LVU168
 563:FreeRTOS/Src/event_groups.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 31


 513              		.loc 1 563 77 view .LVU169
 565:FreeRTOS/Src/event_groups.c ****         pxListEnd = listGET_END_MARKER( pxList );
 514              		.loc 1 565 9 view .LVU170
 566:FreeRTOS/Src/event_groups.c ****         vTaskSuspendAll();
 515              		.loc 1 566 9 view .LVU171
 566:FreeRTOS/Src/event_groups.c ****         vTaskSuspendAll();
 516              		.loc 1 566 19 is_stmt 0 view .LVU172
 517 0006 00F10C06 		add	r6, r0, #12
 518              	.LVL52:
 567:FreeRTOS/Src/event_groups.c ****         {
 519              		.loc 1 567 9 is_stmt 1 view .LVU173
 520 000a FFF7FEFF 		bl	vTaskSuspendAll
 521              	.LVL53:
 569:FreeRTOS/Src/event_groups.c **** 
 522              		.loc 1 569 66 view .LVU174
 571:FreeRTOS/Src/event_groups.c **** 
 523              		.loc 1 571 13 view .LVU175
 571:FreeRTOS/Src/event_groups.c **** 
 524              		.loc 1 571 24 is_stmt 0 view .LVU176
 525 000e 2069     		ldr	r0, [r4, #16]
 526              	.LVL54:
 574:FreeRTOS/Src/event_groups.c **** 
 527              		.loc 1 574 13 is_stmt 1 view .LVU177
 574:FreeRTOS/Src/event_groups.c **** 
 528              		.loc 1 574 24 is_stmt 0 view .LVU178
 529 0010 2368     		ldr	r3, [r4]
 574:FreeRTOS/Src/event_groups.c **** 
 530              		.loc 1 574 38 view .LVU179
 531 0012 2B43     		orrs	r3, r3, r5
 532 0014 2360     		str	r3, [r4]
 577:FreeRTOS/Src/event_groups.c ****             {
 533              		.loc 1 577 13 is_stmt 1 view .LVU180
 554:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 534              		.loc 1 554 21 is_stmt 0 view .LVU181
 535 0016 0027     		movs	r7, #0
 577:FreeRTOS/Src/event_groups.c ****             {
 536              		.loc 1 577 18 view .LVU182
 537 0018 0AE0     		b	.L26
 538              	.LVL55:
 539              	.L27:
 599:FreeRTOS/Src/event_groups.c ****                 {
 540              		.loc 1 599 22 is_stmt 1 view .LVU183
 599:FreeRTOS/Src/event_groups.c ****                 {
 541              		.loc 1 599 57 is_stmt 0 view .LVU184
 542 001a 2168     		ldr	r1, [r4]
 599:FreeRTOS/Src/event_groups.c ****                 {
 543              		.loc 1 599 24 view .LVU185
 544 001c 32EA0101 		bics	r1, r2, r1
 545 0020 05D1     		bne	.L29
 599:FreeRTOS/Src/event_groups.c ****                 {
 546              		.loc 1 599 24 view .LVU186
 547 0022 11E0     		b	.L28
 548              	.LVL56:
 549              	.L30:
 618:FreeRTOS/Src/event_groups.c ****                     }
 550              		.loc 1 618 49 is_stmt 1 view .LVU187
 626:FreeRTOS/Src/event_groups.c ****                 }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 32


 551              		.loc 1 626 21 view .LVU188
 626:FreeRTOS/Src/event_groups.c ****                 }
 552              		.loc 1 626 79 is_stmt 0 view .LVU189
 553 0024 2168     		ldr	r1, [r4]
 626:FreeRTOS/Src/event_groups.c ****                 }
 554              		.loc 1 626 21 view .LVU190
 555 0026 41F00071 		orr	r1, r1, #33554432
 556 002a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 557              	.LVL57:
 558              	.L29:
 549:FreeRTOS/Src/event_groups.c ****         ListItem_t * pxListItem;
 559              		.loc 1 549 5 view .LVU191
 560 002e 2846     		mov	r0, r5
 561              	.LVL58:
 562              	.L26:
 577:FreeRTOS/Src/event_groups.c ****             {
 563              		.loc 1 577 31 is_stmt 1 view .LVU192
 564 0030 B042     		cmp	r0, r6
 565 0032 0ED0     		beq	.L33
 579:FreeRTOS/Src/event_groups.c ****                 uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 566              		.loc 1 579 17 view .LVU193
 579:FreeRTOS/Src/event_groups.c ****                 uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 567              		.loc 1 579 24 is_stmt 0 view .LVU194
 568 0034 4568     		ldr	r5, [r0, #4]
 569              	.LVL59:
 580:FreeRTOS/Src/event_groups.c ****                 xMatchFound = pdFALSE;
 570              		.loc 1 580 17 is_stmt 1 view .LVU195
 580:FreeRTOS/Src/event_groups.c ****                 xMatchFound = pdFALSE;
 571              		.loc 1 580 33 is_stmt 0 view .LVU196
 572 0036 0368     		ldr	r3, [r0]
 573              	.LVL60:
 581:FreeRTOS/Src/event_groups.c **** 
 574              		.loc 1 581 17 is_stmt 1 view .LVU197
 584:FreeRTOS/Src/event_groups.c ****                 uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 575              		.loc 1 584 17 view .LVU198
 585:FreeRTOS/Src/event_groups.c **** 
 576              		.loc 1 585 17 view .LVU199
 585:FreeRTOS/Src/event_groups.c **** 
 577              		.loc 1 585 33 is_stmt 0 view .LVU200
 578 0038 23F07F42 		bic	r2, r3, #-16777216
 579              	.LVL61:
 587:FreeRTOS/Src/event_groups.c ****                 {
 580              		.loc 1 587 17 is_stmt 1 view .LVU201
 587:FreeRTOS/Src/event_groups.c ****                 {
 581              		.loc 1 587 19 is_stmt 0 view .LVU202
 582 003c 13F0806F 		tst	r3, #67108864
 583 0040 EBD1     		bne	.L27
 590:FreeRTOS/Src/event_groups.c ****                     {
 584              		.loc 1 590 21 is_stmt 1 view .LVU203
 590:FreeRTOS/Src/event_groups.c ****                     {
 585              		.loc 1 590 56 is_stmt 0 view .LVU204
 586 0042 2168     		ldr	r1, [r4]
 590:FreeRTOS/Src/event_groups.c ****                     {
 587              		.loc 1 590 23 view .LVU205
 588 0044 1142     		tst	r1, r2
 589 0046 F2D0     		beq	.L29
 590              	.L28:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 33


 591              	.LVL62:
 612:FreeRTOS/Src/event_groups.c ****                     {
 592              		.loc 1 612 21 is_stmt 1 view .LVU206
 612:FreeRTOS/Src/event_groups.c ****                     {
 593              		.loc 1 612 23 is_stmt 0 view .LVU207
 594 0048 13F0807F 		tst	r3, #16777216
 595 004c EAD0     		beq	.L30
 614:FreeRTOS/Src/event_groups.c ****                     }
 596              		.loc 1 614 25 is_stmt 1 view .LVU208
 614:FreeRTOS/Src/event_groups.c ****                     }
 597              		.loc 1 614 39 is_stmt 0 view .LVU209
 598 004e 1743     		orrs	r7, r7, r2
 599              	.LVL63:
 614:FreeRTOS/Src/event_groups.c ****                     }
 600              		.loc 1 614 39 view .LVU210
 601 0050 E8E7     		b	.L30
 602              	.LVL64:
 603              	.L33:
 637:FreeRTOS/Src/event_groups.c ****         }
 604              		.loc 1 637 13 is_stmt 1 view .LVU211
 637:FreeRTOS/Src/event_groups.c ****         }
 605              		.loc 1 637 24 is_stmt 0 view .LVU212
 606 0052 2368     		ldr	r3, [r4]
 637:FreeRTOS/Src/event_groups.c ****         }
 607              		.loc 1 637 38 view .LVU213
 608 0054 23EA0703 		bic	r3, r3, r7
 609 0058 2360     		str	r3, [r4]
 639:FreeRTOS/Src/event_groups.c **** 
 610              		.loc 1 639 9 is_stmt 1 view .LVU214
 639:FreeRTOS/Src/event_groups.c **** 
 611              		.loc 1 639 18 is_stmt 0 view .LVU215
 612 005a FFF7FEFF 		bl	xTaskResumeAll
 613              	.LVL65:
 641:FreeRTOS/Src/event_groups.c **** 
 614              		.loc 1 641 67 is_stmt 1 view .LVU216
 643:FreeRTOS/Src/event_groups.c ****     }
 615              		.loc 1 643 9 view .LVU217
 644:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 616              		.loc 1 644 5 is_stmt 0 view .LVU218
 617 005e 2068     		ldr	r0, [r4]
 618 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 644:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 619              		.loc 1 644 5 view .LVU219
 620              		.cfi_endproc
 621              	.LFE133:
 623              		.section	.text.xEventGroupSync,"ax",%progbits
 624              		.align	1
 625              		.global	xEventGroupSync
 626              		.syntax unified
 627              		.thumb
 628              		.thumb_func
 630              	xEventGroupSync:
 631              	.LVL66:
 632              	.LFB129:
 189:FreeRTOS/Src/event_groups.c ****         EventBits_t uxOriginalBitValue, uxReturn;
 633              		.loc 1 189 5 is_stmt 1 view -0
 634              		.cfi_startproc
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 34


 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 0, uses_anonymous_args = 0
 189:FreeRTOS/Src/event_groups.c ****         EventBits_t uxOriginalBitValue, uxReturn;
 637              		.loc 1 189 5 is_stmt 0 view .LVU221
 638 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 639              	.LCFI4:
 640              		.cfi_def_cfa_offset 24
 641              		.cfi_offset 4, -24
 642              		.cfi_offset 5, -20
 643              		.cfi_offset 6, -16
 644              		.cfi_offset 7, -12
 645              		.cfi_offset 8, -8
 646              		.cfi_offset 14, -4
 647 0004 0646     		mov	r6, r0
 648 0006 0D46     		mov	r5, r1
 649 0008 1746     		mov	r7, r2
 650 000a 9846     		mov	r8, r3
 190:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 651              		.loc 1 190 9 is_stmt 1 view .LVU222
 191:FreeRTOS/Src/event_groups.c ****         BaseType_t xAlreadyYielded;
 652              		.loc 1 191 9 view .LVU223
 653              	.LVL67:
 192:FreeRTOS/Src/event_groups.c ****         BaseType_t xTimeoutOccurred = pdFALSE;
 654              		.loc 1 192 9 view .LVU224
 193:FreeRTOS/Src/event_groups.c **** 
 655              		.loc 1 193 9 view .LVU225
 195:FreeRTOS/Src/event_groups.c **** 
 656              		.loc 1 195 94 view .LVU226
 197:FreeRTOS/Src/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 657              		.loc 1 197 81 view .LVU227
 198:FreeRTOS/Src/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 658              		.loc 1 198 45 view .LVU228
 201:FreeRTOS/Src/event_groups.c ****         }
 659              		.loc 1 201 114 view .LVU229
 205:FreeRTOS/Src/event_groups.c ****         {
 660              		.loc 1 205 9 view .LVU230
 661 000c FFF7FEFF 		bl	vTaskSuspendAll
 662              	.LVL68:
 207:FreeRTOS/Src/event_groups.c **** 
 663              		.loc 1 207 13 view .LVU231
 207:FreeRTOS/Src/event_groups.c **** 
 664              		.loc 1 207 32 is_stmt 0 view .LVU232
 665 0010 3468     		ldr	r4, [r6]
 666              	.LVL69:
 209:FreeRTOS/Src/event_groups.c **** 
 667              		.loc 1 209 13 is_stmt 1 view .LVU233
 209:FreeRTOS/Src/event_groups.c **** 
 668              		.loc 1 209 22 is_stmt 0 view .LVU234
 669 0012 2946     		mov	r1, r5
 670 0014 3046     		mov	r0, r6
 671 0016 FFF7FEFF 		bl	xEventGroupSetBits
 672              	.LVL70:
 211:FreeRTOS/Src/event_groups.c ****             {
 673              		.loc 1 211 13 is_stmt 1 view .LVU235
 211:FreeRTOS/Src/event_groups.c ****             {
 674              		.loc 1 211 40 is_stmt 0 view .LVU236
 675 001a 2C43     		orrs	r4, r4, r5
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 35


 676              	.LVL71:
 211:FreeRTOS/Src/event_groups.c ****             {
 677              		.loc 1 211 15 view .LVU237
 678 001c 37EA0403 		bics	r3, r7, r4
 679 0020 1ED0     		beq	.L43
 224:FreeRTOS/Src/event_groups.c ****                 {
 680              		.loc 1 224 17 is_stmt 1 view .LVU238
 224:FreeRTOS/Src/event_groups.c ****                 {
 681              		.loc 1 224 19 is_stmt 0 view .LVU239
 682 0022 B8F1000F 		cmp	r8, #0
 683 0026 22D1     		bne	.L44
 243:FreeRTOS/Src/event_groups.c ****                     xTimeoutOccurred = pdTRUE;
 684              		.loc 1 243 21 is_stmt 1 view .LVU240
 243:FreeRTOS/Src/event_groups.c ****                     xTimeoutOccurred = pdTRUE;
 685              		.loc 1 243 30 is_stmt 0 view .LVU241
 686 0028 3468     		ldr	r4, [r6]
 687              	.LVL72:
 244:FreeRTOS/Src/event_groups.c ****                 }
 688              		.loc 1 244 21 is_stmt 1 view .LVU242
 689              	.L36:
 248:FreeRTOS/Src/event_groups.c **** 
 690              		.loc 1 248 9 view .LVU243
 248:FreeRTOS/Src/event_groups.c **** 
 691              		.loc 1 248 27 is_stmt 0 view .LVU244
 692 002a FFF7FEFF 		bl	xTaskResumeAll
 693              	.LVL73:
 250:FreeRTOS/Src/event_groups.c ****         {
 694              		.loc 1 250 9 is_stmt 1 view .LVU245
 250:FreeRTOS/Src/event_groups.c ****         {
 695              		.loc 1 250 11 is_stmt 0 view .LVU246
 696 002e B8F1000F 		cmp	r8, #0
 697 0032 12D0     		beq	.L34
 252:FreeRTOS/Src/event_groups.c ****             {
 698              		.loc 1 252 13 is_stmt 1 view .LVU247
 252:FreeRTOS/Src/event_groups.c ****             {
 699              		.loc 1 252 15 is_stmt 0 view .LVU248
 700 0034 48B9     		cbnz	r0, .L39
 254:FreeRTOS/Src/event_groups.c ****             }
 701              		.loc 1 254 17 is_stmt 1 view .LVU249
 702 0036 4FF0E023 		mov	r3, #-536813568
 703 003a 4FF08052 		mov	r2, #268435456
 704 003e C3F8042D 		str	r2, [r3, #3332]
 254:FreeRTOS/Src/event_groups.c ****             }
 705              		.loc 1 254 17 view .LVU250
 706              		.syntax unified
 707              	@ 254 "FreeRTOS/Src/event_groups.c" 1
 708 0042 BFF34F8F 		dsb
 709              	@ 0 "" 2
 254:FreeRTOS/Src/event_groups.c ****             }
 710              		.loc 1 254 17 view .LVU251
 711              	@ 254 "FreeRTOS/Src/event_groups.c" 1
 712 0046 BFF36F8F 		isb
 713              	@ 0 "" 2
 254:FreeRTOS/Src/event_groups.c ****             }
 714              		.loc 1 254 39 view .LVU252
 715              		.thumb
 716              		.syntax unified
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 36


 717              	.L39:
 258:FreeRTOS/Src/event_groups.c ****             }
 718              		.loc 1 258 41 view .LVU253
 265:FreeRTOS/Src/event_groups.c **** 
 719              		.loc 1 265 13 view .LVU254
 265:FreeRTOS/Src/event_groups.c **** 
 720              		.loc 1 265 24 is_stmt 0 view .LVU255
 721 004a FFF7FEFF 		bl	uxTaskResetEventItemValue
 722              	.LVL74:
 265:FreeRTOS/Src/event_groups.c **** 
 723              		.loc 1 265 24 view .LVU256
 724 004e 0446     		mov	r4, r0
 725              	.LVL75:
 267:FreeRTOS/Src/event_groups.c ****             {
 726              		.loc 1 267 13 is_stmt 1 view .LVU257
 267:FreeRTOS/Src/event_groups.c ****             {
 727              		.loc 1 267 15 is_stmt 0 view .LVU258
 728 0050 10F0007F 		tst	r0, #33554432
 729 0054 13D0     		beq	.L45
 730              	.LVL76:
 731              	.L40:
 294:FreeRTOS/Src/event_groups.c **** 
 732              		.loc 1 294 13 is_stmt 1 view .LVU259
 298:FreeRTOS/Src/event_groups.c ****         }
 733              		.loc 1 298 13 view .LVU260
 298:FreeRTOS/Src/event_groups.c ****         }
 734              		.loc 1 298 22 is_stmt 0 view .LVU261
 735 0056 24F07F44 		bic	r4, r4, #-16777216
 736              	.LVL77:
 301:FreeRTOS/Src/event_groups.c **** 
 737              		.loc 1 301 9 is_stmt 1 view .LVU262
 304:FreeRTOS/Src/event_groups.c **** 
 738              		.loc 1 304 9 view .LVU263
 306:FreeRTOS/Src/event_groups.c **** 
 739              		.loc 1 306 48 view .LVU264
 308:FreeRTOS/Src/event_groups.c ****     }
 740              		.loc 1 308 9 view .LVU265
 741              	.L34:
 309:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 742              		.loc 1 309 5 is_stmt 0 view .LVU266
 743 005a 2046     		mov	r0, r4
 744 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 745              	.LVL78:
 746              	.L43:
 214:FreeRTOS/Src/event_groups.c **** 
 747              		.loc 1 214 17 is_stmt 1 view .LVU267
 218:FreeRTOS/Src/event_groups.c **** 
 748              		.loc 1 218 17 view .LVU268
 218:FreeRTOS/Src/event_groups.c **** 
 749              		.loc 1 218 28 is_stmt 0 view .LVU269
 750 0060 3368     		ldr	r3, [r6]
 218:FreeRTOS/Src/event_groups.c **** 
 751              		.loc 1 218 42 view .LVU270
 752 0062 23EA0703 		bic	r3, r3, r7
 753 0066 3360     		str	r3, [r6]
 220:FreeRTOS/Src/event_groups.c ****             }
 754              		.loc 1 220 17 is_stmt 1 view .LVU271
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 37


 755              	.LVL79:
 220:FreeRTOS/Src/event_groups.c ****             }
 756              		.loc 1 220 30 is_stmt 0 view .LVU272
 757 0068 4FF00008 		mov	r8, #0
 758 006c DDE7     		b	.L36
 759              	.LVL80:
 760              	.L44:
 226:FreeRTOS/Src/event_groups.c **** 
 761              		.loc 1 226 93 is_stmt 1 view .LVU273
 231:FreeRTOS/Src/event_groups.c **** 
 762              		.loc 1 231 21 view .LVU274
 763 006e 4246     		mov	r2, r8
 764 0070 47F0A061 		orr	r1, r7, #83886080
 765 0074 301D     		adds	r0, r6, #4
 766 0076 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 767              	.LVL81:
 237:FreeRTOS/Src/event_groups.c ****                 }
 768              		.loc 1 237 21 view .LVU275
 237:FreeRTOS/Src/event_groups.c ****                 }
 769              		.loc 1 237 30 is_stmt 0 view .LVU276
 770 007a 0024     		movs	r4, #0
 771 007c D5E7     		b	.L36
 772              	.LVL82:
 773              	.L45:
 270:FreeRTOS/Src/event_groups.c ****                 {
 774              		.loc 1 270 17 is_stmt 1 view .LVU277
 775 007e FFF7FEFF 		bl	vPortEnterCritical
 776              	.LVL83:
 272:FreeRTOS/Src/event_groups.c **** 
 777              		.loc 1 272 21 view .LVU278
 272:FreeRTOS/Src/event_groups.c **** 
 778              		.loc 1 272 30 is_stmt 0 view .LVU279
 779 0082 3468     		ldr	r4, [r6]
 780              	.LVL84:
 278:FreeRTOS/Src/event_groups.c ****                     {
 781              		.loc 1 278 21 is_stmt 1 view .LVU280
 278:FreeRTOS/Src/event_groups.c ****                     {
 782              		.loc 1 278 23 is_stmt 0 view .LVU281
 783 0084 37EA0403 		bics	r3, r7, r4
 784 0088 02D0     		beq	.L46
 785              	.LVL85:
 786              	.L41:
 284:FreeRTOS/Src/event_groups.c ****                     }
 787              		.loc 1 284 49 is_stmt 1 view .LVU282
 287:FreeRTOS/Src/event_groups.c **** 
 788              		.loc 1 287 17 view .LVU283
 789 008a FFF7FEFF 		bl	vPortExitCritical
 790              	.LVL86:
 289:FreeRTOS/Src/event_groups.c ****             }
 791              		.loc 1 289 17 view .LVU284
 289:FreeRTOS/Src/event_groups.c ****             }
 792              		.loc 1 289 17 is_stmt 0 view .LVU285
 793 008e E2E7     		b	.L40
 794              	.LVL87:
 795              	.L46:
 280:FreeRTOS/Src/event_groups.c ****                     }
 796              		.loc 1 280 25 is_stmt 1 view .LVU286
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 38


 280:FreeRTOS/Src/event_groups.c ****                     }
 797              		.loc 1 280 50 is_stmt 0 view .LVU287
 798 0090 24EA0707 		bic	r7, r4, r7
 799              	.LVL88:
 280:FreeRTOS/Src/event_groups.c ****                     }
 800              		.loc 1 280 50 view .LVU288
 801 0094 3760     		str	r7, [r6]
 802 0096 F8E7     		b	.L41
 803              		.cfi_endproc
 804              	.LFE129:
 806              		.section	.text.vEventGroupDelete,"ax",%progbits
 807              		.align	1
 808              		.global	vEventGroupDelete
 809              		.syntax unified
 810              		.thumb
 811              		.thumb_func
 813              	vEventGroupDelete:
 814              	.LVL89:
 815              	.LFB134:
 648:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 816              		.loc 1 648 5 is_stmt 1 view -0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 0
 819              		@ frame_needed = 0, uses_anonymous_args = 0
 648:FreeRTOS/Src/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 820              		.loc 1 648 5 is_stmt 0 view .LVU290
 821 0000 10B5     		push	{r4, lr}
 822              	.LCFI5:
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 4, -8
 825              		.cfi_offset 14, -4
 826 0002 0446     		mov	r4, r0
 649:FreeRTOS/Src/event_groups.c ****         const List_t * pxTasksWaitingForBits;
 827              		.loc 1 649 9 is_stmt 1 view .LVU291
 828              	.LVL90:
 650:FreeRTOS/Src/event_groups.c **** 
 829              		.loc 1 650 9 view .LVU292
 652:FreeRTOS/Src/event_groups.c **** 
 830              		.loc 1 652 52 view .LVU293
 654:FreeRTOS/Src/event_groups.c **** 
 831              		.loc 1 654 36 view .LVU294
 656:FreeRTOS/Src/event_groups.c **** 
 832              		.loc 1 656 9 view .LVU295
 658:FreeRTOS/Src/event_groups.c ****         {
 833              		.loc 1 658 9 view .LVU296
 834 0004 FFF7FEFF 		bl	vTaskSuspendAll
 835              	.LVL91:
 660:FreeRTOS/Src/event_groups.c **** 
 836              		.loc 1 660 51 view .LVU297
 662:FreeRTOS/Src/event_groups.c ****             {
 837              		.loc 1 662 13 view .LVU298
 662:FreeRTOS/Src/event_groups.c ****             {
 838              		.loc 1 662 18 is_stmt 0 view .LVU299
 839 0008 04E0     		b	.L48
 840              	.L49:
 666:FreeRTOS/Src/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNB
 841              		.loc 1 666 134 is_stmt 1 view .LVU300
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 39


 667:FreeRTOS/Src/event_groups.c ****             }
 842              		.loc 1 667 17 view .LVU301
 843 000a 4FF00071 		mov	r1, #33554432
 844 000e 2069     		ldr	r0, [r4, #16]
 845 0010 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 846              	.LVL92:
 847              	.L48:
 662:FreeRTOS/Src/event_groups.c ****             {
 848              		.loc 1 662 69 view .LVU302
 662:FreeRTOS/Src/event_groups.c ****             {
 849              		.loc 1 662 20 is_stmt 0 view .LVU303
 850 0014 6368     		ldr	r3, [r4, #4]
 662:FreeRTOS/Src/event_groups.c ****             {
 851              		.loc 1 662 69 view .LVU304
 852 0016 002B     		cmp	r3, #0
 853 0018 F7D1     		bne	.L49
 670:FreeRTOS/Src/event_groups.c **** 
 854              		.loc 1 670 9 is_stmt 1 view .LVU305
 670:FreeRTOS/Src/event_groups.c **** 
 855              		.loc 1 670 18 is_stmt 0 view .LVU306
 856 001a FFF7FEFF 		bl	xTaskResumeAll
 857              	.LVL93:
 676:FreeRTOS/Src/event_groups.c ****         }
 858              		.loc 1 676 13 is_stmt 1 view .LVU307
 859 001e 2046     		mov	r0, r4
 860 0020 FFF7FEFF 		bl	vPortFree
 861              	.LVL94:
 693:FreeRTOS/Src/event_groups.c ****     }
 862              		.loc 1 693 40 view .LVU308
 694:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 863              		.loc 1 694 5 is_stmt 0 view .LVU309
 864 0024 10BD     		pop	{r4, pc}
 694:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 865              		.loc 1 694 5 view .LVU310
 866              		.cfi_endproc
 867              	.LFE134:
 869              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 870              		.align	1
 871              		.global	vEventGroupSetBitsCallback
 872              		.syntax unified
 873              		.thumb
 874              		.thumb_func
 876              	vEventGroupSetBitsCallback:
 877              	.LVL95:
 878              	.LFB135:
 747:FreeRTOS/Src/event_groups.c ****         traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );
 879              		.loc 1 747 5 is_stmt 1 view -0
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 0
 882              		@ frame_needed = 0, uses_anonymous_args = 0
 747:FreeRTOS/Src/event_groups.c ****         traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );
 883              		.loc 1 747 5 is_stmt 0 view .LVU312
 884 0000 08B5     		push	{r3, lr}
 885              	.LCFI6:
 886              		.cfi_def_cfa_offset 8
 887              		.cfi_offset 3, -8
 888              		.cfi_offset 14, -4
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 40


 748:FreeRTOS/Src/event_groups.c **** 
 889              		.loc 1 748 75 is_stmt 1 view .LVU313
 753:FreeRTOS/Src/event_groups.c **** 
 890              		.loc 1 753 9 view .LVU314
 753:FreeRTOS/Src/event_groups.c **** 
 891              		.loc 1 753 18 is_stmt 0 view .LVU315
 892 0002 FFF7FEFF 		bl	xEventGroupSetBits
 893              	.LVL96:
 755:FreeRTOS/Src/event_groups.c ****     }
 894              		.loc 1 755 49 is_stmt 1 view .LVU316
 756:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 895              		.loc 1 756 5 is_stmt 0 view .LVU317
 896 0006 08BD     		pop	{r3, pc}
 897              		.cfi_endproc
 898              	.LFE135:
 900              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 901              		.align	1
 902              		.global	vEventGroupClearBitsCallback
 903              		.syntax unified
 904              		.thumb
 905              		.thumb_func
 907              	vEventGroupClearBitsCallback:
 908              	.LVL97:
 909              	.LFB136:
 763:FreeRTOS/Src/event_groups.c ****         traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );
 910              		.loc 1 763 5 is_stmt 1 view -0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 0
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 763:FreeRTOS/Src/event_groups.c ****         traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );
 914              		.loc 1 763 5 is_stmt 0 view .LVU319
 915 0000 08B5     		push	{r3, lr}
 916              	.LCFI7:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 3, -8
 919              		.cfi_offset 14, -4
 764:FreeRTOS/Src/event_groups.c **** 
 920              		.loc 1 764 79 is_stmt 1 view .LVU320
 769:FreeRTOS/Src/event_groups.c **** 
 921              		.loc 1 769 9 view .LVU321
 769:FreeRTOS/Src/event_groups.c **** 
 922              		.loc 1 769 18 is_stmt 0 view .LVU322
 923 0002 FFF7FEFF 		bl	xEventGroupClearBits
 924              	.LVL98:
 771:FreeRTOS/Src/event_groups.c ****     }
 925              		.loc 1 771 51 is_stmt 1 view .LVU323
 772:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 926              		.loc 1 772 5 is_stmt 0 view .LVU324
 927 0006 08BD     		pop	{r3, pc}
 928              		.cfi_endproc
 929              	.LFE136:
 931              		.text
 932              	.Letext0:
 933              		.file 3 "D:/Tools/arm-gnu-toolchain/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h"
 934              		.file 4 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 935              		.file 5 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 936              		.file 6 "FreeRTOS/Inc/list.h"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 41


 937              		.file 7 "FreeRTOS/Inc/event_groups.h"
 938              		.file 8 "FreeRTOS/Inc/portable.h"
 939              		.file 9 "FreeRTOS/Inc/task.h"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 event_groups.c
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:19     .text.prvTestWaitCondition:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:24     .text.prvTestWaitCondition:00000000 prvTestWaitCondition
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:78     .text.xEventGroupCreate:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:84     .text.xEventGroupCreate:00000000 xEventGroupCreate
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:127    .text.xEventGroupWaitBits:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:133    .text.xEventGroupWaitBits:00000000 xEventGroupWaitBits
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:352    .text.xEventGroupClearBits:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:358    .text.xEventGroupClearBits:00000000 xEventGroupClearBits
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:408    .text.xEventGroupGetBitsFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:414    .text.xEventGroupGetBitsFromISR:00000000 xEventGroupGetBitsFromISR
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:478    .text.xEventGroupSetBits:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:484    .text.xEventGroupSetBits:00000000 xEventGroupSetBits
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:624    .text.xEventGroupSync:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:630    .text.xEventGroupSync:00000000 xEventGroupSync
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:807    .text.vEventGroupDelete:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:813    .text.vEventGroupDelete:00000000 vEventGroupDelete
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:870    .text.vEventGroupSetBitsCallback:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:876    .text.vEventGroupSetBitsCallback:00000000 vEventGroupSetBitsCallback
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:901    .text.vEventGroupClearBitsCallback:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccHT3cJp.s:907    .text.vEventGroupClearBitsCallback:00000000 vEventGroupClearBitsCallback

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vTaskPlaceOnUnorderedEventList
vPortEnterCritical
vPortExitCritical
vTaskRemoveFromUnorderedEventList
vPortFree
