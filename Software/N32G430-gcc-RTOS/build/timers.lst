ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 23, 1
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"timers.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "FreeRTOS/Src/timers.c"
  18              		.section	.text.prvGetNextExpireTime,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvGetNextExpireTime:
  25              	.LVL0:
  26              	.LFB144:
   1:FreeRTOS/Src/timers.c **** /*
   2:FreeRTOS/Src/timers.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/Src/timers.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/Src/timers.c ****  *
   5:FreeRTOS/Src/timers.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/Src/timers.c ****  *
   7:FreeRTOS/Src/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/Src/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/Src/timers.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/Src/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/Src/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/Src/timers.c ****  * subject to the following conditions:
  13:FreeRTOS/Src/timers.c ****  *
  14:FreeRTOS/Src/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/Src/timers.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/Src/timers.c ****  *
  17:FreeRTOS/Src/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/Src/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/Src/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/Src/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/Src/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/Src/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/Src/timers.c ****  *
  24:FreeRTOS/Src/timers.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/Src/timers.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/Src/timers.c ****  *
  27:FreeRTOS/Src/timers.c ****  */
  28:FreeRTOS/Src/timers.c **** 
  29:FreeRTOS/Src/timers.c **** /* Standard includes. */
  30:FreeRTOS/Src/timers.c **** #include <stdlib.h>
  31:FreeRTOS/Src/timers.c **** 
  32:FreeRTOS/Src/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 2


  33:FreeRTOS/Src/timers.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS/Src/timers.c ****  * task.h is included from an application file. */
  35:FreeRTOS/Src/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/Src/timers.c **** 
  37:FreeRTOS/Src/timers.c **** #include "FreeRTOS.h"
  38:FreeRTOS/Src/timers.c **** #include "task.h"
  39:FreeRTOS/Src/timers.c **** #include "queue.h"
  40:FreeRTOS/Src/timers.c **** #include "timers.h"
  41:FreeRTOS/Src/timers.c **** 
  42:FreeRTOS/Src/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  43:FreeRTOS/Src/timers.c ****     #error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function availabl
  44:FreeRTOS/Src/timers.c **** #endif
  45:FreeRTOS/Src/timers.c **** 
  46:FreeRTOS/Src/timers.c **** /* The MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:FreeRTOS/Src/timers.c ****  * for the header files above, but not in this file, in order to generate the
  48:FreeRTOS/Src/timers.c ****  * correct privileged Vs unprivileged linkage and placement. */
  49:FreeRTOS/Src/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  50:FreeRTOS/Src/timers.c **** 
  51:FreeRTOS/Src/timers.c **** 
  52:FreeRTOS/Src/timers.c **** /* This entire source file will be skipped if the application is not configured
  53:FreeRTOS/Src/timers.c ****  * to include software timer functionality.  This #if is closed at the very bottom
  54:FreeRTOS/Src/timers.c ****  * of this file.  If you want to include software timer functionality then ensure
  55:FreeRTOS/Src/timers.c ****  * configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  56:FreeRTOS/Src/timers.c **** #if ( configUSE_TIMERS == 1 )
  57:FreeRTOS/Src/timers.c **** 
  58:FreeRTOS/Src/timers.c **** /* Misc definitions. */
  59:FreeRTOS/Src/timers.c ****     #define tmrNO_DELAY                    ( ( TickType_t ) 0U )
  60:FreeRTOS/Src/timers.c ****     #define tmrMAX_TIME_BEFORE_OVERFLOW    ( ( TickType_t ) -1 )
  61:FreeRTOS/Src/timers.c **** 
  62:FreeRTOS/Src/timers.c **** /* The name assigned to the timer service task. This can be overridden by
  63:FreeRTOS/Src/timers.c ****  * defining configTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  64:FreeRTOS/Src/timers.c ****     #ifndef configTIMER_SERVICE_TASK_NAME
  65:FreeRTOS/Src/timers.c ****         #define configTIMER_SERVICE_TASK_NAME    "Tmr Svc"
  66:FreeRTOS/Src/timers.c ****     #endif
  67:FreeRTOS/Src/timers.c **** 
  68:FreeRTOS/Src/timers.c ****     #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
  69:FreeRTOS/Src/timers.c **** 
  70:FreeRTOS/Src/timers.c **** /* The core affinity assigned to the timer service task on SMP systems.
  71:FreeRTOS/Src/timers.c ****  * This can be overridden by defining configTIMER_SERVICE_TASK_CORE_AFFINITY in FreeRTOSConfig.h. *
  72:FreeRTOS/Src/timers.c ****         #ifndef configTIMER_SERVICE_TASK_CORE_AFFINITY
  73:FreeRTOS/Src/timers.c ****             #define configTIMER_SERVICE_TASK_CORE_AFFINITY    tskNO_AFFINITY
  74:FreeRTOS/Src/timers.c ****         #endif
  75:FreeRTOS/Src/timers.c ****     #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
  76:FreeRTOS/Src/timers.c **** 
  77:FreeRTOS/Src/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  78:FreeRTOS/Src/timers.c ****     #define tmrSTATUS_IS_ACTIVE                  ( 0x01U )
  79:FreeRTOS/Src/timers.c ****     #define tmrSTATUS_IS_STATICALLY_ALLOCATED    ( 0x02U )
  80:FreeRTOS/Src/timers.c ****     #define tmrSTATUS_IS_AUTORELOAD              ( 0x04U )
  81:FreeRTOS/Src/timers.c **** 
  82:FreeRTOS/Src/timers.c **** /* The definition of the timers themselves. */
  83:FreeRTOS/Src/timers.c ****     typedef struct tmrTimerControl                                               /* The old naming 
  84:FreeRTOS/Src/timers.c ****     {
  85:FreeRTOS/Src/timers.c ****         const char * pcTimerName;                                                /**< Text name.  T
  86:FreeRTOS/Src/timers.c ****         ListItem_t xTimerListItem;                                               /**< Standard link
  87:FreeRTOS/Src/timers.c ****         TickType_t xTimerPeriodInTicks;                                          /**< How quickly a
  88:FreeRTOS/Src/timers.c ****         void * pvTimerID;                                                        /**< An ID to iden
  89:FreeRTOS/Src/timers.c ****         portTIMER_CALLBACK_ATTRIBUTE TimerCallbackFunction_t pxCallbackFunction; /**< The function 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 3


  90:FreeRTOS/Src/timers.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
  91:FreeRTOS/Src/timers.c ****             UBaseType_t uxTimerNumber;                                           /**< An ID assigne
  92:FreeRTOS/Src/timers.c ****         #endif
  93:FreeRTOS/Src/timers.c ****         uint8_t ucStatus;                                                        /**< Holds bits to
  94:FreeRTOS/Src/timers.c ****     } xTIMER;
  95:FreeRTOS/Src/timers.c **** 
  96:FreeRTOS/Src/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  97:FreeRTOS/Src/timers.c ****  * name below to enable the use of older kernel aware debuggers. */
  98:FreeRTOS/Src/timers.c ****     typedef xTIMER Timer_t;
  99:FreeRTOS/Src/timers.c **** 
 100:FreeRTOS/Src/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
 101:FreeRTOS/Src/timers.c ****  * Two types of message can be queued - messages that manipulate a software timer,
 102:FreeRTOS/Src/timers.c ****  * and messages that request the execution of a non-timer related callback.  The
 103:FreeRTOS/Src/timers.c ****  * two message types are defined in two separate structures, xTimerParametersType
 104:FreeRTOS/Src/timers.c ****  * and xCallbackParametersType respectively. */
 105:FreeRTOS/Src/timers.c ****     typedef struct tmrTimerParameters
 106:FreeRTOS/Src/timers.c ****     {
 107:FreeRTOS/Src/timers.c ****         TickType_t xMessageValue; /**< An optional value used by a subset of commands, for example,
 108:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer;        /**< The timer to which the command will be applied. */
 109:FreeRTOS/Src/timers.c ****     } TimerParameter_t;
 110:FreeRTOS/Src/timers.c **** 
 111:FreeRTOS/Src/timers.c **** 
 112:FreeRTOS/Src/timers.c ****     typedef struct tmrCallbackParameters
 113:FreeRTOS/Src/timers.c ****     {
 114:FreeRTOS/Src/timers.c ****         portTIMER_CALLBACK_ATTRIBUTE
 115:FreeRTOS/Src/timers.c ****         PendedFunction_t pxCallbackFunction; /* << The callback function to execute. */
 116:FreeRTOS/Src/timers.c ****         void * pvParameter1;                 /* << The value that will be used as the callback func
 117:FreeRTOS/Src/timers.c ****         uint32_t ulParameter2;               /* << The value that will be used as the callback func
 118:FreeRTOS/Src/timers.c ****     } CallbackParameters_t;
 119:FreeRTOS/Src/timers.c **** 
 120:FreeRTOS/Src/timers.c **** /* The structure that contains the two message types, along with an identifier
 121:FreeRTOS/Src/timers.c ****  * that is used to determine which message type is valid. */
 122:FreeRTOS/Src/timers.c ****     typedef struct tmrTimerQueueMessage
 123:FreeRTOS/Src/timers.c ****     {
 124:FreeRTOS/Src/timers.c ****         BaseType_t xMessageID; /**< The command being sent to the timer service task. */
 125:FreeRTOS/Src/timers.c ****         union
 126:FreeRTOS/Src/timers.c ****         {
 127:FreeRTOS/Src/timers.c ****             TimerParameter_t xTimerParameters;
 128:FreeRTOS/Src/timers.c **** 
 129:FreeRTOS/Src/timers.c ****             /* Don't include xCallbackParameters if it is not going to be used as
 130:FreeRTOS/Src/timers.c ****              * it makes the structure (and therefore the timer queue) larger. */
 131:FreeRTOS/Src/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 132:FreeRTOS/Src/timers.c ****                 CallbackParameters_t xCallbackParameters;
 133:FreeRTOS/Src/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 134:FreeRTOS/Src/timers.c ****         } u;
 135:FreeRTOS/Src/timers.c ****     } DaemonTaskMessage_t;
 136:FreeRTOS/Src/timers.c **** 
 137:FreeRTOS/Src/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 138:FreeRTOS/Src/timers.c ****  * time order, with the nearest expiry time at the front of the list.  Only the
 139:FreeRTOS/Src/timers.c ****  * timer service task is allowed to access these lists.
 140:FreeRTOS/Src/timers.c ****  * xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 141:FreeRTOS/Src/timers.c ****  * breaks some kernel aware debuggers, and debuggers that reply on removing the
 142:FreeRTOS/Src/timers.c ****  * static qualifier. */
 143:FreeRTOS/Src/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList1;
 144:FreeRTOS/Src/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList2;
 145:FreeRTOS/Src/timers.c ****     PRIVILEGED_DATA static List_t * pxCurrentTimerList;
 146:FreeRTOS/Src/timers.c ****     PRIVILEGED_DATA static List_t * pxOverflowTimerList;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 4


 147:FreeRTOS/Src/timers.c **** 
 148:FreeRTOS/Src/timers.c **** /* A queue that is used to send commands to the timer service task. */
 149:FreeRTOS/Src/timers.c ****     PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 150:FreeRTOS/Src/timers.c ****     PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 151:FreeRTOS/Src/timers.c **** 
 152:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 153:FreeRTOS/Src/timers.c **** 
 154:FreeRTOS/Src/timers.c **** /*
 155:FreeRTOS/Src/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 156:FreeRTOS/Src/timers.c ****  * been initialised already.
 157:FreeRTOS/Src/timers.c ****  */
 158:FreeRTOS/Src/timers.c ****     static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 159:FreeRTOS/Src/timers.c **** 
 160:FreeRTOS/Src/timers.c **** /*
 161:FreeRTOS/Src/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 162:FreeRTOS/Src/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 163:FreeRTOS/Src/timers.c ****  * xTimerQueue queue.
 164:FreeRTOS/Src/timers.c ****  */
 165:FreeRTOS/Src/timers.c ****     static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 166:FreeRTOS/Src/timers.c **** 
 167:FreeRTOS/Src/timers.c **** /*
 168:FreeRTOS/Src/timers.c ****  * Called by the timer service task to interpret and process a command it
 169:FreeRTOS/Src/timers.c ****  * received on the timer queue.
 170:FreeRTOS/Src/timers.c ****  */
 171:FreeRTOS/Src/timers.c ****     static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 172:FreeRTOS/Src/timers.c **** 
 173:FreeRTOS/Src/timers.c **** /*
 174:FreeRTOS/Src/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 175:FreeRTOS/Src/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 176:FreeRTOS/Src/timers.c ****  */
 177:FreeRTOS/Src/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 178:FreeRTOS/Src/timers.c ****                                                   const TickType_t xNextExpiryTime,
 179:FreeRTOS/Src/timers.c ****                                                   const TickType_t xTimeNow,
 180:FreeRTOS/Src/timers.c ****                                                   const TickType_t xCommandTime ) PRIVILEGED_FUNCTI
 181:FreeRTOS/Src/timers.c **** 
 182:FreeRTOS/Src/timers.c **** /*
 183:FreeRTOS/Src/timers.c ****  * Reload the specified auto-reload timer.  If the reloading is backlogged,
 184:FreeRTOS/Src/timers.c ****  * clear the backlog, calling the callback for each additional reload.  When
 185:FreeRTOS/Src/timers.c ****  * this function returns, the next expiry time is after xTimeNow.
 186:FreeRTOS/Src/timers.c ****  */
 187:FreeRTOS/Src/timers.c ****     static void prvReloadTimer( Timer_t * const pxTimer,
 188:FreeRTOS/Src/timers.c ****                                 TickType_t xExpiredTime,
 189:FreeRTOS/Src/timers.c ****                                 const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 190:FreeRTOS/Src/timers.c **** 
 191:FreeRTOS/Src/timers.c **** /*
 192:FreeRTOS/Src/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 193:FreeRTOS/Src/timers.c ****  * auto-reload timer, then call its callback.
 194:FreeRTOS/Src/timers.c ****  */
 195:FreeRTOS/Src/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 196:FreeRTOS/Src/timers.c ****                                         const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 197:FreeRTOS/Src/timers.c **** 
 198:FreeRTOS/Src/timers.c **** /*
 199:FreeRTOS/Src/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 200:FreeRTOS/Src/timers.c ****  * current timer list does not still reference some timers.
 201:FreeRTOS/Src/timers.c ****  */
 202:FreeRTOS/Src/timers.c ****     static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 203:FreeRTOS/Src/timers.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 5


 204:FreeRTOS/Src/timers.c **** /*
 205:FreeRTOS/Src/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 206:FreeRTOS/Src/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 207:FreeRTOS/Src/timers.c ****  */
 208:FreeRTOS/Src/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FU
 209:FreeRTOS/Src/timers.c **** 
 210:FreeRTOS/Src/timers.c **** /*
 211:FreeRTOS/Src/timers.c ****  * If the timer list contains any active timers then return the expire time of
 212:FreeRTOS/Src/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 213:FreeRTOS/Src/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 214:FreeRTOS/Src/timers.c ****  * to pdTRUE.
 215:FreeRTOS/Src/timers.c ****  */
 216:FreeRTOS/Src/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION
 217:FreeRTOS/Src/timers.c **** 
 218:FreeRTOS/Src/timers.c **** /*
 219:FreeRTOS/Src/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 220:FreeRTOS/Src/timers.c ****  * until either a timer does expire or a command is received.
 221:FreeRTOS/Src/timers.c ****  */
 222:FreeRTOS/Src/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 223:FreeRTOS/Src/timers.c ****                                             BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;
 224:FreeRTOS/Src/timers.c **** 
 225:FreeRTOS/Src/timers.c **** /*
 226:FreeRTOS/Src/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 227:FreeRTOS/Src/timers.c ****  * dynamically to fill in the structure's members.
 228:FreeRTOS/Src/timers.c ****  */
 229:FreeRTOS/Src/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName,
 230:FreeRTOS/Src/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 231:FreeRTOS/Src/timers.c ****                                        const BaseType_t xAutoReload,
 232:FreeRTOS/Src/timers.c ****                                        void * const pvTimerID,
 233:FreeRTOS/Src/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 234:FreeRTOS/Src/timers.c ****                                        Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
 235:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 236:FreeRTOS/Src/timers.c **** 
 237:FreeRTOS/Src/timers.c ****     BaseType_t xTimerCreateTimerTask( void )
 238:FreeRTOS/Src/timers.c ****     {
 239:FreeRTOS/Src/timers.c ****         BaseType_t xReturn = pdFAIL;
 240:FreeRTOS/Src/timers.c **** 
 241:FreeRTOS/Src/timers.c ****         traceENTER_xTimerCreateTimerTask();
 242:FreeRTOS/Src/timers.c **** 
 243:FreeRTOS/Src/timers.c ****         /* This function is called when the scheduler is started if
 244:FreeRTOS/Src/timers.c ****          * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 245:FreeRTOS/Src/timers.c ****          * timer service task has been created/initialised.  If timers have already
 246:FreeRTOS/Src/timers.c ****          * been created then the initialisation will already have been performed. */
 247:FreeRTOS/Src/timers.c ****         prvCheckForValidListAndQueue();
 248:FreeRTOS/Src/timers.c **** 
 249:FreeRTOS/Src/timers.c ****         if( xTimerQueue != NULL )
 250:FreeRTOS/Src/timers.c ****         {
 251:FreeRTOS/Src/timers.c ****             #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
 252:FreeRTOS/Src/timers.c ****             {
 253:FreeRTOS/Src/timers.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 254:FreeRTOS/Src/timers.c ****                 {
 255:FreeRTOS/Src/timers.c ****                     StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 256:FreeRTOS/Src/timers.c ****                     StackType_t * pxTimerTaskStackBuffer = NULL;
 257:FreeRTOS/Src/timers.c ****                     configSTACK_DEPTH_TYPE uxTimerTaskStackSize;
 258:FreeRTOS/Src/timers.c **** 
 259:FreeRTOS/Src/timers.c ****                     vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer,
 260:FreeRTOS/Src/timers.c ****                     xTimerTaskHandle = xTaskCreateStaticAffinitySet( prvTimerTask,
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 6


 261:FreeRTOS/Src/timers.c ****                                                                      configTIMER_SERVICE_TASK_NAME,
 262:FreeRTOS/Src/timers.c ****                                                                      uxTimerTaskStackSize,
 263:FreeRTOS/Src/timers.c ****                                                                      NULL,
 264:FreeRTOS/Src/timers.c ****                                                                      ( ( UBaseType_t ) configTIMER_
 265:FreeRTOS/Src/timers.c ****                                                                      pxTimerTaskStackBuffer,
 266:FreeRTOS/Src/timers.c ****                                                                      pxTimerTaskTCBBuffer,
 267:FreeRTOS/Src/timers.c ****                                                                      configTIMER_SERVICE_TASK_CORE_
 268:FreeRTOS/Src/timers.c **** 
 269:FreeRTOS/Src/timers.c ****                     if( xTimerTaskHandle != NULL )
 270:FreeRTOS/Src/timers.c ****                     {
 271:FreeRTOS/Src/timers.c ****                         xReturn = pdPASS;
 272:FreeRTOS/Src/timers.c ****                     }
 273:FreeRTOS/Src/timers.c ****                 }
 274:FreeRTOS/Src/timers.c ****                 #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 275:FreeRTOS/Src/timers.c ****                 {
 276:FreeRTOS/Src/timers.c ****                     xReturn = xTaskCreateAffinitySet( prvTimerTask,
 277:FreeRTOS/Src/timers.c ****                                                       configTIMER_SERVICE_TASK_NAME,
 278:FreeRTOS/Src/timers.c ****                                                       configTIMER_TASK_STACK_DEPTH,
 279:FreeRTOS/Src/timers.c ****                                                       NULL,
 280:FreeRTOS/Src/timers.c ****                                                       ( ( UBaseType_t ) configTIMER_TASK_PRIORITY )
 281:FreeRTOS/Src/timers.c ****                                                       configTIMER_SERVICE_TASK_CORE_AFFINITY,
 282:FreeRTOS/Src/timers.c ****                                                       &xTimerTaskHandle );
 283:FreeRTOS/Src/timers.c ****                 }
 284:FreeRTOS/Src/timers.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 285:FreeRTOS/Src/timers.c ****             }
 286:FreeRTOS/Src/timers.c ****             #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
 287:FreeRTOS/Src/timers.c ****             {
 288:FreeRTOS/Src/timers.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 289:FreeRTOS/Src/timers.c ****                 {
 290:FreeRTOS/Src/timers.c ****                     StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 291:FreeRTOS/Src/timers.c ****                     StackType_t * pxTimerTaskStackBuffer = NULL;
 292:FreeRTOS/Src/timers.c ****                     configSTACK_DEPTH_TYPE uxTimerTaskStackSize;
 293:FreeRTOS/Src/timers.c **** 
 294:FreeRTOS/Src/timers.c ****                     vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer,
 295:FreeRTOS/Src/timers.c ****                     xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 296:FreeRTOS/Src/timers.c ****                                                           configTIMER_SERVICE_TASK_NAME,
 297:FreeRTOS/Src/timers.c ****                                                           uxTimerTaskStackSize,
 298:FreeRTOS/Src/timers.c ****                                                           NULL,
 299:FreeRTOS/Src/timers.c ****                                                           ( ( UBaseType_t ) configTIMER_TASK_PRIORI
 300:FreeRTOS/Src/timers.c ****                                                           pxTimerTaskStackBuffer,
 301:FreeRTOS/Src/timers.c ****                                                           pxTimerTaskTCBBuffer );
 302:FreeRTOS/Src/timers.c **** 
 303:FreeRTOS/Src/timers.c ****                     if( xTimerTaskHandle != NULL )
 304:FreeRTOS/Src/timers.c ****                     {
 305:FreeRTOS/Src/timers.c ****                         xReturn = pdPASS;
 306:FreeRTOS/Src/timers.c ****                     }
 307:FreeRTOS/Src/timers.c ****                 }
 308:FreeRTOS/Src/timers.c ****                 #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 309:FreeRTOS/Src/timers.c ****                 {
 310:FreeRTOS/Src/timers.c ****                     xReturn = xTaskCreate( prvTimerTask,
 311:FreeRTOS/Src/timers.c ****                                            configTIMER_SERVICE_TASK_NAME,
 312:FreeRTOS/Src/timers.c ****                                            configTIMER_TASK_STACK_DEPTH,
 313:FreeRTOS/Src/timers.c ****                                            NULL,
 314:FreeRTOS/Src/timers.c ****                                            ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIV
 315:FreeRTOS/Src/timers.c ****                                            &xTimerTaskHandle );
 316:FreeRTOS/Src/timers.c ****                 }
 317:FreeRTOS/Src/timers.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 7


 318:FreeRTOS/Src/timers.c ****             }
 319:FreeRTOS/Src/timers.c ****             #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
 320:FreeRTOS/Src/timers.c ****         }
 321:FreeRTOS/Src/timers.c ****         else
 322:FreeRTOS/Src/timers.c ****         {
 323:FreeRTOS/Src/timers.c ****             mtCOVERAGE_TEST_MARKER();
 324:FreeRTOS/Src/timers.c ****         }
 325:FreeRTOS/Src/timers.c **** 
 326:FreeRTOS/Src/timers.c ****         configASSERT( xReturn );
 327:FreeRTOS/Src/timers.c **** 
 328:FreeRTOS/Src/timers.c ****         traceRETURN_xTimerCreateTimerTask( xReturn );
 329:FreeRTOS/Src/timers.c **** 
 330:FreeRTOS/Src/timers.c ****         return xReturn;
 331:FreeRTOS/Src/timers.c ****     }
 332:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 333:FreeRTOS/Src/timers.c **** 
 334:FreeRTOS/Src/timers.c ****     #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:FreeRTOS/Src/timers.c **** 
 336:FreeRTOS/Src/timers.c ****         TimerHandle_t xTimerCreate( const char * const pcTimerName,
 337:FreeRTOS/Src/timers.c ****                                     const TickType_t xTimerPeriodInTicks,
 338:FreeRTOS/Src/timers.c ****                                     const BaseType_t xAutoReload,
 339:FreeRTOS/Src/timers.c ****                                     void * const pvTimerID,
 340:FreeRTOS/Src/timers.c ****                                     TimerCallbackFunction_t pxCallbackFunction )
 341:FreeRTOS/Src/timers.c ****         {
 342:FreeRTOS/Src/timers.c ****             Timer_t * pxNewTimer;
 343:FreeRTOS/Src/timers.c **** 
 344:FreeRTOS/Src/timers.c ****             traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCa
 345:FreeRTOS/Src/timers.c **** 
 346:FreeRTOS/Src/timers.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
 347:FreeRTOS/Src/timers.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 348:FreeRTOS/Src/timers.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
 349:FreeRTOS/Src/timers.c ****             pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 350:FreeRTOS/Src/timers.c **** 
 351:FreeRTOS/Src/timers.c ****             if( pxNewTimer != NULL )
 352:FreeRTOS/Src/timers.c ****             {
 353:FreeRTOS/Src/timers.c ****                 /* Status is thus far zero as the timer is not created statically
 354:FreeRTOS/Src/timers.c ****                  * and has not been started.  The auto-reload bit may get set in
 355:FreeRTOS/Src/timers.c ****                  * prvInitialiseNewTimer. */
 356:FreeRTOS/Src/timers.c ****                 pxNewTimer->ucStatus = 0x00;
 357:FreeRTOS/Src/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 358:FreeRTOS/Src/timers.c ****             }
 359:FreeRTOS/Src/timers.c **** 
 360:FreeRTOS/Src/timers.c ****             traceRETURN_xTimerCreate( pxNewTimer );
 361:FreeRTOS/Src/timers.c **** 
 362:FreeRTOS/Src/timers.c ****             return pxNewTimer;
 363:FreeRTOS/Src/timers.c ****         }
 364:FreeRTOS/Src/timers.c **** 
 365:FreeRTOS/Src/timers.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 366:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 367:FreeRTOS/Src/timers.c **** 
 368:FreeRTOS/Src/timers.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 369:FreeRTOS/Src/timers.c **** 
 370:FreeRTOS/Src/timers.c ****         TimerHandle_t xTimerCreateStatic( const char * const pcTimerName,
 371:FreeRTOS/Src/timers.c ****                                           const TickType_t xTimerPeriodInTicks,
 372:FreeRTOS/Src/timers.c ****                                           const BaseType_t xAutoReload,
 373:FreeRTOS/Src/timers.c ****                                           void * const pvTimerID,
 374:FreeRTOS/Src/timers.c ****                                           TimerCallbackFunction_t pxCallbackFunction,
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 8


 375:FreeRTOS/Src/timers.c ****                                           StaticTimer_t * pxTimerBuffer )
 376:FreeRTOS/Src/timers.c ****         {
 377:FreeRTOS/Src/timers.c ****             Timer_t * pxNewTimer;
 378:FreeRTOS/Src/timers.c **** 
 379:FreeRTOS/Src/timers.c ****             traceENTER_xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID
 380:FreeRTOS/Src/timers.c **** 
 381:FreeRTOS/Src/timers.c ****             #if ( configASSERT_DEFINED == 1 )
 382:FreeRTOS/Src/timers.c ****             {
 383:FreeRTOS/Src/timers.c ****                 /* Sanity check that the size of the structure used to declare a
 384:FreeRTOS/Src/timers.c ****                  * variable of type StaticTimer_t equals the size of the real timer
 385:FreeRTOS/Src/timers.c ****                  * structure. */
 386:FreeRTOS/Src/timers.c ****                 volatile size_t xSize = sizeof( StaticTimer_t );
 387:FreeRTOS/Src/timers.c ****                 configASSERT( xSize == sizeof( Timer_t ) );
 388:FreeRTOS/Src/timers.c ****                 ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not defin
 389:FreeRTOS/Src/timers.c ****             }
 390:FreeRTOS/Src/timers.c ****             #endif /* configASSERT_DEFINED */
 391:FreeRTOS/Src/timers.c **** 
 392:FreeRTOS/Src/timers.c ****             /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 393:FreeRTOS/Src/timers.c ****             configASSERT( pxTimerBuffer );
 394:FreeRTOS/Src/timers.c ****             /* MISRA Ref 11.3.1 [Misaligned access] */
 395:FreeRTOS/Src/timers.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 396:FreeRTOS/Src/timers.c ****             /* coverity[misra_c_2012_rule_11_3_violation] */
 397:FreeRTOS/Src/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer;
 398:FreeRTOS/Src/timers.c **** 
 399:FreeRTOS/Src/timers.c ****             if( pxNewTimer != NULL )
 400:FreeRTOS/Src/timers.c ****             {
 401:FreeRTOS/Src/timers.c ****                 /* Timers can be created statically or dynamically so note this
 402:FreeRTOS/Src/timers.c ****                  * timer was created statically in case it is later deleted.  The
 403:FreeRTOS/Src/timers.c ****                  * auto-reload bit may get set in prvInitialiseNewTimer(). */
 404:FreeRTOS/Src/timers.c ****                 pxNewTimer->ucStatus = ( uint8_t ) tmrSTATUS_IS_STATICALLY_ALLOCATED;
 405:FreeRTOS/Src/timers.c **** 
 406:FreeRTOS/Src/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 407:FreeRTOS/Src/timers.c ****             }
 408:FreeRTOS/Src/timers.c **** 
 409:FreeRTOS/Src/timers.c ****             traceRETURN_xTimerCreateStatic( pxNewTimer );
 410:FreeRTOS/Src/timers.c **** 
 411:FreeRTOS/Src/timers.c ****             return pxNewTimer;
 412:FreeRTOS/Src/timers.c ****         }
 413:FreeRTOS/Src/timers.c **** 
 414:FreeRTOS/Src/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 415:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 416:FreeRTOS/Src/timers.c **** 
 417:FreeRTOS/Src/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName,
 418:FreeRTOS/Src/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 419:FreeRTOS/Src/timers.c ****                                        const BaseType_t xAutoReload,
 420:FreeRTOS/Src/timers.c ****                                        void * const pvTimerID,
 421:FreeRTOS/Src/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 422:FreeRTOS/Src/timers.c ****                                        Timer_t * pxNewTimer )
 423:FreeRTOS/Src/timers.c ****     {
 424:FreeRTOS/Src/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 425:FreeRTOS/Src/timers.c ****         configASSERT( ( xTimerPeriodInTicks > 0 ) );
 426:FreeRTOS/Src/timers.c **** 
 427:FreeRTOS/Src/timers.c ****         /* Ensure the infrastructure used by the timer service task has been
 428:FreeRTOS/Src/timers.c ****          * created/initialised. */
 429:FreeRTOS/Src/timers.c ****         prvCheckForValidListAndQueue();
 430:FreeRTOS/Src/timers.c **** 
 431:FreeRTOS/Src/timers.c ****         /* Initialise the timer structure members using the function
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 9


 432:FreeRTOS/Src/timers.c ****          * parameters. */
 433:FreeRTOS/Src/timers.c ****         pxNewTimer->pcTimerName = pcTimerName;
 434:FreeRTOS/Src/timers.c ****         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 435:FreeRTOS/Src/timers.c ****         pxNewTimer->pvTimerID = pvTimerID;
 436:FreeRTOS/Src/timers.c ****         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 437:FreeRTOS/Src/timers.c ****         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 438:FreeRTOS/Src/timers.c **** 
 439:FreeRTOS/Src/timers.c ****         if( xAutoReload != pdFALSE )
 440:FreeRTOS/Src/timers.c ****         {
 441:FreeRTOS/Src/timers.c ****             pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 442:FreeRTOS/Src/timers.c ****         }
 443:FreeRTOS/Src/timers.c **** 
 444:FreeRTOS/Src/timers.c ****         traceTIMER_CREATE( pxNewTimer );
 445:FreeRTOS/Src/timers.c ****     }
 446:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 447:FreeRTOS/Src/timers.c **** 
 448:FreeRTOS/Src/timers.c ****     BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
 449:FreeRTOS/Src/timers.c ****                                              const BaseType_t xCommandID,
 450:FreeRTOS/Src/timers.c ****                                              const TickType_t xOptionalValue,
 451:FreeRTOS/Src/timers.c ****                                              BaseType_t * const pxHigherPriorityTaskWoken,
 452:FreeRTOS/Src/timers.c ****                                              const TickType_t xTicksToWait )
 453:FreeRTOS/Src/timers.c ****     {
 454:FreeRTOS/Src/timers.c ****         BaseType_t xReturn = pdFAIL;
 455:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage;
 456:FreeRTOS/Src/timers.c **** 
 457:FreeRTOS/Src/timers.c ****         ( void ) pxHigherPriorityTaskWoken;
 458:FreeRTOS/Src/timers.c **** 
 459:FreeRTOS/Src/timers.c ****         traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriori
 460:FreeRTOS/Src/timers.c **** 
 461:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 462:FreeRTOS/Src/timers.c **** 
 463:FreeRTOS/Src/timers.c ****         /* Send a message to the timer service task to perform a particular action
 464:FreeRTOS/Src/timers.c ****          * on a particular timer definition. */
 465:FreeRTOS/Src/timers.c ****         if( xTimerQueue != NULL )
 466:FreeRTOS/Src/timers.c ****         {
 467:FreeRTOS/Src/timers.c ****             /* Send a command to the timer service task to start the xTimer timer. */
 468:FreeRTOS/Src/timers.c ****             xMessage.xMessageID = xCommandID;
 469:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 470:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 471:FreeRTOS/Src/timers.c **** 
 472:FreeRTOS/Src/timers.c ****             configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 473:FreeRTOS/Src/timers.c **** 
 474:FreeRTOS/Src/timers.c ****             if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 475:FreeRTOS/Src/timers.c ****             {
 476:FreeRTOS/Src/timers.c ****                 if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 477:FreeRTOS/Src/timers.c ****                 {
 478:FreeRTOS/Src/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 479:FreeRTOS/Src/timers.c ****                 }
 480:FreeRTOS/Src/timers.c ****                 else
 481:FreeRTOS/Src/timers.c ****                 {
 482:FreeRTOS/Src/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 483:FreeRTOS/Src/timers.c ****                 }
 484:FreeRTOS/Src/timers.c ****             }
 485:FreeRTOS/Src/timers.c **** 
 486:FreeRTOS/Src/timers.c ****             traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 487:FreeRTOS/Src/timers.c ****         }
 488:FreeRTOS/Src/timers.c ****         else
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 10


 489:FreeRTOS/Src/timers.c ****         {
 490:FreeRTOS/Src/timers.c ****             mtCOVERAGE_TEST_MARKER();
 491:FreeRTOS/Src/timers.c ****         }
 492:FreeRTOS/Src/timers.c **** 
 493:FreeRTOS/Src/timers.c ****         traceRETURN_xTimerGenericCommandFromTask( xReturn );
 494:FreeRTOS/Src/timers.c **** 
 495:FreeRTOS/Src/timers.c ****         return xReturn;
 496:FreeRTOS/Src/timers.c ****     }
 497:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 498:FreeRTOS/Src/timers.c **** 
 499:FreeRTOS/Src/timers.c ****     BaseType_t xTimerGenericCommandFromISR( TimerHandle_t xTimer,
 500:FreeRTOS/Src/timers.c ****                                             const BaseType_t xCommandID,
 501:FreeRTOS/Src/timers.c ****                                             const TickType_t xOptionalValue,
 502:FreeRTOS/Src/timers.c ****                                             BaseType_t * const pxHigherPriorityTaskWoken,
 503:FreeRTOS/Src/timers.c ****                                             const TickType_t xTicksToWait )
 504:FreeRTOS/Src/timers.c ****     {
 505:FreeRTOS/Src/timers.c ****         BaseType_t xReturn = pdFAIL;
 506:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage;
 507:FreeRTOS/Src/timers.c **** 
 508:FreeRTOS/Src/timers.c ****         ( void ) xTicksToWait;
 509:FreeRTOS/Src/timers.c **** 
 510:FreeRTOS/Src/timers.c ****         traceENTER_xTimerGenericCommandFromISR( xTimer, xCommandID, xOptionalValue, pxHigherPriorit
 511:FreeRTOS/Src/timers.c **** 
 512:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 513:FreeRTOS/Src/timers.c **** 
 514:FreeRTOS/Src/timers.c ****         /* Send a message to the timer service task to perform a particular action
 515:FreeRTOS/Src/timers.c ****          * on a particular timer definition. */
 516:FreeRTOS/Src/timers.c ****         if( xTimerQueue != NULL )
 517:FreeRTOS/Src/timers.c ****         {
 518:FreeRTOS/Src/timers.c ****             /* Send a command to the timer service task to start the xTimer timer. */
 519:FreeRTOS/Src/timers.c ****             xMessage.xMessageID = xCommandID;
 520:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 521:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 522:FreeRTOS/Src/timers.c **** 
 523:FreeRTOS/Src/timers.c ****             configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );
 524:FreeRTOS/Src/timers.c **** 
 525:FreeRTOS/Src/timers.c ****             if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
 526:FreeRTOS/Src/timers.c ****             {
 527:FreeRTOS/Src/timers.c ****                 xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoke
 528:FreeRTOS/Src/timers.c ****             }
 529:FreeRTOS/Src/timers.c **** 
 530:FreeRTOS/Src/timers.c ****             traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 531:FreeRTOS/Src/timers.c ****         }
 532:FreeRTOS/Src/timers.c ****         else
 533:FreeRTOS/Src/timers.c ****         {
 534:FreeRTOS/Src/timers.c ****             mtCOVERAGE_TEST_MARKER();
 535:FreeRTOS/Src/timers.c ****         }
 536:FreeRTOS/Src/timers.c **** 
 537:FreeRTOS/Src/timers.c ****         traceRETURN_xTimerGenericCommandFromISR( xReturn );
 538:FreeRTOS/Src/timers.c **** 
 539:FreeRTOS/Src/timers.c ****         return xReturn;
 540:FreeRTOS/Src/timers.c ****     }
 541:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 542:FreeRTOS/Src/timers.c **** 
 543:FreeRTOS/Src/timers.c ****     TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 544:FreeRTOS/Src/timers.c ****     {
 545:FreeRTOS/Src/timers.c ****         traceENTER_xTimerGetTimerDaemonTaskHandle();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 11


 546:FreeRTOS/Src/timers.c **** 
 547:FreeRTOS/Src/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 548:FreeRTOS/Src/timers.c ****          * started, then xTimerTaskHandle will be NULL. */
 549:FreeRTOS/Src/timers.c ****         configASSERT( ( xTimerTaskHandle != NULL ) );
 550:FreeRTOS/Src/timers.c **** 
 551:FreeRTOS/Src/timers.c ****         traceRETURN_xTimerGetTimerDaemonTaskHandle( xTimerTaskHandle );
 552:FreeRTOS/Src/timers.c **** 
 553:FreeRTOS/Src/timers.c ****         return xTimerTaskHandle;
 554:FreeRTOS/Src/timers.c ****     }
 555:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 556:FreeRTOS/Src/timers.c **** 
 557:FreeRTOS/Src/timers.c ****     TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 558:FreeRTOS/Src/timers.c ****     {
 559:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 560:FreeRTOS/Src/timers.c **** 
 561:FreeRTOS/Src/timers.c ****         traceENTER_xTimerGetPeriod( xTimer );
 562:FreeRTOS/Src/timers.c **** 
 563:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 564:FreeRTOS/Src/timers.c **** 
 565:FreeRTOS/Src/timers.c ****         traceRETURN_xTimerGetPeriod( pxTimer->xTimerPeriodInTicks );
 566:FreeRTOS/Src/timers.c **** 
 567:FreeRTOS/Src/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 568:FreeRTOS/Src/timers.c ****     }
 569:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 570:FreeRTOS/Src/timers.c **** 
 571:FreeRTOS/Src/timers.c ****     void vTimerSetReloadMode( TimerHandle_t xTimer,
 572:FreeRTOS/Src/timers.c ****                               const BaseType_t xAutoReload )
 573:FreeRTOS/Src/timers.c ****     {
 574:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 575:FreeRTOS/Src/timers.c **** 
 576:FreeRTOS/Src/timers.c ****         traceENTER_vTimerSetReloadMode( xTimer, xAutoReload );
 577:FreeRTOS/Src/timers.c **** 
 578:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 579:FreeRTOS/Src/timers.c ****         taskENTER_CRITICAL();
 580:FreeRTOS/Src/timers.c ****         {
 581:FreeRTOS/Src/timers.c ****             if( xAutoReload != pdFALSE )
 582:FreeRTOS/Src/timers.c ****             {
 583:FreeRTOS/Src/timers.c ****                 pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 584:FreeRTOS/Src/timers.c ****             }
 585:FreeRTOS/Src/timers.c ****             else
 586:FreeRTOS/Src/timers.c ****             {
 587:FreeRTOS/Src/timers.c ****                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 588:FreeRTOS/Src/timers.c ****             }
 589:FreeRTOS/Src/timers.c ****         }
 590:FreeRTOS/Src/timers.c ****         taskEXIT_CRITICAL();
 591:FreeRTOS/Src/timers.c **** 
 592:FreeRTOS/Src/timers.c ****         traceRETURN_vTimerSetReloadMode();
 593:FreeRTOS/Src/timers.c ****     }
 594:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 595:FreeRTOS/Src/timers.c **** 
 596:FreeRTOS/Src/timers.c ****     BaseType_t xTimerGetReloadMode( TimerHandle_t xTimer )
 597:FreeRTOS/Src/timers.c ****     {
 598:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 599:FreeRTOS/Src/timers.c ****         BaseType_t xReturn;
 600:FreeRTOS/Src/timers.c **** 
 601:FreeRTOS/Src/timers.c ****         traceENTER_xTimerGetReloadMode( xTimer );
 602:FreeRTOS/Src/timers.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 12


 603:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 604:FreeRTOS/Src/timers.c ****         taskENTER_CRITICAL();
 605:FreeRTOS/Src/timers.c ****         {
 606:FreeRTOS/Src/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0U )
 607:FreeRTOS/Src/timers.c ****             {
 608:FreeRTOS/Src/timers.c ****                 /* Not an auto-reload timer. */
 609:FreeRTOS/Src/timers.c ****                 xReturn = pdFALSE;
 610:FreeRTOS/Src/timers.c ****             }
 611:FreeRTOS/Src/timers.c ****             else
 612:FreeRTOS/Src/timers.c ****             {
 613:FreeRTOS/Src/timers.c ****                 /* Is an auto-reload timer. */
 614:FreeRTOS/Src/timers.c ****                 xReturn = pdTRUE;
 615:FreeRTOS/Src/timers.c ****             }
 616:FreeRTOS/Src/timers.c ****         }
 617:FreeRTOS/Src/timers.c ****         taskEXIT_CRITICAL();
 618:FreeRTOS/Src/timers.c **** 
 619:FreeRTOS/Src/timers.c ****         traceRETURN_xTimerGetReloadMode( xReturn );
 620:FreeRTOS/Src/timers.c **** 
 621:FreeRTOS/Src/timers.c ****         return xReturn;
 622:FreeRTOS/Src/timers.c ****     }
 623:FreeRTOS/Src/timers.c **** 
 624:FreeRTOS/Src/timers.c ****     UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
 625:FreeRTOS/Src/timers.c ****     {
 626:FreeRTOS/Src/timers.c ****         UBaseType_t uxReturn;
 627:FreeRTOS/Src/timers.c **** 
 628:FreeRTOS/Src/timers.c ****         traceENTER_uxTimerGetReloadMode( xTimer );
 629:FreeRTOS/Src/timers.c **** 
 630:FreeRTOS/Src/timers.c ****         uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 631:FreeRTOS/Src/timers.c **** 
 632:FreeRTOS/Src/timers.c ****         traceRETURN_uxTimerGetReloadMode( uxReturn );
 633:FreeRTOS/Src/timers.c **** 
 634:FreeRTOS/Src/timers.c ****         return uxReturn;
 635:FreeRTOS/Src/timers.c ****     }
 636:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 637:FreeRTOS/Src/timers.c **** 
 638:FreeRTOS/Src/timers.c ****     TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 639:FreeRTOS/Src/timers.c ****     {
 640:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 641:FreeRTOS/Src/timers.c ****         TickType_t xReturn;
 642:FreeRTOS/Src/timers.c **** 
 643:FreeRTOS/Src/timers.c ****         traceENTER_xTimerGetExpiryTime( xTimer );
 644:FreeRTOS/Src/timers.c **** 
 645:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 646:FreeRTOS/Src/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 647:FreeRTOS/Src/timers.c **** 
 648:FreeRTOS/Src/timers.c ****         traceRETURN_xTimerGetExpiryTime( xReturn );
 649:FreeRTOS/Src/timers.c **** 
 650:FreeRTOS/Src/timers.c ****         return xReturn;
 651:FreeRTOS/Src/timers.c ****     }
 652:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 653:FreeRTOS/Src/timers.c **** 
 654:FreeRTOS/Src/timers.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 655:FreeRTOS/Src/timers.c ****         BaseType_t xTimerGetStaticBuffer( TimerHandle_t xTimer,
 656:FreeRTOS/Src/timers.c ****                                           StaticTimer_t ** ppxTimerBuffer )
 657:FreeRTOS/Src/timers.c ****         {
 658:FreeRTOS/Src/timers.c ****             BaseType_t xReturn;
 659:FreeRTOS/Src/timers.c ****             Timer_t * pxTimer = xTimer;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 13


 660:FreeRTOS/Src/timers.c **** 
 661:FreeRTOS/Src/timers.c ****             traceENTER_xTimerGetStaticBuffer( xTimer, ppxTimerBuffer );
 662:FreeRTOS/Src/timers.c **** 
 663:FreeRTOS/Src/timers.c ****             configASSERT( ppxTimerBuffer != NULL );
 664:FreeRTOS/Src/timers.c **** 
 665:FreeRTOS/Src/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) != 0U )
 666:FreeRTOS/Src/timers.c ****             {
 667:FreeRTOS/Src/timers.c ****                 /* MISRA Ref 11.3.1 [Misaligned access] */
 668:FreeRTOS/Src/timers.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
 669:FreeRTOS/Src/timers.c ****                 /* coverity[misra_c_2012_rule_11_3_violation] */
 670:FreeRTOS/Src/timers.c ****                 *ppxTimerBuffer = ( StaticTimer_t * ) pxTimer;
 671:FreeRTOS/Src/timers.c ****                 xReturn = pdTRUE;
 672:FreeRTOS/Src/timers.c ****             }
 673:FreeRTOS/Src/timers.c ****             else
 674:FreeRTOS/Src/timers.c ****             {
 675:FreeRTOS/Src/timers.c ****                 xReturn = pdFALSE;
 676:FreeRTOS/Src/timers.c ****             }
 677:FreeRTOS/Src/timers.c **** 
 678:FreeRTOS/Src/timers.c ****             traceRETURN_xTimerGetStaticBuffer( xReturn );
 679:FreeRTOS/Src/timers.c **** 
 680:FreeRTOS/Src/timers.c ****             return xReturn;
 681:FreeRTOS/Src/timers.c ****         }
 682:FreeRTOS/Src/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 683:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 684:FreeRTOS/Src/timers.c **** 
 685:FreeRTOS/Src/timers.c ****     const char * pcTimerGetName( TimerHandle_t xTimer )
 686:FreeRTOS/Src/timers.c ****     {
 687:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 688:FreeRTOS/Src/timers.c **** 
 689:FreeRTOS/Src/timers.c ****         traceENTER_pcTimerGetName( xTimer );
 690:FreeRTOS/Src/timers.c **** 
 691:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 692:FreeRTOS/Src/timers.c **** 
 693:FreeRTOS/Src/timers.c ****         traceRETURN_pcTimerGetName( pxTimer->pcTimerName );
 694:FreeRTOS/Src/timers.c **** 
 695:FreeRTOS/Src/timers.c ****         return pxTimer->pcTimerName;
 696:FreeRTOS/Src/timers.c ****     }
 697:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 698:FreeRTOS/Src/timers.c **** 
 699:FreeRTOS/Src/timers.c ****     static void prvReloadTimer( Timer_t * const pxTimer,
 700:FreeRTOS/Src/timers.c ****                                 TickType_t xExpiredTime,
 701:FreeRTOS/Src/timers.c ****                                 const TickType_t xTimeNow )
 702:FreeRTOS/Src/timers.c ****     {
 703:FreeRTOS/Src/timers.c ****         /* Insert the timer into the appropriate list for the next expiry time.
 704:FreeRTOS/Src/timers.c ****          * If the next expiry time has already passed, advance the expiry time,
 705:FreeRTOS/Src/timers.c ****          * call the callback function, and try again. */
 706:FreeRTOS/Src/timers.c ****         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks )
 707:FreeRTOS/Src/timers.c ****         {
 708:FreeRTOS/Src/timers.c ****             /* Advance the expiry time. */
 709:FreeRTOS/Src/timers.c ****             xExpiredTime += pxTimer->xTimerPeriodInTicks;
 710:FreeRTOS/Src/timers.c **** 
 711:FreeRTOS/Src/timers.c ****             /* Call the timer callback. */
 712:FreeRTOS/Src/timers.c ****             traceTIMER_EXPIRED( pxTimer );
 713:FreeRTOS/Src/timers.c ****             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 714:FreeRTOS/Src/timers.c ****         }
 715:FreeRTOS/Src/timers.c ****     }
 716:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 14


 717:FreeRTOS/Src/timers.c **** 
 718:FreeRTOS/Src/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 719:FreeRTOS/Src/timers.c ****                                         const TickType_t xTimeNow )
 720:FreeRTOS/Src/timers.c ****     {
 721:FreeRTOS/Src/timers.c ****         /* MISRA Ref 11.5.3 [Void pointer assignment] */
 722:FreeRTOS/Src/timers.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115
 723:FreeRTOS/Src/timers.c ****         /* coverity[misra_c_2012_rule_11_5_violation] */
 724:FreeRTOS/Src/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 725:FreeRTOS/Src/timers.c **** 
 726:FreeRTOS/Src/timers.c ****         /* Remove the timer from the list of active timers.  A check has already
 727:FreeRTOS/Src/timers.c ****          * been performed to ensure the list is not empty. */
 728:FreeRTOS/Src/timers.c **** 
 729:FreeRTOS/Src/timers.c ****         ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 730:FreeRTOS/Src/timers.c **** 
 731:FreeRTOS/Src/timers.c ****         /* If the timer is an auto-reload timer then calculate the next
 732:FreeRTOS/Src/timers.c ****          * expiry time and re-insert the timer in the list of active timers. */
 733:FreeRTOS/Src/timers.c ****         if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 734:FreeRTOS/Src/timers.c ****         {
 735:FreeRTOS/Src/timers.c ****             prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 736:FreeRTOS/Src/timers.c ****         }
 737:FreeRTOS/Src/timers.c ****         else
 738:FreeRTOS/Src/timers.c ****         {
 739:FreeRTOS/Src/timers.c ****             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 740:FreeRTOS/Src/timers.c ****         }
 741:FreeRTOS/Src/timers.c **** 
 742:FreeRTOS/Src/timers.c ****         /* Call the timer callback. */
 743:FreeRTOS/Src/timers.c ****         traceTIMER_EXPIRED( pxTimer );
 744:FreeRTOS/Src/timers.c ****         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 745:FreeRTOS/Src/timers.c ****     }
 746:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 747:FreeRTOS/Src/timers.c **** 
 748:FreeRTOS/Src/timers.c ****     static portTASK_FUNCTION( prvTimerTask, pvParameters )
 749:FreeRTOS/Src/timers.c ****     {
 750:FreeRTOS/Src/timers.c ****         TickType_t xNextExpireTime;
 751:FreeRTOS/Src/timers.c ****         BaseType_t xListWasEmpty;
 752:FreeRTOS/Src/timers.c **** 
 753:FreeRTOS/Src/timers.c ****         /* Just to avoid compiler warnings. */
 754:FreeRTOS/Src/timers.c ****         ( void ) pvParameters;
 755:FreeRTOS/Src/timers.c **** 
 756:FreeRTOS/Src/timers.c ****         #if ( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 757:FreeRTOS/Src/timers.c ****         {
 758:FreeRTOS/Src/timers.c ****             /* Allow the application writer to execute some code in the context of
 759:FreeRTOS/Src/timers.c ****              * this task at the point the task starts executing.  This is useful if the
 760:FreeRTOS/Src/timers.c ****              * application includes initialisation code that would benefit from
 761:FreeRTOS/Src/timers.c ****              * executing after the scheduler has been started. */
 762:FreeRTOS/Src/timers.c ****             vApplicationDaemonTaskStartupHook();
 763:FreeRTOS/Src/timers.c ****         }
 764:FreeRTOS/Src/timers.c ****         #endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 765:FreeRTOS/Src/timers.c **** 
 766:FreeRTOS/Src/timers.c ****         for( ; configCONTROL_INFINITE_LOOP(); )
 767:FreeRTOS/Src/timers.c ****         {
 768:FreeRTOS/Src/timers.c ****             /* Query the timers list to see if it contains any timers, and if so,
 769:FreeRTOS/Src/timers.c ****              * obtain the time at which the next timer will expire. */
 770:FreeRTOS/Src/timers.c ****             xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 771:FreeRTOS/Src/timers.c **** 
 772:FreeRTOS/Src/timers.c ****             /* If a timer has expired, process it.  Otherwise, block this task
 773:FreeRTOS/Src/timers.c ****              * until either a timer does expire, or a command is received. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 15


 774:FreeRTOS/Src/timers.c ****             prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 775:FreeRTOS/Src/timers.c **** 
 776:FreeRTOS/Src/timers.c ****             /* Empty the command queue. */
 777:FreeRTOS/Src/timers.c ****             prvProcessReceivedCommands();
 778:FreeRTOS/Src/timers.c ****         }
 779:FreeRTOS/Src/timers.c ****     }
 780:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 781:FreeRTOS/Src/timers.c **** 
 782:FreeRTOS/Src/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 783:FreeRTOS/Src/timers.c ****                                             BaseType_t xListWasEmpty )
 784:FreeRTOS/Src/timers.c ****     {
 785:FreeRTOS/Src/timers.c ****         TickType_t xTimeNow;
 786:FreeRTOS/Src/timers.c ****         BaseType_t xTimerListsWereSwitched;
 787:FreeRTOS/Src/timers.c **** 
 788:FreeRTOS/Src/timers.c ****         vTaskSuspendAll();
 789:FreeRTOS/Src/timers.c ****         {
 790:FreeRTOS/Src/timers.c ****             /* Obtain the time now to make an assessment as to whether the timer
 791:FreeRTOS/Src/timers.c ****              * has expired or not.  If obtaining the time causes the lists to switch
 792:FreeRTOS/Src/timers.c ****              * then don't process this timer as any timers that remained in the list
 793:FreeRTOS/Src/timers.c ****              * when the lists were switched will have been processed within the
 794:FreeRTOS/Src/timers.c ****              * prvSampleTimeNow() function. */
 795:FreeRTOS/Src/timers.c ****             xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 796:FreeRTOS/Src/timers.c **** 
 797:FreeRTOS/Src/timers.c ****             if( xTimerListsWereSwitched == pdFALSE )
 798:FreeRTOS/Src/timers.c ****             {
 799:FreeRTOS/Src/timers.c ****                 /* The tick count has not overflowed, has the timer expired? */
 800:FreeRTOS/Src/timers.c ****                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801:FreeRTOS/Src/timers.c ****                 {
 802:FreeRTOS/Src/timers.c ****                     ( void ) xTaskResumeAll();
 803:FreeRTOS/Src/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 804:FreeRTOS/Src/timers.c ****                 }
 805:FreeRTOS/Src/timers.c ****                 else
 806:FreeRTOS/Src/timers.c ****                 {
 807:FreeRTOS/Src/timers.c ****                     /* The tick count has not overflowed, and the next expire
 808:FreeRTOS/Src/timers.c ****                      * time has not been reached yet.  This task should therefore
 809:FreeRTOS/Src/timers.c ****                      * block to wait for the next expire time or a command to be
 810:FreeRTOS/Src/timers.c ****                      * received - whichever comes first.  The following line cannot
 811:FreeRTOS/Src/timers.c ****                      * be reached unless xNextExpireTime > xTimeNow, except in the
 812:FreeRTOS/Src/timers.c ****                      * case when the current timer list is empty. */
 813:FreeRTOS/Src/timers.c ****                     if( xListWasEmpty != pdFALSE )
 814:FreeRTOS/Src/timers.c ****                     {
 815:FreeRTOS/Src/timers.c ****                         /* The current timer list is empty - is the overflow list
 816:FreeRTOS/Src/timers.c ****                          * also empty? */
 817:FreeRTOS/Src/timers.c ****                         xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 818:FreeRTOS/Src/timers.c ****                     }
 819:FreeRTOS/Src/timers.c **** 
 820:FreeRTOS/Src/timers.c ****                     vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xL
 821:FreeRTOS/Src/timers.c **** 
 822:FreeRTOS/Src/timers.c ****                     if( xTaskResumeAll() == pdFALSE )
 823:FreeRTOS/Src/timers.c ****                     {
 824:FreeRTOS/Src/timers.c ****                         /* Yield to wait for either a command to arrive, or the
 825:FreeRTOS/Src/timers.c ****                          * block time to expire.  If a command arrived between the
 826:FreeRTOS/Src/timers.c ****                          * critical section being exited and this yield then the yield
 827:FreeRTOS/Src/timers.c ****                          * will not cause the task to block. */
 828:FreeRTOS/Src/timers.c ****                         taskYIELD_WITHIN_API();
 829:FreeRTOS/Src/timers.c ****                     }
 830:FreeRTOS/Src/timers.c ****                     else
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 16


 831:FreeRTOS/Src/timers.c ****                     {
 832:FreeRTOS/Src/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 833:FreeRTOS/Src/timers.c ****                     }
 834:FreeRTOS/Src/timers.c ****                 }
 835:FreeRTOS/Src/timers.c ****             }
 836:FreeRTOS/Src/timers.c ****             else
 837:FreeRTOS/Src/timers.c ****             {
 838:FreeRTOS/Src/timers.c ****                 ( void ) xTaskResumeAll();
 839:FreeRTOS/Src/timers.c ****             }
 840:FreeRTOS/Src/timers.c ****         }
 841:FreeRTOS/Src/timers.c ****     }
 842:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 843:FreeRTOS/Src/timers.c **** 
 844:FreeRTOS/Src/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 845:FreeRTOS/Src/timers.c ****     {
  27              		.loc 1 845 5 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 846:FreeRTOS/Src/timers.c ****         TickType_t xNextExpireTime;
  32              		.loc 1 846 9 view .LVU1
 847:FreeRTOS/Src/timers.c **** 
 848:FreeRTOS/Src/timers.c ****         /* Timers are listed in expiry time order, with the head of the list
 849:FreeRTOS/Src/timers.c ****          * referencing the task that will expire first.  Obtain the time at which
 850:FreeRTOS/Src/timers.c ****          * the timer with the nearest expiry time will expire.  If there are no
 851:FreeRTOS/Src/timers.c ****          * active timers then just set the next expire time to 0.  That will cause
 852:FreeRTOS/Src/timers.c ****          * this task to unblock when the tick count overflows, at which point the
 853:FreeRTOS/Src/timers.c ****          * timer lists will be switched and the next expiry time can be
 854:FreeRTOS/Src/timers.c ****          * re-assessed.  */
 855:FreeRTOS/Src/timers.c ****         *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  33              		.loc 1 855 9 view .LVU2
  34              		.loc 1 855 27 is_stmt 0 view .LVU3
  35 0000 064B     		ldr	r3, .L6
  36 0002 1A68     		ldr	r2, [r3]
  37 0004 1368     		ldr	r3, [r2]
  38 0006 2BB9     		cbnz	r3, .L4
  39              		.loc 1 855 27 discriminator 1 view .LVU4
  40 0008 0123     		movs	r3, #1
  41              	.L2:
  42              		.loc 1 855 25 discriminator 4 view .LVU5
  43 000a 0360     		str	r3, [r0]
 856:FreeRTOS/Src/timers.c **** 
 857:FreeRTOS/Src/timers.c ****         if( *pxListWasEmpty == pdFALSE )
  44              		.loc 1 857 9 is_stmt 1 view .LVU6
  45              		.loc 1 857 11 is_stmt 0 view .LVU7
  46 000c 23B9     		cbnz	r3, .L5
 858:FreeRTOS/Src/timers.c ****         {
 859:FreeRTOS/Src/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  47              		.loc 1 859 13 is_stmt 1 view .LVU8
  48              		.loc 1 859 31 is_stmt 0 view .LVU9
  49 000e D368     		ldr	r3, [r2, #12]
  50              		.loc 1 859 29 view .LVU10
  51 0010 1868     		ldr	r0, [r3]
  52              	.LVL1:
  53              		.loc 1 859 29 view .LVU11
  54 0012 7047     		bx	lr
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 17


  55              	.LVL2:
  56              	.L4:
 855:FreeRTOS/Src/timers.c **** 
  57              		.loc 1 855 27 discriminator 2 view .LVU12
  58 0014 0023     		movs	r3, #0
  59 0016 F8E7     		b	.L2
  60              	.L5:
 860:FreeRTOS/Src/timers.c ****         }
 861:FreeRTOS/Src/timers.c ****         else
 862:FreeRTOS/Src/timers.c ****         {
 863:FreeRTOS/Src/timers.c ****             /* Ensure the task unblocks when the tick count rolls over. */
 864:FreeRTOS/Src/timers.c ****             xNextExpireTime = ( TickType_t ) 0U;
  61              		.loc 1 864 29 view .LVU13
  62 0018 0020     		movs	r0, #0
  63              	.LVL3:
 865:FreeRTOS/Src/timers.c ****         }
 866:FreeRTOS/Src/timers.c **** 
 867:FreeRTOS/Src/timers.c ****         return xNextExpireTime;
  64              		.loc 1 867 9 is_stmt 1 view .LVU14
 868:FreeRTOS/Src/timers.c ****     }
  65              		.loc 1 868 5 is_stmt 0 view .LVU15
  66 001a 7047     		bx	lr
  67              	.L7:
  68              		.align	2
  69              	.L6:
  70 001c 00000000 		.word	pxCurrentTimerList
  71              		.cfi_endproc
  72              	.LFE144:
  74              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
  75              		.align	1
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  80              	prvInsertTimerInActiveList:
  81              	.LVL4:
  82              	.LFB146:
 869:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 870:FreeRTOS/Src/timers.c **** 
 871:FreeRTOS/Src/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 872:FreeRTOS/Src/timers.c ****     {
 873:FreeRTOS/Src/timers.c ****         TickType_t xTimeNow;
 874:FreeRTOS/Src/timers.c ****         PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;
 875:FreeRTOS/Src/timers.c **** 
 876:FreeRTOS/Src/timers.c ****         xTimeNow = xTaskGetTickCount();
 877:FreeRTOS/Src/timers.c **** 
 878:FreeRTOS/Src/timers.c ****         if( xTimeNow < xLastTime )
 879:FreeRTOS/Src/timers.c ****         {
 880:FreeRTOS/Src/timers.c ****             prvSwitchTimerLists();
 881:FreeRTOS/Src/timers.c ****             *pxTimerListsWereSwitched = pdTRUE;
 882:FreeRTOS/Src/timers.c ****         }
 883:FreeRTOS/Src/timers.c ****         else
 884:FreeRTOS/Src/timers.c ****         {
 885:FreeRTOS/Src/timers.c ****             *pxTimerListsWereSwitched = pdFALSE;
 886:FreeRTOS/Src/timers.c ****         }
 887:FreeRTOS/Src/timers.c **** 
 888:FreeRTOS/Src/timers.c ****         xLastTime = xTimeNow;
 889:FreeRTOS/Src/timers.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 18


 890:FreeRTOS/Src/timers.c ****         return xTimeNow;
 891:FreeRTOS/Src/timers.c ****     }
 892:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 893:FreeRTOS/Src/timers.c **** 
 894:FreeRTOS/Src/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 895:FreeRTOS/Src/timers.c ****                                                   const TickType_t xNextExpiryTime,
 896:FreeRTOS/Src/timers.c ****                                                   const TickType_t xTimeNow,
 897:FreeRTOS/Src/timers.c ****                                                   const TickType_t xCommandTime )
 898:FreeRTOS/Src/timers.c ****     {
  83              		.loc 1 898 5 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		.loc 1 898 5 is_stmt 0 view .LVU17
  88 0000 08B5     		push	{r3, lr}
  89              	.LCFI0:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 3, -8
  92              		.cfi_offset 14, -4
 899:FreeRTOS/Src/timers.c ****         BaseType_t xProcessTimerNow = pdFALSE;
  93              		.loc 1 899 9 is_stmt 1 view .LVU18
  94              	.LVL5:
 900:FreeRTOS/Src/timers.c **** 
 901:FreeRTOS/Src/timers.c ****         listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  95              		.loc 1 901 9 view .LVU19
  96 0002 4160     		str	r1, [r0, #4]
 902:FreeRTOS/Src/timers.c ****         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  97              		.loc 1 902 9 view .LVU20
  98 0004 0061     		str	r0, [r0, #16]
 903:FreeRTOS/Src/timers.c **** 
 904:FreeRTOS/Src/timers.c ****         if( xNextExpiryTime <= xTimeNow )
  99              		.loc 1 904 9 view .LVU21
 100              		.loc 1 904 11 is_stmt 0 view .LVU22
 101 0006 9142     		cmp	r1, r2
 102 0008 0CD8     		bhi	.L9
 905:FreeRTOS/Src/timers.c ****         {
 906:FreeRTOS/Src/timers.c ****             /* Has the expiry time elapsed between the command to start/reset a
 907:FreeRTOS/Src/timers.c ****              * timer was issued, and the time the command was processed? */
 908:FreeRTOS/Src/timers.c ****             if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 103              		.loc 1 908 13 is_stmt 1 view .LVU23
 104              		.loc 1 908 45 is_stmt 0 view .LVU24
 105 000a D21A     		subs	r2, r2, r3
 106              	.LVL6:
 107              		.loc 1 908 74 view .LVU25
 108 000c 8369     		ldr	r3, [r0, #24]
 109              	.LVL7:
 110              		.loc 1 908 15 view .LVU26
 111 000e 9A42     		cmp	r2, r3
 112 0010 01D3     		bcc	.L15
 909:FreeRTOS/Src/timers.c ****             {
 910:FreeRTOS/Src/timers.c ****                 /* The time between a command being issued and the command being
 911:FreeRTOS/Src/timers.c ****                  * processed actually exceeds the timers period.  */
 912:FreeRTOS/Src/timers.c ****                 xProcessTimerNow = pdTRUE;
 113              		.loc 1 912 34 view .LVU27
 114 0012 0120     		movs	r0, #1
 115              	.LVL8:
 116              	.L8:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 19


 913:FreeRTOS/Src/timers.c ****             }
 914:FreeRTOS/Src/timers.c ****             else
 915:FreeRTOS/Src/timers.c ****             {
 916:FreeRTOS/Src/timers.c ****                 vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 917:FreeRTOS/Src/timers.c ****             }
 918:FreeRTOS/Src/timers.c ****         }
 919:FreeRTOS/Src/timers.c ****         else
 920:FreeRTOS/Src/timers.c ****         {
 921:FreeRTOS/Src/timers.c ****             if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 922:FreeRTOS/Src/timers.c ****             {
 923:FreeRTOS/Src/timers.c ****                 /* If, since the command was issued, the tick count has overflowed
 924:FreeRTOS/Src/timers.c ****                  * but the expiry time has not, then the timer must have already passed
 925:FreeRTOS/Src/timers.c ****                  * its expiry time and should be processed immediately. */
 926:FreeRTOS/Src/timers.c ****                 xProcessTimerNow = pdTRUE;
 927:FreeRTOS/Src/timers.c ****             }
 928:FreeRTOS/Src/timers.c ****             else
 929:FreeRTOS/Src/timers.c ****             {
 930:FreeRTOS/Src/timers.c ****                 vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 931:FreeRTOS/Src/timers.c ****             }
 932:FreeRTOS/Src/timers.c ****         }
 933:FreeRTOS/Src/timers.c **** 
 934:FreeRTOS/Src/timers.c ****         return xProcessTimerNow;
 935:FreeRTOS/Src/timers.c ****     }
 117              		.loc 1 935 5 view .LVU28
 118 0014 08BD     		pop	{r3, pc}
 119              	.LVL9:
 120              	.L15:
 916:FreeRTOS/Src/timers.c ****             }
 121              		.loc 1 916 17 is_stmt 1 view .LVU29
 122 0016 011D     		adds	r1, r0, #4
 123              	.LVL10:
 916:FreeRTOS/Src/timers.c ****             }
 124              		.loc 1 916 17 is_stmt 0 view .LVU30
 125 0018 094B     		ldr	r3, .L16
 126 001a 1868     		ldr	r0, [r3]
 127              	.LVL11:
 916:FreeRTOS/Src/timers.c ****             }
 128              		.loc 1 916 17 view .LVU31
 129 001c FFF7FEFF 		bl	vListInsert
 130              	.LVL12:
 899:FreeRTOS/Src/timers.c **** 
 131              		.loc 1 899 20 view .LVU32
 132 0020 0020     		movs	r0, #0
 133 0022 F7E7     		b	.L8
 134              	.LVL13:
 135              	.L9:
 921:FreeRTOS/Src/timers.c ****             {
 136              		.loc 1 921 13 is_stmt 1 view .LVU33
 921:FreeRTOS/Src/timers.c ****             {
 137              		.loc 1 921 15 is_stmt 0 view .LVU34
 138 0024 9A42     		cmp	r2, r3
 139 0026 01D2     		bcs	.L11
 921:FreeRTOS/Src/timers.c ****             {
 140              		.loc 1 921 45 discriminator 1 view .LVU35
 141 0028 9942     		cmp	r1, r3
 142 002a 06D2     		bcs	.L13
 143              	.L11:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 20


 930:FreeRTOS/Src/timers.c ****             }
 144              		.loc 1 930 17 is_stmt 1 view .LVU36
 145 002c 011D     		adds	r1, r0, #4
 146              	.LVL14:
 930:FreeRTOS/Src/timers.c ****             }
 147              		.loc 1 930 17 is_stmt 0 view .LVU37
 148 002e 054B     		ldr	r3, .L16+4
 149              	.LVL15:
 930:FreeRTOS/Src/timers.c ****             }
 150              		.loc 1 930 17 view .LVU38
 151 0030 1868     		ldr	r0, [r3]
 152              	.LVL16:
 930:FreeRTOS/Src/timers.c ****             }
 153              		.loc 1 930 17 view .LVU39
 154 0032 FFF7FEFF 		bl	vListInsert
 155              	.LVL17:
 899:FreeRTOS/Src/timers.c **** 
 156              		.loc 1 899 20 view .LVU40
 157 0036 0020     		movs	r0, #0
 158 0038 ECE7     		b	.L8
 159              	.LVL18:
 160              	.L13:
 926:FreeRTOS/Src/timers.c ****             }
 161              		.loc 1 926 34 view .LVU41
 162 003a 0120     		movs	r0, #1
 163              	.LVL19:
 934:FreeRTOS/Src/timers.c ****     }
 164              		.loc 1 934 9 is_stmt 1 view .LVU42
 934:FreeRTOS/Src/timers.c ****     }
 165              		.loc 1 934 16 is_stmt 0 view .LVU43
 166 003c EAE7     		b	.L8
 167              	.L17:
 168 003e 00BF     		.align	2
 169              	.L16:
 170 0040 00000000 		.word	pxOverflowTimerList
 171 0044 00000000 		.word	pxCurrentTimerList
 172              		.cfi_endproc
 173              	.LFE146:
 175              		.section	.text.prvReloadTimer,"ax",%progbits
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 181              	prvReloadTimer:
 182              	.LVL20:
 183              	.LFB140:
 702:FreeRTOS/Src/timers.c ****         /* Insert the timer into the appropriate list for the next expiry time.
 184              		.loc 1 702 5 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 702:FreeRTOS/Src/timers.c ****         /* Insert the timer into the appropriate list for the next expiry time.
 188              		.loc 1 702 5 is_stmt 0 view .LVU45
 189 0000 70B5     		push	{r4, r5, r6, lr}
 190              	.LCFI1:
 191              		.cfi_def_cfa_offset 16
 192              		.cfi_offset 4, -16
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 21


 193              		.cfi_offset 5, -12
 194              		.cfi_offset 6, -8
 195              		.cfi_offset 14, -4
 196 0002 0446     		mov	r4, r0
 197 0004 0D46     		mov	r5, r1
 198 0006 1646     		mov	r6, r2
 706:FreeRTOS/Src/timers.c ****         {
 199              		.loc 1 706 9 is_stmt 1 view .LVU46
 706:FreeRTOS/Src/timers.c ****         {
 200              		.loc 1 706 14 is_stmt 0 view .LVU47
 201 0008 04E0     		b	.L19
 202              	.LVL21:
 203              	.L20:
 709:FreeRTOS/Src/timers.c **** 
 204              		.loc 1 709 13 is_stmt 1 view .LVU48
 709:FreeRTOS/Src/timers.c **** 
 205              		.loc 1 709 36 is_stmt 0 view .LVU49
 206 000a A369     		ldr	r3, [r4, #24]
 709:FreeRTOS/Src/timers.c **** 
 207              		.loc 1 709 26 view .LVU50
 208 000c 1D44     		add	r5, r5, r3
 209              	.LVL22:
 712:FreeRTOS/Src/timers.c ****             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 210              		.loc 1 712 42 is_stmt 1 view .LVU51
 713:FreeRTOS/Src/timers.c ****         }
 211              		.loc 1 713 13 view .LVU52
 713:FreeRTOS/Src/timers.c ****         }
 212              		.loc 1 713 20 is_stmt 0 view .LVU53
 213 000e 236A     		ldr	r3, [r4, #32]
 713:FreeRTOS/Src/timers.c ****         }
 214              		.loc 1 713 13 view .LVU54
 215 0010 2046     		mov	r0, r4
 216 0012 9847     		blx	r3
 217              	.LVL23:
 218              	.L19:
 706:FreeRTOS/Src/timers.c ****         {
 219              		.loc 1 706 127 is_stmt 1 view .LVU55
 706:FreeRTOS/Src/timers.c ****         {
 220              		.loc 1 706 77 is_stmt 0 view .LVU56
 221 0014 A169     		ldr	r1, [r4, #24]
 706:FreeRTOS/Src/timers.c ****         {
 222              		.loc 1 706 16 view .LVU57
 223 0016 2B46     		mov	r3, r5
 224 0018 3246     		mov	r2, r6
 225 001a 2944     		add	r1, r1, r5
 226 001c 2046     		mov	r0, r4
 227 001e FFF7FEFF 		bl	prvInsertTimerInActiveList
 228              	.LVL24:
 706:FreeRTOS/Src/timers.c ****         {
 229              		.loc 1 706 127 discriminator 1 view .LVU58
 230 0022 0028     		cmp	r0, #0
 231 0024 F1D1     		bne	.L20
 715:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 232              		.loc 1 715 5 view .LVU59
 233 0026 70BD     		pop	{r4, r5, r6, pc}
 715:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 234              		.loc 1 715 5 view .LVU60
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 22


 235              		.cfi_endproc
 236              	.LFE140:
 238              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 239              		.align	1
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 244              	prvProcessExpiredTimer:
 245              	.LVL25:
 246              	.LFB141:
 720:FreeRTOS/Src/timers.c ****         /* MISRA Ref 11.5.3 [Void pointer assignment] */
 247              		.loc 1 720 5 is_stmt 1 view -0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 720:FreeRTOS/Src/timers.c ****         /* MISRA Ref 11.5.3 [Void pointer assignment] */
 251              		.loc 1 720 5 is_stmt 0 view .LVU62
 252 0000 70B5     		push	{r4, r5, r6, lr}
 253              	.LCFI2:
 254              		.cfi_def_cfa_offset 16
 255              		.cfi_offset 4, -16
 256              		.cfi_offset 5, -12
 257              		.cfi_offset 6, -8
 258              		.cfi_offset 14, -4
 259 0002 0546     		mov	r5, r0
 260 0004 0E46     		mov	r6, r1
 724:FreeRTOS/Src/timers.c **** 
 261              		.loc 1 724 9 is_stmt 1 view .LVU63
 724:FreeRTOS/Src/timers.c **** 
 262              		.loc 1 724 49 is_stmt 0 view .LVU64
 263 0006 0D4B     		ldr	r3, .L27
 264 0008 1B68     		ldr	r3, [r3]
 265 000a DB68     		ldr	r3, [r3, #12]
 724:FreeRTOS/Src/timers.c **** 
 266              		.loc 1 724 25 view .LVU65
 267 000c DC68     		ldr	r4, [r3, #12]
 268              	.LVL26:
 729:FreeRTOS/Src/timers.c **** 
 269              		.loc 1 729 9 is_stmt 1 view .LVU66
 729:FreeRTOS/Src/timers.c **** 
 270              		.loc 1 729 18 is_stmt 0 view .LVU67
 271 000e 201D     		adds	r0, r4, #4
 272              	.LVL27:
 729:FreeRTOS/Src/timers.c **** 
 273              		.loc 1 729 18 view .LVU68
 274 0010 FFF7FEFF 		bl	uxListRemove
 275              	.LVL28:
 733:FreeRTOS/Src/timers.c ****         {
 276              		.loc 1 733 9 is_stmt 1 view .LVU69
 733:FreeRTOS/Src/timers.c ****         {
 277              		.loc 1 733 22 is_stmt 0 view .LVU70
 278 0014 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 733:FreeRTOS/Src/timers.c ****         {
 279              		.loc 1 733 11 view .LVU71
 280 0018 13F0040F 		tst	r3, #4
 281 001c 07D1     		bne	.L26
 739:FreeRTOS/Src/timers.c ****         }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 23


 282              		.loc 1 739 13 is_stmt 1 view .LVU72
 739:FreeRTOS/Src/timers.c ****         }
 283              		.loc 1 739 31 is_stmt 0 view .LVU73
 284 001e 23F00103 		bic	r3, r3, #1
 285 0022 84F82430 		strb	r3, [r4, #36]
 286              	.L24:
 743:FreeRTOS/Src/timers.c ****         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 287              		.loc 1 743 38 is_stmt 1 view .LVU74
 744:FreeRTOS/Src/timers.c ****     }
 288              		.loc 1 744 9 view .LVU75
 744:FreeRTOS/Src/timers.c ****     }
 289              		.loc 1 744 16 is_stmt 0 view .LVU76
 290 0026 236A     		ldr	r3, [r4, #32]
 744:FreeRTOS/Src/timers.c ****     }
 291              		.loc 1 744 9 view .LVU77
 292 0028 2046     		mov	r0, r4
 293 002a 9847     		blx	r3
 294              	.LVL29:
 745:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 295              		.loc 1 745 5 view .LVU78
 296 002c 70BD     		pop	{r4, r5, r6, pc}
 297              	.LVL30:
 298              	.L26:
 735:FreeRTOS/Src/timers.c ****         }
 299              		.loc 1 735 13 is_stmt 1 view .LVU79
 300 002e 3246     		mov	r2, r6
 301 0030 2946     		mov	r1, r5
 302 0032 2046     		mov	r0, r4
 303 0034 FFF7FEFF 		bl	prvReloadTimer
 304              	.LVL31:
 305 0038 F5E7     		b	.L24
 306              	.L28:
 307 003a 00BF     		.align	2
 308              	.L27:
 309 003c 00000000 		.word	pxCurrentTimerList
 310              		.cfi_endproc
 311              	.LFE141:
 313              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 314              		.align	1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 319              	prvSwitchTimerLists:
 320              	.LFB148:
 936:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 937:FreeRTOS/Src/timers.c **** 
 938:FreeRTOS/Src/timers.c ****     static void prvProcessReceivedCommands( void )
 939:FreeRTOS/Src/timers.c ****     {
 940:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage = { 0 };
 941:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer;
 942:FreeRTOS/Src/timers.c ****         BaseType_t xTimerListsWereSwitched;
 943:FreeRTOS/Src/timers.c ****         TickType_t xTimeNow;
 944:FreeRTOS/Src/timers.c **** 
 945:FreeRTOS/Src/timers.c ****         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 946:FreeRTOS/Src/timers.c ****         {
 947:FreeRTOS/Src/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 948:FreeRTOS/Src/timers.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 24


 949:FreeRTOS/Src/timers.c ****                 /* Negative commands are pended function calls rather than timer
 950:FreeRTOS/Src/timers.c ****                  * commands. */
 951:FreeRTOS/Src/timers.c ****                 if( xMessage.xMessageID < ( BaseType_t ) 0 )
 952:FreeRTOS/Src/timers.c ****                 {
 953:FreeRTOS/Src/timers.c ****                     const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParamete
 954:FreeRTOS/Src/timers.c **** 
 955:FreeRTOS/Src/timers.c ****                     /* The timer uses the xCallbackParameters member to request a
 956:FreeRTOS/Src/timers.c ****                      * callback be executed.  Check the callback is not NULL. */
 957:FreeRTOS/Src/timers.c ****                     configASSERT( pxCallback );
 958:FreeRTOS/Src/timers.c **** 
 959:FreeRTOS/Src/timers.c ****                     /* Call the function. */
 960:FreeRTOS/Src/timers.c ****                     pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParamet
 961:FreeRTOS/Src/timers.c ****                 }
 962:FreeRTOS/Src/timers.c ****                 else
 963:FreeRTOS/Src/timers.c ****                 {
 964:FreeRTOS/Src/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 965:FreeRTOS/Src/timers.c ****                 }
 966:FreeRTOS/Src/timers.c ****             }
 967:FreeRTOS/Src/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 968:FreeRTOS/Src/timers.c **** 
 969:FreeRTOS/Src/timers.c ****             /* Commands that are positive are timer commands rather than pended
 970:FreeRTOS/Src/timers.c ****              * function calls. */
 971:FreeRTOS/Src/timers.c ****             if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 972:FreeRTOS/Src/timers.c ****             {
 973:FreeRTOS/Src/timers.c ****                 /* The messages uses the xTimerParameters member to work on a
 974:FreeRTOS/Src/timers.c ****                  * software timer. */
 975:FreeRTOS/Src/timers.c ****                 pxTimer = xMessage.u.xTimerParameters.pxTimer;
 976:FreeRTOS/Src/timers.c **** 
 977:FreeRTOS/Src/timers.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 978:FreeRTOS/Src/timers.c ****                 {
 979:FreeRTOS/Src/timers.c ****                     /* The timer is in a list, remove it. */
 980:FreeRTOS/Src/timers.c ****                     ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 981:FreeRTOS/Src/timers.c ****                 }
 982:FreeRTOS/Src/timers.c ****                 else
 983:FreeRTOS/Src/timers.c ****                 {
 984:FreeRTOS/Src/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 985:FreeRTOS/Src/timers.c ****                 }
 986:FreeRTOS/Src/timers.c **** 
 987:FreeRTOS/Src/timers.c ****                 traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParamet
 988:FreeRTOS/Src/timers.c **** 
 989:FreeRTOS/Src/timers.c ****                 /* In this case the xTimerListsWereSwitched parameter is not used, but
 990:FreeRTOS/Src/timers.c ****                  *  it must be present in the function call.  prvSampleTimeNow() must be
 991:FreeRTOS/Src/timers.c ****                  *  called after the message is received from xTimerQueue so there is no
 992:FreeRTOS/Src/timers.c ****                  *  possibility of a higher priority task adding a message to the message
 993:FreeRTOS/Src/timers.c ****                  *  queue with a time that is ahead of the timer daemon task (because it
 994:FreeRTOS/Src/timers.c ****                  *  pre-empted the timer daemon task after the xTimeNow value was set). */
 995:FreeRTOS/Src/timers.c ****                 xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 996:FreeRTOS/Src/timers.c **** 
 997:FreeRTOS/Src/timers.c ****                 switch( xMessage.xMessageID )
 998:FreeRTOS/Src/timers.c ****                 {
 999:FreeRTOS/Src/timers.c ****                     case tmrCOMMAND_START:
1000:FreeRTOS/Src/timers.c ****                     case tmrCOMMAND_START_FROM_ISR:
1001:FreeRTOS/Src/timers.c ****                     case tmrCOMMAND_RESET:
1002:FreeRTOS/Src/timers.c ****                     case tmrCOMMAND_RESET_FROM_ISR:
1003:FreeRTOS/Src/timers.c ****                         /* Start or restart a timer. */
1004:FreeRTOS/Src/timers.c ****                         pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
1005:FreeRTOS/Src/timers.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 25


1006:FreeRTOS/Src/timers.c ****                         if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessa
1007:FreeRTOS/Src/timers.c ****                         {
1008:FreeRTOS/Src/timers.c ****                             /* The timer expired before it was added to the active
1009:FreeRTOS/Src/timers.c ****                              * timer list.  Process it now. */
1010:FreeRTOS/Src/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
1011:FreeRTOS/Src/timers.c ****                             {
1012:FreeRTOS/Src/timers.c ****                                 prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue 
1013:FreeRTOS/Src/timers.c ****                             }
1014:FreeRTOS/Src/timers.c ****                             else
1015:FreeRTOS/Src/timers.c ****                             {
1016:FreeRTOS/Src/timers.c ****                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
1017:FreeRTOS/Src/timers.c ****                             }
1018:FreeRTOS/Src/timers.c **** 
1019:FreeRTOS/Src/timers.c ****                             /* Call the timer callback. */
1020:FreeRTOS/Src/timers.c ****                             traceTIMER_EXPIRED( pxTimer );
1021:FreeRTOS/Src/timers.c ****                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1022:FreeRTOS/Src/timers.c ****                         }
1023:FreeRTOS/Src/timers.c ****                         else
1024:FreeRTOS/Src/timers.c ****                         {
1025:FreeRTOS/Src/timers.c ****                             mtCOVERAGE_TEST_MARKER();
1026:FreeRTOS/Src/timers.c ****                         }
1027:FreeRTOS/Src/timers.c **** 
1028:FreeRTOS/Src/timers.c ****                         break;
1029:FreeRTOS/Src/timers.c **** 
1030:FreeRTOS/Src/timers.c ****                     case tmrCOMMAND_STOP:
1031:FreeRTOS/Src/timers.c ****                     case tmrCOMMAND_STOP_FROM_ISR:
1032:FreeRTOS/Src/timers.c ****                         /* The timer has already been removed from the active list. */
1033:FreeRTOS/Src/timers.c ****                         pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
1034:FreeRTOS/Src/timers.c ****                         break;
1035:FreeRTOS/Src/timers.c **** 
1036:FreeRTOS/Src/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD:
1037:FreeRTOS/Src/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
1038:FreeRTOS/Src/timers.c ****                         pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
1039:FreeRTOS/Src/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1040:FreeRTOS/Src/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1041:FreeRTOS/Src/timers.c **** 
1042:FreeRTOS/Src/timers.c ****                         /* The new period does not really have a reference, and can
1043:FreeRTOS/Src/timers.c ****                          * be longer or shorter than the old one.  The command time is
1044:FreeRTOS/Src/timers.c ****                          * therefore set to the current time, and as the period cannot
1045:FreeRTOS/Src/timers.c ****                          * be zero the next expiry time can only be in the future,
1046:FreeRTOS/Src/timers.c ****                          * meaning (unlike for the xTimerStart() case above) there is
1047:FreeRTOS/Src/timers.c ****                          * no fail case that needs to be handled here. */
1048:FreeRTOS/Src/timers.c ****                         ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerP
1049:FreeRTOS/Src/timers.c ****                         break;
1050:FreeRTOS/Src/timers.c **** 
1051:FreeRTOS/Src/timers.c ****                     case tmrCOMMAND_DELETE:
1052:FreeRTOS/Src/timers.c ****                         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
1053:FreeRTOS/Src/timers.c ****                         {
1054:FreeRTOS/Src/timers.c ****                             /* The timer has already been removed from the active list,
1055:FreeRTOS/Src/timers.c ****                              * just free up the memory if the memory was dynamically
1056:FreeRTOS/Src/timers.c ****                              * allocated. */
1057:FreeRTOS/Src/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint
1058:FreeRTOS/Src/timers.c ****                             {
1059:FreeRTOS/Src/timers.c ****                                 vPortFree( pxTimer );
1060:FreeRTOS/Src/timers.c ****                             }
1061:FreeRTOS/Src/timers.c ****                             else
1062:FreeRTOS/Src/timers.c ****                             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 26


1063:FreeRTOS/Src/timers.c ****                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
1064:FreeRTOS/Src/timers.c ****                             }
1065:FreeRTOS/Src/timers.c ****                         }
1066:FreeRTOS/Src/timers.c ****                         #else /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
1067:FreeRTOS/Src/timers.c ****                         {
1068:FreeRTOS/Src/timers.c ****                             /* If dynamic allocation is not enabled, the memory
1069:FreeRTOS/Src/timers.c ****                              * could not have been dynamically allocated. So there is
1070:FreeRTOS/Src/timers.c ****                              * no need to free the memory - just mark the timer as
1071:FreeRTOS/Src/timers.c ****                              * "not active". */
1072:FreeRTOS/Src/timers.c ****                             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
1073:FreeRTOS/Src/timers.c ****                         }
1074:FreeRTOS/Src/timers.c ****                         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1075:FreeRTOS/Src/timers.c ****                         break;
1076:FreeRTOS/Src/timers.c **** 
1077:FreeRTOS/Src/timers.c ****                     default:
1078:FreeRTOS/Src/timers.c ****                         /* Don't expect to get here. */
1079:FreeRTOS/Src/timers.c ****                         break;
1080:FreeRTOS/Src/timers.c ****                 }
1081:FreeRTOS/Src/timers.c ****             }
1082:FreeRTOS/Src/timers.c ****         }
1083:FreeRTOS/Src/timers.c ****     }
1084:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1085:FreeRTOS/Src/timers.c **** 
1086:FreeRTOS/Src/timers.c ****     static void prvSwitchTimerLists( void )
1087:FreeRTOS/Src/timers.c ****     {
 321              		.loc 1 1087 5 view -0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325 0000 08B5     		push	{r3, lr}
 326              	.LCFI3:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 3, -8
 329              		.cfi_offset 14, -4
1088:FreeRTOS/Src/timers.c ****         TickType_t xNextExpireTime;
 330              		.loc 1 1088 9 view .LVU81
1089:FreeRTOS/Src/timers.c ****         List_t * pxTemp;
 331              		.loc 1 1089 9 view .LVU82
1090:FreeRTOS/Src/timers.c **** 
1091:FreeRTOS/Src/timers.c ****         /* The tick count has overflowed.  The timer lists must be switched.
1092:FreeRTOS/Src/timers.c ****          * If there are any timers still referenced from the current timer list
1093:FreeRTOS/Src/timers.c ****          * then they must have expired and should be processed before the lists
1094:FreeRTOS/Src/timers.c ****          * are switched. */
1095:FreeRTOS/Src/timers.c ****         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 332              		.loc 1 1095 9 view .LVU83
 333              		.loc 1 1095 14 is_stmt 0 view .LVU84
 334 0002 05E0     		b	.L30
 335              	.L31:
1096:FreeRTOS/Src/timers.c ****         {
1097:FreeRTOS/Src/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 336              		.loc 1 1097 13 is_stmt 1 view .LVU85
 337              		.loc 1 1097 31 is_stmt 0 view .LVU86
 338 0004 DB68     		ldr	r3, [r3, #12]
 339              	.LVL32:
1098:FreeRTOS/Src/timers.c **** 
1099:FreeRTOS/Src/timers.c ****             /* Process the expired timer.  For auto-reload timers, be careful to
1100:FreeRTOS/Src/timers.c ****              * process only expirations that occur on the current list.  Further
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 27


1101:FreeRTOS/Src/timers.c ****              * expirations must wait until after the lists are switched. */
1102:FreeRTOS/Src/timers.c ****             prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 340              		.loc 1 1102 13 is_stmt 1 view .LVU87
 341 0006 4FF0FF31 		mov	r1, #-1
 342 000a 1868     		ldr	r0, [r3]
 343 000c FFF7FEFF 		bl	prvProcessExpiredTimer
 344              	.LVL33:
 345              	.L30:
1095:FreeRTOS/Src/timers.c ****         {
 346              		.loc 1 1095 56 view .LVU88
1095:FreeRTOS/Src/timers.c ****         {
 347              		.loc 1 1095 16 is_stmt 0 view .LVU89
 348 0010 054B     		ldr	r3, .L33
 349 0012 1B68     		ldr	r3, [r3]
 350 0014 1A68     		ldr	r2, [r3]
1095:FreeRTOS/Src/timers.c ****         {
 351              		.loc 1 1095 56 view .LVU90
 352 0016 002A     		cmp	r2, #0
 353 0018 F4D1     		bne	.L31
1103:FreeRTOS/Src/timers.c ****         }
1104:FreeRTOS/Src/timers.c **** 
1105:FreeRTOS/Src/timers.c ****         pxTemp = pxCurrentTimerList;
 354              		.loc 1 1105 9 is_stmt 1 view .LVU91
 355              	.LVL34:
1106:FreeRTOS/Src/timers.c ****         pxCurrentTimerList = pxOverflowTimerList;
 356              		.loc 1 1106 9 view .LVU92
 357              		.loc 1 1106 28 is_stmt 0 view .LVU93
 358 001a 044A     		ldr	r2, .L33+4
 359 001c 1068     		ldr	r0, [r2]
 360 001e 0249     		ldr	r1, .L33
 361 0020 0860     		str	r0, [r1]
1107:FreeRTOS/Src/timers.c ****         pxOverflowTimerList = pxTemp;
 362              		.loc 1 1107 9 is_stmt 1 view .LVU94
 363              		.loc 1 1107 29 is_stmt 0 view .LVU95
 364 0022 1360     		str	r3, [r2]
1108:FreeRTOS/Src/timers.c ****     }
 365              		.loc 1 1108 5 view .LVU96
 366 0024 08BD     		pop	{r3, pc}
 367              	.LVL35:
 368              	.L34:
 369              		.loc 1 1108 5 view .LVU97
 370 0026 00BF     		.align	2
 371              	.L33:
 372 0028 00000000 		.word	pxCurrentTimerList
 373 002c 00000000 		.word	pxOverflowTimerList
 374              		.cfi_endproc
 375              	.LFE148:
 377              		.section	.text.prvSampleTimeNow,"ax",%progbits
 378              		.align	1
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 383              	prvSampleTimeNow:
 384              	.LVL36:
 385              	.LFB145:
 872:FreeRTOS/Src/timers.c ****         TickType_t xTimeNow;
 386              		.loc 1 872 5 is_stmt 1 view -0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 28


 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 872:FreeRTOS/Src/timers.c ****         TickType_t xTimeNow;
 390              		.loc 1 872 5 is_stmt 0 view .LVU99
 391 0000 38B5     		push	{r3, r4, r5, lr}
 392              	.LCFI4:
 393              		.cfi_def_cfa_offset 16
 394              		.cfi_offset 3, -16
 395              		.cfi_offset 4, -12
 396              		.cfi_offset 5, -8
 397              		.cfi_offset 14, -4
 398 0002 0546     		mov	r5, r0
 873:FreeRTOS/Src/timers.c ****         PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;
 399              		.loc 1 873 9 is_stmt 1 view .LVU100
 874:FreeRTOS/Src/timers.c **** 
 400              		.loc 1 874 25 view .LVU101
 876:FreeRTOS/Src/timers.c **** 
 401              		.loc 1 876 9 view .LVU102
 876:FreeRTOS/Src/timers.c **** 
 402              		.loc 1 876 20 is_stmt 0 view .LVU103
 403 0004 FFF7FEFF 		bl	xTaskGetTickCount
 404              	.LVL37:
 876:FreeRTOS/Src/timers.c **** 
 405              		.loc 1 876 20 view .LVU104
 406 0008 0446     		mov	r4, r0
 407              	.LVL38:
 878:FreeRTOS/Src/timers.c ****         {
 408              		.loc 1 878 9 is_stmt 1 view .LVU105
 878:FreeRTOS/Src/timers.c ****         {
 409              		.loc 1 878 22 is_stmt 0 view .LVU106
 410 000a 074B     		ldr	r3, .L40
 411 000c 1B68     		ldr	r3, [r3]
 878:FreeRTOS/Src/timers.c ****         {
 412              		.loc 1 878 11 view .LVU107
 413 000e 8342     		cmp	r3, r0
 414 0010 05D8     		bhi	.L39
 885:FreeRTOS/Src/timers.c ****         }
 415              		.loc 1 885 13 is_stmt 1 view .LVU108
 885:FreeRTOS/Src/timers.c ****         }
 416              		.loc 1 885 39 is_stmt 0 view .LVU109
 417 0012 0023     		movs	r3, #0
 418 0014 2B60     		str	r3, [r5]
 419              	.LVL39:
 420              	.L37:
 888:FreeRTOS/Src/timers.c **** 
 421              		.loc 1 888 9 is_stmt 1 view .LVU110
 888:FreeRTOS/Src/timers.c **** 
 422              		.loc 1 888 19 is_stmt 0 view .LVU111
 423 0016 044B     		ldr	r3, .L40
 424 0018 1C60     		str	r4, [r3]
 890:FreeRTOS/Src/timers.c ****     }
 425              		.loc 1 890 9 is_stmt 1 view .LVU112
 891:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 426              		.loc 1 891 5 is_stmt 0 view .LVU113
 427 001a 2046     		mov	r0, r4
 428 001c 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 29


 429              	.LVL40:
 430              	.L39:
 880:FreeRTOS/Src/timers.c ****             *pxTimerListsWereSwitched = pdTRUE;
 431              		.loc 1 880 13 is_stmt 1 view .LVU114
 432 001e FFF7FEFF 		bl	prvSwitchTimerLists
 433              	.LVL41:
 881:FreeRTOS/Src/timers.c ****         }
 434              		.loc 1 881 13 view .LVU115
 881:FreeRTOS/Src/timers.c ****         }
 435              		.loc 1 881 39 is_stmt 0 view .LVU116
 436 0022 0123     		movs	r3, #1
 437 0024 2B60     		str	r3, [r5]
 438 0026 F6E7     		b	.L37
 439              	.L41:
 440              		.align	2
 441              	.L40:
 442 0028 00000000 		.word	xLastTime.0
 443              		.cfi_endproc
 444              	.LFE145:
 446              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 447              		.align	1
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 452              	prvProcessTimerOrBlockTask:
 453              	.LVL42:
 454              	.LFB143:
 784:FreeRTOS/Src/timers.c ****         TickType_t xTimeNow;
 455              		.loc 1 784 5 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 8
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 784:FreeRTOS/Src/timers.c ****         TickType_t xTimeNow;
 459              		.loc 1 784 5 is_stmt 0 view .LVU118
 460 0000 70B5     		push	{r4, r5, r6, lr}
 461              	.LCFI5:
 462              		.cfi_def_cfa_offset 16
 463              		.cfi_offset 4, -16
 464              		.cfi_offset 5, -12
 465              		.cfi_offset 6, -8
 466              		.cfi_offset 14, -4
 467 0002 82B0     		sub	sp, sp, #8
 468              	.LCFI6:
 469              		.cfi_def_cfa_offset 24
 470 0004 0646     		mov	r6, r0
 471 0006 0C46     		mov	r4, r1
 785:FreeRTOS/Src/timers.c ****         BaseType_t xTimerListsWereSwitched;
 472              		.loc 1 785 9 is_stmt 1 view .LVU119
 786:FreeRTOS/Src/timers.c **** 
 473              		.loc 1 786 9 view .LVU120
 788:FreeRTOS/Src/timers.c ****         {
 474              		.loc 1 788 9 view .LVU121
 475 0008 FFF7FEFF 		bl	vTaskSuspendAll
 476              	.LVL43:
 795:FreeRTOS/Src/timers.c **** 
 477              		.loc 1 795 13 view .LVU122
 795:FreeRTOS/Src/timers.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 30


 478              		.loc 1 795 24 is_stmt 0 view .LVU123
 479 000c 01A8     		add	r0, sp, #4
 480 000e FFF7FEFF 		bl	prvSampleTimeNow
 481              	.LVL44:
 797:FreeRTOS/Src/timers.c ****             {
 482              		.loc 1 797 13 is_stmt 1 view .LVU124
 797:FreeRTOS/Src/timers.c ****             {
 483              		.loc 1 797 41 is_stmt 0 view .LVU125
 484 0012 019B     		ldr	r3, [sp, #4]
 797:FreeRTOS/Src/timers.c ****             {
 485              		.loc 1 797 15 view .LVU126
 486 0014 33BB     		cbnz	r3, .L43
 487 0016 0546     		mov	r5, r0
 800:FreeRTOS/Src/timers.c ****                 {
 488              		.loc 1 800 17 is_stmt 1 view .LVU127
 800:FreeRTOS/Src/timers.c ****                 {
 489              		.loc 1 800 19 is_stmt 0 view .LVU128
 490 0018 E4B9     		cbnz	r4, .L44
 800:FreeRTOS/Src/timers.c ****                 {
 491              		.loc 1 800 50 discriminator 1 view .LVU129
 492 001a B042     		cmp	r0, r6
 493 001c 13D2     		bcs	.L49
 494              	.LVL45:
 495              	.L45:
 820:FreeRTOS/Src/timers.c **** 
 496              		.loc 1 820 21 is_stmt 1 view .LVU130
 497 001e 2246     		mov	r2, r4
 498 0020 711B     		subs	r1, r6, r5
 499 0022 124B     		ldr	r3, .L50
 500 0024 1868     		ldr	r0, [r3]
 501              	.LVL46:
 820:FreeRTOS/Src/timers.c **** 
 502              		.loc 1 820 21 is_stmt 0 view .LVU131
 503 0026 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 504              	.LVL47:
 822:FreeRTOS/Src/timers.c ****                     {
 505              		.loc 1 822 21 is_stmt 1 view .LVU132
 822:FreeRTOS/Src/timers.c ****                     {
 506              		.loc 1 822 25 is_stmt 0 view .LVU133
 507 002a FFF7FEFF 		bl	xTaskResumeAll
 508              	.LVL48:
 822:FreeRTOS/Src/timers.c ****                     {
 509              		.loc 1 822 23 discriminator 1 view .LVU134
 510 002e D8B9     		cbnz	r0, .L42
 828:FreeRTOS/Src/timers.c ****                     }
 511              		.loc 1 828 25 is_stmt 1 view .LVU135
 512 0030 4FF0E023 		mov	r3, #-536813568
 513 0034 4FF08052 		mov	r2, #268435456
 514 0038 C3F8042D 		str	r2, [r3, #3332]
 828:FreeRTOS/Src/timers.c ****                     }
 515              		.loc 1 828 25 view .LVU136
 516              		.syntax unified
 517              	@ 828 "FreeRTOS/Src/timers.c" 1
 518 003c BFF34F8F 		dsb
 519              	@ 0 "" 2
 828:FreeRTOS/Src/timers.c ****                     }
 520              		.loc 1 828 25 view .LVU137
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 31


 521              	@ 828 "FreeRTOS/Src/timers.c" 1
 522 0040 BFF36F8F 		isb
 523              	@ 0 "" 2
 828:FreeRTOS/Src/timers.c ****                     }
 524              		.loc 1 828 47 view .LVU138
 525              		.thumb
 526              		.syntax unified
 527 0044 10E0     		b	.L42
 528              	.LVL49:
 529              	.L49:
 802:FreeRTOS/Src/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 530              		.loc 1 802 21 view .LVU139
 802:FreeRTOS/Src/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 531              		.loc 1 802 30 is_stmt 0 view .LVU140
 532 0046 FFF7FEFF 		bl	xTaskResumeAll
 533              	.LVL50:
 803:FreeRTOS/Src/timers.c ****                 }
 534              		.loc 1 803 21 is_stmt 1 view .LVU141
 535 004a 2946     		mov	r1, r5
 536 004c 3046     		mov	r0, r6
 537 004e FFF7FEFF 		bl	prvProcessExpiredTimer
 538              	.LVL51:
 539 0052 09E0     		b	.L42
 540              	.LVL52:
 541              	.L44:
 817:FreeRTOS/Src/timers.c ****                     }
 542              		.loc 1 817 25 view .LVU142
 817:FreeRTOS/Src/timers.c ****                     }
 543              		.loc 1 817 41 is_stmt 0 view .LVU143
 544 0054 064A     		ldr	r2, .L50+4
 545 0056 1268     		ldr	r2, [r2]
 546 0058 1268     		ldr	r2, [r2]
 547 005a 0AB9     		cbnz	r2, .L47
 817:FreeRTOS/Src/timers.c ****                     }
 548              		.loc 1 817 41 discriminator 1 view .LVU144
 549 005c 0124     		movs	r4, #1
 550              	.LVL53:
 817:FreeRTOS/Src/timers.c ****                     }
 551              		.loc 1 817 41 discriminator 1 view .LVU145
 552 005e DEE7     		b	.L45
 553              	.LVL54:
 554              	.L47:
 817:FreeRTOS/Src/timers.c ****                     }
 555              		.loc 1 817 41 discriminator 2 view .LVU146
 556 0060 1C46     		mov	r4, r3
 557              	.LVL55:
 817:FreeRTOS/Src/timers.c ****                     }
 558              		.loc 1 817 41 discriminator 2 view .LVU147
 559 0062 DCE7     		b	.L45
 560              	.LVL56:
 561              	.L43:
 838:FreeRTOS/Src/timers.c ****             }
 562              		.loc 1 838 17 is_stmt 1 view .LVU148
 838:FreeRTOS/Src/timers.c ****             }
 563              		.loc 1 838 26 is_stmt 0 view .LVU149
 564 0064 FFF7FEFF 		bl	xTaskResumeAll
 565              	.LVL57:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 32


 566              	.L42:
 841:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 567              		.loc 1 841 5 view .LVU150
 568 0068 02B0     		add	sp, sp, #8
 569              	.LCFI7:
 570              		.cfi_def_cfa_offset 16
 571              		@ sp needed
 572 006a 70BD     		pop	{r4, r5, r6, pc}
 573              	.LVL58:
 574              	.L51:
 841:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 575              		.loc 1 841 5 view .LVU151
 576              		.align	2
 577              	.L50:
 578 006c 00000000 		.word	xTimerQueue
 579 0070 00000000 		.word	pxOverflowTimerList
 580              		.cfi_endproc
 581              	.LFE143:
 583              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 584              		.align	1
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 589              	prvProcessReceivedCommands:
 590              	.LFB147:
 939:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage = { 0 };
 591              		.loc 1 939 5 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 16
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595 0000 30B5     		push	{r4, r5, lr}
 596              	.LCFI8:
 597              		.cfi_def_cfa_offset 12
 598              		.cfi_offset 4, -12
 599              		.cfi_offset 5, -8
 600              		.cfi_offset 14, -4
 601 0002 85B0     		sub	sp, sp, #20
 602              	.LCFI9:
 603              		.cfi_def_cfa_offset 32
 940:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer;
 604              		.loc 1 940 9 view .LVU153
 940:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer;
 605              		.loc 1 940 29 is_stmt 0 view .LVU154
 606 0004 0023     		movs	r3, #0
 607 0006 0193     		str	r3, [sp, #4]
 608 0008 0293     		str	r3, [sp, #8]
 609 000a 0393     		str	r3, [sp, #12]
 941:FreeRTOS/Src/timers.c ****         BaseType_t xTimerListsWereSwitched;
 610              		.loc 1 941 9 is_stmt 1 view .LVU155
 942:FreeRTOS/Src/timers.c ****         TickType_t xTimeNow;
 611              		.loc 1 942 9 view .LVU156
 943:FreeRTOS/Src/timers.c **** 
 612              		.loc 1 943 9 view .LVU157
 945:FreeRTOS/Src/timers.c ****         {
 613              		.loc 1 945 9 view .LVU158
 614              	.L54:
 945:FreeRTOS/Src/timers.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 33


 615              		.loc 1 945 69 view .LVU159
 945:FreeRTOS/Src/timers.c ****         {
 616              		.loc 1 945 16 is_stmt 0 view .LVU160
 617 000c 0022     		movs	r2, #0
 618 000e 01A9     		add	r1, sp, #4
 619 0010 334B     		ldr	r3, .L72
 620 0012 1868     		ldr	r0, [r3]
 621 0014 FFF7FEFF 		bl	xQueueReceive
 622              	.LVL59:
 945:FreeRTOS/Src/timers.c ****         {
 623              		.loc 1 945 69 discriminator 1 view .LVU161
 624 0018 0028     		cmp	r0, #0
 625 001a 5FD0     		beq	.L69
 971:FreeRTOS/Src/timers.c ****             {
 626              		.loc 1 971 13 is_stmt 1 view .LVU162
 971:FreeRTOS/Src/timers.c ****             {
 627              		.loc 1 971 25 is_stmt 0 view .LVU163
 628 001c 019B     		ldr	r3, [sp, #4]
 971:FreeRTOS/Src/timers.c ****             {
 629              		.loc 1 971 15 view .LVU164
 630 001e 002B     		cmp	r3, #0
 631 0020 F4DB     		blt	.L54
 975:FreeRTOS/Src/timers.c **** 
 632              		.loc 1 975 17 is_stmt 1 view .LVU165
 975:FreeRTOS/Src/timers.c **** 
 633              		.loc 1 975 25 is_stmt 0 view .LVU166
 634 0022 039C     		ldr	r4, [sp, #12]
 635              	.LVL60:
 977:FreeRTOS/Src/timers.c ****                 {
 636              		.loc 1 977 17 is_stmt 1 view .LVU167
 977:FreeRTOS/Src/timers.c ****                 {
 637              		.loc 1 977 21 is_stmt 0 view .LVU168
 638 0024 6369     		ldr	r3, [r4, #20]
 977:FreeRTOS/Src/timers.c ****                 {
 639              		.loc 1 977 19 view .LVU169
 640 0026 13B1     		cbz	r3, .L55
 980:FreeRTOS/Src/timers.c ****                 }
 641              		.loc 1 980 21 is_stmt 1 view .LVU170
 980:FreeRTOS/Src/timers.c ****                 }
 642              		.loc 1 980 30 is_stmt 0 view .LVU171
 643 0028 201D     		adds	r0, r4, #4
 644 002a FFF7FEFF 		bl	uxListRemove
 645              	.LVL61:
 646              	.L55:
 984:FreeRTOS/Src/timers.c ****                 }
 647              		.loc 1 984 45 is_stmt 1 view .LVU172
 987:FreeRTOS/Src/timers.c **** 
 648              		.loc 1 987 119 view .LVU173
 995:FreeRTOS/Src/timers.c **** 
 649              		.loc 1 995 17 view .LVU174
 995:FreeRTOS/Src/timers.c **** 
 650              		.loc 1 995 28 is_stmt 0 view .LVU175
 651 002e 6846     		mov	r0, sp
 652 0030 FFF7FEFF 		bl	prvSampleTimeNow
 653              	.LVL62:
 654 0034 0546     		mov	r5, r0
 655              	.LVL63:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 34


 997:FreeRTOS/Src/timers.c ****                 {
 656              		.loc 1 997 17 is_stmt 1 view .LVU176
 997:FreeRTOS/Src/timers.c ****                 {
 657              		.loc 1 997 33 is_stmt 0 view .LVU177
 658 0036 019B     		ldr	r3, [sp, #4]
 997:FreeRTOS/Src/timers.c ****                 {
 659              		.loc 1 997 17 view .LVU178
 660 0038 013B     		subs	r3, r3, #1
 661 003a 082B     		cmp	r3, #8
 662 003c E6D8     		bhi	.L54
 663 003e DFE803F0 		tbb	[pc, r3]
 664              	.L58:
 665 0042 05       		.byte	(.L60-.L58)/2
 666 0043 05       		.byte	(.L60-.L58)/2
 667 0044 29       		.byte	(.L59-.L58)/2
 668 0045 30       		.byte	(.L57-.L58)/2
 669 0046 3F       		.byte	(.L61-.L58)/2
 670 0047 05       		.byte	(.L60-.L58)/2
 671 0048 05       		.byte	(.L60-.L58)/2
 672 0049 29       		.byte	(.L59-.L58)/2
 673 004a 30       		.byte	(.L57-.L58)/2
 674 004b 00       		.p2align 1
 675              	.L60:
1004:FreeRTOS/Src/timers.c **** 
 676              		.loc 1 1004 25 is_stmt 1 view .LVU179
1004:FreeRTOS/Src/timers.c **** 
 677              		.loc 1 1004 32 is_stmt 0 view .LVU180
 678 004c 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
1004:FreeRTOS/Src/timers.c **** 
 679              		.loc 1 1004 43 view .LVU181
 680 0050 43F00103 		orr	r3, r3, #1
 681 0054 84F82430 		strb	r3, [r4, #36]
1006:FreeRTOS/Src/timers.c ****                         {
 682              		.loc 1 1006 25 is_stmt 1 view .LVU182
1006:FreeRTOS/Src/timers.c ****                         {
 683              		.loc 1 1006 93 is_stmt 0 view .LVU183
 684 0058 029B     		ldr	r3, [sp, #8]
1006:FreeRTOS/Src/timers.c ****                         {
 685              		.loc 1 1006 117 view .LVU184
 686 005a A169     		ldr	r1, [r4, #24]
1006:FreeRTOS/Src/timers.c ****                         {
 687              		.loc 1 1006 29 view .LVU185
 688 005c 0246     		mov	r2, r0
 689 005e 1944     		add	r1, r1, r3
 690 0060 2046     		mov	r0, r4
 691              	.LVL64:
1006:FreeRTOS/Src/timers.c ****                         {
 692              		.loc 1 1006 29 view .LVU186
 693 0062 FFF7FEFF 		bl	prvInsertTimerInActiveList
 694              	.LVL65:
1006:FreeRTOS/Src/timers.c ****                         {
 695              		.loc 1 1006 27 discriminator 1 view .LVU187
 696 0066 0028     		cmp	r0, #0
 697 0068 D0D0     		beq	.L54
1010:FreeRTOS/Src/timers.c ****                             {
 698              		.loc 1 1010 29 is_stmt 1 view .LVU188
1010:FreeRTOS/Src/timers.c ****                             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 35


 699              		.loc 1 1010 42 is_stmt 0 view .LVU189
 700 006a 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
1010:FreeRTOS/Src/timers.c ****                             {
 701              		.loc 1 1010 31 view .LVU190
 702 006e 13F0040F 		tst	r3, #4
 703 0072 07D1     		bne	.L70
1016:FreeRTOS/Src/timers.c ****                             }
 704              		.loc 1 1016 33 is_stmt 1 view .LVU191
1016:FreeRTOS/Src/timers.c ****                             }
 705              		.loc 1 1016 51 is_stmt 0 view .LVU192
 706 0074 23F00103 		bic	r3, r3, #1
 707 0078 84F82430 		strb	r3, [r4, #36]
 708              	.L64:
1020:FreeRTOS/Src/timers.c ****                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 709              		.loc 1 1020 58 is_stmt 1 view .LVU193
1021:FreeRTOS/Src/timers.c ****                         }
 710              		.loc 1 1021 29 view .LVU194
1021:FreeRTOS/Src/timers.c ****                         }
 711              		.loc 1 1021 36 is_stmt 0 view .LVU195
 712 007c 236A     		ldr	r3, [r4, #32]
1021:FreeRTOS/Src/timers.c ****                         }
 713              		.loc 1 1021 29 view .LVU196
 714 007e 2046     		mov	r0, r4
 715 0080 9847     		blx	r3
 716              	.LVL66:
 717 0082 C3E7     		b	.L54
 718              	.L70:
1012:FreeRTOS/Src/timers.c ****                             }
 719              		.loc 1 1012 33 is_stmt 1 view .LVU197
1012:FreeRTOS/Src/timers.c ****                             }
 720              		.loc 1 1012 109 is_stmt 0 view .LVU198
 721 0084 A369     		ldr	r3, [r4, #24]
1012:FreeRTOS/Src/timers.c ****                             }
 722              		.loc 1 1012 33 view .LVU199
 723 0086 2A46     		mov	r2, r5
 724 0088 0299     		ldr	r1, [sp, #8]
 725 008a 1944     		add	r1, r1, r3
 726 008c 2046     		mov	r0, r4
 727 008e FFF7FEFF 		bl	prvReloadTimer
 728              	.LVL67:
 729 0092 F3E7     		b	.L64
 730              	.LVL68:
 731              	.L59:
1033:FreeRTOS/Src/timers.c ****                         break;
 732              		.loc 1 1033 25 is_stmt 1 view .LVU200
1033:FreeRTOS/Src/timers.c ****                         break;
 733              		.loc 1 1033 32 is_stmt 0 view .LVU201
 734 0094 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
1033:FreeRTOS/Src/timers.c ****                         break;
 735              		.loc 1 1033 43 view .LVU202
 736 0098 23F00103 		bic	r3, r3, #1
 737 009c 84F82430 		strb	r3, [r4, #36]
1034:FreeRTOS/Src/timers.c **** 
 738              		.loc 1 1034 25 is_stmt 1 view .LVU203
 739 00a0 B4E7     		b	.L54
 740              	.L57:
1038:FreeRTOS/Src/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 36


 741              		.loc 1 1038 25 view .LVU204
1038:FreeRTOS/Src/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 742              		.loc 1 1038 32 is_stmt 0 view .LVU205
 743 00a2 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
1038:FreeRTOS/Src/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 744              		.loc 1 1038 43 view .LVU206
 745 00a6 43F00103 		orr	r3, r3, #1
 746 00aa 84F82430 		strb	r3, [r4, #36]
1039:FreeRTOS/Src/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 747              		.loc 1 1039 25 is_stmt 1 view .LVU207
1039:FreeRTOS/Src/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 748              		.loc 1 1039 83 is_stmt 0 view .LVU208
 749 00ae 0299     		ldr	r1, [sp, #8]
1039:FreeRTOS/Src/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 750              		.loc 1 1039 54 view .LVU209
 751 00b0 A161     		str	r1, [r4, #24]
1040:FreeRTOS/Src/timers.c **** 
 752              		.loc 1 1040 77 is_stmt 1 view .LVU210
1048:FreeRTOS/Src/timers.c ****                         break;
 753              		.loc 1 1048 25 view .LVU211
1048:FreeRTOS/Src/timers.c ****                         break;
 754              		.loc 1 1048 34 is_stmt 0 view .LVU212
 755 00b2 0346     		mov	r3, r0
 756 00b4 0246     		mov	r2, r0
 757 00b6 0144     		add	r1, r1, r0
 758 00b8 2046     		mov	r0, r4
 759              	.LVL69:
1048:FreeRTOS/Src/timers.c ****                         break;
 760              		.loc 1 1048 34 view .LVU213
 761 00ba FFF7FEFF 		bl	prvInsertTimerInActiveList
 762              	.LVL70:
1049:FreeRTOS/Src/timers.c **** 
 763              		.loc 1 1049 25 is_stmt 1 view .LVU214
 764 00be A5E7     		b	.L54
 765              	.LVL71:
 766              	.L61:
1057:FreeRTOS/Src/timers.c ****                             {
 767              		.loc 1 1057 29 view .LVU215
1057:FreeRTOS/Src/timers.c ****                             {
 768              		.loc 1 1057 42 is_stmt 0 view .LVU216
 769 00c0 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
1057:FreeRTOS/Src/timers.c ****                             {
 770              		.loc 1 1057 31 view .LVU217
 771 00c4 13F0020F 		tst	r3, #2
 772 00c8 04D0     		beq	.L71
1063:FreeRTOS/Src/timers.c ****                             }
 773              		.loc 1 1063 33 is_stmt 1 view .LVU218
1063:FreeRTOS/Src/timers.c ****                             }
 774              		.loc 1 1063 51 is_stmt 0 view .LVU219
 775 00ca 23F00103 		bic	r3, r3, #1
 776 00ce 84F82430 		strb	r3, [r4, #36]
 777 00d2 9BE7     		b	.L54
 778              	.L71:
1059:FreeRTOS/Src/timers.c ****                             }
 779              		.loc 1 1059 33 is_stmt 1 view .LVU220
 780 00d4 2046     		mov	r0, r4
 781              	.LVL72:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 37


1059:FreeRTOS/Src/timers.c ****                             }
 782              		.loc 1 1059 33 is_stmt 0 view .LVU221
 783 00d6 FFF7FEFF 		bl	vPortFree
 784              	.LVL73:
 785 00da 97E7     		b	.L54
 786              	.LVL74:
 787              	.L69:
1083:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 788              		.loc 1 1083 5 view .LVU222
 789 00dc 05B0     		add	sp, sp, #20
 790              	.LCFI10:
 791              		.cfi_def_cfa_offset 12
 792              		@ sp needed
 793 00de 30BD     		pop	{r4, r5, pc}
 794              	.L73:
 795              		.align	2
 796              	.L72:
 797 00e0 00000000 		.word	xTimerQueue
 798              		.cfi_endproc
 799              	.LFE147:
 801              		.section	.text.prvTimerTask,"ax",%progbits
 802              		.align	1
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 807              	prvTimerTask:
 808              	.LFB142:
 749:FreeRTOS/Src/timers.c ****         TickType_t xNextExpireTime;
 809              		.loc 1 749 5 is_stmt 1 view -0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 8
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              	.LVL75:
 749:FreeRTOS/Src/timers.c ****         TickType_t xNextExpireTime;
 814              		.loc 1 749 5 is_stmt 0 view .LVU224
 815 0000 00B5     		push	{lr}
 816              	.LCFI11:
 817              		.cfi_def_cfa_offset 4
 818              		.cfi_offset 14, -4
 819 0002 83B0     		sub	sp, sp, #12
 820              	.LCFI12:
 821              		.cfi_def_cfa_offset 16
 822              	.LVL76:
 823              	.L75:
 750:FreeRTOS/Src/timers.c ****         BaseType_t xListWasEmpty;
 824              		.loc 1 750 9 is_stmt 1 view .LVU225
 751:FreeRTOS/Src/timers.c **** 
 825              		.loc 1 751 9 view .LVU226
 754:FreeRTOS/Src/timers.c **** 
 826              		.loc 1 754 9 view .LVU227
 766:FreeRTOS/Src/timers.c ****         {
 827              		.loc 1 766 9 view .LVU228
 770:FreeRTOS/Src/timers.c **** 
 828              		.loc 1 770 13 view .LVU229
 770:FreeRTOS/Src/timers.c **** 
 829              		.loc 1 770 31 is_stmt 0 view .LVU230
 830 0004 01A8     		add	r0, sp, #4
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 38


 831 0006 FFF7FEFF 		bl	prvGetNextExpireTime
 832              	.LVL77:
 774:FreeRTOS/Src/timers.c **** 
 833              		.loc 1 774 13 is_stmt 1 view .LVU231
 834 000a 0199     		ldr	r1, [sp, #4]
 835 000c FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 836              	.LVL78:
 777:FreeRTOS/Src/timers.c ****         }
 837              		.loc 1 777 13 discriminator 1 view .LVU232
 838 0010 FFF7FEFF 		bl	prvProcessReceivedCommands
 839              	.LVL79:
 766:FreeRTOS/Src/timers.c ****         {
 840              		.loc 1 766 9 view .LVU233
 841 0014 F6E7     		b	.L75
 842              		.cfi_endproc
 843              	.LFE142:
 845              		.section	.rodata.prvCheckForValidListAndQueue.str1.4,"aMS",%progbits,1
 846              		.align	2
 847              	.LC0:
 848 0000 546D7251 		.ascii	"TmrQ\000"
 848      00
 849              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 850              		.align	1
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 855              	prvCheckForValidListAndQueue:
 856              	.LFB149:
1109:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1110:FreeRTOS/Src/timers.c **** 
1111:FreeRTOS/Src/timers.c ****     static void prvCheckForValidListAndQueue( void )
1112:FreeRTOS/Src/timers.c ****     {
 857              		.loc 1 1112 5 view -0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861 0000 38B5     		push	{r3, r4, r5, lr}
 862              	.LCFI13:
 863              		.cfi_def_cfa_offset 16
 864              		.cfi_offset 3, -16
 865              		.cfi_offset 4, -12
 866              		.cfi_offset 5, -8
 867              		.cfi_offset 14, -4
1113:FreeRTOS/Src/timers.c ****         /* Check that the list from which active timers are referenced, and the
1114:FreeRTOS/Src/timers.c ****          * queue used to communicate with the timer service, have been
1115:FreeRTOS/Src/timers.c ****          * initialised. */
1116:FreeRTOS/Src/timers.c ****         taskENTER_CRITICAL();
 868              		.loc 1 1116 9 view .LVU235
 869 0002 FFF7FEFF 		bl	vPortEnterCritical
 870              	.LVL80:
1117:FreeRTOS/Src/timers.c ****         {
1118:FreeRTOS/Src/timers.c ****             if( xTimerQueue == NULL )
 871              		.loc 1 1118 13 view .LVU236
 872              		.loc 1 1118 29 is_stmt 0 view .LVU237
 873 0006 0F4B     		ldr	r3, .L81
 874 0008 1B68     		ldr	r3, [r3]
 875              		.loc 1 1118 15 view .LVU238
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 39


 876 000a 13B1     		cbz	r3, .L80
 877              	.L78:
1119:FreeRTOS/Src/timers.c ****             {
1120:FreeRTOS/Src/timers.c ****                 vListInitialise( &xActiveTimerList1 );
1121:FreeRTOS/Src/timers.c ****                 vListInitialise( &xActiveTimerList2 );
1122:FreeRTOS/Src/timers.c ****                 pxCurrentTimerList = &xActiveTimerList1;
1123:FreeRTOS/Src/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
1124:FreeRTOS/Src/timers.c **** 
1125:FreeRTOS/Src/timers.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1126:FreeRTOS/Src/timers.c ****                 {
1127:FreeRTOS/Src/timers.c ****                     /* The timer queue is allocated statically in case
1128:FreeRTOS/Src/timers.c ****                      * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
1129:FreeRTOS/Src/timers.c ****                     PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
1130:FreeRTOS/Src/timers.c ****                     PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIME
1131:FreeRTOS/Src/timers.c **** 
1132:FreeRTOS/Src/timers.c ****                     xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( U
1133:FreeRTOS/Src/timers.c ****                 }
1134:FreeRTOS/Src/timers.c ****                 #else
1135:FreeRTOS/Src/timers.c ****                 {
1136:FreeRTOS/Src/timers.c ****                     xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseTy
1137:FreeRTOS/Src/timers.c ****                 }
1138:FreeRTOS/Src/timers.c ****                 #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
1139:FreeRTOS/Src/timers.c **** 
1140:FreeRTOS/Src/timers.c ****                 #if ( configQUEUE_REGISTRY_SIZE > 0 )
1141:FreeRTOS/Src/timers.c ****                 {
1142:FreeRTOS/Src/timers.c ****                     if( xTimerQueue != NULL )
1143:FreeRTOS/Src/timers.c ****                     {
1144:FreeRTOS/Src/timers.c ****                         vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1145:FreeRTOS/Src/timers.c ****                     }
1146:FreeRTOS/Src/timers.c ****                     else
1147:FreeRTOS/Src/timers.c ****                     {
1148:FreeRTOS/Src/timers.c ****                         mtCOVERAGE_TEST_MARKER();
1149:FreeRTOS/Src/timers.c ****                     }
1150:FreeRTOS/Src/timers.c ****                 }
1151:FreeRTOS/Src/timers.c ****                 #endif /* configQUEUE_REGISTRY_SIZE */
1152:FreeRTOS/Src/timers.c ****             }
1153:FreeRTOS/Src/timers.c ****             else
1154:FreeRTOS/Src/timers.c ****             {
1155:FreeRTOS/Src/timers.c ****                 mtCOVERAGE_TEST_MARKER();
 878              		.loc 1 1155 41 is_stmt 1 view .LVU239
1156:FreeRTOS/Src/timers.c ****             }
1157:FreeRTOS/Src/timers.c ****         }
1158:FreeRTOS/Src/timers.c ****         taskEXIT_CRITICAL();
 879              		.loc 1 1158 9 view .LVU240
 880 000c FFF7FEFF 		bl	vPortExitCritical
 881              	.LVL81:
1159:FreeRTOS/Src/timers.c ****     }
 882              		.loc 1 1159 5 is_stmt 0 view .LVU241
 883 0010 38BD     		pop	{r3, r4, r5, pc}
 884              	.L80:
1120:FreeRTOS/Src/timers.c ****                 vListInitialise( &xActiveTimerList2 );
 885              		.loc 1 1120 17 is_stmt 1 view .LVU242
 886 0012 0D4D     		ldr	r5, .L81+4
 887 0014 2846     		mov	r0, r5
 888 0016 FFF7FEFF 		bl	vListInitialise
 889              	.LVL82:
1121:FreeRTOS/Src/timers.c ****                 pxCurrentTimerList = &xActiveTimerList1;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 40


 890              		.loc 1 1121 17 view .LVU243
 891 001a 0C4C     		ldr	r4, .L81+8
 892 001c 2046     		mov	r0, r4
 893 001e FFF7FEFF 		bl	vListInitialise
 894              	.LVL83:
1122:FreeRTOS/Src/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 895              		.loc 1 1122 17 view .LVU244
1122:FreeRTOS/Src/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 896              		.loc 1 1122 36 is_stmt 0 view .LVU245
 897 0022 0B4B     		ldr	r3, .L81+12
 898 0024 1D60     		str	r5, [r3]
1123:FreeRTOS/Src/timers.c **** 
 899              		.loc 1 1123 17 is_stmt 1 view .LVU246
1123:FreeRTOS/Src/timers.c **** 
 900              		.loc 1 1123 37 is_stmt 0 view .LVU247
 901 0026 0B4B     		ldr	r3, .L81+16
 902 0028 1C60     		str	r4, [r3]
1136:FreeRTOS/Src/timers.c ****                 }
 903              		.loc 1 1136 21 is_stmt 1 view .LVU248
1136:FreeRTOS/Src/timers.c ****                 }
 904              		.loc 1 1136 35 is_stmt 0 view .LVU249
 905 002a 0022     		movs	r2, #0
 906 002c 0C21     		movs	r1, #12
 907 002e 0A20     		movs	r0, #10
 908 0030 FFF7FEFF 		bl	xQueueGenericCreate
 909              	.LVL84:
1136:FreeRTOS/Src/timers.c ****                 }
 910              		.loc 1 1136 33 discriminator 1 view .LVU250
 911 0034 034B     		ldr	r3, .L81
 912 0036 1860     		str	r0, [r3]
1142:FreeRTOS/Src/timers.c ****                     {
 913              		.loc 1 1142 21 is_stmt 1 view .LVU251
1142:FreeRTOS/Src/timers.c ****                     {
 914              		.loc 1 1142 23 is_stmt 0 view .LVU252
 915 0038 0028     		cmp	r0, #0
 916 003a E7D0     		beq	.L78
1144:FreeRTOS/Src/timers.c ****                     }
 917              		.loc 1 1144 25 is_stmt 1 view .LVU253
 918 003c 0649     		ldr	r1, .L81+20
 919 003e FFF7FEFF 		bl	vQueueAddToRegistry
 920              	.LVL85:
 921 0042 E3E7     		b	.L78
 922              	.L82:
 923              		.align	2
 924              	.L81:
 925 0044 00000000 		.word	xTimerQueue
 926 0048 00000000 		.word	xActiveTimerList1
 927 004c 00000000 		.word	xActiveTimerList2
 928 0050 00000000 		.word	pxCurrentTimerList
 929 0054 00000000 		.word	pxOverflowTimerList
 930 0058 00000000 		.word	.LC0
 931              		.cfi_endproc
 932              	.LFE149:
 934              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 935              		.align	1
 936              		.syntax unified
 937              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 41


 938              		.thumb_func
 940              	prvInitialiseNewTimer:
 941              	.LVL86:
 942              	.LFB130:
 423:FreeRTOS/Src/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 943              		.loc 1 423 5 view -0
 944              		.cfi_startproc
 945              		@ args = 8, pretend = 0, frame = 0
 946              		@ frame_needed = 0, uses_anonymous_args = 0
 423:FreeRTOS/Src/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 947              		.loc 1 423 5 is_stmt 0 view .LVU255
 948 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 949              	.LCFI14:
 950              		.cfi_def_cfa_offset 24
 951              		.cfi_offset 4, -24
 952              		.cfi_offset 5, -20
 953              		.cfi_offset 6, -16
 954              		.cfi_offset 7, -12
 955              		.cfi_offset 8, -8
 956              		.cfi_offset 14, -4
 957 0004 8046     		mov	r8, r0
 958 0006 0F46     		mov	r7, r1
 959 0008 1546     		mov	r5, r2
 960 000a 1E46     		mov	r6, r3
 961 000c 079C     		ldr	r4, [sp, #28]
 425:FreeRTOS/Src/timers.c **** 
 962              		.loc 1 425 52 is_stmt 1 view .LVU256
 429:FreeRTOS/Src/timers.c **** 
 963              		.loc 1 429 9 view .LVU257
 964 000e FFF7FEFF 		bl	prvCheckForValidListAndQueue
 965              	.LVL87:
 433:FreeRTOS/Src/timers.c ****         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 966              		.loc 1 433 9 view .LVU258
 433:FreeRTOS/Src/timers.c ****         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 967              		.loc 1 433 33 is_stmt 0 view .LVU259
 968 0012 C4F80080 		str	r8, [r4]
 434:FreeRTOS/Src/timers.c ****         pxNewTimer->pvTimerID = pvTimerID;
 969              		.loc 1 434 9 is_stmt 1 view .LVU260
 434:FreeRTOS/Src/timers.c ****         pxNewTimer->pvTimerID = pvTimerID;
 970              		.loc 1 434 41 is_stmt 0 view .LVU261
 971 0016 A761     		str	r7, [r4, #24]
 435:FreeRTOS/Src/timers.c ****         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 972              		.loc 1 435 9 is_stmt 1 view .LVU262
 435:FreeRTOS/Src/timers.c ****         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 973              		.loc 1 435 31 is_stmt 0 view .LVU263
 974 0018 E661     		str	r6, [r4, #28]
 436:FreeRTOS/Src/timers.c ****         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 975              		.loc 1 436 9 is_stmt 1 view .LVU264
 436:FreeRTOS/Src/timers.c ****         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 976              		.loc 1 436 40 is_stmt 0 view .LVU265
 977 001a 069B     		ldr	r3, [sp, #24]
 978 001c 2362     		str	r3, [r4, #32]
 437:FreeRTOS/Src/timers.c **** 
 979              		.loc 1 437 9 is_stmt 1 view .LVU266
 980 001e 201D     		adds	r0, r4, #4
 981 0020 FFF7FEFF 		bl	vListInitialiseItem
 982              	.LVL88:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 42


 439:FreeRTOS/Src/timers.c ****         {
 983              		.loc 1 439 9 view .LVU267
 439:FreeRTOS/Src/timers.c ****         {
 984              		.loc 1 439 11 is_stmt 0 view .LVU268
 985 0024 2DB1     		cbz	r5, .L83
 441:FreeRTOS/Src/timers.c ****         }
 986              		.loc 1 441 13 is_stmt 1 view .LVU269
 441:FreeRTOS/Src/timers.c ****         }
 987              		.loc 1 441 23 is_stmt 0 view .LVU270
 988 0026 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 441:FreeRTOS/Src/timers.c ****         }
 989              		.loc 1 441 34 view .LVU271
 990 002a 43F00403 		orr	r3, r3, #4
 991 002e 84F82430 		strb	r3, [r4, #36]
 444:FreeRTOS/Src/timers.c ****     }
 992              		.loc 1 444 40 is_stmt 1 view .LVU272
 993              	.L83:
 445:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 994              		.loc 1 445 5 is_stmt 0 view .LVU273
 995 0032 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 445:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 996              		.loc 1 445 5 view .LVU274
 997              		.cfi_endproc
 998              	.LFE130:
 1000              		.section	.rodata.xTimerCreateTimerTask.str1.4,"aMS",%progbits,1
 1001              		.align	2
 1002              	.LC1:
 1003 0000 546D7220 		.ascii	"Tmr Svc\000"
 1003      53766300 
 1004              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 1005              		.align	1
 1006              		.global	xTimerCreateTimerTask
 1007              		.syntax unified
 1008              		.thumb
 1009              		.thumb_func
 1011              	xTimerCreateTimerTask:
 1012              	.LFB128:
 238:FreeRTOS/Src/timers.c ****         BaseType_t xReturn = pdFAIL;
 1013              		.loc 1 238 5 is_stmt 1 view -0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 0
 1016              		@ frame_needed = 0, uses_anonymous_args = 0
 1017 0000 00B5     		push	{lr}
 1018              	.LCFI15:
 1019              		.cfi_def_cfa_offset 4
 1020              		.cfi_offset 14, -4
 1021 0002 83B0     		sub	sp, sp, #12
 1022              	.LCFI16:
 1023              		.cfi_def_cfa_offset 16
 239:FreeRTOS/Src/timers.c **** 
 1024              		.loc 1 239 9 view .LVU276
 1025              	.LVL89:
 241:FreeRTOS/Src/timers.c **** 
 1026              		.loc 1 241 43 view .LVU277
 247:FreeRTOS/Src/timers.c **** 
 1027              		.loc 1 247 9 view .LVU278
 1028 0004 FFF7FEFF 		bl	prvCheckForValidListAndQueue
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 43


 1029              	.LVL90:
 249:FreeRTOS/Src/timers.c ****         {
 1030              		.loc 1 249 9 view .LVU279
 249:FreeRTOS/Src/timers.c ****         {
 1031              		.loc 1 249 25 is_stmt 0 view .LVU280
 1032 0008 084B     		ldr	r3, .L90
 1033 000a 1B68     		ldr	r3, [r3]
 249:FreeRTOS/Src/timers.c ****         {
 1034              		.loc 1 249 11 view .LVU281
 1035 000c 63B1     		cbz	r3, .L88
 310:FreeRTOS/Src/timers.c ****                                            configTIMER_SERVICE_TASK_NAME,
 1036              		.loc 1 310 21 is_stmt 1 view .LVU282
 310:FreeRTOS/Src/timers.c ****                                            configTIMER_SERVICE_TASK_NAME,
 1037              		.loc 1 310 31 is_stmt 0 view .LVU283
 1038 000e 084B     		ldr	r3, .L90+4
 1039 0010 0193     		str	r3, [sp, #4]
 1040 0012 0223     		movs	r3, #2
 1041 0014 0093     		str	r3, [sp]
 1042 0016 0023     		movs	r3, #0
 1043 0018 8022     		movs	r2, #128
 1044 001a 0649     		ldr	r1, .L90+8
 1045 001c 0648     		ldr	r0, .L90+12
 1046 001e FFF7FEFF 		bl	xTaskCreate
 1047              	.LVL91:
 1048              	.L86:
 331:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1049              		.loc 1 331 5 view .LVU284
 1050 0022 03B0     		add	sp, sp, #12
 1051              	.LCFI17:
 1052              		.cfi_remember_state
 1053              		.cfi_def_cfa_offset 4
 1054              		@ sp needed
 1055 0024 5DF804FB 		ldr	pc, [sp], #4
 1056              	.LVL92:
 1057              	.L88:
 1058              	.LCFI18:
 1059              		.cfi_restore_state
 239:FreeRTOS/Src/timers.c **** 
 1060              		.loc 1 239 20 view .LVU285
 1061 0028 0020     		movs	r0, #0
 323:FreeRTOS/Src/timers.c ****         }
 1062              		.loc 1 323 37 is_stmt 1 view .LVU286
 326:FreeRTOS/Src/timers.c **** 
 1063              		.loc 1 326 32 view .LVU287
 328:FreeRTOS/Src/timers.c **** 
 1064              		.loc 1 328 53 view .LVU288
 330:FreeRTOS/Src/timers.c ****     }
 1065              		.loc 1 330 9 view .LVU289
 330:FreeRTOS/Src/timers.c ****     }
 1066              		.loc 1 330 16 is_stmt 0 view .LVU290
 1067 002a FAE7     		b	.L86
 1068              	.L91:
 1069              		.align	2
 1070              	.L90:
 1071 002c 00000000 		.word	xTimerQueue
 1072 0030 00000000 		.word	xTimerTaskHandle
 1073 0034 00000000 		.word	.LC1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 44


 1074 0038 00000000 		.word	prvTimerTask
 1075              		.cfi_endproc
 1076              	.LFE128:
 1078              		.section	.text.xTimerCreate,"ax",%progbits
 1079              		.align	1
 1080              		.global	xTimerCreate
 1081              		.syntax unified
 1082              		.thumb
 1083              		.thumb_func
 1085              	xTimerCreate:
 1086              	.LVL93:
 1087              	.LFB129:
 341:FreeRTOS/Src/timers.c ****             Timer_t * pxNewTimer;
 1088              		.loc 1 341 9 is_stmt 1 view -0
 1089              		.cfi_startproc
 1090              		@ args = 4, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 341:FreeRTOS/Src/timers.c ****             Timer_t * pxNewTimer;
 1092              		.loc 1 341 9 is_stmt 0 view .LVU292
 1093 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1094              	.LCFI19:
 1095              		.cfi_def_cfa_offset 24
 1096              		.cfi_offset 4, -24
 1097              		.cfi_offset 5, -20
 1098              		.cfi_offset 6, -16
 1099              		.cfi_offset 7, -12
 1100              		.cfi_offset 8, -8
 1101              		.cfi_offset 14, -4
 1102 0004 82B0     		sub	sp, sp, #8
 1103              	.LCFI20:
 1104              		.cfi_def_cfa_offset 32
 1105 0006 0446     		mov	r4, r0
 1106 0008 8846     		mov	r8, r1
 1107 000a 1746     		mov	r7, r2
 1108 000c 1D46     		mov	r5, r3
 342:FreeRTOS/Src/timers.c **** 
 1109              		.loc 1 342 13 is_stmt 1 view .LVU293
 344:FreeRTOS/Src/timers.c **** 
 1110              		.loc 1 344 116 view .LVU294
 349:FreeRTOS/Src/timers.c **** 
 1111              		.loc 1 349 13 view .LVU295
 349:FreeRTOS/Src/timers.c **** 
 1112              		.loc 1 349 40 is_stmt 0 view .LVU296
 1113 000e 2820     		movs	r0, #40
 1114              	.LVL94:
 349:FreeRTOS/Src/timers.c **** 
 1115              		.loc 1 349 40 view .LVU297
 1116 0010 FFF7FEFF 		bl	pvPortMalloc
 1117              	.LVL95:
 351:FreeRTOS/Src/timers.c ****             {
 1118              		.loc 1 351 13 is_stmt 1 view .LVU298
 351:FreeRTOS/Src/timers.c ****             {
 1119              		.loc 1 351 15 is_stmt 0 view .LVU299
 1120 0014 0646     		mov	r6, r0
 1121 0016 58B1     		cbz	r0, .L92
 356:FreeRTOS/Src/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 1122              		.loc 1 356 17 is_stmt 1 view .LVU300
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 45


 356:FreeRTOS/Src/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 1123              		.loc 1 356 38 is_stmt 0 view .LVU301
 1124 0018 0023     		movs	r3, #0
 1125 001a 80F82430 		strb	r3, [r0, #36]
 357:FreeRTOS/Src/timers.c ****             }
 1126              		.loc 1 357 17 is_stmt 1 view .LVU302
 1127 001e 0190     		str	r0, [sp, #4]
 1128 0020 089B     		ldr	r3, [sp, #32]
 1129 0022 0093     		str	r3, [sp]
 1130 0024 2B46     		mov	r3, r5
 1131 0026 3A46     		mov	r2, r7
 1132 0028 4146     		mov	r1, r8
 1133 002a 2046     		mov	r0, r4
 1134              	.LVL96:
 357:FreeRTOS/Src/timers.c ****             }
 1135              		.loc 1 357 17 is_stmt 0 view .LVU303
 1136 002c FFF7FEFF 		bl	prvInitialiseNewTimer
 1137              	.LVL97:
 360:FreeRTOS/Src/timers.c **** 
 1138              		.loc 1 360 51 is_stmt 1 view .LVU304
 362:FreeRTOS/Src/timers.c ****         }
 1139              		.loc 1 362 13 view .LVU305
 1140              	.L92:
 363:FreeRTOS/Src/timers.c **** 
 1141              		.loc 1 363 9 is_stmt 0 view .LVU306
 1142 0030 3046     		mov	r0, r6
 1143 0032 02B0     		add	sp, sp, #8
 1144              	.LCFI21:
 1145              		.cfi_def_cfa_offset 24
 1146              		@ sp needed
 1147 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 363:FreeRTOS/Src/timers.c **** 
 1148              		.loc 1 363 9 view .LVU307
 1149              		.cfi_endproc
 1150              	.LFE129:
 1152              		.section	.text.xTimerGenericCommandFromTask,"ax",%progbits
 1153              		.align	1
 1154              		.global	xTimerGenericCommandFromTask
 1155              		.syntax unified
 1156              		.thumb
 1157              		.thumb_func
 1159              	xTimerGenericCommandFromTask:
 1160              	.LVL98:
 1161              	.LFB131:
 453:FreeRTOS/Src/timers.c ****         BaseType_t xReturn = pdFAIL;
 1162              		.loc 1 453 5 is_stmt 1 view -0
 1163              		.cfi_startproc
 1164              		@ args = 4, pretend = 0, frame = 16
 1165              		@ frame_needed = 0, uses_anonymous_args = 0
 454:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage;
 1166              		.loc 1 454 9 view .LVU309
 455:FreeRTOS/Src/timers.c **** 
 1167              		.loc 1 455 9 view .LVU310
 457:FreeRTOS/Src/timers.c **** 
 1168              		.loc 1 457 9 view .LVU311
 459:FreeRTOS/Src/timers.c **** 
 1169              		.loc 1 459 127 view .LVU312
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 46


 461:FreeRTOS/Src/timers.c **** 
 1170              		.loc 1 461 31 view .LVU313
 465:FreeRTOS/Src/timers.c ****         {
 1171              		.loc 1 465 9 view .LVU314
 465:FreeRTOS/Src/timers.c ****         {
 1172              		.loc 1 465 25 is_stmt 0 view .LVU315
 1173 0000 114B     		ldr	r3, .L106
 1174              	.LVL99:
 465:FreeRTOS/Src/timers.c ****         {
 1175              		.loc 1 465 25 view .LVU316
 1176 0002 1B68     		ldr	r3, [r3]
 465:FreeRTOS/Src/timers.c ****         {
 1177              		.loc 1 465 11 view .LVU317
 1178 0004 F3B1     		cbz	r3, .L98
 453:FreeRTOS/Src/timers.c ****         BaseType_t xReturn = pdFAIL;
 1179              		.loc 1 453 5 view .LVU318
 1180 0006 00B5     		push	{lr}
 1181              	.LCFI22:
 1182              		.cfi_def_cfa_offset 4
 1183              		.cfi_offset 14, -4
 1184 0008 85B0     		sub	sp, sp, #20
 1185              	.LCFI23:
 1186              		.cfi_def_cfa_offset 24
 468:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 1187              		.loc 1 468 13 is_stmt 1 view .LVU319
 468:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 1188              		.loc 1 468 33 is_stmt 0 view .LVU320
 1189 000a 0191     		str	r1, [sp, #4]
 469:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 1190              		.loc 1 469 13 is_stmt 1 view .LVU321
 469:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 1191              		.loc 1 469 55 is_stmt 0 view .LVU322
 1192 000c 0292     		str	r2, [sp, #8]
 470:FreeRTOS/Src/timers.c **** 
 1193              		.loc 1 470 13 is_stmt 1 view .LVU323
 470:FreeRTOS/Src/timers.c **** 
 1194              		.loc 1 470 49 is_stmt 0 view .LVU324
 1195 000e 0390     		str	r0, [sp, #12]
 472:FreeRTOS/Src/timers.c **** 
 1196              		.loc 1 472 67 is_stmt 1 view .LVU325
 474:FreeRTOS/Src/timers.c ****             {
 1197              		.loc 1 474 13 view .LVU326
 474:FreeRTOS/Src/timers.c ****             {
 1198              		.loc 1 474 15 is_stmt 0 view .LVU327
 1199 0010 0529     		cmp	r1, #5
 1200 0012 03DD     		ble	.L104
 454:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage;
 1201              		.loc 1 454 20 view .LVU328
 1202 0014 0020     		movs	r0, #0
 1203              	.LVL100:
 490:FreeRTOS/Src/timers.c ****         }
 1204              		.loc 1 490 37 is_stmt 1 view .LVU329
 493:FreeRTOS/Src/timers.c **** 
 1205              		.loc 1 493 60 view .LVU330
 495:FreeRTOS/Src/timers.c ****     }
 1206              		.loc 1 495 9 view .LVU331
 1207              	.L95:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 47


 496:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1208              		.loc 1 496 5 is_stmt 0 view .LVU332
 1209 0016 05B0     		add	sp, sp, #20
 1210              	.LCFI24:
 1211              		.cfi_remember_state
 1212              		.cfi_def_cfa_offset 4
 1213              		@ sp needed
 1214 0018 5DF804FB 		ldr	pc, [sp], #4
 1215              	.LVL101:
 1216              	.L104:
 1217              	.LCFI25:
 1218              		.cfi_restore_state
 476:FreeRTOS/Src/timers.c ****                 {
 1219              		.loc 1 476 17 is_stmt 1 view .LVU333
 476:FreeRTOS/Src/timers.c ****                 {
 1220              		.loc 1 476 21 is_stmt 0 view .LVU334
 1221 001c FFF7FEFF 		bl	xTaskGetSchedulerState
 1222              	.LVL102:
 476:FreeRTOS/Src/timers.c ****                 {
 1223              		.loc 1 476 19 discriminator 1 view .LVU335
 1224 0020 0228     		cmp	r0, #2
 1225 0022 07D0     		beq	.L105
 482:FreeRTOS/Src/timers.c ****                 }
 1226              		.loc 1 482 21 is_stmt 1 view .LVU336
 482:FreeRTOS/Src/timers.c ****                 }
 1227              		.loc 1 482 31 is_stmt 0 view .LVU337
 1228 0024 0023     		movs	r3, #0
 1229 0026 1A46     		mov	r2, r3
 1230 0028 01A9     		add	r1, sp, #4
 1231 002a 0748     		ldr	r0, .L106
 1232 002c 0068     		ldr	r0, [r0]
 1233 002e FFF7FEFF 		bl	xQueueGenericSend
 1234              	.LVL103:
 482:FreeRTOS/Src/timers.c ****                 }
 1235              		.loc 1 482 31 view .LVU338
 1236 0032 F0E7     		b	.L95
 1237              	.LVL104:
 1238              	.L105:
 478:FreeRTOS/Src/timers.c ****                 }
 1239              		.loc 1 478 21 is_stmt 1 view .LVU339
 478:FreeRTOS/Src/timers.c ****                 }
 1240              		.loc 1 478 31 is_stmt 0 view .LVU340
 1241 0034 0023     		movs	r3, #0
 1242 0036 069A     		ldr	r2, [sp, #24]
 1243 0038 01A9     		add	r1, sp, #4
 1244 003a 0348     		ldr	r0, .L106
 1245 003c 0068     		ldr	r0, [r0]
 1246 003e FFF7FEFF 		bl	xQueueGenericSend
 1247              	.LVL105:
 478:FreeRTOS/Src/timers.c ****                 }
 1248              		.loc 1 478 31 view .LVU341
 1249 0042 E8E7     		b	.L95
 1250              	.LVL106:
 1251              	.L98:
 1252              	.LCFI26:
 1253              		.cfi_def_cfa_offset 0
 1254              		.cfi_restore 14
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 48


 454:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage;
 1255              		.loc 1 454 20 view .LVU342
 1256 0044 0020     		movs	r0, #0
 1257              	.LVL107:
 496:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1258              		.loc 1 496 5 view .LVU343
 1259 0046 7047     		bx	lr
 1260              	.L107:
 1261              		.align	2
 1262              	.L106:
 1263 0048 00000000 		.word	xTimerQueue
 1264              		.cfi_endproc
 1265              	.LFE131:
 1267              		.section	.text.xTimerGenericCommandFromISR,"ax",%progbits
 1268              		.align	1
 1269              		.global	xTimerGenericCommandFromISR
 1270              		.syntax unified
 1271              		.thumb
 1272              		.thumb_func
 1274              	xTimerGenericCommandFromISR:
 1275              	.LVL108:
 1276              	.LFB132:
 504:FreeRTOS/Src/timers.c ****         BaseType_t xReturn = pdFAIL;
 1277              		.loc 1 504 5 is_stmt 1 view -0
 1278              		.cfi_startproc
 1279              		@ args = 4, pretend = 0, frame = 16
 1280              		@ frame_needed = 0, uses_anonymous_args = 0
 504:FreeRTOS/Src/timers.c ****         BaseType_t xReturn = pdFAIL;
 1281              		.loc 1 504 5 is_stmt 0 view .LVU345
 1282 0000 10B5     		push	{r4, lr}
 1283              	.LCFI27:
 1284              		.cfi_def_cfa_offset 8
 1285              		.cfi_offset 4, -8
 1286              		.cfi_offset 14, -4
 1287 0002 84B0     		sub	sp, sp, #16
 1288              	.LCFI28:
 1289              		.cfi_def_cfa_offset 24
 1290 0004 9C46     		mov	ip, r3
 505:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage;
 1291              		.loc 1 505 9 is_stmt 1 view .LVU346
 1292              	.LVL109:
 506:FreeRTOS/Src/timers.c **** 
 1293              		.loc 1 506 9 view .LVU347
 508:FreeRTOS/Src/timers.c **** 
 1294              		.loc 1 508 9 view .LVU348
 510:FreeRTOS/Src/timers.c **** 
 1295              		.loc 1 510 126 view .LVU349
 512:FreeRTOS/Src/timers.c **** 
 1296              		.loc 1 512 31 view .LVU350
 516:FreeRTOS/Src/timers.c ****         {
 1297              		.loc 1 516 9 view .LVU351
 516:FreeRTOS/Src/timers.c ****         {
 1298              		.loc 1 516 25 is_stmt 0 view .LVU352
 1299 0006 0A4B     		ldr	r3, .L114
 1300              	.LVL110:
 516:FreeRTOS/Src/timers.c ****         {
 1301              		.loc 1 516 25 view .LVU353
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 49


 1302 0008 1C68     		ldr	r4, [r3]
 516:FreeRTOS/Src/timers.c ****         {
 1303              		.loc 1 516 11 view .LVU354
 1304 000a 74B1     		cbz	r4, .L110
 519:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 1305              		.loc 1 519 13 is_stmt 1 view .LVU355
 519:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 1306              		.loc 1 519 33 is_stmt 0 view .LVU356
 1307 000c 0191     		str	r1, [sp, #4]
 520:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 1308              		.loc 1 520 13 is_stmt 1 view .LVU357
 520:FreeRTOS/Src/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 1309              		.loc 1 520 55 is_stmt 0 view .LVU358
 1310 000e 0292     		str	r2, [sp, #8]
 521:FreeRTOS/Src/timers.c **** 
 1311              		.loc 1 521 13 is_stmt 1 view .LVU359
 521:FreeRTOS/Src/timers.c **** 
 1312              		.loc 1 521 49 is_stmt 0 view .LVU360
 1313 0010 0390     		str	r0, [sp, #12]
 523:FreeRTOS/Src/timers.c **** 
 1314              		.loc 1 523 68 is_stmt 1 view .LVU361
 525:FreeRTOS/Src/timers.c ****             {
 1315              		.loc 1 525 13 view .LVU362
 525:FreeRTOS/Src/timers.c ****             {
 1316              		.loc 1 525 15 is_stmt 0 view .LVU363
 1317 0012 0529     		cmp	r1, #5
 1318 0014 02DC     		bgt	.L113
 505:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage;
 1319              		.loc 1 505 20 view .LVU364
 1320 0016 0020     		movs	r0, #0
 1321              	.LVL111:
 534:FreeRTOS/Src/timers.c ****         }
 1322              		.loc 1 534 37 is_stmt 1 view .LVU365
 537:FreeRTOS/Src/timers.c **** 
 1323              		.loc 1 537 59 view .LVU366
 539:FreeRTOS/Src/timers.c ****     }
 1324              		.loc 1 539 9 view .LVU367
 1325              	.L108:
 540:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1326              		.loc 1 540 5 is_stmt 0 view .LVU368
 1327 0018 04B0     		add	sp, sp, #16
 1328              	.LCFI29:
 1329              		.cfi_remember_state
 1330              		.cfi_def_cfa_offset 8
 1331              		@ sp needed
 1332 001a 10BD     		pop	{r4, pc}
 1333              	.LVL112:
 1334              	.L113:
 1335              	.LCFI30:
 1336              		.cfi_restore_state
 527:FreeRTOS/Src/timers.c ****             }
 1337              		.loc 1 527 17 is_stmt 1 view .LVU369
 527:FreeRTOS/Src/timers.c ****             }
 1338              		.loc 1 527 27 is_stmt 0 view .LVU370
 1339 001c 0023     		movs	r3, #0
 1340 001e 6246     		mov	r2, ip
 1341              	.LVL113:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 50


 527:FreeRTOS/Src/timers.c ****             }
 1342              		.loc 1 527 27 view .LVU371
 1343 0020 01A9     		add	r1, sp, #4
 1344              	.LVL114:
 527:FreeRTOS/Src/timers.c ****             }
 1345              		.loc 1 527 27 view .LVU372
 1346 0022 2046     		mov	r0, r4
 1347              	.LVL115:
 527:FreeRTOS/Src/timers.c ****             }
 1348              		.loc 1 527 27 view .LVU373
 1349 0024 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1350              	.LVL116:
 527:FreeRTOS/Src/timers.c ****             }
 1351              		.loc 1 527 27 view .LVU374
 1352 0028 F6E7     		b	.L108
 1353              	.LVL117:
 1354              	.L110:
 505:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage;
 1355              		.loc 1 505 20 view .LVU375
 1356 002a 0020     		movs	r0, #0
 1357              	.LVL118:
 505:FreeRTOS/Src/timers.c ****         DaemonTaskMessage_t xMessage;
 1358              		.loc 1 505 20 view .LVU376
 1359 002c F4E7     		b	.L108
 1360              	.L115:
 1361 002e 00BF     		.align	2
 1362              	.L114:
 1363 0030 00000000 		.word	xTimerQueue
 1364              		.cfi_endproc
 1365              	.LFE132:
 1367              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1368              		.align	1
 1369              		.global	xTimerGetTimerDaemonTaskHandle
 1370              		.syntax unified
 1371              		.thumb
 1372              		.thumb_func
 1374              	xTimerGetTimerDaemonTaskHandle:
 1375              	.LFB133:
 544:FreeRTOS/Src/timers.c ****         traceENTER_xTimerGetTimerDaemonTaskHandle();
 1376              		.loc 1 544 5 is_stmt 1 view -0
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 0
 1379              		@ frame_needed = 0, uses_anonymous_args = 0
 1380              		@ link register save eliminated.
 545:FreeRTOS/Src/timers.c **** 
 1381              		.loc 1 545 52 view .LVU378
 549:FreeRTOS/Src/timers.c **** 
 1382              		.loc 1 549 53 view .LVU379
 551:FreeRTOS/Src/timers.c **** 
 1383              		.loc 1 551 71 view .LVU380
 553:FreeRTOS/Src/timers.c ****     }
 1384              		.loc 1 553 9 view .LVU381
 554:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1385              		.loc 1 554 5 is_stmt 0 view .LVU382
 1386 0000 014B     		ldr	r3, .L117
 1387 0002 1868     		ldr	r0, [r3]
 1388 0004 7047     		bx	lr
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 51


 1389              	.L118:
 1390 0006 00BF     		.align	2
 1391              	.L117:
 1392 0008 00000000 		.word	xTimerTaskHandle
 1393              		.cfi_endproc
 1394              	.LFE133:
 1396              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1397              		.align	1
 1398              		.global	xTimerGetPeriod
 1399              		.syntax unified
 1400              		.thumb
 1401              		.thumb_func
 1403              	xTimerGetPeriod:
 1404              	.LVL119:
 1405              	.LFB134:
 558:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 1406              		.loc 1 558 5 is_stmt 1 view -0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 0
 1409              		@ frame_needed = 0, uses_anonymous_args = 0
 1410              		@ link register save eliminated.
 559:FreeRTOS/Src/timers.c **** 
 1411              		.loc 1 559 9 view .LVU384
 561:FreeRTOS/Src/timers.c **** 
 1412              		.loc 1 561 45 view .LVU385
 563:FreeRTOS/Src/timers.c **** 
 1413              		.loc 1 563 31 view .LVU386
 565:FreeRTOS/Src/timers.c **** 
 1414              		.loc 1 565 68 view .LVU387
 567:FreeRTOS/Src/timers.c ****     }
 1415              		.loc 1 567 9 view .LVU388
 568:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1416              		.loc 1 568 5 is_stmt 0 view .LVU389
 1417 0000 8069     		ldr	r0, [r0, #24]
 1418              	.LVL120:
 568:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1419              		.loc 1 568 5 view .LVU390
 1420 0002 7047     		bx	lr
 1421              		.cfi_endproc
 1422              	.LFE134:
 1424              		.section	.text.vTimerSetReloadMode,"ax",%progbits
 1425              		.align	1
 1426              		.global	vTimerSetReloadMode
 1427              		.syntax unified
 1428              		.thumb
 1429              		.thumb_func
 1431              	vTimerSetReloadMode:
 1432              	.LVL121:
 1433              	.LFB135:
 573:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 1434              		.loc 1 573 5 is_stmt 1 view -0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 0, uses_anonymous_args = 0
 573:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 1438              		.loc 1 573 5 is_stmt 0 view .LVU392
 1439 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 52


 1440              	.LCFI31:
 1441              		.cfi_def_cfa_offset 16
 1442              		.cfi_offset 3, -16
 1443              		.cfi_offset 4, -12
 1444              		.cfi_offset 5, -8
 1445              		.cfi_offset 14, -4
 1446 0002 0446     		mov	r4, r0
 1447 0004 0D46     		mov	r5, r1
 574:FreeRTOS/Src/timers.c **** 
 1448              		.loc 1 574 9 is_stmt 1 view .LVU393
 1449              	.LVL122:
 576:FreeRTOS/Src/timers.c **** 
 1450              		.loc 1 576 62 view .LVU394
 578:FreeRTOS/Src/timers.c ****         taskENTER_CRITICAL();
 1451              		.loc 1 578 31 view .LVU395
 579:FreeRTOS/Src/timers.c ****         {
 1452              		.loc 1 579 9 view .LVU396
 1453 0006 FFF7FEFF 		bl	vPortEnterCritical
 1454              	.LVL123:
 581:FreeRTOS/Src/timers.c ****             {
 1455              		.loc 1 581 13 view .LVU397
 581:FreeRTOS/Src/timers.c ****             {
 1456              		.loc 1 581 15 is_stmt 0 view .LVU398
 1457 000a 45B1     		cbz	r5, .L121
 583:FreeRTOS/Src/timers.c ****             }
 1458              		.loc 1 583 17 is_stmt 1 view .LVU399
 583:FreeRTOS/Src/timers.c ****             }
 1459              		.loc 1 583 24 is_stmt 0 view .LVU400
 1460 000c 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 583:FreeRTOS/Src/timers.c ****             }
 1461              		.loc 1 583 35 view .LVU401
 1462 0010 43F00403 		orr	r3, r3, #4
 1463 0014 84F82430 		strb	r3, [r4, #36]
 1464              	.L122:
 590:FreeRTOS/Src/timers.c **** 
 1465              		.loc 1 590 9 is_stmt 1 view .LVU402
 1466 0018 FFF7FEFF 		bl	vPortExitCritical
 1467              	.LVL124:
 592:FreeRTOS/Src/timers.c ****     }
 1468              		.loc 1 592 42 view .LVU403
 593:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1469              		.loc 1 593 5 is_stmt 0 view .LVU404
 1470 001c 38BD     		pop	{r3, r4, r5, pc}
 1471              	.LVL125:
 1472              	.L121:
 587:FreeRTOS/Src/timers.c ****             }
 1473              		.loc 1 587 17 is_stmt 1 view .LVU405
 587:FreeRTOS/Src/timers.c ****             }
 1474              		.loc 1 587 24 is_stmt 0 view .LVU406
 1475 001e 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 587:FreeRTOS/Src/timers.c ****             }
 1476              		.loc 1 587 35 view .LVU407
 1477 0022 23F00403 		bic	r3, r3, #4
 1478 0026 84F82430 		strb	r3, [r4, #36]
 1479 002a F5E7     		b	.L122
 1480              		.cfi_endproc
 1481              	.LFE135:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 53


 1483              		.section	.text.xTimerGetReloadMode,"ax",%progbits
 1484              		.align	1
 1485              		.global	xTimerGetReloadMode
 1486              		.syntax unified
 1487              		.thumb
 1488              		.thumb_func
 1490              	xTimerGetReloadMode:
 1491              	.LVL126:
 1492              	.LFB136:
 597:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 1493              		.loc 1 597 5 is_stmt 1 view -0
 1494              		.cfi_startproc
 1495              		@ args = 0, pretend = 0, frame = 0
 1496              		@ frame_needed = 0, uses_anonymous_args = 0
 597:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 1497              		.loc 1 597 5 is_stmt 0 view .LVU409
 1498 0000 10B5     		push	{r4, lr}
 1499              	.LCFI32:
 1500              		.cfi_def_cfa_offset 8
 1501              		.cfi_offset 4, -8
 1502              		.cfi_offset 14, -4
 1503 0002 0446     		mov	r4, r0
 598:FreeRTOS/Src/timers.c ****         BaseType_t xReturn;
 1504              		.loc 1 598 9 is_stmt 1 view .LVU410
 1505              	.LVL127:
 599:FreeRTOS/Src/timers.c **** 
 1506              		.loc 1 599 9 view .LVU411
 601:FreeRTOS/Src/timers.c **** 
 1507              		.loc 1 601 49 view .LVU412
 603:FreeRTOS/Src/timers.c ****         taskENTER_CRITICAL();
 1508              		.loc 1 603 31 view .LVU413
 604:FreeRTOS/Src/timers.c ****         {
 1509              		.loc 1 604 9 view .LVU414
 1510 0004 FFF7FEFF 		bl	vPortEnterCritical
 1511              	.LVL128:
 606:FreeRTOS/Src/timers.c ****             {
 1512              		.loc 1 606 13 view .LVU415
 606:FreeRTOS/Src/timers.c ****             {
 1513              		.loc 1 606 26 is_stmt 0 view .LVU416
 1514 0008 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 606:FreeRTOS/Src/timers.c ****             {
 1515              		.loc 1 606 15 view .LVU417
 1516 000c 13F0040F 		tst	r3, #4
 1517 0010 04D1     		bne	.L126
 609:FreeRTOS/Src/timers.c ****             }
 1518              		.loc 1 609 25 view .LVU418
 1519 0012 0024     		movs	r4, #0
 1520              	.LVL129:
 1521              	.L125:
 617:FreeRTOS/Src/timers.c **** 
 1522              		.loc 1 617 9 is_stmt 1 view .LVU419
 1523 0014 FFF7FEFF 		bl	vPortExitCritical
 1524              	.LVL130:
 619:FreeRTOS/Src/timers.c **** 
 1525              		.loc 1 619 51 view .LVU420
 621:FreeRTOS/Src/timers.c ****     }
 1526              		.loc 1 621 9 view .LVU421
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 54


 622:FreeRTOS/Src/timers.c **** 
 1527              		.loc 1 622 5 is_stmt 0 view .LVU422
 1528 0018 2046     		mov	r0, r4
 1529 001a 10BD     		pop	{r4, pc}
 1530              	.LVL131:
 1531              	.L126:
 614:FreeRTOS/Src/timers.c ****             }
 1532              		.loc 1 614 25 view .LVU423
 1533 001c 0124     		movs	r4, #1
 1534              	.LVL132:
 614:FreeRTOS/Src/timers.c ****             }
 1535              		.loc 1 614 25 view .LVU424
 1536 001e F9E7     		b	.L125
 1537              		.cfi_endproc
 1538              	.LFE136:
 1540              		.section	.text.uxTimerGetReloadMode,"ax",%progbits
 1541              		.align	1
 1542              		.global	uxTimerGetReloadMode
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1547              	uxTimerGetReloadMode:
 1548              	.LVL133:
 1549              	.LFB137:
 625:FreeRTOS/Src/timers.c ****         UBaseType_t uxReturn;
 1550              		.loc 1 625 5 is_stmt 1 view -0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 625:FreeRTOS/Src/timers.c ****         UBaseType_t uxReturn;
 1554              		.loc 1 625 5 is_stmt 0 view .LVU426
 1555 0000 08B5     		push	{r3, lr}
 1556              	.LCFI33:
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 3, -8
 1559              		.cfi_offset 14, -4
 626:FreeRTOS/Src/timers.c **** 
 1560              		.loc 1 626 9 is_stmt 1 view .LVU427
 628:FreeRTOS/Src/timers.c **** 
 1561              		.loc 1 628 50 view .LVU428
 630:FreeRTOS/Src/timers.c **** 
 1562              		.loc 1 630 9 view .LVU429
 630:FreeRTOS/Src/timers.c **** 
 1563              		.loc 1 630 36 is_stmt 0 view .LVU430
 1564 0002 FFF7FEFF 		bl	xTimerGetReloadMode
 1565              	.LVL134:
 632:FreeRTOS/Src/timers.c **** 
 1566              		.loc 1 632 53 is_stmt 1 view .LVU431
 634:FreeRTOS/Src/timers.c ****     }
 1567              		.loc 1 634 9 view .LVU432
 635:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1568              		.loc 1 635 5 is_stmt 0 view .LVU433
 1569 0006 08BD     		pop	{r3, pc}
 1570              		.cfi_endproc
 1571              	.LFE137:
 1573              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1574              		.align	1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 55


 1575              		.global	xTimerGetExpiryTime
 1576              		.syntax unified
 1577              		.thumb
 1578              		.thumb_func
 1580              	xTimerGetExpiryTime:
 1581              	.LVL135:
 1582              	.LFB138:
 639:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 1583              		.loc 1 639 5 is_stmt 1 view -0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 0
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              		@ link register save eliminated.
 640:FreeRTOS/Src/timers.c ****         TickType_t xReturn;
 1588              		.loc 1 640 9 view .LVU435
 641:FreeRTOS/Src/timers.c **** 
 1589              		.loc 1 641 9 view .LVU436
 643:FreeRTOS/Src/timers.c **** 
 1590              		.loc 1 643 49 view .LVU437
 645:FreeRTOS/Src/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1591              		.loc 1 645 31 view .LVU438
 646:FreeRTOS/Src/timers.c **** 
 1592              		.loc 1 646 9 view .LVU439
 648:FreeRTOS/Src/timers.c **** 
 1593              		.loc 1 648 51 view .LVU440
 650:FreeRTOS/Src/timers.c ****     }
 1594              		.loc 1 650 9 view .LVU441
 651:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1595              		.loc 1 651 5 is_stmt 0 view .LVU442
 1596 0000 4068     		ldr	r0, [r0, #4]
 1597              	.LVL136:
 651:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1598              		.loc 1 651 5 view .LVU443
 1599 0002 7047     		bx	lr
 1600              		.cfi_endproc
 1601              	.LFE138:
 1603              		.section	.text.pcTimerGetName,"ax",%progbits
 1604              		.align	1
 1605              		.global	pcTimerGetName
 1606              		.syntax unified
 1607              		.thumb
 1608              		.thumb_func
 1610              	pcTimerGetName:
 1611              	.LVL137:
 1612              	.LFB139:
 686:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 1613              		.loc 1 686 5 is_stmt 1 view -0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 0
 1616              		@ frame_needed = 0, uses_anonymous_args = 0
 1617              		@ link register save eliminated.
 687:FreeRTOS/Src/timers.c **** 
 1618              		.loc 1 687 9 view .LVU445
 689:FreeRTOS/Src/timers.c **** 
 1619              		.loc 1 689 44 view .LVU446
 691:FreeRTOS/Src/timers.c **** 
 1620              		.loc 1 691 31 view .LVU447
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 56


 693:FreeRTOS/Src/timers.c **** 
 1621              		.loc 1 693 59 view .LVU448
 695:FreeRTOS/Src/timers.c ****     }
 1622              		.loc 1 695 9 view .LVU449
 696:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1623              		.loc 1 696 5 is_stmt 0 view .LVU450
 1624 0000 0068     		ldr	r0, [r0]
 1625              	.LVL138:
 696:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
 1626              		.loc 1 696 5 view .LVU451
 1627 0002 7047     		bx	lr
 1628              		.cfi_endproc
 1629              	.LFE139:
 1631              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1632              		.align	1
 1633              		.global	xTimerIsTimerActive
 1634              		.syntax unified
 1635              		.thumb
 1636              		.thumb_func
 1638              	xTimerIsTimerActive:
 1639              	.LVL139:
 1640              	.LFB150:
1160:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1161:FreeRTOS/Src/timers.c **** 
1162:FreeRTOS/Src/timers.c ****     BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
1163:FreeRTOS/Src/timers.c ****     {
 1641              		.loc 1 1163 5 is_stmt 1 view -0
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 0
 1644              		@ frame_needed = 0, uses_anonymous_args = 0
 1645              		.loc 1 1163 5 is_stmt 0 view .LVU453
 1646 0000 10B5     		push	{r4, lr}
 1647              	.LCFI34:
 1648              		.cfi_def_cfa_offset 8
 1649              		.cfi_offset 4, -8
 1650              		.cfi_offset 14, -4
 1651 0002 0446     		mov	r4, r0
1164:FreeRTOS/Src/timers.c ****         BaseType_t xReturn;
 1652              		.loc 1 1164 9 is_stmt 1 view .LVU454
1165:FreeRTOS/Src/timers.c ****         Timer_t * pxTimer = xTimer;
 1653              		.loc 1 1165 9 view .LVU455
 1654              	.LVL140:
1166:FreeRTOS/Src/timers.c **** 
1167:FreeRTOS/Src/timers.c ****         traceENTER_xTimerIsTimerActive( xTimer );
 1655              		.loc 1 1167 49 view .LVU456
1168:FreeRTOS/Src/timers.c **** 
1169:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 1656              		.loc 1 1169 31 view .LVU457
1170:FreeRTOS/Src/timers.c **** 
1171:FreeRTOS/Src/timers.c ****         /* Is the timer in the list of active timers? */
1172:FreeRTOS/Src/timers.c ****         taskENTER_CRITICAL();
 1657              		.loc 1 1172 9 view .LVU458
 1658 0004 FFF7FEFF 		bl	vPortEnterCritical
 1659              	.LVL141:
1173:FreeRTOS/Src/timers.c ****         {
1174:FreeRTOS/Src/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0U )
 1660              		.loc 1 1174 13 view .LVU459
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 57


 1661              		.loc 1 1174 26 is_stmt 0 view .LVU460
 1662 0008 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1663              		.loc 1 1174 15 view .LVU461
 1664 000c 13F0010F 		tst	r3, #1
 1665 0010 04D1     		bne	.L134
1175:FreeRTOS/Src/timers.c ****             {
1176:FreeRTOS/Src/timers.c ****                 xReturn = pdFALSE;
 1666              		.loc 1 1176 25 view .LVU462
 1667 0012 0024     		movs	r4, #0
 1668              	.LVL142:
 1669              	.L133:
1177:FreeRTOS/Src/timers.c ****             }
1178:FreeRTOS/Src/timers.c ****             else
1179:FreeRTOS/Src/timers.c ****             {
1180:FreeRTOS/Src/timers.c ****                 xReturn = pdTRUE;
1181:FreeRTOS/Src/timers.c ****             }
1182:FreeRTOS/Src/timers.c ****         }
1183:FreeRTOS/Src/timers.c ****         taskEXIT_CRITICAL();
 1670              		.loc 1 1183 9 is_stmt 1 view .LVU463
 1671 0014 FFF7FEFF 		bl	vPortExitCritical
 1672              	.LVL143:
1184:FreeRTOS/Src/timers.c **** 
1185:FreeRTOS/Src/timers.c ****         traceRETURN_xTimerIsTimerActive( xReturn );
 1673              		.loc 1 1185 51 view .LVU464
1186:FreeRTOS/Src/timers.c **** 
1187:FreeRTOS/Src/timers.c ****         return xReturn;
 1674              		.loc 1 1187 9 view .LVU465
1188:FreeRTOS/Src/timers.c ****     }
 1675              		.loc 1 1188 5 is_stmt 0 view .LVU466
 1676 0018 2046     		mov	r0, r4
 1677 001a 10BD     		pop	{r4, pc}
 1678              	.LVL144:
 1679              	.L134:
1180:FreeRTOS/Src/timers.c ****             }
 1680              		.loc 1 1180 25 view .LVU467
 1681 001c 0124     		movs	r4, #1
 1682              	.LVL145:
1180:FreeRTOS/Src/timers.c ****             }
 1683              		.loc 1 1180 25 view .LVU468
 1684 001e F9E7     		b	.L133
 1685              		.cfi_endproc
 1686              	.LFE150:
 1688              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1689              		.align	1
 1690              		.global	pvTimerGetTimerID
 1691              		.syntax unified
 1692              		.thumb
 1693              		.thumb_func
 1695              	pvTimerGetTimerID:
 1696              	.LVL146:
 1697              	.LFB151:
1189:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1190:FreeRTOS/Src/timers.c **** 
1191:FreeRTOS/Src/timers.c ****     void * pvTimerGetTimerID( const TimerHandle_t xTimer )
1192:FreeRTOS/Src/timers.c ****     {
 1698              		.loc 1 1192 5 is_stmt 1 view -0
 1699              		.cfi_startproc
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 58


 1700              		@ args = 0, pretend = 0, frame = 0
 1701              		@ frame_needed = 0, uses_anonymous_args = 0
 1702              		.loc 1 1192 5 is_stmt 0 view .LVU470
 1703 0000 10B5     		push	{r4, lr}
 1704              	.LCFI35:
 1705              		.cfi_def_cfa_offset 8
 1706              		.cfi_offset 4, -8
 1707              		.cfi_offset 14, -4
 1708 0002 0446     		mov	r4, r0
1193:FreeRTOS/Src/timers.c ****         Timer_t * const pxTimer = xTimer;
 1709              		.loc 1 1193 9 is_stmt 1 view .LVU471
 1710              	.LVL147:
1194:FreeRTOS/Src/timers.c ****         void * pvReturn;
 1711              		.loc 1 1194 9 view .LVU472
1195:FreeRTOS/Src/timers.c **** 
1196:FreeRTOS/Src/timers.c ****         traceENTER_pvTimerGetTimerID( xTimer );
 1712              		.loc 1 1196 47 view .LVU473
1197:FreeRTOS/Src/timers.c **** 
1198:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 1713              		.loc 1 1198 31 view .LVU474
1199:FreeRTOS/Src/timers.c **** 
1200:FreeRTOS/Src/timers.c ****         taskENTER_CRITICAL();
 1714              		.loc 1 1200 9 view .LVU475
 1715 0004 FFF7FEFF 		bl	vPortEnterCritical
 1716              	.LVL148:
1201:FreeRTOS/Src/timers.c ****         {
1202:FreeRTOS/Src/timers.c ****             pvReturn = pxTimer->pvTimerID;
 1717              		.loc 1 1202 13 view .LVU476
 1718              		.loc 1 1202 22 is_stmt 0 view .LVU477
 1719 0008 E469     		ldr	r4, [r4, #28]
 1720              	.LVL149:
1203:FreeRTOS/Src/timers.c ****         }
1204:FreeRTOS/Src/timers.c ****         taskEXIT_CRITICAL();
 1721              		.loc 1 1204 9 is_stmt 1 view .LVU478
 1722 000a FFF7FEFF 		bl	vPortExitCritical
 1723              	.LVL150:
1205:FreeRTOS/Src/timers.c **** 
1206:FreeRTOS/Src/timers.c ****         traceRETURN_pvTimerGetTimerID( pvReturn );
 1724              		.loc 1 1206 50 view .LVU479
1207:FreeRTOS/Src/timers.c **** 
1208:FreeRTOS/Src/timers.c ****         return pvReturn;
 1725              		.loc 1 1208 9 view .LVU480
1209:FreeRTOS/Src/timers.c ****     }
 1726              		.loc 1 1209 5 is_stmt 0 view .LVU481
 1727 000e 2046     		mov	r0, r4
 1728 0010 10BD     		pop	{r4, pc}
 1729              		.loc 1 1209 5 view .LVU482
 1730              		.cfi_endproc
 1731              	.LFE151:
 1733              		.section	.text.vTimerSetTimerID,"ax",%progbits
 1734              		.align	1
 1735              		.global	vTimerSetTimerID
 1736              		.syntax unified
 1737              		.thumb
 1738              		.thumb_func
 1740              	vTimerSetTimerID:
 1741              	.LVL151:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 59


 1742              	.LFB152:
1210:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1211:FreeRTOS/Src/timers.c **** 
1212:FreeRTOS/Src/timers.c ****     void vTimerSetTimerID( TimerHandle_t xTimer,
1213:FreeRTOS/Src/timers.c ****                            void * pvNewID )
1214:FreeRTOS/Src/timers.c ****     {
 1743              		.loc 1 1214 5 is_stmt 1 view -0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 1747              		.loc 1 1214 5 is_stmt 0 view .LVU484
 1748 0000 38B5     		push	{r3, r4, r5, lr}
 1749              	.LCFI36:
 1750              		.cfi_def_cfa_offset 16
 1751              		.cfi_offset 3, -16
 1752              		.cfi_offset 4, -12
 1753              		.cfi_offset 5, -8
 1754              		.cfi_offset 14, -4
 1755 0002 0446     		mov	r4, r0
 1756 0004 0D46     		mov	r5, r1
1215:FreeRTOS/Src/timers.c ****         Timer_t * const pxTimer = xTimer;
 1757              		.loc 1 1215 9 is_stmt 1 view .LVU485
 1758              	.LVL152:
1216:FreeRTOS/Src/timers.c **** 
1217:FreeRTOS/Src/timers.c ****         traceENTER_vTimerSetTimerID( xTimer, pvNewID );
 1759              		.loc 1 1217 55 view .LVU486
1218:FreeRTOS/Src/timers.c **** 
1219:FreeRTOS/Src/timers.c ****         configASSERT( xTimer );
 1760              		.loc 1 1219 31 view .LVU487
1220:FreeRTOS/Src/timers.c **** 
1221:FreeRTOS/Src/timers.c ****         taskENTER_CRITICAL();
 1761              		.loc 1 1221 9 view .LVU488
 1762 0006 FFF7FEFF 		bl	vPortEnterCritical
 1763              	.LVL153:
1222:FreeRTOS/Src/timers.c ****         {
1223:FreeRTOS/Src/timers.c ****             pxTimer->pvTimerID = pvNewID;
 1764              		.loc 1 1223 13 view .LVU489
 1765              		.loc 1 1223 32 is_stmt 0 view .LVU490
 1766 000a E561     		str	r5, [r4, #28]
1224:FreeRTOS/Src/timers.c ****         }
1225:FreeRTOS/Src/timers.c ****         taskEXIT_CRITICAL();
 1767              		.loc 1 1225 9 is_stmt 1 view .LVU491
 1768 000c FFF7FEFF 		bl	vPortExitCritical
 1769              	.LVL154:
1226:FreeRTOS/Src/timers.c **** 
1227:FreeRTOS/Src/timers.c ****         traceRETURN_vTimerSetTimerID();
 1770              		.loc 1 1227 39 view .LVU492
1228:FreeRTOS/Src/timers.c ****     }
 1771              		.loc 1 1228 5 is_stmt 0 view .LVU493
 1772 0010 38BD     		pop	{r3, r4, r5, pc}
 1773              		.loc 1 1228 5 view .LVU494
 1774              		.cfi_endproc
 1775              	.LFE152:
 1777              		.section	.text.vTimerResetState,"ax",%progbits
 1778              		.align	1
 1779              		.global	vTimerResetState
 1780              		.syntax unified
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 60


 1781              		.thumb
 1782              		.thumb_func
 1784              	vTimerResetState:
 1785              	.LFB153:
1229:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1230:FreeRTOS/Src/timers.c **** 
1231:FreeRTOS/Src/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1232:FreeRTOS/Src/timers.c **** 
1233:FreeRTOS/Src/timers.c ****         BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
1234:FreeRTOS/Src/timers.c ****                                                   void * pvParameter1,
1235:FreeRTOS/Src/timers.c ****                                                   uint32_t ulParameter2,
1236:FreeRTOS/Src/timers.c ****                                                   BaseType_t * pxHigherPriorityTaskWoken )
1237:FreeRTOS/Src/timers.c ****         {
1238:FreeRTOS/Src/timers.c ****             DaemonTaskMessage_t xMessage;
1239:FreeRTOS/Src/timers.c ****             BaseType_t xReturn;
1240:FreeRTOS/Src/timers.c **** 
1241:FreeRTOS/Src/timers.c ****             traceENTER_xTimerPendFunctionCallFromISR( xFunctionToPend, pvParameter1, ulParameter2, 
1242:FreeRTOS/Src/timers.c **** 
1243:FreeRTOS/Src/timers.c ****             /* Complete the message with the function parameters and post it to the
1244:FreeRTOS/Src/timers.c ****              * daemon task. */
1245:FreeRTOS/Src/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
1246:FreeRTOS/Src/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
1247:FreeRTOS/Src/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
1248:FreeRTOS/Src/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
1249:FreeRTOS/Src/timers.c **** 
1250:FreeRTOS/Src/timers.c ****             xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1251:FreeRTOS/Src/timers.c **** 
1252:FreeRTOS/Src/timers.c ****             tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1253:FreeRTOS/Src/timers.c ****             traceRETURN_xTimerPendFunctionCallFromISR( xReturn );
1254:FreeRTOS/Src/timers.c **** 
1255:FreeRTOS/Src/timers.c ****             return xReturn;
1256:FreeRTOS/Src/timers.c ****         }
1257:FreeRTOS/Src/timers.c **** 
1258:FreeRTOS/Src/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1259:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1260:FreeRTOS/Src/timers.c **** 
1261:FreeRTOS/Src/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1262:FreeRTOS/Src/timers.c **** 
1263:FreeRTOS/Src/timers.c ****         BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
1264:FreeRTOS/Src/timers.c ****                                            void * pvParameter1,
1265:FreeRTOS/Src/timers.c ****                                            uint32_t ulParameter2,
1266:FreeRTOS/Src/timers.c ****                                            TickType_t xTicksToWait )
1267:FreeRTOS/Src/timers.c ****         {
1268:FreeRTOS/Src/timers.c ****             DaemonTaskMessage_t xMessage;
1269:FreeRTOS/Src/timers.c ****             BaseType_t xReturn;
1270:FreeRTOS/Src/timers.c **** 
1271:FreeRTOS/Src/timers.c ****             traceENTER_xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksT
1272:FreeRTOS/Src/timers.c **** 
1273:FreeRTOS/Src/timers.c ****             /* This function can only be called after a timer has been created or
1274:FreeRTOS/Src/timers.c ****              * after the scheduler has been started because, until then, the timer
1275:FreeRTOS/Src/timers.c ****              * queue does not exist. */
1276:FreeRTOS/Src/timers.c ****             configASSERT( xTimerQueue );
1277:FreeRTOS/Src/timers.c **** 
1278:FreeRTOS/Src/timers.c ****             /* Complete the message with the function parameters and post it to the
1279:FreeRTOS/Src/timers.c ****              * daemon task. */
1280:FreeRTOS/Src/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
1281:FreeRTOS/Src/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 61


1282:FreeRTOS/Src/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
1283:FreeRTOS/Src/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
1284:FreeRTOS/Src/timers.c **** 
1285:FreeRTOS/Src/timers.c ****             xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1286:FreeRTOS/Src/timers.c **** 
1287:FreeRTOS/Src/timers.c ****             tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1288:FreeRTOS/Src/timers.c ****             traceRETURN_xTimerPendFunctionCall( xReturn );
1289:FreeRTOS/Src/timers.c **** 
1290:FreeRTOS/Src/timers.c ****             return xReturn;
1291:FreeRTOS/Src/timers.c ****         }
1292:FreeRTOS/Src/timers.c **** 
1293:FreeRTOS/Src/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1294:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1295:FreeRTOS/Src/timers.c **** 
1296:FreeRTOS/Src/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1297:FreeRTOS/Src/timers.c **** 
1298:FreeRTOS/Src/timers.c ****         UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1299:FreeRTOS/Src/timers.c ****         {
1300:FreeRTOS/Src/timers.c ****             traceENTER_uxTimerGetTimerNumber( xTimer );
1301:FreeRTOS/Src/timers.c **** 
1302:FreeRTOS/Src/timers.c ****             traceRETURN_uxTimerGetTimerNumber( ( ( Timer_t * ) xTimer )->uxTimerNumber );
1303:FreeRTOS/Src/timers.c **** 
1304:FreeRTOS/Src/timers.c ****             return ( ( Timer_t * ) xTimer )->uxTimerNumber;
1305:FreeRTOS/Src/timers.c ****         }
1306:FreeRTOS/Src/timers.c **** 
1307:FreeRTOS/Src/timers.c ****     #endif /* configUSE_TRACE_FACILITY */
1308:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1309:FreeRTOS/Src/timers.c **** 
1310:FreeRTOS/Src/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1311:FreeRTOS/Src/timers.c **** 
1312:FreeRTOS/Src/timers.c ****         void vTimerSetTimerNumber( TimerHandle_t xTimer,
1313:FreeRTOS/Src/timers.c ****                                    UBaseType_t uxTimerNumber )
1314:FreeRTOS/Src/timers.c ****         {
1315:FreeRTOS/Src/timers.c ****             traceENTER_vTimerSetTimerNumber( xTimer, uxTimerNumber );
1316:FreeRTOS/Src/timers.c **** 
1317:FreeRTOS/Src/timers.c ****             ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
1318:FreeRTOS/Src/timers.c **** 
1319:FreeRTOS/Src/timers.c ****             traceRETURN_vTimerSetTimerNumber();
1320:FreeRTOS/Src/timers.c ****         }
1321:FreeRTOS/Src/timers.c **** 
1322:FreeRTOS/Src/timers.c ****     #endif /* configUSE_TRACE_FACILITY */
1323:FreeRTOS/Src/timers.c **** /*-----------------------------------------------------------*/
1324:FreeRTOS/Src/timers.c **** 
1325:FreeRTOS/Src/timers.c **** /*
1326:FreeRTOS/Src/timers.c ****  * Reset the state in this file. This state is normally initialized at start up.
1327:FreeRTOS/Src/timers.c ****  * This function must be called by the application before restarting the
1328:FreeRTOS/Src/timers.c ****  * scheduler.
1329:FreeRTOS/Src/timers.c ****  */
1330:FreeRTOS/Src/timers.c ****     void vTimerResetState( void )
1331:FreeRTOS/Src/timers.c ****     {
 1786              		.loc 1 1331 5 is_stmt 1 view -0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 0
 1789              		@ frame_needed = 0, uses_anonymous_args = 0
 1790              		@ link register save eliminated.
1332:FreeRTOS/Src/timers.c ****         xTimerQueue = NULL;
 1791              		.loc 1 1332 9 view .LVU496
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 62


 1792              		.loc 1 1332 21 is_stmt 0 view .LVU497
 1793 0000 0023     		movs	r3, #0
 1794 0002 024A     		ldr	r2, .L141
 1795 0004 1360     		str	r3, [r2]
1333:FreeRTOS/Src/timers.c ****         xTimerTaskHandle = NULL;
 1796              		.loc 1 1333 9 is_stmt 1 view .LVU498
 1797              		.loc 1 1333 26 is_stmt 0 view .LVU499
 1798 0006 024A     		ldr	r2, .L141+4
 1799 0008 1360     		str	r3, [r2]
1334:FreeRTOS/Src/timers.c ****     }
 1800              		.loc 1 1334 5 view .LVU500
 1801 000a 7047     		bx	lr
 1802              	.L142:
 1803              		.align	2
 1804              	.L141:
 1805 000c 00000000 		.word	xTimerQueue
 1806 0010 00000000 		.word	xTimerTaskHandle
 1807              		.cfi_endproc
 1808              	.LFE153:
 1810              		.section	.bss.xLastTime.0,"aw",%nobits
 1811              		.align	2
 1814              	xLastTime.0:
 1815 0000 00000000 		.space	4
 1816              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 1817              		.align	2
 1820              	xTimerTaskHandle:
 1821 0000 00000000 		.space	4
 1822              		.section	.bss.xTimerQueue,"aw",%nobits
 1823              		.align	2
 1826              	xTimerQueue:
 1827 0000 00000000 		.space	4
 1828              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 1829              		.align	2
 1832              	pxOverflowTimerList:
 1833 0000 00000000 		.space	4
 1834              		.section	.bss.pxCurrentTimerList,"aw",%nobits
 1835              		.align	2
 1838              	pxCurrentTimerList:
 1839 0000 00000000 		.space	4
 1840              		.section	.bss.xActiveTimerList2,"aw",%nobits
 1841              		.align	2
 1844              	xActiveTimerList2:
 1845 0000 00000000 		.space	20
 1845      00000000 
 1845      00000000 
 1845      00000000 
 1845      00000000 
 1846              		.section	.bss.xActiveTimerList1,"aw",%nobits
 1847              		.align	2
 1850              	xActiveTimerList1:
 1851 0000 00000000 		.space	20
 1851      00000000 
 1851      00000000 
 1851      00000000 
 1851      00000000 
 1852              		.text
 1853              	.Letext0:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 63


 1854              		.file 2 "D:/Tools/arm-gnu-toolchain/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h"
 1855              		.file 3 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 1856              		.file 4 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 1857              		.file 5 "FreeRTOS/Inc/projdefs.h"
 1858              		.file 6 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
 1859              		.file 7 "FreeRTOS/Inc/list.h"
 1860              		.file 8 "FreeRTOS/Inc/task.h"
 1861              		.file 9 "FreeRTOS/Inc/queue.h"
 1862              		.file 10 "FreeRTOS/Inc/timers.h"
 1863              		.file 11 "FreeRTOS/Inc/portable.h"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 64


DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:19     .text.prvGetNextExpireTime:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:24     .text.prvGetNextExpireTime:00000000 prvGetNextExpireTime
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:70     .text.prvGetNextExpireTime:0000001c $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1838   .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:75     .text.prvInsertTimerInActiveList:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:80     .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:170    .text.prvInsertTimerInActiveList:00000040 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1832   .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:176    .text.prvReloadTimer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:181    .text.prvReloadTimer:00000000 prvReloadTimer
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:239    .text.prvProcessExpiredTimer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:244    .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:309    .text.prvProcessExpiredTimer:0000003c $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:314    .text.prvSwitchTimerLists:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:319    .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:372    .text.prvSwitchTimerLists:00000028 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:378    .text.prvSampleTimeNow:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:383    .text.prvSampleTimeNow:00000000 prvSampleTimeNow
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:442    .text.prvSampleTimeNow:00000028 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1814   .bss.xLastTime.0:00000000 xLastTime.0
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:447    .text.prvProcessTimerOrBlockTask:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:452    .text.prvProcessTimerOrBlockTask:00000000 prvProcessTimerOrBlockTask
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:578    .text.prvProcessTimerOrBlockTask:0000006c $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1826   .bss.xTimerQueue:00000000 xTimerQueue
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:584    .text.prvProcessReceivedCommands:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:589    .text.prvProcessReceivedCommands:00000000 prvProcessReceivedCommands
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:665    .text.prvProcessReceivedCommands:00000042 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:797    .text.prvProcessReceivedCommands:000000e0 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:802    .text.prvTimerTask:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:807    .text.prvTimerTask:00000000 prvTimerTask
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:846    .rodata.prvCheckForValidListAndQueue.str1.4:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:850    .text.prvCheckForValidListAndQueue:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:855    .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:925    .text.prvCheckForValidListAndQueue:00000044 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1850   .bss.xActiveTimerList1:00000000 xActiveTimerList1
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1844   .bss.xActiveTimerList2:00000000 xActiveTimerList2
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:935    .text.prvInitialiseNewTimer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:940    .text.prvInitialiseNewTimer:00000000 prvInitialiseNewTimer
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1001   .rodata.xTimerCreateTimerTask.str1.4:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1005   .text.xTimerCreateTimerTask:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1011   .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1071   .text.xTimerCreateTimerTask:0000002c $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1820   .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1079   .text.xTimerCreate:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1085   .text.xTimerCreate:00000000 xTimerCreate
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1153   .text.xTimerGenericCommandFromTask:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1159   .text.xTimerGenericCommandFromTask:00000000 xTimerGenericCommandFromTask
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1263   .text.xTimerGenericCommandFromTask:00000048 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1268   .text.xTimerGenericCommandFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1274   .text.xTimerGenericCommandFromISR:00000000 xTimerGenericCommandFromISR
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1363   .text.xTimerGenericCommandFromISR:00000030 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1368   .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1374   .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1392   .text.xTimerGetTimerDaemonTaskHandle:00000008 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1397   .text.xTimerGetPeriod:00000000 $t
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s 			page 65


C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1403   .text.xTimerGetPeriod:00000000 xTimerGetPeriod
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1425   .text.vTimerSetReloadMode:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1431   .text.vTimerSetReloadMode:00000000 vTimerSetReloadMode
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1484   .text.xTimerGetReloadMode:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1490   .text.xTimerGetReloadMode:00000000 xTimerGetReloadMode
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1541   .text.uxTimerGetReloadMode:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1547   .text.uxTimerGetReloadMode:00000000 uxTimerGetReloadMode
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1574   .text.xTimerGetExpiryTime:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1580   .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1604   .text.pcTimerGetName:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1610   .text.pcTimerGetName:00000000 pcTimerGetName
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1632   .text.xTimerIsTimerActive:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1638   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1689   .text.pvTimerGetTimerID:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1695   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1734   .text.vTimerSetTimerID:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1740   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1778   .text.vTimerResetState:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1784   .text.vTimerResetState:00000000 vTimerResetState
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1805   .text.vTimerResetState:0000000c $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1811   .bss.xLastTime.0:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1817   .bss.xTimerTaskHandle:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1823   .bss.xTimerQueue:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1829   .bss.pxOverflowTimerList:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1835   .bss.pxCurrentTimerList:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1841   .bss.xActiveTimerList2:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:1847   .bss.xActiveTimerList1:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:674    .text.prvProcessReceivedCommands:0000004b $d
C:\Users\Dawn\AppData\Local\Temp\ccfjBtrp.s:674    .text.prvProcessReceivedCommands:0000004c $t

UNDEFINED SYMBOLS
vListInsert
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
vQueueWaitForMessageRestricted
xTaskResumeAll
xQueueReceive
vPortFree
vPortEnterCritical
vPortExitCritical
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
vListInitialiseItem
xTaskCreate
pvPortMalloc
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
