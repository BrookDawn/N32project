ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 23, 1
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "FreeRTOS/Src/tasks.c"
  18              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvTaskIsTaskSuspended:
  25              	.LVL0:
  26              	.LFB141:
   1:FreeRTOS/Src/tasks.c **** /*
   2:FreeRTOS/Src/tasks.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/Src/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/Src/tasks.c ****  *
   5:FreeRTOS/Src/tasks.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/Src/tasks.c ****  *
   7:FreeRTOS/Src/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/Src/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/Src/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/Src/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/Src/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/Src/tasks.c ****  * subject to the following conditions:
  13:FreeRTOS/Src/tasks.c ****  *
  14:FreeRTOS/Src/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/Src/tasks.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/Src/tasks.c ****  *
  17:FreeRTOS/Src/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/Src/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/Src/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/Src/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/Src/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/Src/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/Src/tasks.c ****  *
  24:FreeRTOS/Src/tasks.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/Src/tasks.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/Src/tasks.c ****  *
  27:FreeRTOS/Src/tasks.c ****  */
  28:FreeRTOS/Src/tasks.c **** 
  29:FreeRTOS/Src/tasks.c **** /* Standard includes. */
  30:FreeRTOS/Src/tasks.c **** #include <stdlib.h>
  31:FreeRTOS/Src/tasks.c **** #include <string.h>
  32:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 2


  33:FreeRTOS/Src/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:FreeRTOS/Src/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:FreeRTOS/Src/tasks.c ****  * task.h is included from an application file. */
  36:FreeRTOS/Src/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:FreeRTOS/Src/tasks.c **** 
  38:FreeRTOS/Src/tasks.c **** /* FreeRTOS includes. */
  39:FreeRTOS/Src/tasks.c **** #include "FreeRTOS.h"
  40:FreeRTOS/Src/tasks.c **** #include "task.h"
  41:FreeRTOS/Src/tasks.c **** #include "timers.h"
  42:FreeRTOS/Src/tasks.c **** #include "stack_macros.h"
  43:FreeRTOS/Src/tasks.c **** 
  44:FreeRTOS/Src/tasks.c **** /* The default definitions are only available for non-MPU ports. The
  45:FreeRTOS/Src/tasks.c ****  * reason is that the stack alignment requirements vary for different
  46:FreeRTOS/Src/tasks.c ****  * architectures.*/
  47:FreeRTOS/Src/tasks.c **** #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY == 1 ) && (
  48:FreeRTOS/Src/tasks.c ****     #error configKERNEL_PROVIDED_STATIC_MEMORY cannot be set to 1 when using an MPU port. The vAppl
  49:FreeRTOS/Src/tasks.c **** #endif
  50:FreeRTOS/Src/tasks.c **** 
  51:FreeRTOS/Src/tasks.c **** /* The MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  52:FreeRTOS/Src/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  53:FreeRTOS/Src/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  54:FreeRTOS/Src/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  55:FreeRTOS/Src/tasks.c **** 
  56:FreeRTOS/Src/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  57:FreeRTOS/Src/tasks.c ****  * functions but without including stdio.h here. */
  58:FreeRTOS/Src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  59:FreeRTOS/Src/tasks.c **** 
  60:FreeRTOS/Src/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  61:FreeRTOS/Src/tasks.c ****  * to generate human readable text from the raw data generated by the
  62:FreeRTOS/Src/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  63:FreeRTOS/Src/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  64:FreeRTOS/Src/tasks.c ****     #include <stdio.h>
  65:FreeRTOS/Src/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  66:FreeRTOS/Src/tasks.c **** 
  67:FreeRTOS/Src/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  68:FreeRTOS/Src/tasks.c **** 
  69:FreeRTOS/Src/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  70:FreeRTOS/Src/tasks.c ****  * performed just because a higher priority task has been woken. */
  71:FreeRTOS/Src/tasks.c ****     #define taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB )
  72:FreeRTOS/Src/tasks.c ****     #define taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB )
  73:FreeRTOS/Src/tasks.c **** #else
  74:FreeRTOS/Src/tasks.c **** 
  75:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
  76:FreeRTOS/Src/tasks.c **** 
  77:FreeRTOS/Src/tasks.c **** /* This macro requests the running task pxTCB to yield. In single core
  78:FreeRTOS/Src/tasks.c ****  * scheduler, a running task always runs on core 0 and portYIELD_WITHIN_API()
  79:FreeRTOS/Src/tasks.c ****  * can be used to request the task running on core 0 to yield. Therefore, pxTCB
  80:FreeRTOS/Src/tasks.c ****  * is not used in this macro. */
  81:FreeRTOS/Src/tasks.c ****         #define taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB ) \
  82:FreeRTOS/Src/tasks.c ****     do {                                                         \
  83:FreeRTOS/Src/tasks.c ****         ( void ) ( pxTCB );                                      \
  84:FreeRTOS/Src/tasks.c ****         portYIELD_WITHIN_API();                                  \
  85:FreeRTOS/Src/tasks.c ****     } while( 0 )
  86:FreeRTOS/Src/tasks.c **** 
  87:FreeRTOS/Src/tasks.c ****         #define taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB ) \
  88:FreeRTOS/Src/tasks.c ****     do {                                                        \
  89:FreeRTOS/Src/tasks.c ****         if( pxCurrentTCB->uxPriority < ( pxTCB )->uxPriority )  \
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 3


  90:FreeRTOS/Src/tasks.c ****         {                                                       \
  91:FreeRTOS/Src/tasks.c ****             portYIELD_WITHIN_API();                             \
  92:FreeRTOS/Src/tasks.c ****         }                                                       \
  93:FreeRTOS/Src/tasks.c ****         else                                                    \
  94:FreeRTOS/Src/tasks.c ****         {                                                       \
  95:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();                           \
  96:FreeRTOS/Src/tasks.c ****         }                                                       \
  97:FreeRTOS/Src/tasks.c ****     } while( 0 )
  98:FreeRTOS/Src/tasks.c **** 
  99:FreeRTOS/Src/tasks.c ****     #else /* if ( configNUMBER_OF_CORES == 1 ) */
 100:FreeRTOS/Src/tasks.c **** 
 101:FreeRTOS/Src/tasks.c **** /* Yield the core on which this task is running. */
 102:FreeRTOS/Src/tasks.c ****         #define taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB )    prvYieldCore( ( pxTCB )->xTaskR
 103:FreeRTOS/Src/tasks.c **** 
 104:FreeRTOS/Src/tasks.c **** /* Yield for the task if a running task has priority lower than this task. */
 105:FreeRTOS/Src/tasks.c ****         #define taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB )     prvYieldForTask( pxTCB )
 106:FreeRTOS/Src/tasks.c **** 
 107:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
 108:FreeRTOS/Src/tasks.c **** 
 109:FreeRTOS/Src/tasks.c **** #endif /* if ( configUSE_PREEMPTION == 0 ) */
 110:FreeRTOS/Src/tasks.c **** 
 111:FreeRTOS/Src/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 112:FreeRTOS/Src/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
 113:FreeRTOS/Src/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
 114:FreeRTOS/Src/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
 115:FreeRTOS/Src/tasks.c **** 
 116:FreeRTOS/Src/tasks.c **** /*
 117:FreeRTOS/Src/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 118:FreeRTOS/Src/tasks.c ****  * is used purely for checking the high water mark for tasks.
 119:FreeRTOS/Src/tasks.c ****  */
 120:FreeRTOS/Src/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
 121:FreeRTOS/Src/tasks.c **** 
 122:FreeRTOS/Src/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
 123:FreeRTOS/Src/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
 124:FreeRTOS/Src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
 125:FreeRTOS/Src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
 126:FreeRTOS/Src/tasks.c **** 
 127:FreeRTOS/Src/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 128:FreeRTOS/Src/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
 129:FreeRTOS/Src/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
 130:FreeRTOS/Src/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 131:FreeRTOS/Src/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
 132:FreeRTOS/Src/tasks.c **** #else
 133:FreeRTOS/Src/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
 134:FreeRTOS/Src/tasks.c **** #endif
 135:FreeRTOS/Src/tasks.c **** 
 136:FreeRTOS/Src/tasks.c **** /*
 137:FreeRTOS/Src/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 138:FreeRTOS/Src/tasks.c ****  */
 139:FreeRTOS/Src/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
 140:FreeRTOS/Src/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 141:FreeRTOS/Src/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 142:FreeRTOS/Src/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 143:FreeRTOS/Src/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 144:FreeRTOS/Src/tasks.c **** 
 145:FreeRTOS/Src/tasks.c **** /*
 146:FreeRTOS/Src/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 4


 147:FreeRTOS/Src/tasks.c ****  * global, rather than file scope.
 148:FreeRTOS/Src/tasks.c ****  */
 149:FreeRTOS/Src/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 150:FreeRTOS/Src/tasks.c ****     #define static
 151:FreeRTOS/Src/tasks.c **** #endif
 152:FreeRTOS/Src/tasks.c **** 
 153:FreeRTOS/Src/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 154:FreeRTOS/Src/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 155:FreeRTOS/Src/tasks.c **** #ifndef configIDLE_TASK_NAME
 156:FreeRTOS/Src/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 157:FreeRTOS/Src/tasks.c **** #endif
 158:FreeRTOS/Src/tasks.c **** 
 159:FreeRTOS/Src/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 160:FreeRTOS/Src/tasks.c **** 
 161:FreeRTOS/Src/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 162:FreeRTOS/Src/tasks.c ****  * performed in a generic way that is not optimised to any particular
 163:FreeRTOS/Src/tasks.c ****  * microcontroller architecture. */
 164:FreeRTOS/Src/tasks.c **** 
 165:FreeRTOS/Src/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 166:FreeRTOS/Src/tasks.c ****  * state task. */
 167:FreeRTOS/Src/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 168:FreeRTOS/Src/tasks.c ****     do {                                            \
 169:FreeRTOS/Src/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 170:FreeRTOS/Src/tasks.c ****         {                                           \
 171:FreeRTOS/Src/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 172:FreeRTOS/Src/tasks.c ****         }                                           \
 173:FreeRTOS/Src/tasks.c ****     } while( 0 ) /* taskRECORD_READY_PRIORITY */
 174:FreeRTOS/Src/tasks.c **** 
 175:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 176:FreeRTOS/Src/tasks.c **** 
 177:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
 178:FreeRTOS/Src/tasks.c ****         #define taskSELECT_HIGHEST_PRIORITY_TASK()                                       \
 179:FreeRTOS/Src/tasks.c ****     do {                                                                                 \
 180:FreeRTOS/Src/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                                  \
 181:FreeRTOS/Src/tasks.c ****                                                                                          \
 182:FreeRTOS/Src/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */                 \
 183:FreeRTOS/Src/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) != pdFALSE ) \
 184:FreeRTOS/Src/tasks.c ****         {                                                                                \
 185:FreeRTOS/Src/tasks.c ****             configASSERT( uxTopPriority );                                               \
 186:FreeRTOS/Src/tasks.c ****             --uxTopPriority;                                                             \
 187:FreeRTOS/Src/tasks.c ****         }                                                                                \
 188:FreeRTOS/Src/tasks.c ****                                                                                          \
 189:FreeRTOS/Src/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 190:FreeRTOS/Src/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 191:FreeRTOS/Src/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 192:FreeRTOS/Src/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 193:FreeRTOS/Src/tasks.c ****     } while( 0 ) /* taskSELECT_HIGHEST_PRIORITY_TASK */
 194:FreeRTOS/Src/tasks.c ****     #else /* if ( configNUMBER_OF_CORES == 1 ) */
 195:FreeRTOS/Src/tasks.c **** 
 196:FreeRTOS/Src/tasks.c ****         #define taskSELECT_HIGHEST_PRIORITY_TASK( xCoreID )    prvSelectHighestPriorityTask( xCoreI
 197:FreeRTOS/Src/tasks.c **** 
 198:FreeRTOS/Src/tasks.c ****     #endif /* if ( configNUMBER_OF_CORES == 1 ) */
 199:FreeRTOS/Src/tasks.c **** 
 200:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 201:FreeRTOS/Src/tasks.c **** 
 202:FreeRTOS/Src/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 203:FreeRTOS/Src/tasks.c ****  * they are only required when a port optimised method of task selection is
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 5


 204:FreeRTOS/Src/tasks.c ****  * being used. */
 205:FreeRTOS/Src/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 206:FreeRTOS/Src/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 207:FreeRTOS/Src/tasks.c **** 
 208:FreeRTOS/Src/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 209:FreeRTOS/Src/tasks.c **** 
 210:FreeRTOS/Src/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 211:FreeRTOS/Src/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 212:FreeRTOS/Src/tasks.c ****  * architecture being used. */
 213:FreeRTOS/Src/tasks.c **** 
 214:FreeRTOS/Src/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 215:FreeRTOS/Src/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( ( uxPriority ), u
 216:FreeRTOS/Src/tasks.c **** 
 217:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 218:FreeRTOS/Src/tasks.c **** 
 219:FreeRTOS/Src/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 220:FreeRTOS/Src/tasks.c ****     do {                                                                                        \
 221:FreeRTOS/Src/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 222:FreeRTOS/Src/tasks.c ****                                                                                                 \
 223:FreeRTOS/Src/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 224:FreeRTOS/Src/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 225:FreeRTOS/Src/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 226:FreeRTOS/Src/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 227:FreeRTOS/Src/tasks.c ****     } while( 0 )
 228:FreeRTOS/Src/tasks.c **** 
 229:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 230:FreeRTOS/Src/tasks.c **** 
 231:FreeRTOS/Src/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 232:FreeRTOS/Src/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 233:FreeRTOS/Src/tasks.c ****  * or suspended list then it won't be in a ready list. */
 234:FreeRTOS/Src/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 235:FreeRTOS/Src/tasks.c ****     do {                                                                                           
 236:FreeRTOS/Src/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 237:FreeRTOS/Src/tasks.c ****         {                                                                                          
 238:FreeRTOS/Src/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 239:FreeRTOS/Src/tasks.c ****         }                                                                                          
 240:FreeRTOS/Src/tasks.c ****     } while( 0 )
 241:FreeRTOS/Src/tasks.c **** 
 242:FreeRTOS/Src/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 243:FreeRTOS/Src/tasks.c **** 
 244:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 245:FreeRTOS/Src/tasks.c **** 
 246:FreeRTOS/Src/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 247:FreeRTOS/Src/tasks.c ****  * count overflows. */
 248:FreeRTOS/Src/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 249:FreeRTOS/Src/tasks.c ****     do {                                                                          \
 250:FreeRTOS/Src/tasks.c ****         List_t * pxTemp;                                                          \
 251:FreeRTOS/Src/tasks.c ****                                                                                   \
 252:FreeRTOS/Src/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 253:FreeRTOS/Src/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 254:FreeRTOS/Src/tasks.c ****                                                                                   \
 255:FreeRTOS/Src/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 256:FreeRTOS/Src/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 257:FreeRTOS/Src/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 258:FreeRTOS/Src/tasks.c ****         xNumOfOverflows = ( BaseType_t ) ( xNumOfOverflows + 1 );                 \
 259:FreeRTOS/Src/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 260:FreeRTOS/Src/tasks.c ****     } while( 0 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 6


 261:FreeRTOS/Src/tasks.c **** 
 262:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 263:FreeRTOS/Src/tasks.c **** 
 264:FreeRTOS/Src/tasks.c **** /*
 265:FreeRTOS/Src/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 266:FreeRTOS/Src/tasks.c ****  * the task.  It is inserted at the end of the list.
 267:FreeRTOS/Src/tasks.c ****  */
 268:FreeRTOS/Src/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 269:FreeRTOS/Src/tasks.c ****     do {                                                                                           
 270:FreeRTOS/Src/tasks.c ****         traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                   
 271:FreeRTOS/Src/tasks.c ****         taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                        
 272:FreeRTOS/Src/tasks.c ****         listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListIt
 273:FreeRTOS/Src/tasks.c ****         tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB );                                              
 274:FreeRTOS/Src/tasks.c ****     } while( 0 )
 275:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 276:FreeRTOS/Src/tasks.c **** 
 277:FreeRTOS/Src/tasks.c **** /*
 278:FreeRTOS/Src/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 279:FreeRTOS/Src/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 280:FreeRTOS/Src/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 281:FreeRTOS/Src/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 282:FreeRTOS/Src/tasks.c ****  */
 283:FreeRTOS/Src/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 284:FreeRTOS/Src/tasks.c **** 
 285:FreeRTOS/Src/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 286:FreeRTOS/Src/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 287:FreeRTOS/Src/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 288:FreeRTOS/Src/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 289:FreeRTOS/Src/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 290:FreeRTOS/Src/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 291:FreeRTOS/Src/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 292:FreeRTOS/Src/tasks.c ****  * to its original value when it is released. */
 293:FreeRTOS/Src/tasks.c **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
 294:FreeRTOS/Src/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    ( ( uint16_t ) 0x8000U )
 295:FreeRTOS/Src/tasks.c **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
 296:FreeRTOS/Src/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    ( ( uint32_t ) 0x80000000U )
 297:FreeRTOS/Src/tasks.c **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
 298:FreeRTOS/Src/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    ( ( uint64_t ) 0x8000000000000000U )
 299:FreeRTOS/Src/tasks.c **** #endif
 300:FreeRTOS/Src/tasks.c **** 
 301:FreeRTOS/Src/tasks.c **** /* Indicates that the task is not actively running on any core. */
 302:FreeRTOS/Src/tasks.c **** #define taskTASK_NOT_RUNNING           ( ( BaseType_t ) ( -1 ) )
 303:FreeRTOS/Src/tasks.c **** 
 304:FreeRTOS/Src/tasks.c **** /* Indicates that the task is actively running but scheduled to yield. */
 305:FreeRTOS/Src/tasks.c **** #define taskTASK_SCHEDULED_TO_YIELD    ( ( BaseType_t ) ( -2 ) )
 306:FreeRTOS/Src/tasks.c **** 
 307:FreeRTOS/Src/tasks.c **** /* Returns pdTRUE if the task is actively running and not scheduled to yield. */
 308:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES == 1 )
 309:FreeRTOS/Src/tasks.c ****     #define taskTASK_IS_RUNNING( pxTCB )                          ( ( ( pxTCB ) == pxCurrentTCB ) ?
 310:FreeRTOS/Src/tasks.c ****     #define taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB )    ( ( ( pxTCB ) == pxCurrentTCB ) ?
 311:FreeRTOS/Src/tasks.c **** #else
 312:FreeRTOS/Src/tasks.c ****     #define taskTASK_IS_RUNNING( pxTCB )                          ( ( ( ( pxTCB )->xTaskRunState >=
 313:FreeRTOS/Src/tasks.c ****     #define taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB )    ( ( ( pxTCB )->xTaskRunState != t
 314:FreeRTOS/Src/tasks.c **** #endif
 315:FreeRTOS/Src/tasks.c **** 
 316:FreeRTOS/Src/tasks.c **** /* Indicates that the task is an Idle task. */
 317:FreeRTOS/Src/tasks.c **** #define taskATTRIBUTE_IS_IDLE    ( UBaseType_t ) ( 1U << 0U )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 7


 318:FreeRTOS/Src/tasks.c **** 
 319:FreeRTOS/Src/tasks.c **** #if ( ( configNUMBER_OF_CORES > 1 ) && ( portCRITICAL_NESTING_IN_TCB == 1 ) )
 320:FreeRTOS/Src/tasks.c ****     #define portGET_CRITICAL_NESTING_COUNT()          ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxCriti
 321:FreeRTOS/Src/tasks.c ****     #define portSET_CRITICAL_NESTING_COUNT( x )       ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxCriti
 322:FreeRTOS/Src/tasks.c ****     #define portINCREMENT_CRITICAL_NESTING_COUNT()    ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxCriti
 323:FreeRTOS/Src/tasks.c ****     #define portDECREMENT_CRITICAL_NESTING_COUNT()    ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxCriti
 324:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( portCRITICAL_NESTING_IN_TCB == 1 ) ) */
 325:FreeRTOS/Src/tasks.c **** 
 326:FreeRTOS/Src/tasks.c **** #define taskBITS_PER_BYTE    ( ( size_t ) 8 )
 327:FreeRTOS/Src/tasks.c **** 
 328:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 329:FreeRTOS/Src/tasks.c **** 
 330:FreeRTOS/Src/tasks.c **** /* Yields the given core. This must be called from a critical section and xCoreID
 331:FreeRTOS/Src/tasks.c ****  * must be valid. This macro is not required in single core since there is only
 332:FreeRTOS/Src/tasks.c ****  * one core to yield. */
 333:FreeRTOS/Src/tasks.c ****     #define prvYieldCore( xCoreID )                                                          \
 334:FreeRTOS/Src/tasks.c ****     do {                                                                                     \
 335:FreeRTOS/Src/tasks.c ****         if( ( xCoreID ) == ( BaseType_t ) portGET_CORE_ID() )                                \
 336:FreeRTOS/Src/tasks.c ****         {                                                                                    \
 337:FreeRTOS/Src/tasks.c ****             /* Pending a yield for this core since it is in the critical section. */         \
 338:FreeRTOS/Src/tasks.c ****             xYieldPendings[ ( xCoreID ) ] = pdTRUE;                                          \
 339:FreeRTOS/Src/tasks.c ****         }                                                                                    \
 340:FreeRTOS/Src/tasks.c ****         else                                                                                 \
 341:FreeRTOS/Src/tasks.c ****         {                                                                                    \
 342:FreeRTOS/Src/tasks.c ****             /* Request other core to yield if it is not requested before. */                 \
 343:FreeRTOS/Src/tasks.c ****             if( pxCurrentTCBs[ ( xCoreID ) ]->xTaskRunState != taskTASK_SCHEDULED_TO_YIELD ) \
 344:FreeRTOS/Src/tasks.c ****             {                                                                                \
 345:FreeRTOS/Src/tasks.c ****                 portYIELD_CORE( xCoreID );                                                   \
 346:FreeRTOS/Src/tasks.c ****                 pxCurrentTCBs[ ( xCoreID ) ]->xTaskRunState = taskTASK_SCHEDULED_TO_YIELD;   \
 347:FreeRTOS/Src/tasks.c ****             }                                                                                \
 348:FreeRTOS/Src/tasks.c ****         }                                                                                    \
 349:FreeRTOS/Src/tasks.c ****     } while( 0 )
 350:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 351:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 352:FreeRTOS/Src/tasks.c **** 
 353:FreeRTOS/Src/tasks.c **** /*
 354:FreeRTOS/Src/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 355:FreeRTOS/Src/tasks.c ****  * and stores task state information, including a pointer to the task's context
 356:FreeRTOS/Src/tasks.c ****  * (the task's run time environment, including register values)
 357:FreeRTOS/Src/tasks.c ****  */
 358:FreeRTOS/Src/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 359:FreeRTOS/Src/tasks.c **** {
 360:FreeRTOS/Src/tasks.c ****     volatile StackType_t * pxTopOfStack; /**< Points to the location of the last item placed on the
 361:FreeRTOS/Src/tasks.c **** 
 362:FreeRTOS/Src/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 363:FreeRTOS/Src/tasks.c ****         xMPU_SETTINGS xMPUSettings; /**< The MPU settings are defined as part of the port layer.  T
 364:FreeRTOS/Src/tasks.c ****     #endif
 365:FreeRTOS/Src/tasks.c **** 
 366:FreeRTOS/Src/tasks.c ****     #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 )
 367:FreeRTOS/Src/tasks.c ****         UBaseType_t uxCoreAffinityMask; /**< Used to link the task to certain cores.  UBaseType_t m
 368:FreeRTOS/Src/tasks.c ****     #endif
 369:FreeRTOS/Src/tasks.c **** 
 370:FreeRTOS/Src/tasks.c ****     ListItem_t xStateListItem;                  /**< The list that the state list item of a task is
 371:FreeRTOS/Src/tasks.c ****     ListItem_t xEventListItem;                  /**< Used to reference a task from an event list. *
 372:FreeRTOS/Src/tasks.c ****     UBaseType_t uxPriority;                     /**< The priority of the task.  0 is the lowest pri
 373:FreeRTOS/Src/tasks.c ****     StackType_t * pxStack;                      /**< Points to the start of the stack. */
 374:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 8


 375:FreeRTOS/Src/tasks.c ****         volatile BaseType_t xTaskRunState;      /**< Used to identify the core the task is running 
 376:FreeRTOS/Src/tasks.c ****         UBaseType_t uxTaskAttributes;           /**< Task's attributes - currently used to identify
 377:FreeRTOS/Src/tasks.c ****     #endif
 378:FreeRTOS/Src/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /**< Descriptive name given to the task when create
 379:FreeRTOS/Src/tasks.c **** 
 380:FreeRTOS/Src/tasks.c ****     #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
 381:FreeRTOS/Src/tasks.c ****         BaseType_t xPreemptionDisable; /**< Used to prevent the task from being preempted. */
 382:FreeRTOS/Src/tasks.c ****     #endif
 383:FreeRTOS/Src/tasks.c **** 
 384:FreeRTOS/Src/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 385:FreeRTOS/Src/tasks.c ****         StackType_t * pxEndOfStack; /**< Points to the highest valid address for the stack. */
 386:FreeRTOS/Src/tasks.c ****     #endif
 387:FreeRTOS/Src/tasks.c **** 
 388:FreeRTOS/Src/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 389:FreeRTOS/Src/tasks.c ****         UBaseType_t uxCriticalNesting; /**< Holds the critical section nesting depth for ports that
 390:FreeRTOS/Src/tasks.c ****     #endif
 391:FreeRTOS/Src/tasks.c **** 
 392:FreeRTOS/Src/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 393:FreeRTOS/Src/tasks.c ****         UBaseType_t uxTCBNumber;  /**< Stores a number that increments each time a TCB is created. 
 394:FreeRTOS/Src/tasks.c ****         UBaseType_t uxTaskNumber; /**< Stores a number specifically for use by third party trace co
 395:FreeRTOS/Src/tasks.c ****     #endif
 396:FreeRTOS/Src/tasks.c **** 
 397:FreeRTOS/Src/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 398:FreeRTOS/Src/tasks.c ****         UBaseType_t uxBasePriority; /**< The priority last assigned to the task - used by the prior
 399:FreeRTOS/Src/tasks.c ****         UBaseType_t uxMutexesHeld;
 400:FreeRTOS/Src/tasks.c ****     #endif
 401:FreeRTOS/Src/tasks.c **** 
 402:FreeRTOS/Src/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 403:FreeRTOS/Src/tasks.c ****         TaskHookFunction_t pxTaskTag;
 404:FreeRTOS/Src/tasks.c ****     #endif
 405:FreeRTOS/Src/tasks.c **** 
 406:FreeRTOS/Src/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 407:FreeRTOS/Src/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 408:FreeRTOS/Src/tasks.c ****     #endif
 409:FreeRTOS/Src/tasks.c **** 
 410:FreeRTOS/Src/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 411:FreeRTOS/Src/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /**< Stores the amount of time the task has s
 412:FreeRTOS/Src/tasks.c ****     #endif
 413:FreeRTOS/Src/tasks.c **** 
 414:FreeRTOS/Src/tasks.c ****     #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
 415:FreeRTOS/Src/tasks.c ****         configTLS_BLOCK_TYPE xTLSBlock; /**< Memory block used as Thread Local Storage (TLS) Block 
 416:FreeRTOS/Src/tasks.c ****     #endif
 417:FreeRTOS/Src/tasks.c **** 
 418:FreeRTOS/Src/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 419:FreeRTOS/Src/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 420:FreeRTOS/Src/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 421:FreeRTOS/Src/tasks.c ****     #endif
 422:FreeRTOS/Src/tasks.c **** 
 423:FreeRTOS/Src/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 424:FreeRTOS/Src/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 425:FreeRTOS/Src/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 426:FreeRTOS/Src/tasks.c ****         uint8_t ucStaticallyAllocated; /**< Set to pdTRUE if the task is a statically allocated to 
 427:FreeRTOS/Src/tasks.c ****     #endif
 428:FreeRTOS/Src/tasks.c **** 
 429:FreeRTOS/Src/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 430:FreeRTOS/Src/tasks.c ****         uint8_t ucDelayAborted;
 431:FreeRTOS/Src/tasks.c ****     #endif
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 9


 432:FreeRTOS/Src/tasks.c **** 
 433:FreeRTOS/Src/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 434:FreeRTOS/Src/tasks.c ****         int iTaskErrno;
 435:FreeRTOS/Src/tasks.c ****     #endif
 436:FreeRTOS/Src/tasks.c **** } tskTCB;
 437:FreeRTOS/Src/tasks.c **** 
 438:FreeRTOS/Src/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 439:FreeRTOS/Src/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 440:FreeRTOS/Src/tasks.c **** typedef tskTCB TCB_t;
 441:FreeRTOS/Src/tasks.c **** 
 442:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES == 1 )
 443:FreeRTOS/Src/tasks.c ****     /* MISRA Ref 8.4.1 [Declaration shall be visible] */
 444:FreeRTOS/Src/tasks.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-84 */
 445:FreeRTOS/Src/tasks.c ****     /* coverity[misra_c_2012_rule_8_4_violation] */
 446:FreeRTOS/Src/tasks.c ****     portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 447:FreeRTOS/Src/tasks.c **** #else
 448:FreeRTOS/Src/tasks.c ****     /* MISRA Ref 8.4.1 [Declaration shall be visible] */
 449:FreeRTOS/Src/tasks.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-84 */
 450:FreeRTOS/Src/tasks.c ****     /* coverity[misra_c_2012_rule_8_4_violation] */
 451:FreeRTOS/Src/tasks.c ****     portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCBs[ configNUMBER_OF_CORES ];
 452:FreeRTOS/Src/tasks.c ****     #define pxCurrentTCB    xTaskGetCurrentTaskHandle()
 453:FreeRTOS/Src/tasks.c **** #endif
 454:FreeRTOS/Src/tasks.c **** 
 455:FreeRTOS/Src/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 456:FreeRTOS/Src/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 457:FreeRTOS/Src/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 458:FreeRTOS/Src/tasks.c ****  * the static qualifier. */
 459:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /**< Prioritised ready tas
 460:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /**< Delayed tasks. */
 461:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /**< Delayed tasks (two li
 462:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /**< Points to the delayed
 463:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /**< Points to the delayed
 464:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /**< Tasks that have been 
 465:FreeRTOS/Src/tasks.c **** 
 466:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 467:FreeRTOS/Src/tasks.c **** 
 468:FreeRTOS/Src/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /**< Tasks that have been deleted - but
 469:FreeRTOS/Src/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 470:FreeRTOS/Src/tasks.c **** 
 471:FreeRTOS/Src/tasks.c **** #endif
 472:FreeRTOS/Src/tasks.c **** 
 473:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 474:FreeRTOS/Src/tasks.c **** 
 475:FreeRTOS/Src/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /**< Tasks that are currently suspended. */
 476:FreeRTOS/Src/tasks.c **** 
 477:FreeRTOS/Src/tasks.c **** #endif
 478:FreeRTOS/Src/tasks.c **** 
 479:FreeRTOS/Src/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 480:FreeRTOS/Src/tasks.c ****  * the errno of the currently running task. */
 481:FreeRTOS/Src/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 482:FreeRTOS/Src/tasks.c ****     int FreeRTOS_errno = 0;
 483:FreeRTOS/Src/tasks.c **** #endif
 484:FreeRTOS/Src/tasks.c **** 
 485:FreeRTOS/Src/tasks.c **** /* Other file private variables. --------------------------------*/
 486:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 487:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 488:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 10


 489:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 490:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 491:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPendings[ configNUMBER_OF_CORES ] = { pdFALSE };
 492:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 493:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 494:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 495:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandles[ configNUMBER_OF_CORES ];       /**< Holds the
 496:FreeRTOS/Src/tasks.c **** 
 497:FreeRTOS/Src/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 498:FreeRTOS/Src/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 499:FreeRTOS/Src/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 500:FreeRTOS/Src/tasks.c **** static const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 501:FreeRTOS/Src/tasks.c **** 
 502:FreeRTOS/Src/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 503:FreeRTOS/Src/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 504:FreeRTOS/Src/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 505:FreeRTOS/Src/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 506:FreeRTOS/Src/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 507:FreeRTOS/Src/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 508:FreeRTOS/Src/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 509:FreeRTOS/Src/tasks.c ****  * accessed from a critical section.
 510:FreeRTOS/Src/tasks.c ****  *
 511:FreeRTOS/Src/tasks.c ****  * Updates to uxSchedulerSuspended must be protected by both the task lock and the ISR lock
 512:FreeRTOS/Src/tasks.c ****  * and must not be done from an ISR. Reads must be protected by either lock and may be done
 513:FreeRTOS/Src/tasks.c ****  * from either an ISR or a task. */
 514:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) 0U;
 515:FreeRTOS/Src/tasks.c **** 
 516:FreeRTOS/Src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 517:FreeRTOS/Src/tasks.c **** 
 518:FreeRTOS/Src/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 519:FreeRTOS/Src/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 520:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime[ configNUMBER_OF_CORES ] = 
 521:FreeRTOS/Src/tasks.c **** PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime[ configNUMBER_OF_CORES ]
 522:FreeRTOS/Src/tasks.c **** 
 523:FreeRTOS/Src/tasks.c **** #endif
 524:FreeRTOS/Src/tasks.c **** 
 525:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 526:FreeRTOS/Src/tasks.c **** 
 527:FreeRTOS/Src/tasks.c **** /* File private functions. --------------------------------*/
 528:FreeRTOS/Src/tasks.c **** 
 529:FreeRTOS/Src/tasks.c **** /*
 530:FreeRTOS/Src/tasks.c ****  * Creates the idle tasks during scheduler start.
 531:FreeRTOS/Src/tasks.c ****  */
 532:FreeRTOS/Src/tasks.c **** static BaseType_t prvCreateIdleTasks( void );
 533:FreeRTOS/Src/tasks.c **** 
 534:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 535:FreeRTOS/Src/tasks.c **** 
 536:FreeRTOS/Src/tasks.c **** /*
 537:FreeRTOS/Src/tasks.c ****  * Checks to see if another task moved the current task out of the ready
 538:FreeRTOS/Src/tasks.c ****  * list while it was waiting to enter a critical section and yields, if so.
 539:FreeRTOS/Src/tasks.c ****  */
 540:FreeRTOS/Src/tasks.c ****     static void prvCheckForRunStateChange( void );
 541:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 542:FreeRTOS/Src/tasks.c **** 
 543:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 544:FreeRTOS/Src/tasks.c **** 
 545:FreeRTOS/Src/tasks.c **** /*
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 11


 546:FreeRTOS/Src/tasks.c ****  * Yields a core, or cores if multiple priorities are not allowed to run
 547:FreeRTOS/Src/tasks.c ****  * simultaneously, to allow the task pxTCB to run.
 548:FreeRTOS/Src/tasks.c ****  */
 549:FreeRTOS/Src/tasks.c ****     static void prvYieldForTask( const TCB_t * pxTCB );
 550:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 551:FreeRTOS/Src/tasks.c **** 
 552:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 553:FreeRTOS/Src/tasks.c **** 
 554:FreeRTOS/Src/tasks.c **** /*
 555:FreeRTOS/Src/tasks.c ****  * Selects the highest priority available task for the given core.
 556:FreeRTOS/Src/tasks.c ****  */
 557:FreeRTOS/Src/tasks.c ****     static void prvSelectHighestPriorityTask( BaseType_t xCoreID );
 558:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 559:FreeRTOS/Src/tasks.c **** 
 560:FreeRTOS/Src/tasks.c **** /**
 561:FreeRTOS/Src/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 562:FreeRTOS/Src/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 563:FreeRTOS/Src/tasks.c ****  * is in any other state.
 564:FreeRTOS/Src/tasks.c ****  */
 565:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 566:FreeRTOS/Src/tasks.c **** 
 567:FreeRTOS/Src/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 568:FreeRTOS/Src/tasks.c **** 
 569:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 570:FreeRTOS/Src/tasks.c **** 
 571:FreeRTOS/Src/tasks.c **** /*
 572:FreeRTOS/Src/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 573:FreeRTOS/Src/tasks.c ****  * automatically upon the creation of the first task.
 574:FreeRTOS/Src/tasks.c ****  */
 575:FreeRTOS/Src/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 576:FreeRTOS/Src/tasks.c **** 
 577:FreeRTOS/Src/tasks.c **** /*
 578:FreeRTOS/Src/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 579:FreeRTOS/Src/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 580:FreeRTOS/Src/tasks.c ****  * creation of the first user task.
 581:FreeRTOS/Src/tasks.c ****  *
 582:FreeRTOS/Src/tasks.c ****  * In the FreeRTOS SMP, configNUMBER_OF_CORES - 1 passive idle tasks are also
 583:FreeRTOS/Src/tasks.c ****  * created to ensure that each core has an idle task to run when no other
 584:FreeRTOS/Src/tasks.c ****  * task is available to run.
 585:FreeRTOS/Src/tasks.c ****  *
 586:FreeRTOS/Src/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 587:FreeRTOS/Src/tasks.c ****  * language extensions.  The equivalent prototype for these functions are:
 588:FreeRTOS/Src/tasks.c ****  *
 589:FreeRTOS/Src/tasks.c ****  * void prvIdleTask( void *pvParameters );
 590:FreeRTOS/Src/tasks.c ****  * void prvPassiveIdleTask( void *pvParameters );
 591:FreeRTOS/Src/tasks.c ****  *
 592:FreeRTOS/Src/tasks.c ****  */
 593:FreeRTOS/Src/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 594:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 595:FreeRTOS/Src/tasks.c ****     static portTASK_FUNCTION_PROTO( prvPassiveIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 596:FreeRTOS/Src/tasks.c **** #endif
 597:FreeRTOS/Src/tasks.c **** 
 598:FreeRTOS/Src/tasks.c **** /*
 599:FreeRTOS/Src/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 600:FreeRTOS/Src/tasks.c ****  * including the stack pointed to by the TCB.
 601:FreeRTOS/Src/tasks.c ****  *
 602:FreeRTOS/Src/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 12


 603:FreeRTOS/Src/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 604:FreeRTOS/Src/tasks.c ****  */
 605:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 606:FreeRTOS/Src/tasks.c **** 
 607:FreeRTOS/Src/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 608:FreeRTOS/Src/tasks.c **** 
 609:FreeRTOS/Src/tasks.c **** #endif
 610:FreeRTOS/Src/tasks.c **** 
 611:FreeRTOS/Src/tasks.c **** /*
 612:FreeRTOS/Src/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 613:FreeRTOS/Src/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 614:FreeRTOS/Src/tasks.c ****  * and its TCB deleted.
 615:FreeRTOS/Src/tasks.c ****  */
 616:FreeRTOS/Src/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 617:FreeRTOS/Src/tasks.c **** 
 618:FreeRTOS/Src/tasks.c **** /*
 619:FreeRTOS/Src/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 620:FreeRTOS/Src/tasks.c ****  * either the current or the overflow delayed task list.
 621:FreeRTOS/Src/tasks.c ****  */
 622:FreeRTOS/Src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 623:FreeRTOS/Src/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 624:FreeRTOS/Src/tasks.c **** 
 625:FreeRTOS/Src/tasks.c **** /*
 626:FreeRTOS/Src/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 627:FreeRTOS/Src/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 628:FreeRTOS/Src/tasks.c ****  * a suspended list, etc.).
 629:FreeRTOS/Src/tasks.c ****  *
 630:FreeRTOS/Src/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 631:FreeRTOS/Src/tasks.c ****  * NORMAL APPLICATION CODE.
 632:FreeRTOS/Src/tasks.c ****  */
 633:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 634:FreeRTOS/Src/tasks.c **** 
 635:FreeRTOS/Src/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 636:FreeRTOS/Src/tasks.c ****                                                      List_t * pxList,
 637:FreeRTOS/Src/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 638:FreeRTOS/Src/tasks.c **** 
 639:FreeRTOS/Src/tasks.c **** #endif
 640:FreeRTOS/Src/tasks.c **** 
 641:FreeRTOS/Src/tasks.c **** /*
 642:FreeRTOS/Src/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 643:FreeRTOS/Src/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 644:FreeRTOS/Src/tasks.c ****  */
 645:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 646:FreeRTOS/Src/tasks.c **** 
 647:FreeRTOS/Src/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 648:FreeRTOS/Src/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 649:FreeRTOS/Src/tasks.c **** 
 650:FreeRTOS/Src/tasks.c **** #endif
 651:FreeRTOS/Src/tasks.c **** 
 652:FreeRTOS/Src/tasks.c **** /*
 653:FreeRTOS/Src/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 654:FreeRTOS/Src/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 655:FreeRTOS/Src/tasks.c ****  * determining how much of the stack remains at the original preset value.
 656:FreeRTOS/Src/tasks.c ****  */
 657:FreeRTOS/Src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 658:FreeRTOS/Src/tasks.c **** 
 659:FreeRTOS/Src/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 13


 660:FreeRTOS/Src/tasks.c **** 
 661:FreeRTOS/Src/tasks.c **** #endif
 662:FreeRTOS/Src/tasks.c **** 
 663:FreeRTOS/Src/tasks.c **** /*
 664:FreeRTOS/Src/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 665:FreeRTOS/Src/tasks.c ****  * next move a task from the Blocked state to the Running state.
 666:FreeRTOS/Src/tasks.c ****  *
 667:FreeRTOS/Src/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 668:FreeRTOS/Src/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 669:FreeRTOS/Src/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 670:FreeRTOS/Src/tasks.c ****  * set to a value other than 1.
 671:FreeRTOS/Src/tasks.c ****  */
 672:FreeRTOS/Src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 673:FreeRTOS/Src/tasks.c **** 
 674:FreeRTOS/Src/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 675:FreeRTOS/Src/tasks.c **** 
 676:FreeRTOS/Src/tasks.c **** #endif
 677:FreeRTOS/Src/tasks.c **** 
 678:FreeRTOS/Src/tasks.c **** /*
 679:FreeRTOS/Src/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 680:FreeRTOS/Src/tasks.c ****  * will exit the Blocked state.
 681:FreeRTOS/Src/tasks.c ****  */
 682:FreeRTOS/Src/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 683:FreeRTOS/Src/tasks.c **** 
 684:FreeRTOS/Src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
 685:FreeRTOS/Src/tasks.c **** 
 686:FreeRTOS/Src/tasks.c **** /*
 687:FreeRTOS/Src/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 688:FreeRTOS/Src/tasks.c ****  * human readable tables of task information.
 689:FreeRTOS/Src/tasks.c ****  */
 690:FreeRTOS/Src/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 691:FreeRTOS/Src/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 692:FreeRTOS/Src/tasks.c **** 
 693:FreeRTOS/Src/tasks.c **** #endif
 694:FreeRTOS/Src/tasks.c **** 
 695:FreeRTOS/Src/tasks.c **** /*
 696:FreeRTOS/Src/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 697:FreeRTOS/Src/tasks.c ****  * dynamically to fill in the structure's members.
 698:FreeRTOS/Src/tasks.c ****  */
 699:FreeRTOS/Src/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 700:FreeRTOS/Src/tasks.c ****                                   const char * const pcName,
 701:FreeRTOS/Src/tasks.c ****                                   const configSTACK_DEPTH_TYPE uxStackDepth,
 702:FreeRTOS/Src/tasks.c ****                                   void * const pvParameters,
 703:FreeRTOS/Src/tasks.c ****                                   UBaseType_t uxPriority,
 704:FreeRTOS/Src/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 705:FreeRTOS/Src/tasks.c ****                                   TCB_t * pxNewTCB,
 706:FreeRTOS/Src/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 707:FreeRTOS/Src/tasks.c **** 
 708:FreeRTOS/Src/tasks.c **** /*
 709:FreeRTOS/Src/tasks.c ****  * Called after a new task has been created and initialised to place the task
 710:FreeRTOS/Src/tasks.c ****  * under the control of the scheduler.
 711:FreeRTOS/Src/tasks.c ****  */
 712:FreeRTOS/Src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 713:FreeRTOS/Src/tasks.c **** 
 714:FreeRTOS/Src/tasks.c **** /*
 715:FreeRTOS/Src/tasks.c ****  * Create a task with static buffer for both TCB and stack. Returns a handle to
 716:FreeRTOS/Src/tasks.c ****  * the task if it is created successfully. Otherwise, returns NULL.
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 14


 717:FreeRTOS/Src/tasks.c ****  */
 718:FreeRTOS/Src/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 719:FreeRTOS/Src/tasks.c ****     static TCB_t * prvCreateStaticTask( TaskFunction_t pxTaskCode,
 720:FreeRTOS/Src/tasks.c ****                                         const char * const pcName,
 721:FreeRTOS/Src/tasks.c ****                                         const configSTACK_DEPTH_TYPE uxStackDepth,
 722:FreeRTOS/Src/tasks.c ****                                         void * const pvParameters,
 723:FreeRTOS/Src/tasks.c ****                                         UBaseType_t uxPriority,
 724:FreeRTOS/Src/tasks.c ****                                         StackType_t * const puxStackBuffer,
 725:FreeRTOS/Src/tasks.c ****                                         StaticTask_t * const pxTaskBuffer,
 726:FreeRTOS/Src/tasks.c ****                                         TaskHandle_t * const pxCreatedTask ) PRIVILEGED_FUNCTION;
 727:FreeRTOS/Src/tasks.c **** #endif /* #if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 728:FreeRTOS/Src/tasks.c **** 
 729:FreeRTOS/Src/tasks.c **** /*
 730:FreeRTOS/Src/tasks.c ****  * Create a restricted task with static buffer for both TCB and stack. Returns
 731:FreeRTOS/Src/tasks.c ****  * a handle to the task if it is created successfully. Otherwise, returns NULL.
 732:FreeRTOS/Src/tasks.c ****  */
 733:FreeRTOS/Src/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 734:FreeRTOS/Src/tasks.c ****     static TCB_t * prvCreateRestrictedStaticTask( const TaskParameters_t * const pxTaskDefinition,
 735:FreeRTOS/Src/tasks.c ****                                                   TaskHandle_t * const pxCreatedTask ) PRIVILEGED_F
 736:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
 737:FreeRTOS/Src/tasks.c **** 
 738:FreeRTOS/Src/tasks.c **** /*
 739:FreeRTOS/Src/tasks.c ****  * Create a restricted task with static buffer for task stack and allocated buffer
 740:FreeRTOS/Src/tasks.c ****  * for TCB. Returns a handle to the task if it is created successfully. Otherwise,
 741:FreeRTOS/Src/tasks.c ****  * returns NULL.
 742:FreeRTOS/Src/tasks.c ****  */
 743:FreeRTOS/Src/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 744:FreeRTOS/Src/tasks.c ****     static TCB_t * prvCreateRestrictedTask( const TaskParameters_t * const pxTaskDefinition,
 745:FreeRTOS/Src/tasks.c ****                                             TaskHandle_t * const pxCreatedTask ) PRIVILEGED_FUNCTIO
 746:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
 747:FreeRTOS/Src/tasks.c **** 
 748:FreeRTOS/Src/tasks.c **** /*
 749:FreeRTOS/Src/tasks.c ****  * Create a task with allocated buffer for both TCB and stack. Returns a handle to
 750:FreeRTOS/Src/tasks.c ****  * the task if it is created successfully. Otherwise, returns NULL.
 751:FreeRTOS/Src/tasks.c ****  */
 752:FreeRTOS/Src/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 753:FreeRTOS/Src/tasks.c ****     static TCB_t * prvCreateTask( TaskFunction_t pxTaskCode,
 754:FreeRTOS/Src/tasks.c ****                                   const char * const pcName,
 755:FreeRTOS/Src/tasks.c ****                                   const configSTACK_DEPTH_TYPE uxStackDepth,
 756:FreeRTOS/Src/tasks.c ****                                   void * const pvParameters,
 757:FreeRTOS/Src/tasks.c ****                                   UBaseType_t uxPriority,
 758:FreeRTOS/Src/tasks.c ****                                   TaskHandle_t * const pxCreatedTask ) PRIVILEGED_FUNCTION;
 759:FreeRTOS/Src/tasks.c **** #endif /* #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
 760:FreeRTOS/Src/tasks.c **** 
 761:FreeRTOS/Src/tasks.c **** /*
 762:FreeRTOS/Src/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 763:FreeRTOS/Src/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 764:FreeRTOS/Src/tasks.c ****  * called by the function.
 765:FreeRTOS/Src/tasks.c ****  */
 766:FreeRTOS/Src/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 767:FreeRTOS/Src/tasks.c **** 
 768:FreeRTOS/Src/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 769:FreeRTOS/Src/tasks.c **** 
 770:FreeRTOS/Src/tasks.c **** #endif
 771:FreeRTOS/Src/tasks.c **** 
 772:FreeRTOS/Src/tasks.c **** #if ( configUSE_PASSIVE_IDLE_HOOK == 1 )
 773:FreeRTOS/Src/tasks.c ****     extern void vApplicationPassiveIdleHook( void );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 15


 774:FreeRTOS/Src/tasks.c **** #endif /* #if ( configUSE_PASSIVE_IDLE_HOOK == 1 ) */
 775:FreeRTOS/Src/tasks.c **** 
 776:FreeRTOS/Src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 777:FreeRTOS/Src/tasks.c **** 
 778:FreeRTOS/Src/tasks.c **** /*
 779:FreeRTOS/Src/tasks.c ****  * Convert the snprintf return value to the number of characters
 780:FreeRTOS/Src/tasks.c ****  * written. The following are the possible cases:
 781:FreeRTOS/Src/tasks.c ****  *
 782:FreeRTOS/Src/tasks.c ****  * 1. The buffer supplied to snprintf is large enough to hold the
 783:FreeRTOS/Src/tasks.c ****  *    generated string. The return value in this case is the number
 784:FreeRTOS/Src/tasks.c ****  *    of characters actually written, not counting the terminating
 785:FreeRTOS/Src/tasks.c ****  *    null character.
 786:FreeRTOS/Src/tasks.c ****  * 2. The buffer supplied to snprintf is NOT large enough to hold
 787:FreeRTOS/Src/tasks.c ****  *    the generated string. The return value in this case is the
 788:FreeRTOS/Src/tasks.c ****  *    number of characters that would have been written if the
 789:FreeRTOS/Src/tasks.c ****  *    buffer had been sufficiently large, not counting the
 790:FreeRTOS/Src/tasks.c ****  *    terminating null character.
 791:FreeRTOS/Src/tasks.c ****  * 3. Encoding error. The return value in this case is a negative
 792:FreeRTOS/Src/tasks.c ****  *    number.
 793:FreeRTOS/Src/tasks.c ****  *
 794:FreeRTOS/Src/tasks.c ****  * From 1 and 2 above ==> Only when the return value is non-negative
 795:FreeRTOS/Src/tasks.c ****  * and less than the supplied buffer length, the string has been
 796:FreeRTOS/Src/tasks.c ****  * completely written.
 797:FreeRTOS/Src/tasks.c ****  */
 798:FreeRTOS/Src/tasks.c ****     static size_t prvSnprintfReturnValueToCharsWritten( int iSnprintfReturnValue,
 799:FreeRTOS/Src/tasks.c ****                                                         size_t n );
 800:FreeRTOS/Src/tasks.c **** 
 801:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 802:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 803:FreeRTOS/Src/tasks.c **** 
 804:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 805:FreeRTOS/Src/tasks.c ****     static void prvCheckForRunStateChange( void )
 806:FreeRTOS/Src/tasks.c ****     {
 807:FreeRTOS/Src/tasks.c ****         UBaseType_t uxPrevCriticalNesting;
 808:FreeRTOS/Src/tasks.c ****         const TCB_t * pxThisTCB;
 809:FreeRTOS/Src/tasks.c **** 
 810:FreeRTOS/Src/tasks.c ****         /* This must only be called from within a task. */
 811:FreeRTOS/Src/tasks.c ****         portASSERT_IF_IN_ISR();
 812:FreeRTOS/Src/tasks.c **** 
 813:FreeRTOS/Src/tasks.c ****         /* This function is always called with interrupts disabled
 814:FreeRTOS/Src/tasks.c ****          * so this is safe. */
 815:FreeRTOS/Src/tasks.c ****         pxThisTCB = pxCurrentTCBs[ portGET_CORE_ID() ];
 816:FreeRTOS/Src/tasks.c **** 
 817:FreeRTOS/Src/tasks.c ****         while( pxThisTCB->xTaskRunState == taskTASK_SCHEDULED_TO_YIELD )
 818:FreeRTOS/Src/tasks.c ****         {
 819:FreeRTOS/Src/tasks.c ****             /* We are only here if we just entered a critical section
 820:FreeRTOS/Src/tasks.c ****             * or if we just suspended the scheduler, and another task
 821:FreeRTOS/Src/tasks.c ****             * has requested that we yield.
 822:FreeRTOS/Src/tasks.c ****             *
 823:FreeRTOS/Src/tasks.c ****             * This is slightly complicated since we need to save and restore
 824:FreeRTOS/Src/tasks.c ****             * the suspension and critical nesting counts, as well as release
 825:FreeRTOS/Src/tasks.c ****             * and reacquire the correct locks. And then, do it all over again
 826:FreeRTOS/Src/tasks.c ****             * if our state changed again during the reacquisition. */
 827:FreeRTOS/Src/tasks.c ****             uxPrevCriticalNesting = portGET_CRITICAL_NESTING_COUNT();
 828:FreeRTOS/Src/tasks.c **** 
 829:FreeRTOS/Src/tasks.c ****             if( uxPrevCriticalNesting > 0U )
 830:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 16


 831:FreeRTOS/Src/tasks.c ****                 portSET_CRITICAL_NESTING_COUNT( 0U );
 832:FreeRTOS/Src/tasks.c ****                 portRELEASE_ISR_LOCK();
 833:FreeRTOS/Src/tasks.c ****             }
 834:FreeRTOS/Src/tasks.c ****             else
 835:FreeRTOS/Src/tasks.c ****             {
 836:FreeRTOS/Src/tasks.c ****                 /* The scheduler is suspended. uxSchedulerSuspended is updated
 837:FreeRTOS/Src/tasks.c ****                  * only when the task is not requested to yield. */
 838:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 839:FreeRTOS/Src/tasks.c ****             }
 840:FreeRTOS/Src/tasks.c **** 
 841:FreeRTOS/Src/tasks.c ****             portRELEASE_TASK_LOCK();
 842:FreeRTOS/Src/tasks.c ****             portMEMORY_BARRIER();
 843:FreeRTOS/Src/tasks.c ****             configASSERT( pxThisTCB->xTaskRunState == taskTASK_SCHEDULED_TO_YIELD );
 844:FreeRTOS/Src/tasks.c **** 
 845:FreeRTOS/Src/tasks.c ****             portENABLE_INTERRUPTS();
 846:FreeRTOS/Src/tasks.c **** 
 847:FreeRTOS/Src/tasks.c ****             /* Enabling interrupts should cause this core to immediately
 848:FreeRTOS/Src/tasks.c ****              * service the pending interrupt and yield. If the run state is still
 849:FreeRTOS/Src/tasks.c ****              * yielding here then that is a problem. */
 850:FreeRTOS/Src/tasks.c ****             configASSERT( pxThisTCB->xTaskRunState != taskTASK_SCHEDULED_TO_YIELD );
 851:FreeRTOS/Src/tasks.c **** 
 852:FreeRTOS/Src/tasks.c ****             portDISABLE_INTERRUPTS();
 853:FreeRTOS/Src/tasks.c ****             portGET_TASK_LOCK();
 854:FreeRTOS/Src/tasks.c ****             portGET_ISR_LOCK();
 855:FreeRTOS/Src/tasks.c **** 
 856:FreeRTOS/Src/tasks.c ****             portSET_CRITICAL_NESTING_COUNT( uxPrevCriticalNesting );
 857:FreeRTOS/Src/tasks.c **** 
 858:FreeRTOS/Src/tasks.c ****             if( uxPrevCriticalNesting == 0U )
 859:FreeRTOS/Src/tasks.c ****             {
 860:FreeRTOS/Src/tasks.c ****                 portRELEASE_ISR_LOCK();
 861:FreeRTOS/Src/tasks.c ****             }
 862:FreeRTOS/Src/tasks.c ****         }
 863:FreeRTOS/Src/tasks.c ****     }
 864:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 865:FreeRTOS/Src/tasks.c **** 
 866:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 867:FreeRTOS/Src/tasks.c **** 
 868:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 869:FreeRTOS/Src/tasks.c ****     static void prvYieldForTask( const TCB_t * pxTCB )
 870:FreeRTOS/Src/tasks.c ****     {
 871:FreeRTOS/Src/tasks.c ****         BaseType_t xLowestPriorityToPreempt;
 872:FreeRTOS/Src/tasks.c ****         BaseType_t xCurrentCoreTaskPriority;
 873:FreeRTOS/Src/tasks.c ****         BaseType_t xLowestPriorityCore = ( BaseType_t ) -1;
 874:FreeRTOS/Src/tasks.c ****         BaseType_t xCoreID;
 875:FreeRTOS/Src/tasks.c **** 
 876:FreeRTOS/Src/tasks.c ****         #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 877:FreeRTOS/Src/tasks.c ****             BaseType_t xYieldCount = 0;
 878:FreeRTOS/Src/tasks.c ****         #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
 879:FreeRTOS/Src/tasks.c **** 
 880:FreeRTOS/Src/tasks.c ****         /* This must be called from a critical section. */
 881:FreeRTOS/Src/tasks.c ****         configASSERT( portGET_CRITICAL_NESTING_COUNT() > 0U );
 882:FreeRTOS/Src/tasks.c **** 
 883:FreeRTOS/Src/tasks.c ****         #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 884:FreeRTOS/Src/tasks.c **** 
 885:FreeRTOS/Src/tasks.c ****             /* No task should yield for this one if it is a lower priority
 886:FreeRTOS/Src/tasks.c ****              * than priority level of currently ready tasks. */
 887:FreeRTOS/Src/tasks.c ****             if( pxTCB->uxPriority >= uxTopReadyPriority )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 17


 888:FreeRTOS/Src/tasks.c ****         #else
 889:FreeRTOS/Src/tasks.c ****             /* Yield is not required for a task which is already running. */
 890:FreeRTOS/Src/tasks.c ****             if( taskTASK_IS_RUNNING( pxTCB ) == pdFALSE )
 891:FreeRTOS/Src/tasks.c ****         #endif
 892:FreeRTOS/Src/tasks.c ****         {
 893:FreeRTOS/Src/tasks.c ****             xLowestPriorityToPreempt = ( BaseType_t ) pxTCB->uxPriority;
 894:FreeRTOS/Src/tasks.c **** 
 895:FreeRTOS/Src/tasks.c ****             /* xLowestPriorityToPreempt will be decremented to -1 if the priority of pxTCB
 896:FreeRTOS/Src/tasks.c ****              * is 0. This is ok as we will give system idle tasks a priority of -1 below. */
 897:FreeRTOS/Src/tasks.c ****             --xLowestPriorityToPreempt;
 898:FreeRTOS/Src/tasks.c **** 
 899:FreeRTOS/Src/tasks.c ****             for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreI
 900:FreeRTOS/Src/tasks.c ****             {
 901:FreeRTOS/Src/tasks.c ****                 xCurrentCoreTaskPriority = ( BaseType_t ) pxCurrentTCBs[ xCoreID ]->uxPriority;
 902:FreeRTOS/Src/tasks.c **** 
 903:FreeRTOS/Src/tasks.c ****                 /* System idle tasks are being assigned a priority of tskIDLE_PRIORITY - 1 here. */
 904:FreeRTOS/Src/tasks.c ****                 if( ( pxCurrentTCBs[ xCoreID ]->uxTaskAttributes & taskATTRIBUTE_IS_IDLE ) != 0U )
 905:FreeRTOS/Src/tasks.c ****                 {
 906:FreeRTOS/Src/tasks.c ****                     xCurrentCoreTaskPriority = ( BaseType_t ) ( xCurrentCoreTaskPriority - 1 );
 907:FreeRTOS/Src/tasks.c ****                 }
 908:FreeRTOS/Src/tasks.c **** 
 909:FreeRTOS/Src/tasks.c ****                 if( ( taskTASK_IS_RUNNING( pxCurrentTCBs[ xCoreID ] ) != pdFALSE ) && ( xYieldPendi
 910:FreeRTOS/Src/tasks.c ****                 {
 911:FreeRTOS/Src/tasks.c ****                     #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 912:FreeRTOS/Src/tasks.c ****                         if( taskTASK_IS_RUNNING( pxTCB ) == pdFALSE )
 913:FreeRTOS/Src/tasks.c ****                     #endif
 914:FreeRTOS/Src/tasks.c ****                     {
 915:FreeRTOS/Src/tasks.c ****                         if( xCurrentCoreTaskPriority <= xLowestPriorityToPreempt )
 916:FreeRTOS/Src/tasks.c ****                         {
 917:FreeRTOS/Src/tasks.c ****                             #if ( configUSE_CORE_AFFINITY == 1 )
 918:FreeRTOS/Src/tasks.c ****                                 if( ( pxTCB->uxCoreAffinityMask & ( ( UBaseType_t ) 1U << ( UBaseTy
 919:FreeRTOS/Src/tasks.c ****                             #endif
 920:FreeRTOS/Src/tasks.c ****                             {
 921:FreeRTOS/Src/tasks.c ****                                 #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
 922:FreeRTOS/Src/tasks.c ****                                     if( pxCurrentTCBs[ xCoreID ]->xPreemptionDisable == pdFALSE )
 923:FreeRTOS/Src/tasks.c ****                                 #endif
 924:FreeRTOS/Src/tasks.c ****                                 {
 925:FreeRTOS/Src/tasks.c ****                                     xLowestPriorityToPreempt = xCurrentCoreTaskPriority;
 926:FreeRTOS/Src/tasks.c ****                                     xLowestPriorityCore = xCoreID;
 927:FreeRTOS/Src/tasks.c ****                                 }
 928:FreeRTOS/Src/tasks.c ****                             }
 929:FreeRTOS/Src/tasks.c ****                         }
 930:FreeRTOS/Src/tasks.c ****                         else
 931:FreeRTOS/Src/tasks.c ****                         {
 932:FreeRTOS/Src/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
 933:FreeRTOS/Src/tasks.c ****                         }
 934:FreeRTOS/Src/tasks.c ****                     }
 935:FreeRTOS/Src/tasks.c **** 
 936:FreeRTOS/Src/tasks.c ****                     #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 937:FreeRTOS/Src/tasks.c ****                     {
 938:FreeRTOS/Src/tasks.c ****                         /* Yield all currently running non-idle tasks with a priority lower than
 939:FreeRTOS/Src/tasks.c ****                          * the task that needs to run. */
 940:FreeRTOS/Src/tasks.c ****                         if( ( xCurrentCoreTaskPriority > ( ( BaseType_t ) tskIDLE_PRIORITY - 1 ) ) 
 941:FreeRTOS/Src/tasks.c ****                             ( xCurrentCoreTaskPriority < ( BaseType_t ) pxTCB->uxPriority ) )
 942:FreeRTOS/Src/tasks.c ****                         {
 943:FreeRTOS/Src/tasks.c ****                             prvYieldCore( xCoreID );
 944:FreeRTOS/Src/tasks.c ****                             xYieldCount++;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 18


 945:FreeRTOS/Src/tasks.c ****                         }
 946:FreeRTOS/Src/tasks.c ****                         else
 947:FreeRTOS/Src/tasks.c ****                         {
 948:FreeRTOS/Src/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
 949:FreeRTOS/Src/tasks.c ****                         }
 950:FreeRTOS/Src/tasks.c ****                     }
 951:FreeRTOS/Src/tasks.c ****                     #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
 952:FreeRTOS/Src/tasks.c ****                 }
 953:FreeRTOS/Src/tasks.c ****                 else
 954:FreeRTOS/Src/tasks.c ****                 {
 955:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
 956:FreeRTOS/Src/tasks.c ****                 }
 957:FreeRTOS/Src/tasks.c ****             }
 958:FreeRTOS/Src/tasks.c **** 
 959:FreeRTOS/Src/tasks.c ****             #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 960:FreeRTOS/Src/tasks.c ****                 if( ( xYieldCount == 0 ) && ( xLowestPriorityCore >= 0 ) )
 961:FreeRTOS/Src/tasks.c ****             #else /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
 962:FreeRTOS/Src/tasks.c ****                 if( xLowestPriorityCore >= 0 )
 963:FreeRTOS/Src/tasks.c ****             #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
 964:FreeRTOS/Src/tasks.c ****             {
 965:FreeRTOS/Src/tasks.c ****                 prvYieldCore( xLowestPriorityCore );
 966:FreeRTOS/Src/tasks.c ****             }
 967:FreeRTOS/Src/tasks.c **** 
 968:FreeRTOS/Src/tasks.c ****             #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 969:FreeRTOS/Src/tasks.c ****                 /* Verify that the calling core always yields to higher priority tasks. */
 970:FreeRTOS/Src/tasks.c ****                 if( ( ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxTaskAttributes & taskATTRIBUTE_IS_IDL
 971:FreeRTOS/Src/tasks.c ****                     ( pxTCB->uxPriority > pxCurrentTCBs[ portGET_CORE_ID() ]->uxPriority ) )
 972:FreeRTOS/Src/tasks.c ****                 {
 973:FreeRTOS/Src/tasks.c ****                     configASSERT( ( xYieldPendings[ portGET_CORE_ID() ] == pdTRUE ) ||
 974:FreeRTOS/Src/tasks.c ****                                   ( taskTASK_IS_RUNNING( pxCurrentTCBs[ portGET_CORE_ID() ] ) == pd
 975:FreeRTOS/Src/tasks.c ****                 }
 976:FreeRTOS/Src/tasks.c ****             #endif
 977:FreeRTOS/Src/tasks.c ****         }
 978:FreeRTOS/Src/tasks.c ****     }
 979:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 980:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 981:FreeRTOS/Src/tasks.c **** 
 982:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 983:FreeRTOS/Src/tasks.c ****     static void prvSelectHighestPriorityTask( BaseType_t xCoreID )
 984:FreeRTOS/Src/tasks.c ****     {
 985:FreeRTOS/Src/tasks.c ****         UBaseType_t uxCurrentPriority = uxTopReadyPriority;
 986:FreeRTOS/Src/tasks.c ****         BaseType_t xTaskScheduled = pdFALSE;
 987:FreeRTOS/Src/tasks.c ****         BaseType_t xDecrementTopPriority = pdTRUE;
 988:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB = NULL;
 989:FreeRTOS/Src/tasks.c **** 
 990:FreeRTOS/Src/tasks.c ****         #if ( configUSE_CORE_AFFINITY == 1 )
 991:FreeRTOS/Src/tasks.c ****             const TCB_t * pxPreviousTCB = NULL;
 992:FreeRTOS/Src/tasks.c ****         #endif
 993:FreeRTOS/Src/tasks.c ****         #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 994:FreeRTOS/Src/tasks.c ****             BaseType_t xPriorityDropped = pdFALSE;
 995:FreeRTOS/Src/tasks.c ****         #endif
 996:FreeRTOS/Src/tasks.c **** 
 997:FreeRTOS/Src/tasks.c ****         /* This function should be called when scheduler is running. */
 998:FreeRTOS/Src/tasks.c ****         configASSERT( xSchedulerRunning == pdTRUE );
 999:FreeRTOS/Src/tasks.c **** 
1000:FreeRTOS/Src/tasks.c ****         /* A new task is created and a running task with the same priority yields
1001:FreeRTOS/Src/tasks.c ****          * itself to run the new task. When a running task yields itself, it is still
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 19


1002:FreeRTOS/Src/tasks.c ****          * in the ready list. This running task will be selected before the new task
1003:FreeRTOS/Src/tasks.c ****          * since the new task is always added to the end of the ready list.
1004:FreeRTOS/Src/tasks.c ****          * The other problem is that the running task still in the same position of
1005:FreeRTOS/Src/tasks.c ****          * the ready list when it yields itself. It is possible that it will be selected
1006:FreeRTOS/Src/tasks.c ****          * earlier then other tasks which waits longer than this task.
1007:FreeRTOS/Src/tasks.c ****          *
1008:FreeRTOS/Src/tasks.c ****          * To fix these problems, the running task should be put to the end of the
1009:FreeRTOS/Src/tasks.c ****          * ready list before searching for the ready task in the ready list. */
1010:FreeRTOS/Src/tasks.c ****         if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxCurrentTCBs[ xCoreID ]->uxPriority ] )
1011:FreeRTOS/Src/tasks.c ****                                      &pxCurrentTCBs[ xCoreID ]->xStateListItem ) == pdTRUE )
1012:FreeRTOS/Src/tasks.c ****         {
1013:FreeRTOS/Src/tasks.c ****             ( void ) uxListRemove( &pxCurrentTCBs[ xCoreID ]->xStateListItem );
1014:FreeRTOS/Src/tasks.c ****             vListInsertEnd( &( pxReadyTasksLists[ pxCurrentTCBs[ xCoreID ]->uxPriority ] ),
1015:FreeRTOS/Src/tasks.c ****                             &pxCurrentTCBs[ xCoreID ]->xStateListItem );
1016:FreeRTOS/Src/tasks.c ****         }
1017:FreeRTOS/Src/tasks.c **** 
1018:FreeRTOS/Src/tasks.c ****         while( xTaskScheduled == pdFALSE )
1019:FreeRTOS/Src/tasks.c ****         {
1020:FreeRTOS/Src/tasks.c ****             #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
1021:FreeRTOS/Src/tasks.c ****             {
1022:FreeRTOS/Src/tasks.c ****                 if( uxCurrentPriority < uxTopReadyPriority )
1023:FreeRTOS/Src/tasks.c ****                 {
1024:FreeRTOS/Src/tasks.c ****                     /* We can't schedule any tasks, other than idle, that have a
1025:FreeRTOS/Src/tasks.c ****                      * priority lower than the priority of a task currently running
1026:FreeRTOS/Src/tasks.c ****                      * on another core. */
1027:FreeRTOS/Src/tasks.c ****                     uxCurrentPriority = tskIDLE_PRIORITY;
1028:FreeRTOS/Src/tasks.c ****                 }
1029:FreeRTOS/Src/tasks.c ****             }
1030:FreeRTOS/Src/tasks.c ****             #endif
1031:FreeRTOS/Src/tasks.c **** 
1032:FreeRTOS/Src/tasks.c ****             if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxCurrentPriority ] ) ) == pdFALSE )
1033:FreeRTOS/Src/tasks.c ****             {
1034:FreeRTOS/Src/tasks.c ****                 const List_t * const pxReadyList = &( pxReadyTasksLists[ uxCurrentPriority ] );
1035:FreeRTOS/Src/tasks.c ****                 const ListItem_t * pxEndMarker = listGET_END_MARKER( pxReadyList );
1036:FreeRTOS/Src/tasks.c ****                 ListItem_t * pxIterator;
1037:FreeRTOS/Src/tasks.c **** 
1038:FreeRTOS/Src/tasks.c ****                 /* The ready task list for uxCurrentPriority is not empty, so uxTopReadyPriority
1039:FreeRTOS/Src/tasks.c ****                  * must not be decremented any further. */
1040:FreeRTOS/Src/tasks.c ****                 xDecrementTopPriority = pdFALSE;
1041:FreeRTOS/Src/tasks.c **** 
1042:FreeRTOS/Src/tasks.c ****                 for( pxIterator = listGET_HEAD_ENTRY( pxReadyList ); pxIterator != pxEndMarker; pxI
1043:FreeRTOS/Src/tasks.c ****                 {
1044:FreeRTOS/Src/tasks.c ****                     /* MISRA Ref 11.5.3 [Void pointer assignment] */
1045:FreeRTOS/Src/tasks.c ****                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA
1046:FreeRTOS/Src/tasks.c ****                     /* coverity[misra_c_2012_rule_11_5_violation] */
1047:FreeRTOS/Src/tasks.c ****                     pxTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
1048:FreeRTOS/Src/tasks.c **** 
1049:FreeRTOS/Src/tasks.c ****                     #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
1050:FreeRTOS/Src/tasks.c ****                     {
1051:FreeRTOS/Src/tasks.c ****                         /* When falling back to the idle priority because only one priority
1052:FreeRTOS/Src/tasks.c ****                          * level is allowed to run at a time, we should ONLY schedule the true
1053:FreeRTOS/Src/tasks.c ****                          * idle tasks, not user tasks at the idle priority. */
1054:FreeRTOS/Src/tasks.c ****                         if( uxCurrentPriority < uxTopReadyPriority )
1055:FreeRTOS/Src/tasks.c ****                         {
1056:FreeRTOS/Src/tasks.c ****                             if( ( pxTCB->uxTaskAttributes & taskATTRIBUTE_IS_IDLE ) == 0U )
1057:FreeRTOS/Src/tasks.c ****                             {
1058:FreeRTOS/Src/tasks.c ****                                 continue;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 20


1059:FreeRTOS/Src/tasks.c ****                             }
1060:FreeRTOS/Src/tasks.c ****                         }
1061:FreeRTOS/Src/tasks.c ****                     }
1062:FreeRTOS/Src/tasks.c ****                     #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
1063:FreeRTOS/Src/tasks.c **** 
1064:FreeRTOS/Src/tasks.c ****                     if( pxTCB->xTaskRunState == taskTASK_NOT_RUNNING )
1065:FreeRTOS/Src/tasks.c ****                     {
1066:FreeRTOS/Src/tasks.c ****                         #if ( configUSE_CORE_AFFINITY == 1 )
1067:FreeRTOS/Src/tasks.c ****                             if( ( pxTCB->uxCoreAffinityMask & ( ( UBaseType_t ) 1U << ( UBaseType_t
1068:FreeRTOS/Src/tasks.c ****                         #endif
1069:FreeRTOS/Src/tasks.c ****                         {
1070:FreeRTOS/Src/tasks.c ****                             /* If the task is not being executed by any core swap it in. */
1071:FreeRTOS/Src/tasks.c ****                             pxCurrentTCBs[ xCoreID ]->xTaskRunState = taskTASK_NOT_RUNNING;
1072:FreeRTOS/Src/tasks.c ****                             #if ( configUSE_CORE_AFFINITY == 1 )
1073:FreeRTOS/Src/tasks.c ****                                 pxPreviousTCB = pxCurrentTCBs[ xCoreID ];
1074:FreeRTOS/Src/tasks.c ****                             #endif
1075:FreeRTOS/Src/tasks.c ****                             pxTCB->xTaskRunState = xCoreID;
1076:FreeRTOS/Src/tasks.c ****                             pxCurrentTCBs[ xCoreID ] = pxTCB;
1077:FreeRTOS/Src/tasks.c ****                             xTaskScheduled = pdTRUE;
1078:FreeRTOS/Src/tasks.c ****                         }
1079:FreeRTOS/Src/tasks.c ****                     }
1080:FreeRTOS/Src/tasks.c ****                     else if( pxTCB == pxCurrentTCBs[ xCoreID ] )
1081:FreeRTOS/Src/tasks.c ****                     {
1082:FreeRTOS/Src/tasks.c ****                         configASSERT( ( pxTCB->xTaskRunState == xCoreID ) || ( pxTCB->xTaskRunState
1083:FreeRTOS/Src/tasks.c **** 
1084:FreeRTOS/Src/tasks.c ****                         #if ( configUSE_CORE_AFFINITY == 1 )
1085:FreeRTOS/Src/tasks.c ****                             if( ( pxTCB->uxCoreAffinityMask & ( ( UBaseType_t ) 1U << ( UBaseType_t
1086:FreeRTOS/Src/tasks.c ****                         #endif
1087:FreeRTOS/Src/tasks.c ****                         {
1088:FreeRTOS/Src/tasks.c ****                             /* The task is already running on this core, mark it as scheduled. */
1089:FreeRTOS/Src/tasks.c ****                             pxTCB->xTaskRunState = xCoreID;
1090:FreeRTOS/Src/tasks.c ****                             xTaskScheduled = pdTRUE;
1091:FreeRTOS/Src/tasks.c ****                         }
1092:FreeRTOS/Src/tasks.c ****                     }
1093:FreeRTOS/Src/tasks.c ****                     else
1094:FreeRTOS/Src/tasks.c ****                     {
1095:FreeRTOS/Src/tasks.c ****                         /* This task is running on the core other than xCoreID. */
1096:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1097:FreeRTOS/Src/tasks.c ****                     }
1098:FreeRTOS/Src/tasks.c **** 
1099:FreeRTOS/Src/tasks.c ****                     if( xTaskScheduled != pdFALSE )
1100:FreeRTOS/Src/tasks.c ****                     {
1101:FreeRTOS/Src/tasks.c ****                         /* A task has been selected to run on this core. */
1102:FreeRTOS/Src/tasks.c ****                         break;
1103:FreeRTOS/Src/tasks.c ****                     }
1104:FreeRTOS/Src/tasks.c ****                 }
1105:FreeRTOS/Src/tasks.c ****             }
1106:FreeRTOS/Src/tasks.c ****             else
1107:FreeRTOS/Src/tasks.c ****             {
1108:FreeRTOS/Src/tasks.c ****                 if( xDecrementTopPriority != pdFALSE )
1109:FreeRTOS/Src/tasks.c ****                 {
1110:FreeRTOS/Src/tasks.c ****                     uxTopReadyPriority--;
1111:FreeRTOS/Src/tasks.c ****                     #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
1112:FreeRTOS/Src/tasks.c ****                     {
1113:FreeRTOS/Src/tasks.c ****                         xPriorityDropped = pdTRUE;
1114:FreeRTOS/Src/tasks.c ****                     }
1115:FreeRTOS/Src/tasks.c ****                     #endif
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 21


1116:FreeRTOS/Src/tasks.c ****                 }
1117:FreeRTOS/Src/tasks.c ****             }
1118:FreeRTOS/Src/tasks.c **** 
1119:FreeRTOS/Src/tasks.c ****             /* There are configNUMBER_OF_CORES Idle tasks created when scheduler started.
1120:FreeRTOS/Src/tasks.c ****              * The scheduler should be able to select a task to run when uxCurrentPriority
1121:FreeRTOS/Src/tasks.c ****              * is tskIDLE_PRIORITY. uxCurrentPriority is never decreased to value blow
1122:FreeRTOS/Src/tasks.c ****              * tskIDLE_PRIORITY. */
1123:FreeRTOS/Src/tasks.c ****             if( uxCurrentPriority > tskIDLE_PRIORITY )
1124:FreeRTOS/Src/tasks.c ****             {
1125:FreeRTOS/Src/tasks.c ****                 uxCurrentPriority--;
1126:FreeRTOS/Src/tasks.c ****             }
1127:FreeRTOS/Src/tasks.c ****             else
1128:FreeRTOS/Src/tasks.c ****             {
1129:FreeRTOS/Src/tasks.c ****                 /* This function is called when idle task is not created. Break the
1130:FreeRTOS/Src/tasks.c ****                  * loop to prevent uxCurrentPriority overrun. */
1131:FreeRTOS/Src/tasks.c ****                 break;
1132:FreeRTOS/Src/tasks.c ****             }
1133:FreeRTOS/Src/tasks.c ****         }
1134:FreeRTOS/Src/tasks.c **** 
1135:FreeRTOS/Src/tasks.c ****         #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
1136:FreeRTOS/Src/tasks.c ****         {
1137:FreeRTOS/Src/tasks.c ****             if( xTaskScheduled == pdTRUE )
1138:FreeRTOS/Src/tasks.c ****             {
1139:FreeRTOS/Src/tasks.c ****                 if( xPriorityDropped != pdFALSE )
1140:FreeRTOS/Src/tasks.c ****                 {
1141:FreeRTOS/Src/tasks.c ****                     /* There may be several ready tasks that were being prevented from running beca
1142:FreeRTOS/Src/tasks.c ****                      * a higher priority task running. Now that the last of the higher priority tas
1143:FreeRTOS/Src/tasks.c ****                      * running, make sure all the other idle tasks yield. */
1144:FreeRTOS/Src/tasks.c ****                     BaseType_t x;
1145:FreeRTOS/Src/tasks.c **** 
1146:FreeRTOS/Src/tasks.c ****                     for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configNUMBER_OF_CORES; x++ )
1147:FreeRTOS/Src/tasks.c ****                     {
1148:FreeRTOS/Src/tasks.c ****                         if( ( pxCurrentTCBs[ x ]->uxTaskAttributes & taskATTRIBUTE_IS_IDLE ) != 0U 
1149:FreeRTOS/Src/tasks.c ****                         {
1150:FreeRTOS/Src/tasks.c ****                             prvYieldCore( x );
1151:FreeRTOS/Src/tasks.c ****                         }
1152:FreeRTOS/Src/tasks.c ****                     }
1153:FreeRTOS/Src/tasks.c ****                 }
1154:FreeRTOS/Src/tasks.c ****             }
1155:FreeRTOS/Src/tasks.c ****         }
1156:FreeRTOS/Src/tasks.c ****         #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
1157:FreeRTOS/Src/tasks.c **** 
1158:FreeRTOS/Src/tasks.c ****         #if ( configUSE_CORE_AFFINITY == 1 )
1159:FreeRTOS/Src/tasks.c ****         {
1160:FreeRTOS/Src/tasks.c ****             if( xTaskScheduled == pdTRUE )
1161:FreeRTOS/Src/tasks.c ****             {
1162:FreeRTOS/Src/tasks.c ****                 if( ( pxPreviousTCB != NULL ) && ( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ p
1163:FreeRTOS/Src/tasks.c ****                 {
1164:FreeRTOS/Src/tasks.c ****                     /* A ready task was just evicted from this core. See if it can be
1165:FreeRTOS/Src/tasks.c ****                      * scheduled on any other core. */
1166:FreeRTOS/Src/tasks.c ****                     UBaseType_t uxCoreMap = pxPreviousTCB->uxCoreAffinityMask;
1167:FreeRTOS/Src/tasks.c ****                     BaseType_t xLowestPriority = ( BaseType_t ) pxPreviousTCB->uxPriority;
1168:FreeRTOS/Src/tasks.c ****                     BaseType_t xLowestPriorityCore = -1;
1169:FreeRTOS/Src/tasks.c ****                     BaseType_t x;
1170:FreeRTOS/Src/tasks.c **** 
1171:FreeRTOS/Src/tasks.c ****                     if( ( pxPreviousTCB->uxTaskAttributes & taskATTRIBUTE_IS_IDLE ) != 0U )
1172:FreeRTOS/Src/tasks.c ****                     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 22


1173:FreeRTOS/Src/tasks.c ****                         xLowestPriority = xLowestPriority - 1;
1174:FreeRTOS/Src/tasks.c ****                     }
1175:FreeRTOS/Src/tasks.c **** 
1176:FreeRTOS/Src/tasks.c ****                     if( ( uxCoreMap & ( ( UBaseType_t ) 1U << ( UBaseType_t ) xCoreID ) ) != 0U )
1177:FreeRTOS/Src/tasks.c ****                     {
1178:FreeRTOS/Src/tasks.c ****                         /* pxPreviousTCB was removed from this core and this core is not excluded
1179:FreeRTOS/Src/tasks.c ****                          * from it's core affinity mask.
1180:FreeRTOS/Src/tasks.c ****                          *
1181:FreeRTOS/Src/tasks.c ****                          * pxPreviousTCB is preempted by the new higher priority task
1182:FreeRTOS/Src/tasks.c ****                          * pxCurrentTCBs[ xCoreID ]. When searching a new core for pxPreviousTCB,
1183:FreeRTOS/Src/tasks.c ****                          * we do not need to look at the cores on which pxCurrentTCBs[ xCoreID ]
1184:FreeRTOS/Src/tasks.c ****                          * is allowed to run. The reason is - when more than one cores are
1185:FreeRTOS/Src/tasks.c ****                          * eligible for an incoming task, we preempt the core with the minimum
1186:FreeRTOS/Src/tasks.c ****                          * priority task. Because this core (i.e. xCoreID) was preempted for
1187:FreeRTOS/Src/tasks.c ****                          * pxCurrentTCBs[ xCoreID ], this means that all the others cores
1188:FreeRTOS/Src/tasks.c ****                          * where pxCurrentTCBs[ xCoreID ] can run, are running tasks with priority
1189:FreeRTOS/Src/tasks.c ****                          * no lower than pxPreviousTCB's priority. Therefore, the only cores where
1190:FreeRTOS/Src/tasks.c ****                          * which can be preempted for pxPreviousTCB are the ones where
1191:FreeRTOS/Src/tasks.c ****                          * pxCurrentTCBs[ xCoreID ] is not allowed to run (and obviously,
1192:FreeRTOS/Src/tasks.c ****                          * pxPreviousTCB is allowed to run).
1193:FreeRTOS/Src/tasks.c ****                          *
1194:FreeRTOS/Src/tasks.c ****                          * This is an optimization which reduces the number of cores needed to be
1195:FreeRTOS/Src/tasks.c ****                          * searched for pxPreviousTCB to run. */
1196:FreeRTOS/Src/tasks.c ****                         uxCoreMap &= ~( pxCurrentTCBs[ xCoreID ]->uxCoreAffinityMask );
1197:FreeRTOS/Src/tasks.c ****                     }
1198:FreeRTOS/Src/tasks.c ****                     else
1199:FreeRTOS/Src/tasks.c ****                     {
1200:FreeRTOS/Src/tasks.c ****                         /* pxPreviousTCB's core affinity mask is changed and it is no longer
1201:FreeRTOS/Src/tasks.c ****                          * allowed to run on this core. Searching all the cores in pxPreviousTCB's
1202:FreeRTOS/Src/tasks.c ****                          * new core affinity mask to find a core on which it can run. */
1203:FreeRTOS/Src/tasks.c ****                     }
1204:FreeRTOS/Src/tasks.c **** 
1205:FreeRTOS/Src/tasks.c ****                     uxCoreMap &= ( ( 1U << configNUMBER_OF_CORES ) - 1U );
1206:FreeRTOS/Src/tasks.c **** 
1207:FreeRTOS/Src/tasks.c ****                     for( x = ( ( BaseType_t ) configNUMBER_OF_CORES - 1 ); x >= ( BaseType_t ) 0; x
1208:FreeRTOS/Src/tasks.c ****                     {
1209:FreeRTOS/Src/tasks.c ****                         UBaseType_t uxCore = ( UBaseType_t ) x;
1210:FreeRTOS/Src/tasks.c ****                         BaseType_t xTaskPriority;
1211:FreeRTOS/Src/tasks.c **** 
1212:FreeRTOS/Src/tasks.c ****                         if( ( uxCoreMap & ( ( UBaseType_t ) 1U << uxCore ) ) != 0U )
1213:FreeRTOS/Src/tasks.c ****                         {
1214:FreeRTOS/Src/tasks.c ****                             xTaskPriority = ( BaseType_t ) pxCurrentTCBs[ uxCore ]->uxPriority;
1215:FreeRTOS/Src/tasks.c **** 
1216:FreeRTOS/Src/tasks.c ****                             if( ( pxCurrentTCBs[ uxCore ]->uxTaskAttributes & taskATTRIBUTE_IS_IDLE
1217:FreeRTOS/Src/tasks.c ****                             {
1218:FreeRTOS/Src/tasks.c ****                                 xTaskPriority = xTaskPriority - ( BaseType_t ) 1;
1219:FreeRTOS/Src/tasks.c ****                             }
1220:FreeRTOS/Src/tasks.c **** 
1221:FreeRTOS/Src/tasks.c ****                             uxCoreMap &= ~( ( UBaseType_t ) 1U << uxCore );
1222:FreeRTOS/Src/tasks.c **** 
1223:FreeRTOS/Src/tasks.c ****                             if( ( xTaskPriority < xLowestPriority ) &&
1224:FreeRTOS/Src/tasks.c ****                                 ( taskTASK_IS_RUNNING( pxCurrentTCBs[ uxCore ] ) != pdFALSE ) &&
1225:FreeRTOS/Src/tasks.c ****                                 ( xYieldPendings[ uxCore ] == pdFALSE ) )
1226:FreeRTOS/Src/tasks.c ****                             {
1227:FreeRTOS/Src/tasks.c ****                                 #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
1228:FreeRTOS/Src/tasks.c ****                                     if( pxCurrentTCBs[ uxCore ]->xPreemptionDisable == pdFALSE )
1229:FreeRTOS/Src/tasks.c ****                                 #endif
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 23


1230:FreeRTOS/Src/tasks.c ****                                 {
1231:FreeRTOS/Src/tasks.c ****                                     xLowestPriority = xTaskPriority;
1232:FreeRTOS/Src/tasks.c ****                                     xLowestPriorityCore = ( BaseType_t ) uxCore;
1233:FreeRTOS/Src/tasks.c ****                                 }
1234:FreeRTOS/Src/tasks.c ****                             }
1235:FreeRTOS/Src/tasks.c ****                         }
1236:FreeRTOS/Src/tasks.c ****                     }
1237:FreeRTOS/Src/tasks.c **** 
1238:FreeRTOS/Src/tasks.c ****                     if( xLowestPriorityCore >= 0 )
1239:FreeRTOS/Src/tasks.c ****                     {
1240:FreeRTOS/Src/tasks.c ****                         prvYieldCore( xLowestPriorityCore );
1241:FreeRTOS/Src/tasks.c ****                     }
1242:FreeRTOS/Src/tasks.c ****                 }
1243:FreeRTOS/Src/tasks.c ****             }
1244:FreeRTOS/Src/tasks.c ****         }
1245:FreeRTOS/Src/tasks.c ****         #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) */
1246:FreeRTOS/Src/tasks.c ****     }
1247:FreeRTOS/Src/tasks.c **** 
1248:FreeRTOS/Src/tasks.c **** #endif /* ( configNUMBER_OF_CORES > 1 ) */
1249:FreeRTOS/Src/tasks.c **** 
1250:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1251:FreeRTOS/Src/tasks.c **** 
1252:FreeRTOS/Src/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1253:FreeRTOS/Src/tasks.c **** 
1254:FreeRTOS/Src/tasks.c ****     static TCB_t * prvCreateStaticTask( TaskFunction_t pxTaskCode,
1255:FreeRTOS/Src/tasks.c ****                                         const char * const pcName,
1256:FreeRTOS/Src/tasks.c ****                                         const configSTACK_DEPTH_TYPE uxStackDepth,
1257:FreeRTOS/Src/tasks.c ****                                         void * const pvParameters,
1258:FreeRTOS/Src/tasks.c ****                                         UBaseType_t uxPriority,
1259:FreeRTOS/Src/tasks.c ****                                         StackType_t * const puxStackBuffer,
1260:FreeRTOS/Src/tasks.c ****                                         StaticTask_t * const pxTaskBuffer,
1261:FreeRTOS/Src/tasks.c ****                                         TaskHandle_t * const pxCreatedTask )
1262:FreeRTOS/Src/tasks.c ****     {
1263:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
1264:FreeRTOS/Src/tasks.c **** 
1265:FreeRTOS/Src/tasks.c ****         configASSERT( puxStackBuffer != NULL );
1266:FreeRTOS/Src/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
1267:FreeRTOS/Src/tasks.c **** 
1268:FreeRTOS/Src/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
1269:FreeRTOS/Src/tasks.c ****         {
1270:FreeRTOS/Src/tasks.c ****             /* Sanity check that the size of the structure used to declare a
1271:FreeRTOS/Src/tasks.c ****              * variable of type StaticTask_t equals the size of the real task
1272:FreeRTOS/Src/tasks.c ****              * structure. */
1273:FreeRTOS/Src/tasks.c ****             volatile size_t xSize = sizeof( StaticTask_t );
1274:FreeRTOS/Src/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
1275:FreeRTOS/Src/tasks.c ****             ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
1276:FreeRTOS/Src/tasks.c ****         }
1277:FreeRTOS/Src/tasks.c ****         #endif /* configASSERT_DEFINED */
1278:FreeRTOS/Src/tasks.c **** 
1279:FreeRTOS/Src/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
1280:FreeRTOS/Src/tasks.c ****         {
1281:FreeRTOS/Src/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
1282:FreeRTOS/Src/tasks.c ****              * function - use them. */
1283:FreeRTOS/Src/tasks.c ****             /* MISRA Ref 11.3.1 [Misaligned access] */
1284:FreeRTOS/Src/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
1285:FreeRTOS/Src/tasks.c ****             /* coverity[misra_c_2012_rule_11_3_violation] */
1286:FreeRTOS/Src/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 24


1287:FreeRTOS/Src/tasks.c ****             ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1288:FreeRTOS/Src/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1289:FreeRTOS/Src/tasks.c **** 
1290:FreeRTOS/Src/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
1291:FreeRTOS/Src/tasks.c ****             {
1292:FreeRTOS/Src/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
1293:FreeRTOS/Src/tasks.c ****                  * task was created statically in case the task is later deleted. */
1294:FreeRTOS/Src/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1295:FreeRTOS/Src/tasks.c ****             }
1296:FreeRTOS/Src/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
1297:FreeRTOS/Src/tasks.c **** 
1298:FreeRTOS/Src/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCre
1299:FreeRTOS/Src/tasks.c ****         }
1300:FreeRTOS/Src/tasks.c ****         else
1301:FreeRTOS/Src/tasks.c ****         {
1302:FreeRTOS/Src/tasks.c ****             pxNewTCB = NULL;
1303:FreeRTOS/Src/tasks.c ****         }
1304:FreeRTOS/Src/tasks.c **** 
1305:FreeRTOS/Src/tasks.c ****         return pxNewTCB;
1306:FreeRTOS/Src/tasks.c ****     }
1307:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1308:FreeRTOS/Src/tasks.c **** 
1309:FreeRTOS/Src/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
1310:FreeRTOS/Src/tasks.c ****                                     const char * const pcName,
1311:FreeRTOS/Src/tasks.c ****                                     const configSTACK_DEPTH_TYPE uxStackDepth,
1312:FreeRTOS/Src/tasks.c ****                                     void * const pvParameters,
1313:FreeRTOS/Src/tasks.c ****                                     UBaseType_t uxPriority,
1314:FreeRTOS/Src/tasks.c ****                                     StackType_t * const puxStackBuffer,
1315:FreeRTOS/Src/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
1316:FreeRTOS/Src/tasks.c ****     {
1317:FreeRTOS/Src/tasks.c ****         TaskHandle_t xReturn = NULL;
1318:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
1319:FreeRTOS/Src/tasks.c **** 
1320:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, p
1321:FreeRTOS/Src/tasks.c **** 
1322:FreeRTOS/Src/tasks.c ****         pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority,
1323:FreeRTOS/Src/tasks.c **** 
1324:FreeRTOS/Src/tasks.c ****         if( pxNewTCB != NULL )
1325:FreeRTOS/Src/tasks.c ****         {
1326:FreeRTOS/Src/tasks.c ****             #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1327:FreeRTOS/Src/tasks.c ****             {
1328:FreeRTOS/Src/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1329:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
1330:FreeRTOS/Src/tasks.c ****             }
1331:FreeRTOS/Src/tasks.c ****             #endif
1332:FreeRTOS/Src/tasks.c **** 
1333:FreeRTOS/Src/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
1334:FreeRTOS/Src/tasks.c ****         }
1335:FreeRTOS/Src/tasks.c ****         else
1336:FreeRTOS/Src/tasks.c ****         {
1337:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1338:FreeRTOS/Src/tasks.c ****         }
1339:FreeRTOS/Src/tasks.c **** 
1340:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskCreateStatic( xReturn );
1341:FreeRTOS/Src/tasks.c **** 
1342:FreeRTOS/Src/tasks.c ****         return xReturn;
1343:FreeRTOS/Src/tasks.c ****     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 25


1344:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1345:FreeRTOS/Src/tasks.c **** 
1346:FreeRTOS/Src/tasks.c ****     #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1347:FreeRTOS/Src/tasks.c ****         TaskHandle_t xTaskCreateStaticAffinitySet( TaskFunction_t pxTaskCode,
1348:FreeRTOS/Src/tasks.c ****                                                    const char * const pcName,
1349:FreeRTOS/Src/tasks.c ****                                                    const configSTACK_DEPTH_TYPE uxStackDepth,
1350:FreeRTOS/Src/tasks.c ****                                                    void * const pvParameters,
1351:FreeRTOS/Src/tasks.c ****                                                    UBaseType_t uxPriority,
1352:FreeRTOS/Src/tasks.c ****                                                    StackType_t * const puxStackBuffer,
1353:FreeRTOS/Src/tasks.c ****                                                    StaticTask_t * const pxTaskBuffer,
1354:FreeRTOS/Src/tasks.c ****                                                    UBaseType_t uxCoreAffinityMask )
1355:FreeRTOS/Src/tasks.c ****         {
1356:FreeRTOS/Src/tasks.c ****             TaskHandle_t xReturn = NULL;
1357:FreeRTOS/Src/tasks.c ****             TCB_t * pxNewTCB;
1358:FreeRTOS/Src/tasks.c **** 
1359:FreeRTOS/Src/tasks.c ****             traceENTER_xTaskCreateStaticAffinitySet( pxTaskCode, pcName, uxStackDepth, pvParameters
1360:FreeRTOS/Src/tasks.c **** 
1361:FreeRTOS/Src/tasks.c ****             pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPrior
1362:FreeRTOS/Src/tasks.c **** 
1363:FreeRTOS/Src/tasks.c ****             if( pxNewTCB != NULL )
1364:FreeRTOS/Src/tasks.c ****             {
1365:FreeRTOS/Src/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1366:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = uxCoreAffinityMask;
1367:FreeRTOS/Src/tasks.c **** 
1368:FreeRTOS/Src/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
1369:FreeRTOS/Src/tasks.c ****             }
1370:FreeRTOS/Src/tasks.c ****             else
1371:FreeRTOS/Src/tasks.c ****             {
1372:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1373:FreeRTOS/Src/tasks.c ****             }
1374:FreeRTOS/Src/tasks.c **** 
1375:FreeRTOS/Src/tasks.c ****             traceRETURN_xTaskCreateStaticAffinitySet( xReturn );
1376:FreeRTOS/Src/tasks.c **** 
1377:FreeRTOS/Src/tasks.c ****             return xReturn;
1378:FreeRTOS/Src/tasks.c ****         }
1379:FreeRTOS/Src/tasks.c ****     #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1380:FreeRTOS/Src/tasks.c **** 
1381:FreeRTOS/Src/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
1382:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1383:FreeRTOS/Src/tasks.c **** 
1384:FreeRTOS/Src/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1385:FreeRTOS/Src/tasks.c ****     static TCB_t * prvCreateRestrictedStaticTask( const TaskParameters_t * const pxTaskDefinition,
1386:FreeRTOS/Src/tasks.c ****                                                   TaskHandle_t * const pxCreatedTask )
1387:FreeRTOS/Src/tasks.c ****     {
1388:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
1389:FreeRTOS/Src/tasks.c **** 
1390:FreeRTOS/Src/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
1391:FreeRTOS/Src/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
1392:FreeRTOS/Src/tasks.c **** 
1393:FreeRTOS/Src/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
1394:FreeRTOS/Src/tasks.c ****         {
1395:FreeRTOS/Src/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
1396:FreeRTOS/Src/tasks.c ****              * on the implementation of the port malloc function and whether or
1397:FreeRTOS/Src/tasks.c ****              * not static allocation is being used. */
1398:FreeRTOS/Src/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
1399:FreeRTOS/Src/tasks.c ****             ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1400:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 26


1401:FreeRTOS/Src/tasks.c ****             /* Store the stack location in the TCB. */
1402:FreeRTOS/Src/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
1403:FreeRTOS/Src/tasks.c **** 
1404:FreeRTOS/Src/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
1405:FreeRTOS/Src/tasks.c ****             {
1406:FreeRTOS/Src/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
1407:FreeRTOS/Src/tasks.c ****                  * task was created statically in case the task is later deleted. */
1408:FreeRTOS/Src/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1409:FreeRTOS/Src/tasks.c ****             }
1410:FreeRTOS/Src/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
1411:FreeRTOS/Src/tasks.c **** 
1412:FreeRTOS/Src/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
1413:FreeRTOS/Src/tasks.c ****                                   pxTaskDefinition->pcName,
1414:FreeRTOS/Src/tasks.c ****                                   pxTaskDefinition->usStackDepth,
1415:FreeRTOS/Src/tasks.c ****                                   pxTaskDefinition->pvParameters,
1416:FreeRTOS/Src/tasks.c ****                                   pxTaskDefinition->uxPriority,
1417:FreeRTOS/Src/tasks.c ****                                   pxCreatedTask, pxNewTCB,
1418:FreeRTOS/Src/tasks.c ****                                   pxTaskDefinition->xRegions );
1419:FreeRTOS/Src/tasks.c ****         }
1420:FreeRTOS/Src/tasks.c ****         else
1421:FreeRTOS/Src/tasks.c ****         {
1422:FreeRTOS/Src/tasks.c ****             pxNewTCB = NULL;
1423:FreeRTOS/Src/tasks.c ****         }
1424:FreeRTOS/Src/tasks.c **** 
1425:FreeRTOS/Src/tasks.c ****         return pxNewTCB;
1426:FreeRTOS/Src/tasks.c ****     }
1427:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1428:FreeRTOS/Src/tasks.c **** 
1429:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
1430:FreeRTOS/Src/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
1431:FreeRTOS/Src/tasks.c ****     {
1432:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
1433:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
1434:FreeRTOS/Src/tasks.c **** 
1435:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskCreateRestrictedStatic( pxTaskDefinition, pxCreatedTask );
1436:FreeRTOS/Src/tasks.c **** 
1437:FreeRTOS/Src/tasks.c ****         configASSERT( pxTaskDefinition != NULL );
1438:FreeRTOS/Src/tasks.c **** 
1439:FreeRTOS/Src/tasks.c ****         pxNewTCB = prvCreateRestrictedStaticTask( pxTaskDefinition, pxCreatedTask );
1440:FreeRTOS/Src/tasks.c **** 
1441:FreeRTOS/Src/tasks.c ****         if( pxNewTCB != NULL )
1442:FreeRTOS/Src/tasks.c ****         {
1443:FreeRTOS/Src/tasks.c ****             #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1444:FreeRTOS/Src/tasks.c ****             {
1445:FreeRTOS/Src/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1446:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
1447:FreeRTOS/Src/tasks.c ****             }
1448:FreeRTOS/Src/tasks.c ****             #endif
1449:FreeRTOS/Src/tasks.c **** 
1450:FreeRTOS/Src/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
1451:FreeRTOS/Src/tasks.c ****             xReturn = pdPASS;
1452:FreeRTOS/Src/tasks.c ****         }
1453:FreeRTOS/Src/tasks.c ****         else
1454:FreeRTOS/Src/tasks.c ****         {
1455:FreeRTOS/Src/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1456:FreeRTOS/Src/tasks.c ****         }
1457:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 27


1458:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskCreateRestrictedStatic( xReturn );
1459:FreeRTOS/Src/tasks.c **** 
1460:FreeRTOS/Src/tasks.c ****         return xReturn;
1461:FreeRTOS/Src/tasks.c ****     }
1462:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1463:FreeRTOS/Src/tasks.c **** 
1464:FreeRTOS/Src/tasks.c ****     #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1465:FreeRTOS/Src/tasks.c ****         BaseType_t xTaskCreateRestrictedStaticAffinitySet( const TaskParameters_t * const pxTaskDef
1466:FreeRTOS/Src/tasks.c ****                                                            UBaseType_t uxCoreAffinityMask,
1467:FreeRTOS/Src/tasks.c ****                                                            TaskHandle_t * pxCreatedTask )
1468:FreeRTOS/Src/tasks.c ****         {
1469:FreeRTOS/Src/tasks.c ****             TCB_t * pxNewTCB;
1470:FreeRTOS/Src/tasks.c ****             BaseType_t xReturn;
1471:FreeRTOS/Src/tasks.c **** 
1472:FreeRTOS/Src/tasks.c ****             traceENTER_xTaskCreateRestrictedStaticAffinitySet( pxTaskDefinition, uxCoreAffinityMask
1473:FreeRTOS/Src/tasks.c **** 
1474:FreeRTOS/Src/tasks.c ****             configASSERT( pxTaskDefinition != NULL );
1475:FreeRTOS/Src/tasks.c **** 
1476:FreeRTOS/Src/tasks.c ****             pxNewTCB = prvCreateRestrictedStaticTask( pxTaskDefinition, pxCreatedTask );
1477:FreeRTOS/Src/tasks.c **** 
1478:FreeRTOS/Src/tasks.c ****             if( pxNewTCB != NULL )
1479:FreeRTOS/Src/tasks.c ****             {
1480:FreeRTOS/Src/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1481:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = uxCoreAffinityMask;
1482:FreeRTOS/Src/tasks.c **** 
1483:FreeRTOS/Src/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
1484:FreeRTOS/Src/tasks.c ****                 xReturn = pdPASS;
1485:FreeRTOS/Src/tasks.c ****             }
1486:FreeRTOS/Src/tasks.c ****             else
1487:FreeRTOS/Src/tasks.c ****             {
1488:FreeRTOS/Src/tasks.c ****                 xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1489:FreeRTOS/Src/tasks.c ****             }
1490:FreeRTOS/Src/tasks.c **** 
1491:FreeRTOS/Src/tasks.c ****             traceRETURN_xTaskCreateRestrictedStaticAffinitySet( xReturn );
1492:FreeRTOS/Src/tasks.c **** 
1493:FreeRTOS/Src/tasks.c ****             return xReturn;
1494:FreeRTOS/Src/tasks.c ****         }
1495:FreeRTOS/Src/tasks.c ****     #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1496:FreeRTOS/Src/tasks.c **** 
1497:FreeRTOS/Src/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
1498:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1499:FreeRTOS/Src/tasks.c **** 
1500:FreeRTOS/Src/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
1501:FreeRTOS/Src/tasks.c ****     static TCB_t * prvCreateRestrictedTask( const TaskParameters_t * const pxTaskDefinition,
1502:FreeRTOS/Src/tasks.c ****                                             TaskHandle_t * const pxCreatedTask )
1503:FreeRTOS/Src/tasks.c ****     {
1504:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
1505:FreeRTOS/Src/tasks.c **** 
1506:FreeRTOS/Src/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
1507:FreeRTOS/Src/tasks.c **** 
1508:FreeRTOS/Src/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
1509:FreeRTOS/Src/tasks.c ****         {
1510:FreeRTOS/Src/tasks.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1511:FreeRTOS/Src/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
1512:FreeRTOS/Src/tasks.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
1513:FreeRTOS/Src/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
1514:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 28


1515:FreeRTOS/Src/tasks.c ****             if( pxNewTCB != NULL )
1516:FreeRTOS/Src/tasks.c ****             {
1517:FreeRTOS/Src/tasks.c ****                 ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1518:FreeRTOS/Src/tasks.c **** 
1519:FreeRTOS/Src/tasks.c ****                 /* Store the stack location in the TCB. */
1520:FreeRTOS/Src/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
1521:FreeRTOS/Src/tasks.c **** 
1522:FreeRTOS/Src/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
1523:FreeRTOS/Src/tasks.c ****                 {
1524:FreeRTOS/Src/tasks.c ****                     /* Tasks can be created statically or dynamically, so note
1525:FreeRTOS/Src/tasks.c ****                      * this task had a statically allocated stack in case it is
1526:FreeRTOS/Src/tasks.c ****                      * later deleted.  The TCB was allocated dynamically. */
1527:FreeRTOS/Src/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
1528:FreeRTOS/Src/tasks.c ****                 }
1529:FreeRTOS/Src/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
1530:FreeRTOS/Src/tasks.c **** 
1531:FreeRTOS/Src/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
1532:FreeRTOS/Src/tasks.c ****                                       pxTaskDefinition->pcName,
1533:FreeRTOS/Src/tasks.c ****                                       pxTaskDefinition->usStackDepth,
1534:FreeRTOS/Src/tasks.c ****                                       pxTaskDefinition->pvParameters,
1535:FreeRTOS/Src/tasks.c ****                                       pxTaskDefinition->uxPriority,
1536:FreeRTOS/Src/tasks.c ****                                       pxCreatedTask, pxNewTCB,
1537:FreeRTOS/Src/tasks.c ****                                       pxTaskDefinition->xRegions );
1538:FreeRTOS/Src/tasks.c ****             }
1539:FreeRTOS/Src/tasks.c ****         }
1540:FreeRTOS/Src/tasks.c ****         else
1541:FreeRTOS/Src/tasks.c ****         {
1542:FreeRTOS/Src/tasks.c ****             pxNewTCB = NULL;
1543:FreeRTOS/Src/tasks.c ****         }
1544:FreeRTOS/Src/tasks.c **** 
1545:FreeRTOS/Src/tasks.c ****         return pxNewTCB;
1546:FreeRTOS/Src/tasks.c ****     }
1547:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1548:FreeRTOS/Src/tasks.c **** 
1549:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
1550:FreeRTOS/Src/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
1551:FreeRTOS/Src/tasks.c ****     {
1552:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
1553:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
1554:FreeRTOS/Src/tasks.c **** 
1555:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskCreateRestricted( pxTaskDefinition, pxCreatedTask );
1556:FreeRTOS/Src/tasks.c **** 
1557:FreeRTOS/Src/tasks.c ****         pxNewTCB = prvCreateRestrictedTask( pxTaskDefinition, pxCreatedTask );
1558:FreeRTOS/Src/tasks.c **** 
1559:FreeRTOS/Src/tasks.c ****         if( pxNewTCB != NULL )
1560:FreeRTOS/Src/tasks.c ****         {
1561:FreeRTOS/Src/tasks.c ****             #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1562:FreeRTOS/Src/tasks.c ****             {
1563:FreeRTOS/Src/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1564:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
1565:FreeRTOS/Src/tasks.c ****             }
1566:FreeRTOS/Src/tasks.c ****             #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1567:FreeRTOS/Src/tasks.c **** 
1568:FreeRTOS/Src/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
1569:FreeRTOS/Src/tasks.c **** 
1570:FreeRTOS/Src/tasks.c ****             xReturn = pdPASS;
1571:FreeRTOS/Src/tasks.c ****         }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 29


1572:FreeRTOS/Src/tasks.c ****         else
1573:FreeRTOS/Src/tasks.c ****         {
1574:FreeRTOS/Src/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1575:FreeRTOS/Src/tasks.c ****         }
1576:FreeRTOS/Src/tasks.c **** 
1577:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskCreateRestricted( xReturn );
1578:FreeRTOS/Src/tasks.c **** 
1579:FreeRTOS/Src/tasks.c ****         return xReturn;
1580:FreeRTOS/Src/tasks.c ****     }
1581:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1582:FreeRTOS/Src/tasks.c **** 
1583:FreeRTOS/Src/tasks.c ****     #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1584:FreeRTOS/Src/tasks.c ****         BaseType_t xTaskCreateRestrictedAffinitySet( const TaskParameters_t * const pxTaskDefinitio
1585:FreeRTOS/Src/tasks.c ****                                                      UBaseType_t uxCoreAffinityMask,
1586:FreeRTOS/Src/tasks.c ****                                                      TaskHandle_t * pxCreatedTask )
1587:FreeRTOS/Src/tasks.c ****         {
1588:FreeRTOS/Src/tasks.c ****             TCB_t * pxNewTCB;
1589:FreeRTOS/Src/tasks.c ****             BaseType_t xReturn;
1590:FreeRTOS/Src/tasks.c **** 
1591:FreeRTOS/Src/tasks.c ****             traceENTER_xTaskCreateRestrictedAffinitySet( pxTaskDefinition, uxCoreAffinityMask, pxCr
1592:FreeRTOS/Src/tasks.c **** 
1593:FreeRTOS/Src/tasks.c ****             pxNewTCB = prvCreateRestrictedTask( pxTaskDefinition, pxCreatedTask );
1594:FreeRTOS/Src/tasks.c **** 
1595:FreeRTOS/Src/tasks.c ****             if( pxNewTCB != NULL )
1596:FreeRTOS/Src/tasks.c ****             {
1597:FreeRTOS/Src/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1598:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = uxCoreAffinityMask;
1599:FreeRTOS/Src/tasks.c **** 
1600:FreeRTOS/Src/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
1601:FreeRTOS/Src/tasks.c **** 
1602:FreeRTOS/Src/tasks.c ****                 xReturn = pdPASS;
1603:FreeRTOS/Src/tasks.c ****             }
1604:FreeRTOS/Src/tasks.c ****             else
1605:FreeRTOS/Src/tasks.c ****             {
1606:FreeRTOS/Src/tasks.c ****                 xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1607:FreeRTOS/Src/tasks.c ****             }
1608:FreeRTOS/Src/tasks.c **** 
1609:FreeRTOS/Src/tasks.c ****             traceRETURN_xTaskCreateRestrictedAffinitySet( xReturn );
1610:FreeRTOS/Src/tasks.c **** 
1611:FreeRTOS/Src/tasks.c ****             return xReturn;
1612:FreeRTOS/Src/tasks.c ****         }
1613:FreeRTOS/Src/tasks.c ****     #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1614:FreeRTOS/Src/tasks.c **** 
1615:FreeRTOS/Src/tasks.c **** 
1616:FreeRTOS/Src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
1617:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1618:FreeRTOS/Src/tasks.c **** 
1619:FreeRTOS/Src/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
1620:FreeRTOS/Src/tasks.c ****     static TCB_t * prvCreateTask( TaskFunction_t pxTaskCode,
1621:FreeRTOS/Src/tasks.c ****                                   const char * const pcName,
1622:FreeRTOS/Src/tasks.c ****                                   const configSTACK_DEPTH_TYPE uxStackDepth,
1623:FreeRTOS/Src/tasks.c ****                                   void * const pvParameters,
1624:FreeRTOS/Src/tasks.c ****                                   UBaseType_t uxPriority,
1625:FreeRTOS/Src/tasks.c ****                                   TaskHandle_t * const pxCreatedTask )
1626:FreeRTOS/Src/tasks.c ****     {
1627:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
1628:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 30


1629:FreeRTOS/Src/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
1630:FreeRTOS/Src/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
1631:FreeRTOS/Src/tasks.c ****          * the TCB then the stack. */
1632:FreeRTOS/Src/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
1633:FreeRTOS/Src/tasks.c ****         {
1634:FreeRTOS/Src/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends on
1635:FreeRTOS/Src/tasks.c ****              * the implementation of the port malloc function and whether or not static
1636:FreeRTOS/Src/tasks.c ****              * allocation is being used. */
1637:FreeRTOS/Src/tasks.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1638:FreeRTOS/Src/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
1639:FreeRTOS/Src/tasks.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
1640:FreeRTOS/Src/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
1641:FreeRTOS/Src/tasks.c **** 
1642:FreeRTOS/Src/tasks.c ****             if( pxNewTCB != NULL )
1643:FreeRTOS/Src/tasks.c ****             {
1644:FreeRTOS/Src/tasks.c ****                 ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1645:FreeRTOS/Src/tasks.c **** 
1646:FreeRTOS/Src/tasks.c ****                 /* Allocate space for the stack used by the task being created.
1647:FreeRTOS/Src/tasks.c ****                  * The base of the stack memory stored in the TCB so the task can
1648:FreeRTOS/Src/tasks.c ****                  * be deleted later if required. */
1649:FreeRTOS/Src/tasks.c ****                 /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1650:FreeRTOS/Src/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
1651:FreeRTOS/Src/tasks.c ****                 /* coverity[misra_c_2012_rule_11_5_violation] */
1652:FreeRTOS/Src/tasks.c ****                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) uxStackDept
1653:FreeRTOS/Src/tasks.c **** 
1654:FreeRTOS/Src/tasks.c ****                 if( pxNewTCB->pxStack == NULL )
1655:FreeRTOS/Src/tasks.c ****                 {
1656:FreeRTOS/Src/tasks.c ****                     /* Could not allocate the stack.  Delete the allocated TCB. */
1657:FreeRTOS/Src/tasks.c ****                     vPortFree( pxNewTCB );
1658:FreeRTOS/Src/tasks.c ****                     pxNewTCB = NULL;
1659:FreeRTOS/Src/tasks.c ****                 }
1660:FreeRTOS/Src/tasks.c ****             }
1661:FreeRTOS/Src/tasks.c ****         }
1662:FreeRTOS/Src/tasks.c ****         #else /* portSTACK_GROWTH */
1663:FreeRTOS/Src/tasks.c ****         {
1664:FreeRTOS/Src/tasks.c ****             StackType_t * pxStack;
1665:FreeRTOS/Src/tasks.c **** 
1666:FreeRTOS/Src/tasks.c ****             /* Allocate space for the stack used by the task being created. */
1667:FreeRTOS/Src/tasks.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1668:FreeRTOS/Src/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
1669:FreeRTOS/Src/tasks.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
1670:FreeRTOS/Src/tasks.c ****             pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
1671:FreeRTOS/Src/tasks.c **** 
1672:FreeRTOS/Src/tasks.c ****             if( pxStack != NULL )
1673:FreeRTOS/Src/tasks.c ****             {
1674:FreeRTOS/Src/tasks.c ****                 /* Allocate space for the TCB. */
1675:FreeRTOS/Src/tasks.c ****                 /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1676:FreeRTOS/Src/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
1677:FreeRTOS/Src/tasks.c ****                 /* coverity[misra_c_2012_rule_11_5_violation] */
1678:FreeRTOS/Src/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
1679:FreeRTOS/Src/tasks.c **** 
1680:FreeRTOS/Src/tasks.c ****                 if( pxNewTCB != NULL )
1681:FreeRTOS/Src/tasks.c ****                 {
1682:FreeRTOS/Src/tasks.c ****                     ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1683:FreeRTOS/Src/tasks.c **** 
1684:FreeRTOS/Src/tasks.c ****                     /* Store the stack location in the TCB. */
1685:FreeRTOS/Src/tasks.c ****                     pxNewTCB->pxStack = pxStack;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 31


1686:FreeRTOS/Src/tasks.c ****                 }
1687:FreeRTOS/Src/tasks.c ****                 else
1688:FreeRTOS/Src/tasks.c ****                 {
1689:FreeRTOS/Src/tasks.c ****                     /* The stack cannot be used as the TCB was not created.  Free
1690:FreeRTOS/Src/tasks.c ****                      * it again. */
1691:FreeRTOS/Src/tasks.c ****                     vPortFreeStack( pxStack );
1692:FreeRTOS/Src/tasks.c ****                 }
1693:FreeRTOS/Src/tasks.c ****             }
1694:FreeRTOS/Src/tasks.c ****             else
1695:FreeRTOS/Src/tasks.c ****             {
1696:FreeRTOS/Src/tasks.c ****                 pxNewTCB = NULL;
1697:FreeRTOS/Src/tasks.c ****             }
1698:FreeRTOS/Src/tasks.c ****         }
1699:FreeRTOS/Src/tasks.c ****         #endif /* portSTACK_GROWTH */
1700:FreeRTOS/Src/tasks.c **** 
1701:FreeRTOS/Src/tasks.c ****         if( pxNewTCB != NULL )
1702:FreeRTOS/Src/tasks.c ****         {
1703:FreeRTOS/Src/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
1704:FreeRTOS/Src/tasks.c ****             {
1705:FreeRTOS/Src/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
1706:FreeRTOS/Src/tasks.c ****                  * task was created dynamically in case it is later deleted. */
1707:FreeRTOS/Src/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1708:FreeRTOS/Src/tasks.c ****             }
1709:FreeRTOS/Src/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
1710:FreeRTOS/Src/tasks.c **** 
1711:FreeRTOS/Src/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCre
1712:FreeRTOS/Src/tasks.c ****         }
1713:FreeRTOS/Src/tasks.c **** 
1714:FreeRTOS/Src/tasks.c ****         return pxNewTCB;
1715:FreeRTOS/Src/tasks.c ****     }
1716:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1717:FreeRTOS/Src/tasks.c **** 
1718:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
1719:FreeRTOS/Src/tasks.c ****                             const char * const pcName,
1720:FreeRTOS/Src/tasks.c ****                             const configSTACK_DEPTH_TYPE uxStackDepth,
1721:FreeRTOS/Src/tasks.c ****                             void * const pvParameters,
1722:FreeRTOS/Src/tasks.c ****                             UBaseType_t uxPriority,
1723:FreeRTOS/Src/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
1724:FreeRTOS/Src/tasks.c ****     {
1725:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
1726:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
1727:FreeRTOS/Src/tasks.c **** 
1728:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreat
1729:FreeRTOS/Src/tasks.c **** 
1730:FreeRTOS/Src/tasks.c ****         pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCre
1731:FreeRTOS/Src/tasks.c **** 
1732:FreeRTOS/Src/tasks.c ****         if( pxNewTCB != NULL )
1733:FreeRTOS/Src/tasks.c ****         {
1734:FreeRTOS/Src/tasks.c ****             #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1735:FreeRTOS/Src/tasks.c ****             {
1736:FreeRTOS/Src/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1737:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
1738:FreeRTOS/Src/tasks.c ****             }
1739:FreeRTOS/Src/tasks.c ****             #endif
1740:FreeRTOS/Src/tasks.c **** 
1741:FreeRTOS/Src/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
1742:FreeRTOS/Src/tasks.c ****             xReturn = pdPASS;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 32


1743:FreeRTOS/Src/tasks.c ****         }
1744:FreeRTOS/Src/tasks.c ****         else
1745:FreeRTOS/Src/tasks.c ****         {
1746:FreeRTOS/Src/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1747:FreeRTOS/Src/tasks.c ****         }
1748:FreeRTOS/Src/tasks.c **** 
1749:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskCreate( xReturn );
1750:FreeRTOS/Src/tasks.c **** 
1751:FreeRTOS/Src/tasks.c ****         return xReturn;
1752:FreeRTOS/Src/tasks.c ****     }
1753:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1754:FreeRTOS/Src/tasks.c **** 
1755:FreeRTOS/Src/tasks.c ****     #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1756:FreeRTOS/Src/tasks.c ****         BaseType_t xTaskCreateAffinitySet( TaskFunction_t pxTaskCode,
1757:FreeRTOS/Src/tasks.c ****                                            const char * const pcName,
1758:FreeRTOS/Src/tasks.c ****                                            const configSTACK_DEPTH_TYPE uxStackDepth,
1759:FreeRTOS/Src/tasks.c ****                                            void * const pvParameters,
1760:FreeRTOS/Src/tasks.c ****                                            UBaseType_t uxPriority,
1761:FreeRTOS/Src/tasks.c ****                                            UBaseType_t uxCoreAffinityMask,
1762:FreeRTOS/Src/tasks.c ****                                            TaskHandle_t * const pxCreatedTask )
1763:FreeRTOS/Src/tasks.c ****         {
1764:FreeRTOS/Src/tasks.c ****             TCB_t * pxNewTCB;
1765:FreeRTOS/Src/tasks.c ****             BaseType_t xReturn;
1766:FreeRTOS/Src/tasks.c **** 
1767:FreeRTOS/Src/tasks.c ****             traceENTER_xTaskCreateAffinitySet( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPr
1768:FreeRTOS/Src/tasks.c **** 
1769:FreeRTOS/Src/tasks.c ****             pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, p
1770:FreeRTOS/Src/tasks.c **** 
1771:FreeRTOS/Src/tasks.c ****             if( pxNewTCB != NULL )
1772:FreeRTOS/Src/tasks.c ****             {
1773:FreeRTOS/Src/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1774:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = uxCoreAffinityMask;
1775:FreeRTOS/Src/tasks.c **** 
1776:FreeRTOS/Src/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
1777:FreeRTOS/Src/tasks.c ****                 xReturn = pdPASS;
1778:FreeRTOS/Src/tasks.c ****             }
1779:FreeRTOS/Src/tasks.c ****             else
1780:FreeRTOS/Src/tasks.c ****             {
1781:FreeRTOS/Src/tasks.c ****                 xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1782:FreeRTOS/Src/tasks.c ****             }
1783:FreeRTOS/Src/tasks.c **** 
1784:FreeRTOS/Src/tasks.c ****             traceRETURN_xTaskCreateAffinitySet( xReturn );
1785:FreeRTOS/Src/tasks.c **** 
1786:FreeRTOS/Src/tasks.c ****             return xReturn;
1787:FreeRTOS/Src/tasks.c ****         }
1788:FreeRTOS/Src/tasks.c ****     #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1789:FreeRTOS/Src/tasks.c **** 
1790:FreeRTOS/Src/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1791:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1792:FreeRTOS/Src/tasks.c **** 
1793:FreeRTOS/Src/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
1794:FreeRTOS/Src/tasks.c ****                                   const char * const pcName,
1795:FreeRTOS/Src/tasks.c ****                                   const configSTACK_DEPTH_TYPE uxStackDepth,
1796:FreeRTOS/Src/tasks.c ****                                   void * const pvParameters,
1797:FreeRTOS/Src/tasks.c ****                                   UBaseType_t uxPriority,
1798:FreeRTOS/Src/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
1799:FreeRTOS/Src/tasks.c ****                                   TCB_t * pxNewTCB,
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 33


1800:FreeRTOS/Src/tasks.c ****                                   const MemoryRegion_t * const xRegions )
1801:FreeRTOS/Src/tasks.c **** {
1802:FreeRTOS/Src/tasks.c ****     StackType_t * pxTopOfStack;
1803:FreeRTOS/Src/tasks.c ****     UBaseType_t x;
1804:FreeRTOS/Src/tasks.c **** 
1805:FreeRTOS/Src/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1806:FreeRTOS/Src/tasks.c ****         /* Should the task be created in privileged mode? */
1807:FreeRTOS/Src/tasks.c ****         BaseType_t xRunPrivileged;
1808:FreeRTOS/Src/tasks.c **** 
1809:FreeRTOS/Src/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
1810:FreeRTOS/Src/tasks.c ****         {
1811:FreeRTOS/Src/tasks.c ****             xRunPrivileged = pdTRUE;
1812:FreeRTOS/Src/tasks.c ****         }
1813:FreeRTOS/Src/tasks.c ****         else
1814:FreeRTOS/Src/tasks.c ****         {
1815:FreeRTOS/Src/tasks.c ****             xRunPrivileged = pdFALSE;
1816:FreeRTOS/Src/tasks.c ****         }
1817:FreeRTOS/Src/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
1818:FreeRTOS/Src/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
1819:FreeRTOS/Src/tasks.c **** 
1820:FreeRTOS/Src/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
1821:FreeRTOS/Src/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
1822:FreeRTOS/Src/tasks.c ****     {
1823:FreeRTOS/Src/tasks.c ****         /* Fill the stack with a known value to assist debugging. */
1824:FreeRTOS/Src/tasks.c ****         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * s
1825:FreeRTOS/Src/tasks.c ****     }
1826:FreeRTOS/Src/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
1827:FreeRTOS/Src/tasks.c **** 
1828:FreeRTOS/Src/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
1829:FreeRTOS/Src/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
1830:FreeRTOS/Src/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
1831:FreeRTOS/Src/tasks.c ****      * by the port. */
1832:FreeRTOS/Src/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
1833:FreeRTOS/Src/tasks.c ****     {
1834:FreeRTOS/Src/tasks.c ****         pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
1835:FreeRTOS/Src/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
1836:FreeRTOS/Src/tasks.c **** 
1837:FreeRTOS/Src/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
1838:FreeRTOS/Src/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
1839:FreeRTOS/Src/tasks.c **** 
1840:FreeRTOS/Src/tasks.c ****         #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
1841:FreeRTOS/Src/tasks.c ****         {
1842:FreeRTOS/Src/tasks.c ****             /* Also record the stack's high address, which may assist
1843:FreeRTOS/Src/tasks.c ****              * debugging. */
1844:FreeRTOS/Src/tasks.c ****             pxNewTCB->pxEndOfStack = pxTopOfStack;
1845:FreeRTOS/Src/tasks.c ****         }
1846:FreeRTOS/Src/tasks.c ****         #endif /* configRECORD_STACK_HIGH_ADDRESS */
1847:FreeRTOS/Src/tasks.c ****     }
1848:FreeRTOS/Src/tasks.c ****     #else /* portSTACK_GROWTH */
1849:FreeRTOS/Src/tasks.c ****     {
1850:FreeRTOS/Src/tasks.c ****         pxTopOfStack = pxNewTCB->pxStack;
1851:FreeRTOS/Src/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) + portBYTE_
1852:FreeRTOS/Src/tasks.c **** 
1853:FreeRTOS/Src/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
1854:FreeRTOS/Src/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
1855:FreeRTOS/Src/tasks.c **** 
1856:FreeRTOS/Src/tasks.c ****         /* The other extreme of the stack space is required if stack checking is
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 34


1857:FreeRTOS/Src/tasks.c ****          * performed. */
1858:FreeRTOS/Src/tasks.c ****         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 
1859:FreeRTOS/Src/tasks.c ****     }
1860:FreeRTOS/Src/tasks.c ****     #endif /* portSTACK_GROWTH */
1861:FreeRTOS/Src/tasks.c **** 
1862:FreeRTOS/Src/tasks.c ****     /* Store the task name in the TCB. */
1863:FreeRTOS/Src/tasks.c ****     if( pcName != NULL )
1864:FreeRTOS/Src/tasks.c ****     {
1865:FreeRTOS/Src/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1866:FreeRTOS/Src/tasks.c ****         {
1867:FreeRTOS/Src/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1868:FreeRTOS/Src/tasks.c **** 
1869:FreeRTOS/Src/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
1870:FreeRTOS/Src/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
1871:FreeRTOS/Src/tasks.c ****              * string is not accessible (extremely unlikely). */
1872:FreeRTOS/Src/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
1873:FreeRTOS/Src/tasks.c ****             {
1874:FreeRTOS/Src/tasks.c ****                 break;
1875:FreeRTOS/Src/tasks.c ****             }
1876:FreeRTOS/Src/tasks.c ****             else
1877:FreeRTOS/Src/tasks.c ****             {
1878:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1879:FreeRTOS/Src/tasks.c ****             }
1880:FreeRTOS/Src/tasks.c ****         }
1881:FreeRTOS/Src/tasks.c **** 
1882:FreeRTOS/Src/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
1883:FreeRTOS/Src/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
1884:FreeRTOS/Src/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
1885:FreeRTOS/Src/tasks.c ****     }
1886:FreeRTOS/Src/tasks.c ****     else
1887:FreeRTOS/Src/tasks.c ****     {
1888:FreeRTOS/Src/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1889:FreeRTOS/Src/tasks.c ****     }
1890:FreeRTOS/Src/tasks.c **** 
1891:FreeRTOS/Src/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
1892:FreeRTOS/Src/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
1893:FreeRTOS/Src/tasks.c **** 
1894:FreeRTOS/Src/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1895:FreeRTOS/Src/tasks.c ****     {
1896:FreeRTOS/Src/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1897:FreeRTOS/Src/tasks.c ****     }
1898:FreeRTOS/Src/tasks.c ****     else
1899:FreeRTOS/Src/tasks.c ****     {
1900:FreeRTOS/Src/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1901:FreeRTOS/Src/tasks.c ****     }
1902:FreeRTOS/Src/tasks.c **** 
1903:FreeRTOS/Src/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
1904:FreeRTOS/Src/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
1905:FreeRTOS/Src/tasks.c ****     {
1906:FreeRTOS/Src/tasks.c ****         pxNewTCB->uxBasePriority = uxPriority;
1907:FreeRTOS/Src/tasks.c ****     }
1908:FreeRTOS/Src/tasks.c ****     #endif /* configUSE_MUTEXES */
1909:FreeRTOS/Src/tasks.c **** 
1910:FreeRTOS/Src/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1911:FreeRTOS/Src/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1912:FreeRTOS/Src/tasks.c **** 
1913:FreeRTOS/Src/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 35


1914:FreeRTOS/Src/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
1915:FreeRTOS/Src/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1916:FreeRTOS/Src/tasks.c **** 
1917:FreeRTOS/Src/tasks.c ****     /* Event lists are always in priority order. */
1918:FreeRTOS/Src/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
1919:FreeRTOS/Src/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1920:FreeRTOS/Src/tasks.c **** 
1921:FreeRTOS/Src/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1922:FreeRTOS/Src/tasks.c ****     {
1923:FreeRTOS/Src/tasks.c ****         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, uxStac
1924:FreeRTOS/Src/tasks.c ****     }
1925:FreeRTOS/Src/tasks.c ****     #else
1926:FreeRTOS/Src/tasks.c ****     {
1927:FreeRTOS/Src/tasks.c ****         /* Avoid compiler warning about unreferenced parameter. */
1928:FreeRTOS/Src/tasks.c ****         ( void ) xRegions;
1929:FreeRTOS/Src/tasks.c ****     }
1930:FreeRTOS/Src/tasks.c ****     #endif
1931:FreeRTOS/Src/tasks.c **** 
1932:FreeRTOS/Src/tasks.c ****     #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
1933:FreeRTOS/Src/tasks.c ****     {
1934:FreeRTOS/Src/tasks.c ****         /* Allocate and initialize memory for the task's TLS Block. */
1935:FreeRTOS/Src/tasks.c ****         configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
1936:FreeRTOS/Src/tasks.c ****     }
1937:FreeRTOS/Src/tasks.c ****     #endif
1938:FreeRTOS/Src/tasks.c **** 
1939:FreeRTOS/Src/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1940:FreeRTOS/Src/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1941:FreeRTOS/Src/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1942:FreeRTOS/Src/tasks.c ****      * the top of stack variable is updated. */
1943:FreeRTOS/Src/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1944:FreeRTOS/Src/tasks.c ****     {
1945:FreeRTOS/Src/tasks.c ****         /* If the port has capability to detect stack overflow,
1946:FreeRTOS/Src/tasks.c ****          * pass the stack end address to the stack initialization
1947:FreeRTOS/Src/tasks.c ****          * function as well. */
1948:FreeRTOS/Src/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1949:FreeRTOS/Src/tasks.c ****         {
1950:FreeRTOS/Src/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
1951:FreeRTOS/Src/tasks.c ****             {
1952:FreeRTOS/Src/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
1953:FreeRTOS/Src/tasks.c ****             }
1954:FreeRTOS/Src/tasks.c ****             #else /* portSTACK_GROWTH */
1955:FreeRTOS/Src/tasks.c ****             {
1956:FreeRTOS/Src/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
1957:FreeRTOS/Src/tasks.c ****             }
1958:FreeRTOS/Src/tasks.c ****             #endif /* portSTACK_GROWTH */
1959:FreeRTOS/Src/tasks.c ****         }
1960:FreeRTOS/Src/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1961:FreeRTOS/Src/tasks.c ****         {
1962:FreeRTOS/Src/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters,
1963:FreeRTOS/Src/tasks.c ****         }
1964:FreeRTOS/Src/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1965:FreeRTOS/Src/tasks.c ****     }
1966:FreeRTOS/Src/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1967:FreeRTOS/Src/tasks.c ****     {
1968:FreeRTOS/Src/tasks.c ****         /* If the port has capability to detect stack overflow,
1969:FreeRTOS/Src/tasks.c ****          * pass the stack end address to the stack initialization
1970:FreeRTOS/Src/tasks.c ****          * function as well. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 36


1971:FreeRTOS/Src/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1972:FreeRTOS/Src/tasks.c ****         {
1973:FreeRTOS/Src/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
1974:FreeRTOS/Src/tasks.c ****             {
1975:FreeRTOS/Src/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
1976:FreeRTOS/Src/tasks.c ****             }
1977:FreeRTOS/Src/tasks.c ****             #else /* portSTACK_GROWTH */
1978:FreeRTOS/Src/tasks.c ****             {
1979:FreeRTOS/Src/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
1980:FreeRTOS/Src/tasks.c ****             }
1981:FreeRTOS/Src/tasks.c ****             #endif /* portSTACK_GROWTH */
1982:FreeRTOS/Src/tasks.c ****         }
1983:FreeRTOS/Src/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1984:FreeRTOS/Src/tasks.c ****         {
1985:FreeRTOS/Src/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters 
1986:FreeRTOS/Src/tasks.c ****         }
1987:FreeRTOS/Src/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1988:FreeRTOS/Src/tasks.c ****     }
1989:FreeRTOS/Src/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1990:FreeRTOS/Src/tasks.c **** 
1991:FreeRTOS/Src/tasks.c ****     /* Initialize task state and task attributes. */
1992:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
1993:FreeRTOS/Src/tasks.c ****     {
1994:FreeRTOS/Src/tasks.c ****         pxNewTCB->xTaskRunState = taskTASK_NOT_RUNNING;
1995:FreeRTOS/Src/tasks.c **** 
1996:FreeRTOS/Src/tasks.c ****         /* Is this an idle task? */
1997:FreeRTOS/Src/tasks.c ****         if( ( ( TaskFunction_t ) pxTaskCode == ( TaskFunction_t ) prvIdleTask ) || ( ( TaskFunction
1998:FreeRTOS/Src/tasks.c ****         {
1999:FreeRTOS/Src/tasks.c ****             pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
2000:FreeRTOS/Src/tasks.c ****         }
2001:FreeRTOS/Src/tasks.c ****     }
2002:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
2003:FreeRTOS/Src/tasks.c **** 
2004:FreeRTOS/Src/tasks.c ****     if( pxCreatedTask != NULL )
2005:FreeRTOS/Src/tasks.c ****     {
2006:FreeRTOS/Src/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
2007:FreeRTOS/Src/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
2008:FreeRTOS/Src/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
2009:FreeRTOS/Src/tasks.c ****     }
2010:FreeRTOS/Src/tasks.c ****     else
2011:FreeRTOS/Src/tasks.c ****     {
2012:FreeRTOS/Src/tasks.c ****         mtCOVERAGE_TEST_MARKER();
2013:FreeRTOS/Src/tasks.c ****     }
2014:FreeRTOS/Src/tasks.c **** }
2015:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2016:FreeRTOS/Src/tasks.c **** 
2017:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES == 1 )
2018:FreeRTOS/Src/tasks.c **** 
2019:FreeRTOS/Src/tasks.c ****     static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
2020:FreeRTOS/Src/tasks.c ****     {
2021:FreeRTOS/Src/tasks.c ****         /* Ensure interrupts don't access the task lists while the lists are being
2022:FreeRTOS/Src/tasks.c ****          * updated. */
2023:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
2024:FreeRTOS/Src/tasks.c ****         {
2025:FreeRTOS/Src/tasks.c ****             uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
2026:FreeRTOS/Src/tasks.c **** 
2027:FreeRTOS/Src/tasks.c ****             if( pxCurrentTCB == NULL )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 37


2028:FreeRTOS/Src/tasks.c ****             {
2029:FreeRTOS/Src/tasks.c ****                 /* There are no other tasks, or all the other tasks are in
2030:FreeRTOS/Src/tasks.c ****                  * the suspended state - make this the current task. */
2031:FreeRTOS/Src/tasks.c ****                 pxCurrentTCB = pxNewTCB;
2032:FreeRTOS/Src/tasks.c **** 
2033:FreeRTOS/Src/tasks.c ****                 if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
2034:FreeRTOS/Src/tasks.c ****                 {
2035:FreeRTOS/Src/tasks.c ****                     /* This is the first task to be created so do the preliminary
2036:FreeRTOS/Src/tasks.c ****                      * initialisation required.  We will not recover if this call
2037:FreeRTOS/Src/tasks.c ****                      * fails, but we will report the failure. */
2038:FreeRTOS/Src/tasks.c ****                     prvInitialiseTaskLists();
2039:FreeRTOS/Src/tasks.c ****                 }
2040:FreeRTOS/Src/tasks.c ****                 else
2041:FreeRTOS/Src/tasks.c ****                 {
2042:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2043:FreeRTOS/Src/tasks.c ****                 }
2044:FreeRTOS/Src/tasks.c ****             }
2045:FreeRTOS/Src/tasks.c ****             else
2046:FreeRTOS/Src/tasks.c ****             {
2047:FreeRTOS/Src/tasks.c ****                 /* If the scheduler is not already running, make this task the
2048:FreeRTOS/Src/tasks.c ****                  * current task if it is the highest priority task to be created
2049:FreeRTOS/Src/tasks.c ****                  * so far. */
2050:FreeRTOS/Src/tasks.c ****                 if( xSchedulerRunning == pdFALSE )
2051:FreeRTOS/Src/tasks.c ****                 {
2052:FreeRTOS/Src/tasks.c ****                     if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
2053:FreeRTOS/Src/tasks.c ****                     {
2054:FreeRTOS/Src/tasks.c ****                         pxCurrentTCB = pxNewTCB;
2055:FreeRTOS/Src/tasks.c ****                     }
2056:FreeRTOS/Src/tasks.c ****                     else
2057:FreeRTOS/Src/tasks.c ****                     {
2058:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2059:FreeRTOS/Src/tasks.c ****                     }
2060:FreeRTOS/Src/tasks.c ****                 }
2061:FreeRTOS/Src/tasks.c ****                 else
2062:FreeRTOS/Src/tasks.c ****                 {
2063:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2064:FreeRTOS/Src/tasks.c ****                 }
2065:FreeRTOS/Src/tasks.c ****             }
2066:FreeRTOS/Src/tasks.c **** 
2067:FreeRTOS/Src/tasks.c ****             uxTaskNumber++;
2068:FreeRTOS/Src/tasks.c **** 
2069:FreeRTOS/Src/tasks.c ****             #if ( configUSE_TRACE_FACILITY == 1 )
2070:FreeRTOS/Src/tasks.c ****             {
2071:FreeRTOS/Src/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
2072:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
2073:FreeRTOS/Src/tasks.c ****             }
2074:FreeRTOS/Src/tasks.c ****             #endif /* configUSE_TRACE_FACILITY */
2075:FreeRTOS/Src/tasks.c ****             traceTASK_CREATE( pxNewTCB );
2076:FreeRTOS/Src/tasks.c **** 
2077:FreeRTOS/Src/tasks.c ****             prvAddTaskToReadyList( pxNewTCB );
2078:FreeRTOS/Src/tasks.c **** 
2079:FreeRTOS/Src/tasks.c ****             portSETUP_TCB( pxNewTCB );
2080:FreeRTOS/Src/tasks.c ****         }
2081:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
2082:FreeRTOS/Src/tasks.c **** 
2083:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning != pdFALSE )
2084:FreeRTOS/Src/tasks.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 38


2085:FreeRTOS/Src/tasks.c ****             /* If the created task is of a higher priority than the current task
2086:FreeRTOS/Src/tasks.c ****              * then it should run now. */
2087:FreeRTOS/Src/tasks.c ****             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
2088:FreeRTOS/Src/tasks.c ****         }
2089:FreeRTOS/Src/tasks.c ****         else
2090:FreeRTOS/Src/tasks.c ****         {
2091:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2092:FreeRTOS/Src/tasks.c ****         }
2093:FreeRTOS/Src/tasks.c ****     }
2094:FreeRTOS/Src/tasks.c **** 
2095:FreeRTOS/Src/tasks.c **** #else /* #if ( configNUMBER_OF_CORES == 1 ) */
2096:FreeRTOS/Src/tasks.c **** 
2097:FreeRTOS/Src/tasks.c ****     static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
2098:FreeRTOS/Src/tasks.c ****     {
2099:FreeRTOS/Src/tasks.c ****         /* Ensure interrupts don't access the task lists while the lists are being
2100:FreeRTOS/Src/tasks.c ****          * updated. */
2101:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
2102:FreeRTOS/Src/tasks.c ****         {
2103:FreeRTOS/Src/tasks.c ****             uxCurrentNumberOfTasks++;
2104:FreeRTOS/Src/tasks.c **** 
2105:FreeRTOS/Src/tasks.c ****             if( xSchedulerRunning == pdFALSE )
2106:FreeRTOS/Src/tasks.c ****             {
2107:FreeRTOS/Src/tasks.c ****                 if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
2108:FreeRTOS/Src/tasks.c ****                 {
2109:FreeRTOS/Src/tasks.c ****                     /* This is the first task to be created so do the preliminary
2110:FreeRTOS/Src/tasks.c ****                      * initialisation required.  We will not recover if this call
2111:FreeRTOS/Src/tasks.c ****                      * fails, but we will report the failure. */
2112:FreeRTOS/Src/tasks.c ****                     prvInitialiseTaskLists();
2113:FreeRTOS/Src/tasks.c ****                 }
2114:FreeRTOS/Src/tasks.c ****                 else
2115:FreeRTOS/Src/tasks.c ****                 {
2116:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2117:FreeRTOS/Src/tasks.c ****                 }
2118:FreeRTOS/Src/tasks.c **** 
2119:FreeRTOS/Src/tasks.c ****                 /* All the cores start with idle tasks before the SMP scheduler
2120:FreeRTOS/Src/tasks.c ****                  * is running. Idle tasks are assigned to cores when they are
2121:FreeRTOS/Src/tasks.c ****                  * created in prvCreateIdleTasks(). */
2122:FreeRTOS/Src/tasks.c ****             }
2123:FreeRTOS/Src/tasks.c **** 
2124:FreeRTOS/Src/tasks.c ****             uxTaskNumber++;
2125:FreeRTOS/Src/tasks.c **** 
2126:FreeRTOS/Src/tasks.c ****             #if ( configUSE_TRACE_FACILITY == 1 )
2127:FreeRTOS/Src/tasks.c ****             {
2128:FreeRTOS/Src/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
2129:FreeRTOS/Src/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
2130:FreeRTOS/Src/tasks.c ****             }
2131:FreeRTOS/Src/tasks.c ****             #endif /* configUSE_TRACE_FACILITY */
2132:FreeRTOS/Src/tasks.c ****             traceTASK_CREATE( pxNewTCB );
2133:FreeRTOS/Src/tasks.c **** 
2134:FreeRTOS/Src/tasks.c ****             prvAddTaskToReadyList( pxNewTCB );
2135:FreeRTOS/Src/tasks.c **** 
2136:FreeRTOS/Src/tasks.c ****             portSETUP_TCB( pxNewTCB );
2137:FreeRTOS/Src/tasks.c **** 
2138:FreeRTOS/Src/tasks.c ****             if( xSchedulerRunning != pdFALSE )
2139:FreeRTOS/Src/tasks.c ****             {
2140:FreeRTOS/Src/tasks.c ****                 /* If the created task is of a higher priority than another
2141:FreeRTOS/Src/tasks.c ****                  * currently running task and preemption is on then it should
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 39


2142:FreeRTOS/Src/tasks.c ****                  * run now. */
2143:FreeRTOS/Src/tasks.c ****                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
2144:FreeRTOS/Src/tasks.c ****             }
2145:FreeRTOS/Src/tasks.c ****             else
2146:FreeRTOS/Src/tasks.c ****             {
2147:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2148:FreeRTOS/Src/tasks.c ****             }
2149:FreeRTOS/Src/tasks.c ****         }
2150:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
2151:FreeRTOS/Src/tasks.c ****     }
2152:FreeRTOS/Src/tasks.c **** 
2153:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
2154:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2155:FreeRTOS/Src/tasks.c **** 
2156:FreeRTOS/Src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
2157:FreeRTOS/Src/tasks.c **** 
2158:FreeRTOS/Src/tasks.c ****     static size_t prvSnprintfReturnValueToCharsWritten( int iSnprintfReturnValue,
2159:FreeRTOS/Src/tasks.c ****                                                         size_t n )
2160:FreeRTOS/Src/tasks.c ****     {
2161:FreeRTOS/Src/tasks.c ****         size_t uxCharsWritten;
2162:FreeRTOS/Src/tasks.c **** 
2163:FreeRTOS/Src/tasks.c ****         if( iSnprintfReturnValue < 0 )
2164:FreeRTOS/Src/tasks.c ****         {
2165:FreeRTOS/Src/tasks.c ****             /* Encoding error - Return 0 to indicate that nothing
2166:FreeRTOS/Src/tasks.c ****              * was written to the buffer. */
2167:FreeRTOS/Src/tasks.c ****             uxCharsWritten = 0;
2168:FreeRTOS/Src/tasks.c ****         }
2169:FreeRTOS/Src/tasks.c ****         else if( iSnprintfReturnValue >= ( int ) n )
2170:FreeRTOS/Src/tasks.c ****         {
2171:FreeRTOS/Src/tasks.c ****             /* This is the case when the supplied buffer is not
2172:FreeRTOS/Src/tasks.c ****              * large to hold the generated string. Return the
2173:FreeRTOS/Src/tasks.c ****              * number of characters actually written without
2174:FreeRTOS/Src/tasks.c ****              * counting the terminating NULL character. */
2175:FreeRTOS/Src/tasks.c ****             uxCharsWritten = n - 1U;
2176:FreeRTOS/Src/tasks.c ****         }
2177:FreeRTOS/Src/tasks.c ****         else
2178:FreeRTOS/Src/tasks.c ****         {
2179:FreeRTOS/Src/tasks.c ****             /* Complete string was written to the buffer. */
2180:FreeRTOS/Src/tasks.c ****             uxCharsWritten = ( size_t ) iSnprintfReturnValue;
2181:FreeRTOS/Src/tasks.c ****         }
2182:FreeRTOS/Src/tasks.c **** 
2183:FreeRTOS/Src/tasks.c ****         return uxCharsWritten;
2184:FreeRTOS/Src/tasks.c ****     }
2185:FreeRTOS/Src/tasks.c **** 
2186:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
2187:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2188:FreeRTOS/Src/tasks.c **** 
2189:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2190:FreeRTOS/Src/tasks.c **** 
2191:FreeRTOS/Src/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
2192:FreeRTOS/Src/tasks.c ****     {
2193:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
2194:FreeRTOS/Src/tasks.c ****         BaseType_t xDeleteTCBInIdleTask = pdFALSE;
2195:FreeRTOS/Src/tasks.c ****         BaseType_t xTaskIsRunningOrYielding;
2196:FreeRTOS/Src/tasks.c **** 
2197:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskDelete( xTaskToDelete );
2198:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 40


2199:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
2200:FreeRTOS/Src/tasks.c ****         {
2201:FreeRTOS/Src/tasks.c ****             /* If null is passed in here then it is the calling task that is
2202:FreeRTOS/Src/tasks.c ****              * being deleted. */
2203:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
2204:FreeRTOS/Src/tasks.c **** 
2205:FreeRTOS/Src/tasks.c ****             /* Remove task from the ready/delayed list. */
2206:FreeRTOS/Src/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2207:FreeRTOS/Src/tasks.c ****             {
2208:FreeRTOS/Src/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2209:FreeRTOS/Src/tasks.c ****             }
2210:FreeRTOS/Src/tasks.c ****             else
2211:FreeRTOS/Src/tasks.c ****             {
2212:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2213:FreeRTOS/Src/tasks.c ****             }
2214:FreeRTOS/Src/tasks.c **** 
2215:FreeRTOS/Src/tasks.c ****             /* Is the task waiting on an event also? */
2216:FreeRTOS/Src/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2217:FreeRTOS/Src/tasks.c ****             {
2218:FreeRTOS/Src/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2219:FreeRTOS/Src/tasks.c ****             }
2220:FreeRTOS/Src/tasks.c ****             else
2221:FreeRTOS/Src/tasks.c ****             {
2222:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2223:FreeRTOS/Src/tasks.c ****             }
2224:FreeRTOS/Src/tasks.c **** 
2225:FreeRTOS/Src/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
2226:FreeRTOS/Src/tasks.c ****              * detect that the task lists need re-generating.  This is done before
2227:FreeRTOS/Src/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
2228:FreeRTOS/Src/tasks.c ****              * not return. */
2229:FreeRTOS/Src/tasks.c ****             uxTaskNumber++;
2230:FreeRTOS/Src/tasks.c **** 
2231:FreeRTOS/Src/tasks.c ****             /* Use temp variable as distinct sequence points for reading volatile
2232:FreeRTOS/Src/tasks.c ****              * variables prior to a logical operator to ensure compliance with
2233:FreeRTOS/Src/tasks.c ****              * MISRA C 2012 Rule 13.5. */
2234:FreeRTOS/Src/tasks.c ****             xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
2235:FreeRTOS/Src/tasks.c **** 
2236:FreeRTOS/Src/tasks.c ****             /* If the task is running (or yielding), we must add it to the
2237:FreeRTOS/Src/tasks.c ****              * termination list so that an idle task can delete it when it is
2238:FreeRTOS/Src/tasks.c ****              * no longer running. */
2239:FreeRTOS/Src/tasks.c ****             if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
2240:FreeRTOS/Src/tasks.c ****             {
2241:FreeRTOS/Src/tasks.c ****                 /* A running task or a task which is scheduled to yield is being
2242:FreeRTOS/Src/tasks.c ****                  * deleted. This cannot complete when the task is still running
2243:FreeRTOS/Src/tasks.c ****                  * on a core, as a context switch to another task is required.
2244:FreeRTOS/Src/tasks.c ****                  * Place the task in the termination list. The idle task will check
2245:FreeRTOS/Src/tasks.c ****                  * the termination list and free up any memory allocated by the
2246:FreeRTOS/Src/tasks.c ****                  * scheduler for the TCB and stack of the deleted task. */
2247:FreeRTOS/Src/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
2248:FreeRTOS/Src/tasks.c **** 
2249:FreeRTOS/Src/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
2250:FreeRTOS/Src/tasks.c ****                  * there is a task that has been deleted and that it should therefore
2251:FreeRTOS/Src/tasks.c ****                  * check the xTasksWaitingTermination list. */
2252:FreeRTOS/Src/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
2253:FreeRTOS/Src/tasks.c **** 
2254:FreeRTOS/Src/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
2255:FreeRTOS/Src/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 41


2256:FreeRTOS/Src/tasks.c ****                 traceTASK_DELETE( pxTCB );
2257:FreeRTOS/Src/tasks.c **** 
2258:FreeRTOS/Src/tasks.c ****                 /* Delete the task TCB in idle task. */
2259:FreeRTOS/Src/tasks.c ****                 xDeleteTCBInIdleTask = pdTRUE;
2260:FreeRTOS/Src/tasks.c **** 
2261:FreeRTOS/Src/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
2262:FreeRTOS/Src/tasks.c ****                  * in which Windows specific clean up operations are performed,
2263:FreeRTOS/Src/tasks.c ****                  * after which it is not possible to yield away from this task -
2264:FreeRTOS/Src/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
2265:FreeRTOS/Src/tasks.c ****                  * required. */
2266:FreeRTOS/Src/tasks.c ****                 #if ( configNUMBER_OF_CORES == 1 )
2267:FreeRTOS/Src/tasks.c ****                     portPRE_TASK_DELETE_HOOK( pxTCB, &( xYieldPendings[ 0 ] ) );
2268:FreeRTOS/Src/tasks.c ****                 #else
2269:FreeRTOS/Src/tasks.c ****                     portPRE_TASK_DELETE_HOOK( pxTCB, &( xYieldPendings[ pxTCB->xTaskRunState ] ) );
2270:FreeRTOS/Src/tasks.c ****                 #endif
2271:FreeRTOS/Src/tasks.c **** 
2272:FreeRTOS/Src/tasks.c ****                 /* In the case of SMP, it is possible that the task being deleted
2273:FreeRTOS/Src/tasks.c ****                  * is running on another core. We must evict the task before
2274:FreeRTOS/Src/tasks.c ****                  * exiting the critical section to ensure that the task cannot
2275:FreeRTOS/Src/tasks.c ****                  * take an action which puts it back on ready/state/event list,
2276:FreeRTOS/Src/tasks.c ****                  * thereby nullifying the delete operation. Once evicted, the
2277:FreeRTOS/Src/tasks.c ****                  * task won't be scheduled ever as it will no longer be on the
2278:FreeRTOS/Src/tasks.c ****                  * ready list. */
2279:FreeRTOS/Src/tasks.c ****                 #if ( configNUMBER_OF_CORES > 1 )
2280:FreeRTOS/Src/tasks.c ****                 {
2281:FreeRTOS/Src/tasks.c ****                     if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
2282:FreeRTOS/Src/tasks.c ****                     {
2283:FreeRTOS/Src/tasks.c ****                         if( pxTCB->xTaskRunState == ( BaseType_t ) portGET_CORE_ID() )
2284:FreeRTOS/Src/tasks.c ****                         {
2285:FreeRTOS/Src/tasks.c ****                             configASSERT( uxSchedulerSuspended == 0 );
2286:FreeRTOS/Src/tasks.c ****                             taskYIELD_WITHIN_API();
2287:FreeRTOS/Src/tasks.c ****                         }
2288:FreeRTOS/Src/tasks.c ****                         else
2289:FreeRTOS/Src/tasks.c ****                         {
2290:FreeRTOS/Src/tasks.c ****                             prvYieldCore( pxTCB->xTaskRunState );
2291:FreeRTOS/Src/tasks.c ****                         }
2292:FreeRTOS/Src/tasks.c ****                     }
2293:FreeRTOS/Src/tasks.c ****                 }
2294:FreeRTOS/Src/tasks.c ****                 #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
2295:FreeRTOS/Src/tasks.c ****             }
2296:FreeRTOS/Src/tasks.c ****             else
2297:FreeRTOS/Src/tasks.c ****             {
2298:FreeRTOS/Src/tasks.c ****                 --uxCurrentNumberOfTasks;
2299:FreeRTOS/Src/tasks.c ****                 traceTASK_DELETE( pxTCB );
2300:FreeRTOS/Src/tasks.c **** 
2301:FreeRTOS/Src/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
2302:FreeRTOS/Src/tasks.c ****                  * the task that has just been deleted. */
2303:FreeRTOS/Src/tasks.c ****                 prvResetNextTaskUnblockTime();
2304:FreeRTOS/Src/tasks.c ****             }
2305:FreeRTOS/Src/tasks.c ****         }
2306:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
2307:FreeRTOS/Src/tasks.c **** 
2308:FreeRTOS/Src/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
2309:FreeRTOS/Src/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
2310:FreeRTOS/Src/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
2311:FreeRTOS/Src/tasks.c ****         if( xDeleteTCBInIdleTask != pdTRUE )
2312:FreeRTOS/Src/tasks.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 42


2313:FreeRTOS/Src/tasks.c ****             prvDeleteTCB( pxTCB );
2314:FreeRTOS/Src/tasks.c ****         }
2315:FreeRTOS/Src/tasks.c **** 
2316:FreeRTOS/Src/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
2317:FreeRTOS/Src/tasks.c ****          * been deleted. */
2318:FreeRTOS/Src/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
2319:FreeRTOS/Src/tasks.c ****         {
2320:FreeRTOS/Src/tasks.c ****             if( xSchedulerRunning != pdFALSE )
2321:FreeRTOS/Src/tasks.c ****             {
2322:FreeRTOS/Src/tasks.c ****                 if( pxTCB == pxCurrentTCB )
2323:FreeRTOS/Src/tasks.c ****                 {
2324:FreeRTOS/Src/tasks.c ****                     configASSERT( uxSchedulerSuspended == 0 );
2325:FreeRTOS/Src/tasks.c ****                     taskYIELD_WITHIN_API();
2326:FreeRTOS/Src/tasks.c ****                 }
2327:FreeRTOS/Src/tasks.c ****                 else
2328:FreeRTOS/Src/tasks.c ****                 {
2329:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2330:FreeRTOS/Src/tasks.c ****                 }
2331:FreeRTOS/Src/tasks.c ****             }
2332:FreeRTOS/Src/tasks.c ****         }
2333:FreeRTOS/Src/tasks.c ****         #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
2334:FreeRTOS/Src/tasks.c **** 
2335:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskDelete();
2336:FreeRTOS/Src/tasks.c ****     }
2337:FreeRTOS/Src/tasks.c **** 
2338:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
2339:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2340:FreeRTOS/Src/tasks.c **** 
2341:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
2342:FreeRTOS/Src/tasks.c **** 
2343:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
2344:FreeRTOS/Src/tasks.c ****                                 const TickType_t xTimeIncrement )
2345:FreeRTOS/Src/tasks.c ****     {
2346:FreeRTOS/Src/tasks.c ****         TickType_t xTimeToWake;
2347:FreeRTOS/Src/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
2348:FreeRTOS/Src/tasks.c **** 
2349:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
2350:FreeRTOS/Src/tasks.c **** 
2351:FreeRTOS/Src/tasks.c ****         configASSERT( pxPreviousWakeTime );
2352:FreeRTOS/Src/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
2353:FreeRTOS/Src/tasks.c **** 
2354:FreeRTOS/Src/tasks.c ****         vTaskSuspendAll();
2355:FreeRTOS/Src/tasks.c ****         {
2356:FreeRTOS/Src/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
2357:FreeRTOS/Src/tasks.c ****              * block. */
2358:FreeRTOS/Src/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
2359:FreeRTOS/Src/tasks.c **** 
2360:FreeRTOS/Src/tasks.c ****             configASSERT( uxSchedulerSuspended == 1U );
2361:FreeRTOS/Src/tasks.c **** 
2362:FreeRTOS/Src/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
2363:FreeRTOS/Src/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
2364:FreeRTOS/Src/tasks.c **** 
2365:FreeRTOS/Src/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
2366:FreeRTOS/Src/tasks.c ****             {
2367:FreeRTOS/Src/tasks.c ****                 /* The tick count has overflowed since this function was
2368:FreeRTOS/Src/tasks.c ****                  * lasted called.  In this case the only time we should ever
2369:FreeRTOS/Src/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 43


2370:FreeRTOS/Src/tasks.c ****                  * and the wake time is greater than the tick time.  When this
2371:FreeRTOS/Src/tasks.c ****                  * is the case it is as if neither time had overflowed. */
2372:FreeRTOS/Src/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
2373:FreeRTOS/Src/tasks.c ****                 {
2374:FreeRTOS/Src/tasks.c ****                     xShouldDelay = pdTRUE;
2375:FreeRTOS/Src/tasks.c ****                 }
2376:FreeRTOS/Src/tasks.c ****                 else
2377:FreeRTOS/Src/tasks.c ****                 {
2378:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2379:FreeRTOS/Src/tasks.c ****                 }
2380:FreeRTOS/Src/tasks.c ****             }
2381:FreeRTOS/Src/tasks.c ****             else
2382:FreeRTOS/Src/tasks.c ****             {
2383:FreeRTOS/Src/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
2384:FreeRTOS/Src/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
2385:FreeRTOS/Src/tasks.c ****                  * tick time is less than the wake time. */
2386:FreeRTOS/Src/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
2387:FreeRTOS/Src/tasks.c ****                 {
2388:FreeRTOS/Src/tasks.c ****                     xShouldDelay = pdTRUE;
2389:FreeRTOS/Src/tasks.c ****                 }
2390:FreeRTOS/Src/tasks.c ****                 else
2391:FreeRTOS/Src/tasks.c ****                 {
2392:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2393:FreeRTOS/Src/tasks.c ****                 }
2394:FreeRTOS/Src/tasks.c ****             }
2395:FreeRTOS/Src/tasks.c **** 
2396:FreeRTOS/Src/tasks.c ****             /* Update the wake time ready for the next call. */
2397:FreeRTOS/Src/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
2398:FreeRTOS/Src/tasks.c **** 
2399:FreeRTOS/Src/tasks.c ****             if( xShouldDelay != pdFALSE )
2400:FreeRTOS/Src/tasks.c ****             {
2401:FreeRTOS/Src/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
2402:FreeRTOS/Src/tasks.c **** 
2403:FreeRTOS/Src/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
2404:FreeRTOS/Src/tasks.c ****                  * the time to wake, so subtract the current tick count. */
2405:FreeRTOS/Src/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
2406:FreeRTOS/Src/tasks.c ****             }
2407:FreeRTOS/Src/tasks.c ****             else
2408:FreeRTOS/Src/tasks.c ****             {
2409:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2410:FreeRTOS/Src/tasks.c ****             }
2411:FreeRTOS/Src/tasks.c ****         }
2412:FreeRTOS/Src/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
2413:FreeRTOS/Src/tasks.c **** 
2414:FreeRTOS/Src/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
2415:FreeRTOS/Src/tasks.c ****          * have put ourselves to sleep. */
2416:FreeRTOS/Src/tasks.c ****         if( xAlreadyYielded == pdFALSE )
2417:FreeRTOS/Src/tasks.c ****         {
2418:FreeRTOS/Src/tasks.c ****             taskYIELD_WITHIN_API();
2419:FreeRTOS/Src/tasks.c ****         }
2420:FreeRTOS/Src/tasks.c ****         else
2421:FreeRTOS/Src/tasks.c ****         {
2422:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2423:FreeRTOS/Src/tasks.c ****         }
2424:FreeRTOS/Src/tasks.c **** 
2425:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskDelayUntil( xShouldDelay );
2426:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 44


2427:FreeRTOS/Src/tasks.c ****         return xShouldDelay;
2428:FreeRTOS/Src/tasks.c ****     }
2429:FreeRTOS/Src/tasks.c **** 
2430:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
2431:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2432:FreeRTOS/Src/tasks.c **** 
2433:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
2434:FreeRTOS/Src/tasks.c **** 
2435:FreeRTOS/Src/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
2436:FreeRTOS/Src/tasks.c ****     {
2437:FreeRTOS/Src/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
2438:FreeRTOS/Src/tasks.c **** 
2439:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskDelay( xTicksToDelay );
2440:FreeRTOS/Src/tasks.c **** 
2441:FreeRTOS/Src/tasks.c ****         /* A delay time of zero just forces a reschedule. */
2442:FreeRTOS/Src/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
2443:FreeRTOS/Src/tasks.c ****         {
2444:FreeRTOS/Src/tasks.c ****             vTaskSuspendAll();
2445:FreeRTOS/Src/tasks.c ****             {
2446:FreeRTOS/Src/tasks.c ****                 configASSERT( uxSchedulerSuspended == 1U );
2447:FreeRTOS/Src/tasks.c **** 
2448:FreeRTOS/Src/tasks.c ****                 traceTASK_DELAY();
2449:FreeRTOS/Src/tasks.c **** 
2450:FreeRTOS/Src/tasks.c ****                 /* A task that is removed from the event list while the
2451:FreeRTOS/Src/tasks.c ****                  * scheduler is suspended will not get placed in the ready
2452:FreeRTOS/Src/tasks.c ****                  * list or removed from the blocked list until the scheduler
2453:FreeRTOS/Src/tasks.c ****                  * is resumed.
2454:FreeRTOS/Src/tasks.c ****                  *
2455:FreeRTOS/Src/tasks.c ****                  * This task cannot be in an event list as it is the currently
2456:FreeRTOS/Src/tasks.c ****                  * executing task. */
2457:FreeRTOS/Src/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
2458:FreeRTOS/Src/tasks.c ****             }
2459:FreeRTOS/Src/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
2460:FreeRTOS/Src/tasks.c ****         }
2461:FreeRTOS/Src/tasks.c ****         else
2462:FreeRTOS/Src/tasks.c ****         {
2463:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2464:FreeRTOS/Src/tasks.c ****         }
2465:FreeRTOS/Src/tasks.c **** 
2466:FreeRTOS/Src/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
2467:FreeRTOS/Src/tasks.c ****          * have put ourselves to sleep. */
2468:FreeRTOS/Src/tasks.c ****         if( xAlreadyYielded == pdFALSE )
2469:FreeRTOS/Src/tasks.c ****         {
2470:FreeRTOS/Src/tasks.c ****             taskYIELD_WITHIN_API();
2471:FreeRTOS/Src/tasks.c ****         }
2472:FreeRTOS/Src/tasks.c ****         else
2473:FreeRTOS/Src/tasks.c ****         {
2474:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2475:FreeRTOS/Src/tasks.c ****         }
2476:FreeRTOS/Src/tasks.c **** 
2477:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskDelay();
2478:FreeRTOS/Src/tasks.c ****     }
2479:FreeRTOS/Src/tasks.c **** 
2480:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_vTaskDelay */
2481:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2482:FreeRTOS/Src/tasks.c **** 
2483:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 45


2484:FreeRTOS/Src/tasks.c **** 
2485:FreeRTOS/Src/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
2486:FreeRTOS/Src/tasks.c ****     {
2487:FreeRTOS/Src/tasks.c ****         eTaskState eReturn;
2488:FreeRTOS/Src/tasks.c ****         List_t const * pxStateList;
2489:FreeRTOS/Src/tasks.c ****         List_t const * pxEventList;
2490:FreeRTOS/Src/tasks.c ****         List_t const * pxDelayedList;
2491:FreeRTOS/Src/tasks.c ****         List_t const * pxOverflowedDelayedList;
2492:FreeRTOS/Src/tasks.c ****         const TCB_t * const pxTCB = xTask;
2493:FreeRTOS/Src/tasks.c **** 
2494:FreeRTOS/Src/tasks.c ****         traceENTER_eTaskGetState( xTask );
2495:FreeRTOS/Src/tasks.c **** 
2496:FreeRTOS/Src/tasks.c ****         configASSERT( pxTCB );
2497:FreeRTOS/Src/tasks.c **** 
2498:FreeRTOS/Src/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
2499:FreeRTOS/Src/tasks.c ****             if( pxTCB == pxCurrentTCB )
2500:FreeRTOS/Src/tasks.c ****             {
2501:FreeRTOS/Src/tasks.c ****                 /* The task calling this function is querying its own state. */
2502:FreeRTOS/Src/tasks.c ****                 eReturn = eRunning;
2503:FreeRTOS/Src/tasks.c ****             }
2504:FreeRTOS/Src/tasks.c ****             else
2505:FreeRTOS/Src/tasks.c ****         #endif
2506:FreeRTOS/Src/tasks.c ****         {
2507:FreeRTOS/Src/tasks.c ****             taskENTER_CRITICAL();
2508:FreeRTOS/Src/tasks.c ****             {
2509:FreeRTOS/Src/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
2510:FreeRTOS/Src/tasks.c ****                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
2511:FreeRTOS/Src/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
2512:FreeRTOS/Src/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
2513:FreeRTOS/Src/tasks.c ****             }
2514:FreeRTOS/Src/tasks.c ****             taskEXIT_CRITICAL();
2515:FreeRTOS/Src/tasks.c **** 
2516:FreeRTOS/Src/tasks.c ****             if( pxEventList == &xPendingReadyList )
2517:FreeRTOS/Src/tasks.c ****             {
2518:FreeRTOS/Src/tasks.c ****                 /* The task has been placed on the pending ready list, so its
2519:FreeRTOS/Src/tasks.c ****                  * state is eReady regardless of what list the task's state list
2520:FreeRTOS/Src/tasks.c ****                  * item is currently placed on. */
2521:FreeRTOS/Src/tasks.c ****                 eReturn = eReady;
2522:FreeRTOS/Src/tasks.c ****             }
2523:FreeRTOS/Src/tasks.c ****             else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList )
2524:FreeRTOS/Src/tasks.c ****             {
2525:FreeRTOS/Src/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
2526:FreeRTOS/Src/tasks.c ****                  * lists. */
2527:FreeRTOS/Src/tasks.c ****                 eReturn = eBlocked;
2528:FreeRTOS/Src/tasks.c ****             }
2529:FreeRTOS/Src/tasks.c **** 
2530:FreeRTOS/Src/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2531:FreeRTOS/Src/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
2532:FreeRTOS/Src/tasks.c ****                 {
2533:FreeRTOS/Src/tasks.c ****                     /* The task being queried is referenced from the suspended
2534:FreeRTOS/Src/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
2535:FreeRTOS/Src/tasks.c ****                      * indefinitely? */
2536:FreeRTOS/Src/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
2537:FreeRTOS/Src/tasks.c ****                     {
2538:FreeRTOS/Src/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
2539:FreeRTOS/Src/tasks.c ****                         {
2540:FreeRTOS/Src/tasks.c ****                             BaseType_t x;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 46


2541:FreeRTOS/Src/tasks.c **** 
2542:FreeRTOS/Src/tasks.c ****                             /* The task does not appear on the event list item of
2543:FreeRTOS/Src/tasks.c ****                              * and of the RTOS objects, but could still be in the
2544:FreeRTOS/Src/tasks.c ****                              * blocked state if it is waiting on its notification
2545:FreeRTOS/Src/tasks.c ****                              * rather than waiting on an object.  If not, is
2546:FreeRTOS/Src/tasks.c ****                              * suspended. */
2547:FreeRTOS/Src/tasks.c ****                             eReturn = eSuspended;
2548:FreeRTOS/Src/tasks.c **** 
2549:FreeRTOS/Src/tasks.c ****                             for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_A
2550:FreeRTOS/Src/tasks.c ****                             {
2551:FreeRTOS/Src/tasks.c ****                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
2552:FreeRTOS/Src/tasks.c ****                                 {
2553:FreeRTOS/Src/tasks.c ****                                     eReturn = eBlocked;
2554:FreeRTOS/Src/tasks.c ****                                     break;
2555:FreeRTOS/Src/tasks.c ****                                 }
2556:FreeRTOS/Src/tasks.c ****                             }
2557:FreeRTOS/Src/tasks.c ****                         }
2558:FreeRTOS/Src/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
2559:FreeRTOS/Src/tasks.c ****                         {
2560:FreeRTOS/Src/tasks.c ****                             eReturn = eSuspended;
2561:FreeRTOS/Src/tasks.c ****                         }
2562:FreeRTOS/Src/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
2563:FreeRTOS/Src/tasks.c ****                     }
2564:FreeRTOS/Src/tasks.c ****                     else
2565:FreeRTOS/Src/tasks.c ****                     {
2566:FreeRTOS/Src/tasks.c ****                         eReturn = eBlocked;
2567:FreeRTOS/Src/tasks.c ****                     }
2568:FreeRTOS/Src/tasks.c ****                 }
2569:FreeRTOS/Src/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
2570:FreeRTOS/Src/tasks.c **** 
2571:FreeRTOS/Src/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2572:FreeRTOS/Src/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
2573:FreeRTOS/Src/tasks.c ****                 {
2574:FreeRTOS/Src/tasks.c ****                     /* The task being queried is referenced from the deleted
2575:FreeRTOS/Src/tasks.c ****                      * tasks list, or it is not referenced from any lists at
2576:FreeRTOS/Src/tasks.c ****                      * all. */
2577:FreeRTOS/Src/tasks.c ****                     eReturn = eDeleted;
2578:FreeRTOS/Src/tasks.c ****                 }
2579:FreeRTOS/Src/tasks.c ****             #endif
2580:FreeRTOS/Src/tasks.c **** 
2581:FreeRTOS/Src/tasks.c ****             else
2582:FreeRTOS/Src/tasks.c ****             {
2583:FreeRTOS/Src/tasks.c ****                 #if ( configNUMBER_OF_CORES == 1 )
2584:FreeRTOS/Src/tasks.c ****                 {
2585:FreeRTOS/Src/tasks.c ****                     /* If the task is not in any other state, it must be in the
2586:FreeRTOS/Src/tasks.c ****                      * Ready (including pending ready) state. */
2587:FreeRTOS/Src/tasks.c ****                     eReturn = eReady;
2588:FreeRTOS/Src/tasks.c ****                 }
2589:FreeRTOS/Src/tasks.c ****                 #else /* #if ( configNUMBER_OF_CORES == 1 ) */
2590:FreeRTOS/Src/tasks.c ****                 {
2591:FreeRTOS/Src/tasks.c ****                     if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
2592:FreeRTOS/Src/tasks.c ****                     {
2593:FreeRTOS/Src/tasks.c ****                         /* Is it actively running on a core? */
2594:FreeRTOS/Src/tasks.c ****                         eReturn = eRunning;
2595:FreeRTOS/Src/tasks.c ****                     }
2596:FreeRTOS/Src/tasks.c ****                     else
2597:FreeRTOS/Src/tasks.c ****                     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 47


2598:FreeRTOS/Src/tasks.c ****                         /* If the task is not in any other state, it must be in the
2599:FreeRTOS/Src/tasks.c ****                          * Ready (including pending ready) state. */
2600:FreeRTOS/Src/tasks.c ****                         eReturn = eReady;
2601:FreeRTOS/Src/tasks.c ****                     }
2602:FreeRTOS/Src/tasks.c ****                 }
2603:FreeRTOS/Src/tasks.c ****                 #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
2604:FreeRTOS/Src/tasks.c ****             }
2605:FreeRTOS/Src/tasks.c ****         }
2606:FreeRTOS/Src/tasks.c **** 
2607:FreeRTOS/Src/tasks.c ****         traceRETURN_eTaskGetState( eReturn );
2608:FreeRTOS/Src/tasks.c **** 
2609:FreeRTOS/Src/tasks.c ****         return eReturn;
2610:FreeRTOS/Src/tasks.c ****     }
2611:FreeRTOS/Src/tasks.c **** 
2612:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_eTaskGetState */
2613:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2614:FreeRTOS/Src/tasks.c **** 
2615:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
2616:FreeRTOS/Src/tasks.c **** 
2617:FreeRTOS/Src/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
2618:FreeRTOS/Src/tasks.c ****     {
2619:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
2620:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
2621:FreeRTOS/Src/tasks.c **** 
2622:FreeRTOS/Src/tasks.c ****         traceENTER_uxTaskPriorityGet( xTask );
2623:FreeRTOS/Src/tasks.c **** 
2624:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
2625:FreeRTOS/Src/tasks.c ****         {
2626:FreeRTOS/Src/tasks.c ****             /* If null is passed in here then it is the priority of the task
2627:FreeRTOS/Src/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
2628:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2629:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
2630:FreeRTOS/Src/tasks.c ****         }
2631:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
2632:FreeRTOS/Src/tasks.c **** 
2633:FreeRTOS/Src/tasks.c ****         traceRETURN_uxTaskPriorityGet( uxReturn );
2634:FreeRTOS/Src/tasks.c **** 
2635:FreeRTOS/Src/tasks.c ****         return uxReturn;
2636:FreeRTOS/Src/tasks.c ****     }
2637:FreeRTOS/Src/tasks.c **** 
2638:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
2639:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2640:FreeRTOS/Src/tasks.c **** 
2641:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
2642:FreeRTOS/Src/tasks.c **** 
2643:FreeRTOS/Src/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
2644:FreeRTOS/Src/tasks.c ****     {
2645:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
2646:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
2647:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2648:FreeRTOS/Src/tasks.c **** 
2649:FreeRTOS/Src/tasks.c ****         traceENTER_uxTaskPriorityGetFromISR( xTask );
2650:FreeRTOS/Src/tasks.c **** 
2651:FreeRTOS/Src/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
2652:FreeRTOS/Src/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
2653:FreeRTOS/Src/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
2654:FreeRTOS/Src/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 48


2655:FreeRTOS/Src/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
2656:FreeRTOS/Src/tasks.c ****          * is defined in FreeRTOSConfig.h then
2657:FreeRTOS/Src/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2658:FreeRTOS/Src/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
2659:FreeRTOS/Src/tasks.c ****          * been assigned a priority above the configured maximum system call
2660:FreeRTOS/Src/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
2661:FreeRTOS/Src/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
2662:FreeRTOS/Src/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
2663:FreeRTOS/Src/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
2664:FreeRTOS/Src/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
2665:FreeRTOS/Src/tasks.c ****          * provided on the following link:
2666:FreeRTOS/Src/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2667:FreeRTOS/Src/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2668:FreeRTOS/Src/tasks.c **** 
2669:FreeRTOS/Src/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
2670:FreeRTOS/Src/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
2671:FreeRTOS/Src/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
2672:FreeRTOS/Src/tasks.c ****         uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
2673:FreeRTOS/Src/tasks.c ****         {
2674:FreeRTOS/Src/tasks.c ****             /* If null is passed in here then it is the priority of the calling
2675:FreeRTOS/Src/tasks.c ****              * task that is being queried. */
2676:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2677:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
2678:FreeRTOS/Src/tasks.c ****         }
2679:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
2680:FreeRTOS/Src/tasks.c **** 
2681:FreeRTOS/Src/tasks.c ****         traceRETURN_uxTaskPriorityGetFromISR( uxReturn );
2682:FreeRTOS/Src/tasks.c **** 
2683:FreeRTOS/Src/tasks.c ****         return uxReturn;
2684:FreeRTOS/Src/tasks.c ****     }
2685:FreeRTOS/Src/tasks.c **** 
2686:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
2687:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2688:FreeRTOS/Src/tasks.c **** 
2689:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) )
2690:FreeRTOS/Src/tasks.c **** 
2691:FreeRTOS/Src/tasks.c ****     UBaseType_t uxTaskBasePriorityGet( const TaskHandle_t xTask )
2692:FreeRTOS/Src/tasks.c ****     {
2693:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
2694:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
2695:FreeRTOS/Src/tasks.c **** 
2696:FreeRTOS/Src/tasks.c ****         traceENTER_uxTaskBasePriorityGet( xTask );
2697:FreeRTOS/Src/tasks.c **** 
2698:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
2699:FreeRTOS/Src/tasks.c ****         {
2700:FreeRTOS/Src/tasks.c ****             /* If null is passed in here then it is the base priority of the task
2701:FreeRTOS/Src/tasks.c ****              * that called uxTaskBasePriorityGet() that is being queried. */
2702:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2703:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
2704:FreeRTOS/Src/tasks.c ****         }
2705:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
2706:FreeRTOS/Src/tasks.c **** 
2707:FreeRTOS/Src/tasks.c ****         traceRETURN_uxTaskBasePriorityGet( uxReturn );
2708:FreeRTOS/Src/tasks.c **** 
2709:FreeRTOS/Src/tasks.c ****         return uxReturn;
2710:FreeRTOS/Src/tasks.c ****     }
2711:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 49


2712:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) ) */
2713:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2714:FreeRTOS/Src/tasks.c **** 
2715:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) )
2716:FreeRTOS/Src/tasks.c **** 
2717:FreeRTOS/Src/tasks.c ****     UBaseType_t uxTaskBasePriorityGetFromISR( const TaskHandle_t xTask )
2718:FreeRTOS/Src/tasks.c ****     {
2719:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
2720:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
2721:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2722:FreeRTOS/Src/tasks.c **** 
2723:FreeRTOS/Src/tasks.c ****         traceENTER_uxTaskBasePriorityGetFromISR( xTask );
2724:FreeRTOS/Src/tasks.c **** 
2725:FreeRTOS/Src/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
2726:FreeRTOS/Src/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
2727:FreeRTOS/Src/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
2728:FreeRTOS/Src/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
2729:FreeRTOS/Src/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
2730:FreeRTOS/Src/tasks.c ****          * is defined in FreeRTOSConfig.h then
2731:FreeRTOS/Src/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2732:FreeRTOS/Src/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
2733:FreeRTOS/Src/tasks.c ****          * been assigned a priority above the configured maximum system call
2734:FreeRTOS/Src/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
2735:FreeRTOS/Src/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
2736:FreeRTOS/Src/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
2737:FreeRTOS/Src/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
2738:FreeRTOS/Src/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
2739:FreeRTOS/Src/tasks.c ****          * provided on the following link:
2740:FreeRTOS/Src/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2741:FreeRTOS/Src/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2742:FreeRTOS/Src/tasks.c **** 
2743:FreeRTOS/Src/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
2744:FreeRTOS/Src/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
2745:FreeRTOS/Src/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
2746:FreeRTOS/Src/tasks.c ****         uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
2747:FreeRTOS/Src/tasks.c ****         {
2748:FreeRTOS/Src/tasks.c ****             /* If null is passed in here then it is the base priority of the calling
2749:FreeRTOS/Src/tasks.c ****              * task that is being queried. */
2750:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2751:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
2752:FreeRTOS/Src/tasks.c ****         }
2753:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
2754:FreeRTOS/Src/tasks.c **** 
2755:FreeRTOS/Src/tasks.c ****         traceRETURN_uxTaskBasePriorityGetFromISR( uxReturn );
2756:FreeRTOS/Src/tasks.c **** 
2757:FreeRTOS/Src/tasks.c ****         return uxReturn;
2758:FreeRTOS/Src/tasks.c ****     }
2759:FreeRTOS/Src/tasks.c **** 
2760:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) ) */
2761:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2762:FreeRTOS/Src/tasks.c **** 
2763:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
2764:FreeRTOS/Src/tasks.c **** 
2765:FreeRTOS/Src/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
2766:FreeRTOS/Src/tasks.c ****                            UBaseType_t uxNewPriority )
2767:FreeRTOS/Src/tasks.c ****     {
2768:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 50


2769:FreeRTOS/Src/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
2770:FreeRTOS/Src/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
2771:FreeRTOS/Src/tasks.c **** 
2772:FreeRTOS/Src/tasks.c ****         #if ( configNUMBER_OF_CORES > 1 )
2773:FreeRTOS/Src/tasks.c ****             BaseType_t xYieldForTask = pdFALSE;
2774:FreeRTOS/Src/tasks.c ****         #endif
2775:FreeRTOS/Src/tasks.c **** 
2776:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskPrioritySet( xTask, uxNewPriority );
2777:FreeRTOS/Src/tasks.c **** 
2778:FreeRTOS/Src/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
2779:FreeRTOS/Src/tasks.c **** 
2780:FreeRTOS/Src/tasks.c ****         /* Ensure the new priority is valid. */
2781:FreeRTOS/Src/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2782:FreeRTOS/Src/tasks.c ****         {
2783:FreeRTOS/Src/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
2784:FreeRTOS/Src/tasks.c ****         }
2785:FreeRTOS/Src/tasks.c ****         else
2786:FreeRTOS/Src/tasks.c ****         {
2787:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2788:FreeRTOS/Src/tasks.c ****         }
2789:FreeRTOS/Src/tasks.c **** 
2790:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
2791:FreeRTOS/Src/tasks.c ****         {
2792:FreeRTOS/Src/tasks.c ****             /* If null is passed in here then it is the priority of the calling
2793:FreeRTOS/Src/tasks.c ****              * task that is being changed. */
2794:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2795:FreeRTOS/Src/tasks.c **** 
2796:FreeRTOS/Src/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
2797:FreeRTOS/Src/tasks.c **** 
2798:FreeRTOS/Src/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
2799:FreeRTOS/Src/tasks.c ****             {
2800:FreeRTOS/Src/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxBasePriority;
2801:FreeRTOS/Src/tasks.c ****             }
2802:FreeRTOS/Src/tasks.c ****             #else
2803:FreeRTOS/Src/tasks.c ****             {
2804:FreeRTOS/Src/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxPriority;
2805:FreeRTOS/Src/tasks.c ****             }
2806:FreeRTOS/Src/tasks.c ****             #endif
2807:FreeRTOS/Src/tasks.c **** 
2808:FreeRTOS/Src/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
2809:FreeRTOS/Src/tasks.c ****             {
2810:FreeRTOS/Src/tasks.c ****                 /* The priority change may have readied a task of higher
2811:FreeRTOS/Src/tasks.c ****                  * priority than a running task. */
2812:FreeRTOS/Src/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
2813:FreeRTOS/Src/tasks.c ****                 {
2814:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES == 1 )
2815:FreeRTOS/Src/tasks.c ****                     {
2816:FreeRTOS/Src/tasks.c ****                         if( pxTCB != pxCurrentTCB )
2817:FreeRTOS/Src/tasks.c ****                         {
2818:FreeRTOS/Src/tasks.c ****                             /* The priority of a task other than the currently
2819:FreeRTOS/Src/tasks.c ****                              * running task is being raised.  Is the priority being
2820:FreeRTOS/Src/tasks.c ****                              * raised above that of the running task? */
2821:FreeRTOS/Src/tasks.c ****                             if( uxNewPriority > pxCurrentTCB->uxPriority )
2822:FreeRTOS/Src/tasks.c ****                             {
2823:FreeRTOS/Src/tasks.c ****                                 xYieldRequired = pdTRUE;
2824:FreeRTOS/Src/tasks.c ****                             }
2825:FreeRTOS/Src/tasks.c ****                             else
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 51


2826:FreeRTOS/Src/tasks.c ****                             {
2827:FreeRTOS/Src/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2828:FreeRTOS/Src/tasks.c ****                             }
2829:FreeRTOS/Src/tasks.c ****                         }
2830:FreeRTOS/Src/tasks.c ****                         else
2831:FreeRTOS/Src/tasks.c ****                         {
2832:FreeRTOS/Src/tasks.c ****                             /* The priority of the running task is being raised,
2833:FreeRTOS/Src/tasks.c ****                              * but the running task must already be the highest
2834:FreeRTOS/Src/tasks.c ****                              * priority task able to run so no yield is required. */
2835:FreeRTOS/Src/tasks.c ****                         }
2836:FreeRTOS/Src/tasks.c ****                     }
2837:FreeRTOS/Src/tasks.c ****                     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
2838:FreeRTOS/Src/tasks.c ****                     {
2839:FreeRTOS/Src/tasks.c ****                         /* The priority of a task is being raised so
2840:FreeRTOS/Src/tasks.c ****                          * perform a yield for this task later. */
2841:FreeRTOS/Src/tasks.c ****                         xYieldForTask = pdTRUE;
2842:FreeRTOS/Src/tasks.c ****                     }
2843:FreeRTOS/Src/tasks.c ****                     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
2844:FreeRTOS/Src/tasks.c ****                 }
2845:FreeRTOS/Src/tasks.c ****                 else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
2846:FreeRTOS/Src/tasks.c ****                 {
2847:FreeRTOS/Src/tasks.c ****                     /* Setting the priority of a running task down means
2848:FreeRTOS/Src/tasks.c ****                      * there may now be another task of higher priority that
2849:FreeRTOS/Src/tasks.c ****                      * is ready to execute. */
2850:FreeRTOS/Src/tasks.c ****                     #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
2851:FreeRTOS/Src/tasks.c ****                         if( pxTCB->xPreemptionDisable == pdFALSE )
2852:FreeRTOS/Src/tasks.c ****                     #endif
2853:FreeRTOS/Src/tasks.c ****                     {
2854:FreeRTOS/Src/tasks.c ****                         xYieldRequired = pdTRUE;
2855:FreeRTOS/Src/tasks.c ****                     }
2856:FreeRTOS/Src/tasks.c ****                 }
2857:FreeRTOS/Src/tasks.c ****                 else
2858:FreeRTOS/Src/tasks.c ****                 {
2859:FreeRTOS/Src/tasks.c ****                     /* Setting the priority of any other task down does not
2860:FreeRTOS/Src/tasks.c ****                      * require a yield as the running task must be above the
2861:FreeRTOS/Src/tasks.c ****                      * new priority of the task being modified. */
2862:FreeRTOS/Src/tasks.c ****                 }
2863:FreeRTOS/Src/tasks.c **** 
2864:FreeRTOS/Src/tasks.c ****                 /* Remember the ready list the task might be referenced from
2865:FreeRTOS/Src/tasks.c ****                  * before its uxPriority member is changed so the
2866:FreeRTOS/Src/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
2867:FreeRTOS/Src/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
2868:FreeRTOS/Src/tasks.c **** 
2869:FreeRTOS/Src/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
2870:FreeRTOS/Src/tasks.c ****                 {
2871:FreeRTOS/Src/tasks.c ****                     /* Only change the priority being used if the task is not
2872:FreeRTOS/Src/tasks.c ****                      * currently using an inherited priority or the new priority
2873:FreeRTOS/Src/tasks.c ****                      * is bigger than the inherited priority. */
2874:FreeRTOS/Src/tasks.c ****                     if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->
2875:FreeRTOS/Src/tasks.c ****                     {
2876:FreeRTOS/Src/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
2877:FreeRTOS/Src/tasks.c ****                     }
2878:FreeRTOS/Src/tasks.c ****                     else
2879:FreeRTOS/Src/tasks.c ****                     {
2880:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2881:FreeRTOS/Src/tasks.c ****                     }
2882:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 52


2883:FreeRTOS/Src/tasks.c ****                     /* The base priority gets set whatever. */
2884:FreeRTOS/Src/tasks.c ****                     pxTCB->uxBasePriority = uxNewPriority;
2885:FreeRTOS/Src/tasks.c ****                 }
2886:FreeRTOS/Src/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
2887:FreeRTOS/Src/tasks.c ****                 {
2888:FreeRTOS/Src/tasks.c ****                     pxTCB->uxPriority = uxNewPriority;
2889:FreeRTOS/Src/tasks.c ****                 }
2890:FreeRTOS/Src/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
2891:FreeRTOS/Src/tasks.c **** 
2892:FreeRTOS/Src/tasks.c ****                 /* Only reset the event list item value if the value is not
2893:FreeRTOS/Src/tasks.c ****                  * being used for anything else. */
2894:FreeRTOS/Src/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
2895:FreeRTOS/Src/tasks.c ****                 {
2896:FreeRTOS/Src/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
2897:FreeRTOS/Src/tasks.c ****                 }
2898:FreeRTOS/Src/tasks.c ****                 else
2899:FreeRTOS/Src/tasks.c ****                 {
2900:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2901:FreeRTOS/Src/tasks.c ****                 }
2902:FreeRTOS/Src/tasks.c **** 
2903:FreeRTOS/Src/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
2904:FreeRTOS/Src/tasks.c ****                  * nothing more than change its priority variable. However, if
2905:FreeRTOS/Src/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
2906:FreeRTOS/Src/tasks.c ****                  * in the list appropriate to its new priority. */
2907:FreeRTOS/Src/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
2908:FreeRTOS/Src/tasks.c ****                 {
2909:FreeRTOS/Src/tasks.c ****                     /* The task is currently in its ready list - remove before
2910:FreeRTOS/Src/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
2911:FreeRTOS/Src/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
2912:FreeRTOS/Src/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2913:FreeRTOS/Src/tasks.c ****                     {
2914:FreeRTOS/Src/tasks.c ****                         /* It is known that the task is in its ready list so
2915:FreeRTOS/Src/tasks.c ****                          * there is no need to check again and the port level
2916:FreeRTOS/Src/tasks.c ****                          * reset macro can be called directly. */
2917:FreeRTOS/Src/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
2918:FreeRTOS/Src/tasks.c ****                     }
2919:FreeRTOS/Src/tasks.c ****                     else
2920:FreeRTOS/Src/tasks.c ****                     {
2921:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2922:FreeRTOS/Src/tasks.c ****                     }
2923:FreeRTOS/Src/tasks.c **** 
2924:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2925:FreeRTOS/Src/tasks.c ****                 }
2926:FreeRTOS/Src/tasks.c ****                 else
2927:FreeRTOS/Src/tasks.c ****                 {
2928:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES == 1 )
2929:FreeRTOS/Src/tasks.c ****                     {
2930:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2931:FreeRTOS/Src/tasks.c ****                     }
2932:FreeRTOS/Src/tasks.c ****                     #else
2933:FreeRTOS/Src/tasks.c ****                     {
2934:FreeRTOS/Src/tasks.c ****                         /* It's possible that xYieldForTask was already set to pdTRUE because
2935:FreeRTOS/Src/tasks.c ****                          * its priority is being raised. However, since it is not in a ready list
2936:FreeRTOS/Src/tasks.c ****                          * we don't actually need to yield for it. */
2937:FreeRTOS/Src/tasks.c ****                         xYieldForTask = pdFALSE;
2938:FreeRTOS/Src/tasks.c ****                     }
2939:FreeRTOS/Src/tasks.c ****                     #endif
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 53


2940:FreeRTOS/Src/tasks.c ****                 }
2941:FreeRTOS/Src/tasks.c **** 
2942:FreeRTOS/Src/tasks.c ****                 if( xYieldRequired != pdFALSE )
2943:FreeRTOS/Src/tasks.c ****                 {
2944:FreeRTOS/Src/tasks.c ****                     /* The running task priority is set down. Request the task to yield. */
2945:FreeRTOS/Src/tasks.c ****                     taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
2946:FreeRTOS/Src/tasks.c ****                 }
2947:FreeRTOS/Src/tasks.c ****                 else
2948:FreeRTOS/Src/tasks.c ****                 {
2949:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
2950:FreeRTOS/Src/tasks.c ****                         if( xYieldForTask != pdFALSE )
2951:FreeRTOS/Src/tasks.c ****                         {
2952:FreeRTOS/Src/tasks.c ****                             /* The priority of the task is being raised. If a running
2953:FreeRTOS/Src/tasks.c ****                              * task has priority lower than this task, it should yield
2954:FreeRTOS/Src/tasks.c ****                              * for this task. */
2955:FreeRTOS/Src/tasks.c ****                             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
2956:FreeRTOS/Src/tasks.c ****                         }
2957:FreeRTOS/Src/tasks.c ****                         else
2958:FreeRTOS/Src/tasks.c ****                     #endif /* if ( configNUMBER_OF_CORES > 1 ) */
2959:FreeRTOS/Src/tasks.c ****                     {
2960:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2961:FreeRTOS/Src/tasks.c ****                     }
2962:FreeRTOS/Src/tasks.c ****                 }
2963:FreeRTOS/Src/tasks.c **** 
2964:FreeRTOS/Src/tasks.c ****                 /* Remove compiler warning about unused variables when the port
2965:FreeRTOS/Src/tasks.c ****                  * optimised task selection is not being used. */
2966:FreeRTOS/Src/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
2967:FreeRTOS/Src/tasks.c ****             }
2968:FreeRTOS/Src/tasks.c ****         }
2969:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
2970:FreeRTOS/Src/tasks.c **** 
2971:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskPrioritySet();
2972:FreeRTOS/Src/tasks.c ****     }
2973:FreeRTOS/Src/tasks.c **** 
2974:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
2975:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2976:FreeRTOS/Src/tasks.c **** 
2977:FreeRTOS/Src/tasks.c **** #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
2978:FreeRTOS/Src/tasks.c ****     void vTaskCoreAffinitySet( const TaskHandle_t xTask,
2979:FreeRTOS/Src/tasks.c ****                                UBaseType_t uxCoreAffinityMask )
2980:FreeRTOS/Src/tasks.c ****     {
2981:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
2982:FreeRTOS/Src/tasks.c ****         BaseType_t xCoreID;
2983:FreeRTOS/Src/tasks.c ****         UBaseType_t uxPrevCoreAffinityMask;
2984:FreeRTOS/Src/tasks.c **** 
2985:FreeRTOS/Src/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2986:FreeRTOS/Src/tasks.c ****             UBaseType_t uxPrevNotAllowedCores;
2987:FreeRTOS/Src/tasks.c ****         #endif
2988:FreeRTOS/Src/tasks.c **** 
2989:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskCoreAffinitySet( xTask, uxCoreAffinityMask );
2990:FreeRTOS/Src/tasks.c **** 
2991:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
2992:FreeRTOS/Src/tasks.c ****         {
2993:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2994:FreeRTOS/Src/tasks.c **** 
2995:FreeRTOS/Src/tasks.c ****             uxPrevCoreAffinityMask = pxTCB->uxCoreAffinityMask;
2996:FreeRTOS/Src/tasks.c ****             pxTCB->uxCoreAffinityMask = uxCoreAffinityMask;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 54


2997:FreeRTOS/Src/tasks.c **** 
2998:FreeRTOS/Src/tasks.c ****             if( xSchedulerRunning != pdFALSE )
2999:FreeRTOS/Src/tasks.c ****             {
3000:FreeRTOS/Src/tasks.c ****                 if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
3001:FreeRTOS/Src/tasks.c ****                 {
3002:FreeRTOS/Src/tasks.c ****                     xCoreID = ( BaseType_t ) pxTCB->xTaskRunState;
3003:FreeRTOS/Src/tasks.c **** 
3004:FreeRTOS/Src/tasks.c ****                     /* If the task can no longer run on the core it was running,
3005:FreeRTOS/Src/tasks.c ****                      * request the core to yield. */
3006:FreeRTOS/Src/tasks.c ****                     if( ( uxCoreAffinityMask & ( ( UBaseType_t ) 1U << ( UBaseType_t ) xCoreID ) ) 
3007:FreeRTOS/Src/tasks.c ****                     {
3008:FreeRTOS/Src/tasks.c ****                         prvYieldCore( xCoreID );
3009:FreeRTOS/Src/tasks.c ****                     }
3010:FreeRTOS/Src/tasks.c ****                 }
3011:FreeRTOS/Src/tasks.c ****                 else
3012:FreeRTOS/Src/tasks.c ****                 {
3013:FreeRTOS/Src/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
3014:FreeRTOS/Src/tasks.c ****                     {
3015:FreeRTOS/Src/tasks.c ****                         /* Calculate the cores on which this task was not allowed to
3016:FreeRTOS/Src/tasks.c ****                          * run previously. */
3017:FreeRTOS/Src/tasks.c ****                         uxPrevNotAllowedCores = ( ~uxPrevCoreAffinityMask ) & ( ( 1U << configNUMBE
3018:FreeRTOS/Src/tasks.c **** 
3019:FreeRTOS/Src/tasks.c ****                         /* Does the new core mask enables this task to run on any of the
3020:FreeRTOS/Src/tasks.c ****                          * previously not allowed cores? If yes, check if this task can be
3021:FreeRTOS/Src/tasks.c ****                          * scheduled on any of those cores. */
3022:FreeRTOS/Src/tasks.c ****                         if( ( uxPrevNotAllowedCores & uxCoreAffinityMask ) != 0U )
3023:FreeRTOS/Src/tasks.c ****                         {
3024:FreeRTOS/Src/tasks.c ****                             prvYieldForTask( pxTCB );
3025:FreeRTOS/Src/tasks.c ****                         }
3026:FreeRTOS/Src/tasks.c ****                     }
3027:FreeRTOS/Src/tasks.c ****                     #else /* #if( configUSE_PREEMPTION == 1 ) */
3028:FreeRTOS/Src/tasks.c ****                     {
3029:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3030:FreeRTOS/Src/tasks.c ****                     }
3031:FreeRTOS/Src/tasks.c ****                     #endif /* #if( configUSE_PREEMPTION == 1 ) */
3032:FreeRTOS/Src/tasks.c ****                 }
3033:FreeRTOS/Src/tasks.c ****             }
3034:FreeRTOS/Src/tasks.c ****         }
3035:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
3036:FreeRTOS/Src/tasks.c **** 
3037:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskCoreAffinitySet();
3038:FreeRTOS/Src/tasks.c ****     }
3039:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
3040:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
3041:FreeRTOS/Src/tasks.c **** 
3042:FreeRTOS/Src/tasks.c **** #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
3043:FreeRTOS/Src/tasks.c ****     UBaseType_t vTaskCoreAffinityGet( ConstTaskHandle_t xTask )
3044:FreeRTOS/Src/tasks.c ****     {
3045:FreeRTOS/Src/tasks.c ****         const TCB_t * pxTCB;
3046:FreeRTOS/Src/tasks.c ****         UBaseType_t uxCoreAffinityMask;
3047:FreeRTOS/Src/tasks.c **** 
3048:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskCoreAffinityGet( xTask );
3049:FreeRTOS/Src/tasks.c **** 
3050:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
3051:FreeRTOS/Src/tasks.c ****         {
3052:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
3053:FreeRTOS/Src/tasks.c ****             uxCoreAffinityMask = pxTCB->uxCoreAffinityMask;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 55


3054:FreeRTOS/Src/tasks.c ****         }
3055:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
3056:FreeRTOS/Src/tasks.c **** 
3057:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskCoreAffinityGet( uxCoreAffinityMask );
3058:FreeRTOS/Src/tasks.c **** 
3059:FreeRTOS/Src/tasks.c ****         return uxCoreAffinityMask;
3060:FreeRTOS/Src/tasks.c ****     }
3061:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
3062:FreeRTOS/Src/tasks.c **** 
3063:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
3064:FreeRTOS/Src/tasks.c **** 
3065:FreeRTOS/Src/tasks.c **** #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
3066:FreeRTOS/Src/tasks.c **** 
3067:FreeRTOS/Src/tasks.c ****     void vTaskPreemptionDisable( const TaskHandle_t xTask )
3068:FreeRTOS/Src/tasks.c ****     {
3069:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
3070:FreeRTOS/Src/tasks.c **** 
3071:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskPreemptionDisable( xTask );
3072:FreeRTOS/Src/tasks.c **** 
3073:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
3074:FreeRTOS/Src/tasks.c ****         {
3075:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
3076:FreeRTOS/Src/tasks.c **** 
3077:FreeRTOS/Src/tasks.c ****             pxTCB->xPreemptionDisable = pdTRUE;
3078:FreeRTOS/Src/tasks.c ****         }
3079:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
3080:FreeRTOS/Src/tasks.c **** 
3081:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskPreemptionDisable();
3082:FreeRTOS/Src/tasks.c ****     }
3083:FreeRTOS/Src/tasks.c **** 
3084:FreeRTOS/Src/tasks.c **** #endif /* #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 ) */
3085:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
3086:FreeRTOS/Src/tasks.c **** 
3087:FreeRTOS/Src/tasks.c **** #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
3088:FreeRTOS/Src/tasks.c **** 
3089:FreeRTOS/Src/tasks.c ****     void vTaskPreemptionEnable( const TaskHandle_t xTask )
3090:FreeRTOS/Src/tasks.c ****     {
3091:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
3092:FreeRTOS/Src/tasks.c ****         BaseType_t xCoreID;
3093:FreeRTOS/Src/tasks.c **** 
3094:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskPreemptionEnable( xTask );
3095:FreeRTOS/Src/tasks.c **** 
3096:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
3097:FreeRTOS/Src/tasks.c ****         {
3098:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
3099:FreeRTOS/Src/tasks.c **** 
3100:FreeRTOS/Src/tasks.c ****             pxTCB->xPreemptionDisable = pdFALSE;
3101:FreeRTOS/Src/tasks.c **** 
3102:FreeRTOS/Src/tasks.c ****             if( xSchedulerRunning != pdFALSE )
3103:FreeRTOS/Src/tasks.c ****             {
3104:FreeRTOS/Src/tasks.c ****                 if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
3105:FreeRTOS/Src/tasks.c ****                 {
3106:FreeRTOS/Src/tasks.c ****                     xCoreID = ( BaseType_t ) pxTCB->xTaskRunState;
3107:FreeRTOS/Src/tasks.c ****                     prvYieldCore( xCoreID );
3108:FreeRTOS/Src/tasks.c ****                 }
3109:FreeRTOS/Src/tasks.c ****             }
3110:FreeRTOS/Src/tasks.c ****         }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 56


3111:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
3112:FreeRTOS/Src/tasks.c **** 
3113:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskPreemptionEnable();
3114:FreeRTOS/Src/tasks.c ****     }
3115:FreeRTOS/Src/tasks.c **** 
3116:FreeRTOS/Src/tasks.c **** #endif /* #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 ) */
3117:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
3118:FreeRTOS/Src/tasks.c **** 
3119:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
3120:FreeRTOS/Src/tasks.c **** 
3121:FreeRTOS/Src/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
3122:FreeRTOS/Src/tasks.c ****     {
3123:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
3124:FreeRTOS/Src/tasks.c **** 
3125:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskSuspend( xTaskToSuspend );
3126:FreeRTOS/Src/tasks.c **** 
3127:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
3128:FreeRTOS/Src/tasks.c ****         {
3129:FreeRTOS/Src/tasks.c ****             /* If null is passed in here then it is the running task that is
3130:FreeRTOS/Src/tasks.c ****              * being suspended. */
3131:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
3132:FreeRTOS/Src/tasks.c **** 
3133:FreeRTOS/Src/tasks.c ****             traceTASK_SUSPEND( pxTCB );
3134:FreeRTOS/Src/tasks.c **** 
3135:FreeRTOS/Src/tasks.c ****             /* Remove task from the ready/delayed list and place in the
3136:FreeRTOS/Src/tasks.c ****              * suspended list. */
3137:FreeRTOS/Src/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3138:FreeRTOS/Src/tasks.c ****             {
3139:FreeRTOS/Src/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3140:FreeRTOS/Src/tasks.c ****             }
3141:FreeRTOS/Src/tasks.c ****             else
3142:FreeRTOS/Src/tasks.c ****             {
3143:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3144:FreeRTOS/Src/tasks.c ****             }
3145:FreeRTOS/Src/tasks.c **** 
3146:FreeRTOS/Src/tasks.c ****             /* Is the task waiting on an event also? */
3147:FreeRTOS/Src/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3148:FreeRTOS/Src/tasks.c ****             {
3149:FreeRTOS/Src/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
3150:FreeRTOS/Src/tasks.c ****             }
3151:FreeRTOS/Src/tasks.c ****             else
3152:FreeRTOS/Src/tasks.c ****             {
3153:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3154:FreeRTOS/Src/tasks.c ****             }
3155:FreeRTOS/Src/tasks.c **** 
3156:FreeRTOS/Src/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
3157:FreeRTOS/Src/tasks.c **** 
3158:FreeRTOS/Src/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
3159:FreeRTOS/Src/tasks.c ****             {
3160:FreeRTOS/Src/tasks.c ****                 BaseType_t x;
3161:FreeRTOS/Src/tasks.c **** 
3162:FreeRTOS/Src/tasks.c ****                 for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES
3163:FreeRTOS/Src/tasks.c ****                 {
3164:FreeRTOS/Src/tasks.c ****                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
3165:FreeRTOS/Src/tasks.c ****                     {
3166:FreeRTOS/Src/tasks.c ****                         /* The task was blocked to wait for a notification, but is
3167:FreeRTOS/Src/tasks.c ****                          * now suspended, so no notification was received. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 57


3168:FreeRTOS/Src/tasks.c ****                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
3169:FreeRTOS/Src/tasks.c ****                     }
3170:FreeRTOS/Src/tasks.c ****                 }
3171:FreeRTOS/Src/tasks.c ****             }
3172:FreeRTOS/Src/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
3173:FreeRTOS/Src/tasks.c **** 
3174:FreeRTOS/Src/tasks.c ****             /* In the case of SMP, it is possible that the task being suspended
3175:FreeRTOS/Src/tasks.c ****              * is running on another core. We must evict the task before
3176:FreeRTOS/Src/tasks.c ****              * exiting the critical section to ensure that the task cannot
3177:FreeRTOS/Src/tasks.c ****              * take an action which puts it back on ready/state/event list,
3178:FreeRTOS/Src/tasks.c ****              * thereby nullifying the suspend operation. Once evicted, the
3179:FreeRTOS/Src/tasks.c ****              * task won't be scheduled before it is resumed as it will no longer
3180:FreeRTOS/Src/tasks.c ****              * be on the ready list. */
3181:FreeRTOS/Src/tasks.c ****             #if ( configNUMBER_OF_CORES > 1 )
3182:FreeRTOS/Src/tasks.c ****             {
3183:FreeRTOS/Src/tasks.c ****                 if( xSchedulerRunning != pdFALSE )
3184:FreeRTOS/Src/tasks.c ****                 {
3185:FreeRTOS/Src/tasks.c ****                     /* Reset the next expected unblock time in case it referred to the
3186:FreeRTOS/Src/tasks.c ****                      * task that is now in the Suspended state. */
3187:FreeRTOS/Src/tasks.c ****                     prvResetNextTaskUnblockTime();
3188:FreeRTOS/Src/tasks.c **** 
3189:FreeRTOS/Src/tasks.c ****                     if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
3190:FreeRTOS/Src/tasks.c ****                     {
3191:FreeRTOS/Src/tasks.c ****                         if( pxTCB->xTaskRunState == ( BaseType_t ) portGET_CORE_ID() )
3192:FreeRTOS/Src/tasks.c ****                         {
3193:FreeRTOS/Src/tasks.c ****                             /* The current task has just been suspended. */
3194:FreeRTOS/Src/tasks.c ****                             configASSERT( uxSchedulerSuspended == 0 );
3195:FreeRTOS/Src/tasks.c ****                             vTaskYieldWithinAPI();
3196:FreeRTOS/Src/tasks.c ****                         }
3197:FreeRTOS/Src/tasks.c ****                         else
3198:FreeRTOS/Src/tasks.c ****                         {
3199:FreeRTOS/Src/tasks.c ****                             prvYieldCore( pxTCB->xTaskRunState );
3200:FreeRTOS/Src/tasks.c ****                         }
3201:FreeRTOS/Src/tasks.c ****                     }
3202:FreeRTOS/Src/tasks.c ****                     else
3203:FreeRTOS/Src/tasks.c ****                     {
3204:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3205:FreeRTOS/Src/tasks.c ****                     }
3206:FreeRTOS/Src/tasks.c ****                 }
3207:FreeRTOS/Src/tasks.c ****                 else
3208:FreeRTOS/Src/tasks.c ****                 {
3209:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3210:FreeRTOS/Src/tasks.c ****                 }
3211:FreeRTOS/Src/tasks.c ****             }
3212:FreeRTOS/Src/tasks.c ****             #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
3213:FreeRTOS/Src/tasks.c ****         }
3214:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
3215:FreeRTOS/Src/tasks.c **** 
3216:FreeRTOS/Src/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
3217:FreeRTOS/Src/tasks.c ****         {
3218:FreeRTOS/Src/tasks.c ****             UBaseType_t uxCurrentListLength;
3219:FreeRTOS/Src/tasks.c **** 
3220:FreeRTOS/Src/tasks.c ****             if( xSchedulerRunning != pdFALSE )
3221:FreeRTOS/Src/tasks.c ****             {
3222:FreeRTOS/Src/tasks.c ****                 /* Reset the next expected unblock time in case it referred to the
3223:FreeRTOS/Src/tasks.c ****                  * task that is now in the Suspended state. */
3224:FreeRTOS/Src/tasks.c ****                 taskENTER_CRITICAL();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 58


3225:FreeRTOS/Src/tasks.c ****                 {
3226:FreeRTOS/Src/tasks.c ****                     prvResetNextTaskUnblockTime();
3227:FreeRTOS/Src/tasks.c ****                 }
3228:FreeRTOS/Src/tasks.c ****                 taskEXIT_CRITICAL();
3229:FreeRTOS/Src/tasks.c ****             }
3230:FreeRTOS/Src/tasks.c ****             else
3231:FreeRTOS/Src/tasks.c ****             {
3232:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3233:FreeRTOS/Src/tasks.c ****             }
3234:FreeRTOS/Src/tasks.c **** 
3235:FreeRTOS/Src/tasks.c ****             if( pxTCB == pxCurrentTCB )
3236:FreeRTOS/Src/tasks.c ****             {
3237:FreeRTOS/Src/tasks.c ****                 if( xSchedulerRunning != pdFALSE )
3238:FreeRTOS/Src/tasks.c ****                 {
3239:FreeRTOS/Src/tasks.c ****                     /* The current task has just been suspended. */
3240:FreeRTOS/Src/tasks.c ****                     configASSERT( uxSchedulerSuspended == 0 );
3241:FreeRTOS/Src/tasks.c ****                     portYIELD_WITHIN_API();
3242:FreeRTOS/Src/tasks.c ****                 }
3243:FreeRTOS/Src/tasks.c ****                 else
3244:FreeRTOS/Src/tasks.c ****                 {
3245:FreeRTOS/Src/tasks.c ****                     /* The scheduler is not running, but the task that was pointed
3246:FreeRTOS/Src/tasks.c ****                      * to by pxCurrentTCB has just been suspended and pxCurrentTCB
3247:FreeRTOS/Src/tasks.c ****                      * must be adjusted to point to a different task. */
3248:FreeRTOS/Src/tasks.c **** 
3249:FreeRTOS/Src/tasks.c ****                     /* Use a temp variable as a distinct sequence point for reading
3250:FreeRTOS/Src/tasks.c ****                      * volatile variables prior to a comparison to ensure compliance
3251:FreeRTOS/Src/tasks.c ****                      * with MISRA C 2012 Rule 13.2. */
3252:FreeRTOS/Src/tasks.c ****                     uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
3253:FreeRTOS/Src/tasks.c **** 
3254:FreeRTOS/Src/tasks.c ****                     if( uxCurrentListLength == uxCurrentNumberOfTasks )
3255:FreeRTOS/Src/tasks.c ****                     {
3256:FreeRTOS/Src/tasks.c ****                         /* No other tasks are ready, so set pxCurrentTCB back to
3257:FreeRTOS/Src/tasks.c ****                          * NULL so when the next task is created pxCurrentTCB will
3258:FreeRTOS/Src/tasks.c ****                          * be set to point to it no matter what its relative priority
3259:FreeRTOS/Src/tasks.c ****                          * is. */
3260:FreeRTOS/Src/tasks.c ****                         pxCurrentTCB = NULL;
3261:FreeRTOS/Src/tasks.c ****                     }
3262:FreeRTOS/Src/tasks.c ****                     else
3263:FreeRTOS/Src/tasks.c ****                     {
3264:FreeRTOS/Src/tasks.c ****                         vTaskSwitchContext();
3265:FreeRTOS/Src/tasks.c ****                     }
3266:FreeRTOS/Src/tasks.c ****                 }
3267:FreeRTOS/Src/tasks.c ****             }
3268:FreeRTOS/Src/tasks.c ****             else
3269:FreeRTOS/Src/tasks.c ****             {
3270:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3271:FreeRTOS/Src/tasks.c ****             }
3272:FreeRTOS/Src/tasks.c ****         }
3273:FreeRTOS/Src/tasks.c ****         #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
3274:FreeRTOS/Src/tasks.c **** 
3275:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskSuspend();
3276:FreeRTOS/Src/tasks.c ****     }
3277:FreeRTOS/Src/tasks.c **** 
3278:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
3279:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
3280:FreeRTOS/Src/tasks.c **** 
3281:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 59


3282:FreeRTOS/Src/tasks.c **** 
3283:FreeRTOS/Src/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
3284:FreeRTOS/Src/tasks.c ****     {
  27              		.loc 1 3284 5 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
3285:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn = pdFALSE;
  32              		.loc 1 3285 9 view .LVU1
3286:FreeRTOS/Src/tasks.c ****         const TCB_t * const pxTCB = xTask;
  33              		.loc 1 3286 9 view .LVU2
3287:FreeRTOS/Src/tasks.c **** 
3288:FreeRTOS/Src/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
3289:FreeRTOS/Src/tasks.c ****          * section. */
3290:FreeRTOS/Src/tasks.c **** 
3291:FreeRTOS/Src/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
3292:FreeRTOS/Src/tasks.c ****         configASSERT( xTask );
  34              		.loc 1 3292 30 view .LVU3
3293:FreeRTOS/Src/tasks.c **** 
3294:FreeRTOS/Src/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
3295:FreeRTOS/Src/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 3295 9 view .LVU4
  36              		.loc 1 3295 13 is_stmt 0 view .LVU5
  37 0000 4269     		ldr	r2, [r0, #20]
  38              		.loc 1 3295 11 view .LVU6
  39 0002 0E4B     		ldr	r3, .L10
  40 0004 9A42     		cmp	r2, r3
  41 0006 01D0     		beq	.L9
3285:FreeRTOS/Src/tasks.c ****         const TCB_t * const pxTCB = xTask;
  42              		.loc 1 3285 20 view .LVU7
  43 0008 0020     		movs	r0, #0
  44              	.LVL1:
3285:FreeRTOS/Src/tasks.c ****         const TCB_t * const pxTCB = xTask;
  45              		.loc 1 3285 20 view .LVU8
  46 000a 7047     		bx	lr
  47              	.LVL2:
  48              	.L9:
3296:FreeRTOS/Src/tasks.c ****         {
3297:FreeRTOS/Src/tasks.c ****             /* Has the task already been resumed from within an ISR? */
3298:FreeRTOS/Src/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  49              		.loc 1 3298 13 is_stmt 1 view .LVU9
  50              		.loc 1 3298 17 is_stmt 0 view .LVU10
  51 000c 836A     		ldr	r3, [r0, #40]
  52              		.loc 1 3298 15 view .LVU11
  53 000e 0C4A     		ldr	r2, .L10+4
  54 0010 9342     		cmp	r3, r2
  55 0012 0ED0     		beq	.L6
3299:FreeRTOS/Src/tasks.c ****             {
3300:FreeRTOS/Src/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
3301:FreeRTOS/Src/tasks.c ****                  * state, or because it is blocked with no timeout? */
3302:FreeRTOS/Src/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  56              		.loc 1 3302 17 is_stmt 1 view .LVU12
  57              		.loc 1 3302 19 is_stmt 0 view .LVU13
  58 0014 43B1     		cbz	r3, .L7
3285:FreeRTOS/Src/tasks.c ****         const TCB_t * const pxTCB = xTask;
  59              		.loc 1 3285 20 view .LVU14
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 60


  60 0016 0020     		movs	r0, #0
  61              	.LVL3:
3285:FreeRTOS/Src/tasks.c ****         const TCB_t * const pxTCB = xTask;
  62              		.loc 1 3285 20 view .LVU15
  63 0018 7047     		bx	lr
  64              	.LVL4:
  65              	.L4:
  66              	.LBB40:
3303:FreeRTOS/Src/tasks.c ****                 {
3304:FreeRTOS/Src/tasks.c ****                     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
3305:FreeRTOS/Src/tasks.c ****                     {
3306:FreeRTOS/Src/tasks.c ****                         BaseType_t x;
3307:FreeRTOS/Src/tasks.c **** 
3308:FreeRTOS/Src/tasks.c ****                         /* The task does not appear on the event list item of
3309:FreeRTOS/Src/tasks.c ****                          * and of the RTOS objects, but could still be in the
3310:FreeRTOS/Src/tasks.c ****                          * blocked state if it is waiting on its notification
3311:FreeRTOS/Src/tasks.c ****                          * rather than waiting on an object.  If not, is
3312:FreeRTOS/Src/tasks.c ****                          * suspended. */
3313:FreeRTOS/Src/tasks.c ****                         xReturn = pdTRUE;
3314:FreeRTOS/Src/tasks.c **** 
3315:FreeRTOS/Src/tasks.c ****                         for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY
3316:FreeRTOS/Src/tasks.c ****                         {
3317:FreeRTOS/Src/tasks.c ****                             if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
  67              		.loc 1 3317 29 is_stmt 1 view .LVU16
  68              		.loc 1 3317 53 is_stmt 0 view .LVU17
  69 001a C218     		adds	r2, r0, r3
  70 001c 92F84820 		ldrb	r2, [r2, #72]	@ zero_extendqisi2
  71              		.loc 1 3317 31 view .LVU18
  72 0020 012A     		cmp	r2, #1
  73 0022 08D0     		beq	.L8
3315:FreeRTOS/Src/tasks.c ****                         {
  74              		.loc 1 3315 111 is_stmt 1 discriminator 2 view .LVU19
  75 0024 0133     		adds	r3, r3, #1
  76              	.LVL5:
3315:FreeRTOS/Src/tasks.c ****                         {
  77              		.loc 1 3315 111 is_stmt 0 discriminator 2 view .LVU20
  78 0026 00E0     		b	.L3
  79              	.LVL6:
  80              	.L7:
3315:FreeRTOS/Src/tasks.c ****                         {
  81              		.loc 1 3315 32 view .LVU21
  82 0028 0023     		movs	r3, #0
  83              	.LVL7:
  84              	.L3:
3315:FreeRTOS/Src/tasks.c ****                         {
  85              		.loc 1 3315 54 is_stmt 1 discriminator 1 view .LVU22
  86 002a 002B     		cmp	r3, #0
  87 002c F5DD     		ble	.L4
3313:FreeRTOS/Src/tasks.c **** 
  88              		.loc 1 3313 33 is_stmt 0 view .LVU23
  89 002e 0120     		movs	r0, #1
  90              	.LVL8:
3313:FreeRTOS/Src/tasks.c **** 
  91              		.loc 1 3313 33 view .LVU24
  92 0030 7047     		bx	lr
  93              	.LVL9:
  94              	.L6:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 61


3313:FreeRTOS/Src/tasks.c **** 
  95              		.loc 1 3313 33 view .LVU25
  96              	.LBE40:
3285:FreeRTOS/Src/tasks.c ****         const TCB_t * const pxTCB = xTask;
  97              		.loc 1 3285 20 view .LVU26
  98 0032 0020     		movs	r0, #0
  99              	.LVL10:
3285:FreeRTOS/Src/tasks.c ****         const TCB_t * const pxTCB = xTask;
 100              		.loc 1 3285 20 view .LVU27
 101 0034 7047     		bx	lr
 102              	.LVL11:
 103              	.L8:
 104              	.LBB41:
3318:FreeRTOS/Src/tasks.c ****                             {
3319:FreeRTOS/Src/tasks.c ****                                 xReturn = pdFALSE;
 105              		.loc 1 3319 41 view .LVU28
 106 0036 0020     		movs	r0, #0
 107              	.LVL12:
 108              		.loc 1 3319 41 view .LVU29
 109              	.LBE41:
3320:FreeRTOS/Src/tasks.c ****                                 break;
3321:FreeRTOS/Src/tasks.c ****                             }
3322:FreeRTOS/Src/tasks.c ****                         }
3323:FreeRTOS/Src/tasks.c ****                     }
3324:FreeRTOS/Src/tasks.c ****                     #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
3325:FreeRTOS/Src/tasks.c ****                     {
3326:FreeRTOS/Src/tasks.c ****                         xReturn = pdTRUE;
3327:FreeRTOS/Src/tasks.c ****                     }
3328:FreeRTOS/Src/tasks.c ****                     #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
3329:FreeRTOS/Src/tasks.c ****                 }
3330:FreeRTOS/Src/tasks.c ****                 else
3331:FreeRTOS/Src/tasks.c ****                 {
3332:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3333:FreeRTOS/Src/tasks.c ****                 }
3334:FreeRTOS/Src/tasks.c ****             }
3335:FreeRTOS/Src/tasks.c ****             else
3336:FreeRTOS/Src/tasks.c ****             {
3337:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3338:FreeRTOS/Src/tasks.c ****             }
3339:FreeRTOS/Src/tasks.c ****         }
3340:FreeRTOS/Src/tasks.c ****         else
3341:FreeRTOS/Src/tasks.c ****         {
3342:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
 110              		.loc 1 3342 37 is_stmt 1 view .LVU30
3343:FreeRTOS/Src/tasks.c ****         }
3344:FreeRTOS/Src/tasks.c **** 
3345:FreeRTOS/Src/tasks.c ****         return xReturn;
 111              		.loc 1 3345 9 view .LVU31
3346:FreeRTOS/Src/tasks.c ****     }
 112              		.loc 1 3346 5 is_stmt 0 view .LVU32
 113 0038 7047     		bx	lr
 114              	.L11:
 115 003a 00BF     		.align	2
 116              	.L10:
 117 003c 00000000 		.word	xSuspendedTaskList
 118 0040 00000000 		.word	xPendingReadyList
 119              		.cfi_endproc
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 62


 120              	.LFE141:
 122              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 123              		.align	1
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 128              	prvResetNextTaskUnblockTime:
 129              	.LFB169:
3347:FreeRTOS/Src/tasks.c **** 
3348:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
3349:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
3350:FreeRTOS/Src/tasks.c **** 
3351:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
3352:FreeRTOS/Src/tasks.c **** 
3353:FreeRTOS/Src/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
3354:FreeRTOS/Src/tasks.c ****     {
3355:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
3356:FreeRTOS/Src/tasks.c **** 
3357:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskResume( xTaskToResume );
3358:FreeRTOS/Src/tasks.c **** 
3359:FreeRTOS/Src/tasks.c ****         /* It does not make sense to resume the calling task. */
3360:FreeRTOS/Src/tasks.c ****         configASSERT( xTaskToResume );
3361:FreeRTOS/Src/tasks.c **** 
3362:FreeRTOS/Src/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
3363:FreeRTOS/Src/tasks.c **** 
3364:FreeRTOS/Src/tasks.c ****             /* The parameter cannot be NULL as it is impossible to resume the
3365:FreeRTOS/Src/tasks.c ****              * currently executing task. */
3366:FreeRTOS/Src/tasks.c ****             if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
3367:FreeRTOS/Src/tasks.c ****         #else
3368:FreeRTOS/Src/tasks.c **** 
3369:FreeRTOS/Src/tasks.c ****             /* The parameter cannot be NULL as it is impossible to resume the
3370:FreeRTOS/Src/tasks.c ****              * currently executing task. It is also impossible to resume a task
3371:FreeRTOS/Src/tasks.c ****              * that is actively running on another core but it is not safe
3372:FreeRTOS/Src/tasks.c ****              * to check their run state here. Therefore, we get into a critical
3373:FreeRTOS/Src/tasks.c ****              * section and check if the task is actually suspended or not. */
3374:FreeRTOS/Src/tasks.c ****             if( pxTCB != NULL )
3375:FreeRTOS/Src/tasks.c ****         #endif
3376:FreeRTOS/Src/tasks.c ****         {
3377:FreeRTOS/Src/tasks.c ****             taskENTER_CRITICAL();
3378:FreeRTOS/Src/tasks.c ****             {
3379:FreeRTOS/Src/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
3380:FreeRTOS/Src/tasks.c ****                 {
3381:FreeRTOS/Src/tasks.c ****                     traceTASK_RESUME( pxTCB );
3382:FreeRTOS/Src/tasks.c **** 
3383:FreeRTOS/Src/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
3384:FreeRTOS/Src/tasks.c ****                      * suspended because this is inside a critical section. */
3385:FreeRTOS/Src/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3386:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
3387:FreeRTOS/Src/tasks.c **** 
3388:FreeRTOS/Src/tasks.c ****                     /* This yield may not cause the task just resumed to run,
3389:FreeRTOS/Src/tasks.c ****                      * but will leave the lists in the correct state for the
3390:FreeRTOS/Src/tasks.c ****                      * next yield. */
3391:FreeRTOS/Src/tasks.c ****                     taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
3392:FreeRTOS/Src/tasks.c ****                 }
3393:FreeRTOS/Src/tasks.c ****                 else
3394:FreeRTOS/Src/tasks.c ****                 {
3395:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 63


3396:FreeRTOS/Src/tasks.c ****                 }
3397:FreeRTOS/Src/tasks.c ****             }
3398:FreeRTOS/Src/tasks.c ****             taskEXIT_CRITICAL();
3399:FreeRTOS/Src/tasks.c ****         }
3400:FreeRTOS/Src/tasks.c ****         else
3401:FreeRTOS/Src/tasks.c ****         {
3402:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3403:FreeRTOS/Src/tasks.c ****         }
3404:FreeRTOS/Src/tasks.c **** 
3405:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskResume();
3406:FreeRTOS/Src/tasks.c ****     }
3407:FreeRTOS/Src/tasks.c **** 
3408:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
3409:FreeRTOS/Src/tasks.c **** 
3410:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
3411:FreeRTOS/Src/tasks.c **** 
3412:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
3413:FreeRTOS/Src/tasks.c **** 
3414:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
3415:FreeRTOS/Src/tasks.c ****     {
3416:FreeRTOS/Src/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
3417:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
3418:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
3419:FreeRTOS/Src/tasks.c **** 
3420:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskResumeFromISR( xTaskToResume );
3421:FreeRTOS/Src/tasks.c **** 
3422:FreeRTOS/Src/tasks.c ****         configASSERT( xTaskToResume );
3423:FreeRTOS/Src/tasks.c **** 
3424:FreeRTOS/Src/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
3425:FreeRTOS/Src/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
3426:FreeRTOS/Src/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
3427:FreeRTOS/Src/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
3428:FreeRTOS/Src/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
3429:FreeRTOS/Src/tasks.c ****          * is defined in FreeRTOSConfig.h then
3430:FreeRTOS/Src/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
3431:FreeRTOS/Src/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
3432:FreeRTOS/Src/tasks.c ****          * been assigned a priority above the configured maximum system call
3433:FreeRTOS/Src/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
3434:FreeRTOS/Src/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
3435:FreeRTOS/Src/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
3436:FreeRTOS/Src/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
3437:FreeRTOS/Src/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
3438:FreeRTOS/Src/tasks.c ****          * provided on the following link:
3439:FreeRTOS/Src/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
3440:FreeRTOS/Src/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
3441:FreeRTOS/Src/tasks.c **** 
3442:FreeRTOS/Src/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
3443:FreeRTOS/Src/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
3444:FreeRTOS/Src/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
3445:FreeRTOS/Src/tasks.c ****         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
3446:FreeRTOS/Src/tasks.c ****         {
3447:FreeRTOS/Src/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
3448:FreeRTOS/Src/tasks.c ****             {
3449:FreeRTOS/Src/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
3450:FreeRTOS/Src/tasks.c **** 
3451:FreeRTOS/Src/tasks.c ****                 /* Check the ready lists can be accessed. */
3452:FreeRTOS/Src/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 64


3453:FreeRTOS/Src/tasks.c ****                 {
3454:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES == 1 )
3455:FreeRTOS/Src/tasks.c ****                     {
3456:FreeRTOS/Src/tasks.c ****                         /* Ready lists can be accessed so move the task from the
3457:FreeRTOS/Src/tasks.c ****                          * suspended list to the ready list directly. */
3458:FreeRTOS/Src/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3459:FreeRTOS/Src/tasks.c ****                         {
3460:FreeRTOS/Src/tasks.c ****                             xYieldRequired = pdTRUE;
3461:FreeRTOS/Src/tasks.c **** 
3462:FreeRTOS/Src/tasks.c ****                             /* Mark that a yield is pending in case the user is not
3463:FreeRTOS/Src/tasks.c ****                              * using the return value to initiate a context switch
3464:FreeRTOS/Src/tasks.c ****                              * from the ISR using the port specific portYIELD_FROM_ISR(). */
3465:FreeRTOS/Src/tasks.c ****                             xYieldPendings[ 0 ] = pdTRUE;
3466:FreeRTOS/Src/tasks.c ****                         }
3467:FreeRTOS/Src/tasks.c ****                         else
3468:FreeRTOS/Src/tasks.c ****                         {
3469:FreeRTOS/Src/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3470:FreeRTOS/Src/tasks.c ****                         }
3471:FreeRTOS/Src/tasks.c ****                     }
3472:FreeRTOS/Src/tasks.c ****                     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
3473:FreeRTOS/Src/tasks.c **** 
3474:FreeRTOS/Src/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3475:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
3476:FreeRTOS/Src/tasks.c ****                 }
3477:FreeRTOS/Src/tasks.c ****                 else
3478:FreeRTOS/Src/tasks.c ****                 {
3479:FreeRTOS/Src/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
3480:FreeRTOS/Src/tasks.c ****                      * is held in the pending ready list until the scheduler is
3481:FreeRTOS/Src/tasks.c ****                      * unsuspended. */
3482:FreeRTOS/Src/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
3483:FreeRTOS/Src/tasks.c ****                 }
3484:FreeRTOS/Src/tasks.c **** 
3485:FreeRTOS/Src/tasks.c ****                 #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_PREEMPTION == 1 ) )
3486:FreeRTOS/Src/tasks.c ****                 {
3487:FreeRTOS/Src/tasks.c ****                     prvYieldForTask( pxTCB );
3488:FreeRTOS/Src/tasks.c **** 
3489:FreeRTOS/Src/tasks.c ****                     if( xYieldPendings[ portGET_CORE_ID() ] != pdFALSE )
3490:FreeRTOS/Src/tasks.c ****                     {
3491:FreeRTOS/Src/tasks.c ****                         xYieldRequired = pdTRUE;
3492:FreeRTOS/Src/tasks.c ****                     }
3493:FreeRTOS/Src/tasks.c ****                 }
3494:FreeRTOS/Src/tasks.c ****                 #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_PREEMPTION == 1 ) ) */
3495:FreeRTOS/Src/tasks.c ****             }
3496:FreeRTOS/Src/tasks.c ****             else
3497:FreeRTOS/Src/tasks.c ****             {
3498:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3499:FreeRTOS/Src/tasks.c ****             }
3500:FreeRTOS/Src/tasks.c ****         }
3501:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
3502:FreeRTOS/Src/tasks.c **** 
3503:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskResumeFromISR( xYieldRequired );
3504:FreeRTOS/Src/tasks.c **** 
3505:FreeRTOS/Src/tasks.c ****         return xYieldRequired;
3506:FreeRTOS/Src/tasks.c ****     }
3507:FreeRTOS/Src/tasks.c **** 
3508:FreeRTOS/Src/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
3509:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 65


3510:FreeRTOS/Src/tasks.c **** 
3511:FreeRTOS/Src/tasks.c **** static BaseType_t prvCreateIdleTasks( void )
3512:FreeRTOS/Src/tasks.c **** {
3513:FreeRTOS/Src/tasks.c ****     BaseType_t xReturn = pdPASS;
3514:FreeRTOS/Src/tasks.c ****     BaseType_t xCoreID;
3515:FreeRTOS/Src/tasks.c ****     char cIdleName[ configMAX_TASK_NAME_LEN ];
3516:FreeRTOS/Src/tasks.c ****     TaskFunction_t pxIdleTaskFunction = NULL;
3517:FreeRTOS/Src/tasks.c ****     BaseType_t xIdleTaskNameIndex;
3518:FreeRTOS/Src/tasks.c **** 
3519:FreeRTOS/Src/tasks.c ****     for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_
3520:FreeRTOS/Src/tasks.c ****     {
3521:FreeRTOS/Src/tasks.c ****         cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
3522:FreeRTOS/Src/tasks.c **** 
3523:FreeRTOS/Src/tasks.c ****         /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
3524:FreeRTOS/Src/tasks.c ****          * configMAX_TASK_NAME_LEN characters just in case the memory after the
3525:FreeRTOS/Src/tasks.c ****          * string is not accessible (extremely unlikely). */
3526:FreeRTOS/Src/tasks.c ****         if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
3527:FreeRTOS/Src/tasks.c ****         {
3528:FreeRTOS/Src/tasks.c ****             break;
3529:FreeRTOS/Src/tasks.c ****         }
3530:FreeRTOS/Src/tasks.c ****         else
3531:FreeRTOS/Src/tasks.c ****         {
3532:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3533:FreeRTOS/Src/tasks.c ****         }
3534:FreeRTOS/Src/tasks.c ****     }
3535:FreeRTOS/Src/tasks.c **** 
3536:FreeRTOS/Src/tasks.c ****     /* Add each idle task at the lowest priority. */
3537:FreeRTOS/Src/tasks.c ****     for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
3538:FreeRTOS/Src/tasks.c ****     {
3539:FreeRTOS/Src/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
3540:FreeRTOS/Src/tasks.c ****         {
3541:FreeRTOS/Src/tasks.c ****             pxIdleTaskFunction = prvIdleTask;
3542:FreeRTOS/Src/tasks.c ****         }
3543:FreeRTOS/Src/tasks.c ****         #else /* #if (  configNUMBER_OF_CORES == 1 ) */
3544:FreeRTOS/Src/tasks.c ****         {
3545:FreeRTOS/Src/tasks.c ****             /* In the FreeRTOS SMP, configNUMBER_OF_CORES - 1 passive idle tasks
3546:FreeRTOS/Src/tasks.c ****              * are also created to ensure that each core has an idle task to
3547:FreeRTOS/Src/tasks.c ****              * run when no other task is available to run. */
3548:FreeRTOS/Src/tasks.c ****             if( xCoreID == 0 )
3549:FreeRTOS/Src/tasks.c ****             {
3550:FreeRTOS/Src/tasks.c ****                 pxIdleTaskFunction = prvIdleTask;
3551:FreeRTOS/Src/tasks.c ****             }
3552:FreeRTOS/Src/tasks.c ****             else
3553:FreeRTOS/Src/tasks.c ****             {
3554:FreeRTOS/Src/tasks.c ****                 pxIdleTaskFunction = prvPassiveIdleTask;
3555:FreeRTOS/Src/tasks.c ****             }
3556:FreeRTOS/Src/tasks.c ****         }
3557:FreeRTOS/Src/tasks.c ****         #endif /* #if (  configNUMBER_OF_CORES == 1 ) */
3558:FreeRTOS/Src/tasks.c **** 
3559:FreeRTOS/Src/tasks.c ****         /* Update the idle task name with suffix to differentiate the idle tasks.
3560:FreeRTOS/Src/tasks.c ****          * This function is not required in single core FreeRTOS since there is
3561:FreeRTOS/Src/tasks.c ****          * only one idle task. */
3562:FreeRTOS/Src/tasks.c ****         #if ( configNUMBER_OF_CORES > 1 )
3563:FreeRTOS/Src/tasks.c ****         {
3564:FreeRTOS/Src/tasks.c ****             /* Append the idle task number to the end of the name if there is space. */
3565:FreeRTOS/Src/tasks.c ****             if( xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN )
3566:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 66


3567:FreeRTOS/Src/tasks.c ****                 cIdleName[ xIdleTaskNameIndex ] = ( char ) ( xCoreID + '0' );
3568:FreeRTOS/Src/tasks.c **** 
3569:FreeRTOS/Src/tasks.c ****                 /* And append a null character if there is space. */
3570:FreeRTOS/Src/tasks.c ****                 if( ( xIdleTaskNameIndex + 1 ) < ( BaseType_t ) configMAX_TASK_NAME_LEN )
3571:FreeRTOS/Src/tasks.c ****                 {
3572:FreeRTOS/Src/tasks.c ****                     cIdleName[ xIdleTaskNameIndex + 1 ] = '\0';
3573:FreeRTOS/Src/tasks.c ****                 }
3574:FreeRTOS/Src/tasks.c ****                 else
3575:FreeRTOS/Src/tasks.c ****                 {
3576:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3577:FreeRTOS/Src/tasks.c ****                 }
3578:FreeRTOS/Src/tasks.c ****             }
3579:FreeRTOS/Src/tasks.c ****             else
3580:FreeRTOS/Src/tasks.c ****             {
3581:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3582:FreeRTOS/Src/tasks.c ****             }
3583:FreeRTOS/Src/tasks.c ****         }
3584:FreeRTOS/Src/tasks.c ****         #endif /* if ( configNUMBER_OF_CORES > 1 ) */
3585:FreeRTOS/Src/tasks.c **** 
3586:FreeRTOS/Src/tasks.c ****         #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
3587:FreeRTOS/Src/tasks.c ****         {
3588:FreeRTOS/Src/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
3589:FreeRTOS/Src/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
3590:FreeRTOS/Src/tasks.c ****             configSTACK_DEPTH_TYPE uxIdleTaskStackSize;
3591:FreeRTOS/Src/tasks.c **** 
3592:FreeRTOS/Src/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
3593:FreeRTOS/Src/tasks.c ****              * address of the RAM then create the idle task. */
3594:FreeRTOS/Src/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
3595:FreeRTOS/Src/tasks.c ****             {
3596:FreeRTOS/Src/tasks.c ****                 vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdl
3597:FreeRTOS/Src/tasks.c ****             }
3598:FreeRTOS/Src/tasks.c ****             #else
3599:FreeRTOS/Src/tasks.c ****             {
3600:FreeRTOS/Src/tasks.c ****                 if( xCoreID == 0 )
3601:FreeRTOS/Src/tasks.c ****                 {
3602:FreeRTOS/Src/tasks.c ****                     vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &u
3603:FreeRTOS/Src/tasks.c ****                 }
3604:FreeRTOS/Src/tasks.c ****                 else
3605:FreeRTOS/Src/tasks.c ****                 {
3606:FreeRTOS/Src/tasks.c ****                     vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuf
3607:FreeRTOS/Src/tasks.c ****                 }
3608:FreeRTOS/Src/tasks.c ****             }
3609:FreeRTOS/Src/tasks.c ****             #endif /* if ( configNUMBER_OF_CORES == 1 ) */
3610:FreeRTOS/Src/tasks.c ****             xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
3611:FreeRTOS/Src/tasks.c ****                                                              cIdleName,
3612:FreeRTOS/Src/tasks.c ****                                                              uxIdleTaskStackSize,
3613:FreeRTOS/Src/tasks.c ****                                                              ( void * ) NULL,
3614:FreeRTOS/Src/tasks.c ****                                                              portPRIVILEGE_BIT, /* In effect ( tskI
3615:FreeRTOS/Src/tasks.c ****                                                              pxIdleTaskStackBuffer,
3616:FreeRTOS/Src/tasks.c ****                                                              pxIdleTaskTCBBuffer );
3617:FreeRTOS/Src/tasks.c **** 
3618:FreeRTOS/Src/tasks.c ****             if( xIdleTaskHandles[ xCoreID ] != NULL )
3619:FreeRTOS/Src/tasks.c ****             {
3620:FreeRTOS/Src/tasks.c ****                 xReturn = pdPASS;
3621:FreeRTOS/Src/tasks.c ****             }
3622:FreeRTOS/Src/tasks.c ****             else
3623:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 67


3624:FreeRTOS/Src/tasks.c ****                 xReturn = pdFAIL;
3625:FreeRTOS/Src/tasks.c ****             }
3626:FreeRTOS/Src/tasks.c ****         }
3627:FreeRTOS/Src/tasks.c ****         #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
3628:FreeRTOS/Src/tasks.c ****         {
3629:FreeRTOS/Src/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
3630:FreeRTOS/Src/tasks.c ****             xReturn = xTaskCreate( pxIdleTaskFunction,
3631:FreeRTOS/Src/tasks.c ****                                    cIdleName,
3632:FreeRTOS/Src/tasks.c ****                                    configMINIMAL_STACK_SIZE,
3633:FreeRTOS/Src/tasks.c ****                                    ( void * ) NULL,
3634:FreeRTOS/Src/tasks.c ****                                    portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILE
3635:FreeRTOS/Src/tasks.c ****                                    &xIdleTaskHandles[ xCoreID ] );
3636:FreeRTOS/Src/tasks.c ****         }
3637:FreeRTOS/Src/tasks.c ****         #endif /* configSUPPORT_STATIC_ALLOCATION */
3638:FreeRTOS/Src/tasks.c **** 
3639:FreeRTOS/Src/tasks.c ****         /* Break the loop if any of the idle task is failed to be created. */
3640:FreeRTOS/Src/tasks.c ****         if( xReturn == pdFAIL )
3641:FreeRTOS/Src/tasks.c ****         {
3642:FreeRTOS/Src/tasks.c ****             break;
3643:FreeRTOS/Src/tasks.c ****         }
3644:FreeRTOS/Src/tasks.c ****         else
3645:FreeRTOS/Src/tasks.c ****         {
3646:FreeRTOS/Src/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
3647:FreeRTOS/Src/tasks.c ****             {
3648:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3649:FreeRTOS/Src/tasks.c ****             }
3650:FreeRTOS/Src/tasks.c ****             #else
3651:FreeRTOS/Src/tasks.c ****             {
3652:FreeRTOS/Src/tasks.c ****                 /* Assign idle task to each core before SMP scheduler is running. */
3653:FreeRTOS/Src/tasks.c ****                 xIdleTaskHandles[ xCoreID ]->xTaskRunState = xCoreID;
3654:FreeRTOS/Src/tasks.c ****                 pxCurrentTCBs[ xCoreID ] = xIdleTaskHandles[ xCoreID ];
3655:FreeRTOS/Src/tasks.c ****             }
3656:FreeRTOS/Src/tasks.c ****             #endif
3657:FreeRTOS/Src/tasks.c ****         }
3658:FreeRTOS/Src/tasks.c ****     }
3659:FreeRTOS/Src/tasks.c **** 
3660:FreeRTOS/Src/tasks.c ****     return xReturn;
3661:FreeRTOS/Src/tasks.c **** }
3662:FreeRTOS/Src/tasks.c **** 
3663:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
3664:FreeRTOS/Src/tasks.c **** 
3665:FreeRTOS/Src/tasks.c **** void vTaskStartScheduler( void )
3666:FreeRTOS/Src/tasks.c **** {
3667:FreeRTOS/Src/tasks.c ****     BaseType_t xReturn;
3668:FreeRTOS/Src/tasks.c **** 
3669:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskStartScheduler();
3670:FreeRTOS/Src/tasks.c **** 
3671:FreeRTOS/Src/tasks.c ****     #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 )
3672:FreeRTOS/Src/tasks.c ****     {
3673:FreeRTOS/Src/tasks.c ****         /* Sanity check that the UBaseType_t must have greater than or equal to
3674:FreeRTOS/Src/tasks.c ****          * the number of bits as confNUMBER_OF_CORES. */
3675:FreeRTOS/Src/tasks.c ****         configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
3676:FreeRTOS/Src/tasks.c ****     }
3677:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */
3678:FreeRTOS/Src/tasks.c **** 
3679:FreeRTOS/Src/tasks.c ****     xReturn = prvCreateIdleTasks();
3680:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 68


3681:FreeRTOS/Src/tasks.c ****     #if ( configUSE_TIMERS == 1 )
3682:FreeRTOS/Src/tasks.c ****     {
3683:FreeRTOS/Src/tasks.c ****         if( xReturn == pdPASS )
3684:FreeRTOS/Src/tasks.c ****         {
3685:FreeRTOS/Src/tasks.c ****             xReturn = xTimerCreateTimerTask();
3686:FreeRTOS/Src/tasks.c ****         }
3687:FreeRTOS/Src/tasks.c ****         else
3688:FreeRTOS/Src/tasks.c ****         {
3689:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3690:FreeRTOS/Src/tasks.c ****         }
3691:FreeRTOS/Src/tasks.c ****     }
3692:FreeRTOS/Src/tasks.c ****     #endif /* configUSE_TIMERS */
3693:FreeRTOS/Src/tasks.c **** 
3694:FreeRTOS/Src/tasks.c ****     if( xReturn == pdPASS )
3695:FreeRTOS/Src/tasks.c ****     {
3696:FreeRTOS/Src/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
3697:FreeRTOS/Src/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
3698:FreeRTOS/Src/tasks.c ****          * the only macro called by the function. */
3699:FreeRTOS/Src/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
3700:FreeRTOS/Src/tasks.c ****         {
3701:FreeRTOS/Src/tasks.c ****             freertos_tasks_c_additions_init();
3702:FreeRTOS/Src/tasks.c ****         }
3703:FreeRTOS/Src/tasks.c ****         #endif
3704:FreeRTOS/Src/tasks.c **** 
3705:FreeRTOS/Src/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
3706:FreeRTOS/Src/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
3707:FreeRTOS/Src/tasks.c ****          * the created tasks contain a status word with interrupts switched on
3708:FreeRTOS/Src/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
3709:FreeRTOS/Src/tasks.c ****          * starts to run. */
3710:FreeRTOS/Src/tasks.c ****         portDISABLE_INTERRUPTS();
3711:FreeRTOS/Src/tasks.c **** 
3712:FreeRTOS/Src/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
3713:FreeRTOS/Src/tasks.c ****         {
3714:FreeRTOS/Src/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
3715:FreeRTOS/Src/tasks.c ****              * block specific to the task that will run first. */
3716:FreeRTOS/Src/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3717:FreeRTOS/Src/tasks.c ****         }
3718:FreeRTOS/Src/tasks.c ****         #endif
3719:FreeRTOS/Src/tasks.c **** 
3720:FreeRTOS/Src/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
3721:FreeRTOS/Src/tasks.c ****         xSchedulerRunning = pdTRUE;
3722:FreeRTOS/Src/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
3723:FreeRTOS/Src/tasks.c **** 
3724:FreeRTOS/Src/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
3725:FreeRTOS/Src/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
3726:FreeRTOS/Src/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
3727:FreeRTOS/Src/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
3728:FreeRTOS/Src/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
3729:FreeRTOS/Src/tasks.c ****          * FreeRTOSConfig.h file. */
3730:FreeRTOS/Src/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
3731:FreeRTOS/Src/tasks.c **** 
3732:FreeRTOS/Src/tasks.c ****         traceTASK_SWITCHED_IN();
3733:FreeRTOS/Src/tasks.c **** 
3734:FreeRTOS/Src/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
3735:FreeRTOS/Src/tasks.c ****          * portable interface. */
3736:FreeRTOS/Src/tasks.c **** 
3737:FreeRTOS/Src/tasks.c ****         /* The return value for xPortStartScheduler is not required
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 69


3738:FreeRTOS/Src/tasks.c ****          * hence using a void datatype. */
3739:FreeRTOS/Src/tasks.c ****         ( void ) xPortStartScheduler();
3740:FreeRTOS/Src/tasks.c **** 
3741:FreeRTOS/Src/tasks.c ****         /* In most cases, xPortStartScheduler() will not return. If it
3742:FreeRTOS/Src/tasks.c ****          * returns pdTRUE then there was not enough heap memory available
3743:FreeRTOS/Src/tasks.c ****          * to create either the Idle or the Timer task. If it returned
3744:FreeRTOS/Src/tasks.c ****          * pdFALSE, then the application called xTaskEndScheduler().
3745:FreeRTOS/Src/tasks.c ****          * Most ports don't implement xTaskEndScheduler() as there is
3746:FreeRTOS/Src/tasks.c ****          * nothing to return to. */
3747:FreeRTOS/Src/tasks.c ****     }
3748:FreeRTOS/Src/tasks.c ****     else
3749:FreeRTOS/Src/tasks.c ****     {
3750:FreeRTOS/Src/tasks.c ****         /* This line will only be reached if the kernel could not be started,
3751:FreeRTOS/Src/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
3752:FreeRTOS/Src/tasks.c ****          * or the timer task. */
3753:FreeRTOS/Src/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
3754:FreeRTOS/Src/tasks.c ****     }
3755:FreeRTOS/Src/tasks.c **** 
3756:FreeRTOS/Src/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
3757:FreeRTOS/Src/tasks.c ****      * meaning xIdleTaskHandles are not used anywhere else. */
3758:FreeRTOS/Src/tasks.c ****     ( void ) xIdleTaskHandles;
3759:FreeRTOS/Src/tasks.c **** 
3760:FreeRTOS/Src/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
3761:FreeRTOS/Src/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
3762:FreeRTOS/Src/tasks.c ****     ( void ) uxTopUsedPriority;
3763:FreeRTOS/Src/tasks.c **** 
3764:FreeRTOS/Src/tasks.c ****     traceRETURN_vTaskStartScheduler();
3765:FreeRTOS/Src/tasks.c **** }
3766:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
3767:FreeRTOS/Src/tasks.c **** 
3768:FreeRTOS/Src/tasks.c **** void vTaskEndScheduler( void )
3769:FreeRTOS/Src/tasks.c **** {
3770:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskEndScheduler();
3771:FreeRTOS/Src/tasks.c **** 
3772:FreeRTOS/Src/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3773:FreeRTOS/Src/tasks.c ****     {
3774:FreeRTOS/Src/tasks.c ****         BaseType_t xCoreID;
3775:FreeRTOS/Src/tasks.c **** 
3776:FreeRTOS/Src/tasks.c ****         #if ( configUSE_TIMERS == 1 )
3777:FreeRTOS/Src/tasks.c ****         {
3778:FreeRTOS/Src/tasks.c ****             /* Delete the timer task created by the kernel. */
3779:FreeRTOS/Src/tasks.c ****             vTaskDelete( xTimerGetTimerDaemonTaskHandle() );
3780:FreeRTOS/Src/tasks.c ****         }
3781:FreeRTOS/Src/tasks.c ****         #endif /* #if ( configUSE_TIMERS == 1 ) */
3782:FreeRTOS/Src/tasks.c **** 
3783:FreeRTOS/Src/tasks.c ****         /* Delete Idle tasks created by the kernel.*/
3784:FreeRTOS/Src/tasks.c ****         for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
3785:FreeRTOS/Src/tasks.c ****         {
3786:FreeRTOS/Src/tasks.c ****             vTaskDelete( xIdleTaskHandles[ xCoreID ] );
3787:FreeRTOS/Src/tasks.c ****         }
3788:FreeRTOS/Src/tasks.c **** 
3789:FreeRTOS/Src/tasks.c ****         /* Idle task is responsible for reclaiming the resources of the tasks in
3790:FreeRTOS/Src/tasks.c ****          * xTasksWaitingTermination list. Since the idle task is now deleted and
3791:FreeRTOS/Src/tasks.c ****          * no longer going to run, we need to reclaim resources of all the tasks
3792:FreeRTOS/Src/tasks.c ****          * in the xTasksWaitingTermination list. */
3793:FreeRTOS/Src/tasks.c ****         prvCheckTasksWaitingTermination();
3794:FreeRTOS/Src/tasks.c ****     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 70


3795:FreeRTOS/Src/tasks.c ****     #endif /* #if ( INCLUDE_vTaskDelete == 1 ) */
3796:FreeRTOS/Src/tasks.c **** 
3797:FreeRTOS/Src/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
3798:FreeRTOS/Src/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
3799:FreeRTOS/Src/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
3800:FreeRTOS/Src/tasks.c ****     portDISABLE_INTERRUPTS();
3801:FreeRTOS/Src/tasks.c ****     xSchedulerRunning = pdFALSE;
3802:FreeRTOS/Src/tasks.c **** 
3803:FreeRTOS/Src/tasks.c ****     /* This function must be called from a task and the application is
3804:FreeRTOS/Src/tasks.c ****      * responsible for deleting that task after the scheduler is stopped. */
3805:FreeRTOS/Src/tasks.c ****     vPortEndScheduler();
3806:FreeRTOS/Src/tasks.c **** 
3807:FreeRTOS/Src/tasks.c ****     traceRETURN_vTaskEndScheduler();
3808:FreeRTOS/Src/tasks.c **** }
3809:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
3810:FreeRTOS/Src/tasks.c **** 
3811:FreeRTOS/Src/tasks.c **** void vTaskSuspendAll( void )
3812:FreeRTOS/Src/tasks.c **** {
3813:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskSuspendAll();
3814:FreeRTOS/Src/tasks.c **** 
3815:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
3816:FreeRTOS/Src/tasks.c ****     {
3817:FreeRTOS/Src/tasks.c ****         /* A critical section is not required as the variable is of type
3818:FreeRTOS/Src/tasks.c ****          * BaseType_t.  Please read Richard Barry's reply in the following link to a
3819:FreeRTOS/Src/tasks.c ****          * post in the FreeRTOS support forum before reporting this as a bug! -
3820:FreeRTOS/Src/tasks.c ****          * https://goo.gl/wu4acr */
3821:FreeRTOS/Src/tasks.c **** 
3822:FreeRTOS/Src/tasks.c ****         /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
3823:FreeRTOS/Src/tasks.c ****          * do not otherwise exhibit real time behaviour. */
3824:FreeRTOS/Src/tasks.c ****         portSOFTWARE_BARRIER();
3825:FreeRTOS/Src/tasks.c **** 
3826:FreeRTOS/Src/tasks.c ****         /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
3827:FreeRTOS/Src/tasks.c ****          * is used to allow calls to vTaskSuspendAll() to nest. */
3828:FreeRTOS/Src/tasks.c ****         uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
3829:FreeRTOS/Src/tasks.c **** 
3830:FreeRTOS/Src/tasks.c ****         /* Enforces ordering for ports and optimised compilers that may otherwise place
3831:FreeRTOS/Src/tasks.c ****          * the above increment elsewhere. */
3832:FreeRTOS/Src/tasks.c ****         portMEMORY_BARRIER();
3833:FreeRTOS/Src/tasks.c ****     }
3834:FreeRTOS/Src/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
3835:FreeRTOS/Src/tasks.c ****     {
3836:FreeRTOS/Src/tasks.c ****         UBaseType_t ulState;
3837:FreeRTOS/Src/tasks.c **** 
3838:FreeRTOS/Src/tasks.c ****         /* This must only be called from within a task. */
3839:FreeRTOS/Src/tasks.c ****         portASSERT_IF_IN_ISR();
3840:FreeRTOS/Src/tasks.c **** 
3841:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning != pdFALSE )
3842:FreeRTOS/Src/tasks.c ****         {
3843:FreeRTOS/Src/tasks.c ****             /* Writes to uxSchedulerSuspended must be protected by both the task AND ISR locks.
3844:FreeRTOS/Src/tasks.c ****              * We must disable interrupts before we grab the locks in the event that this task is
3845:FreeRTOS/Src/tasks.c ****              * interrupted and switches context before incrementing uxSchedulerSuspended.
3846:FreeRTOS/Src/tasks.c ****              * It is safe to re-enable interrupts after releasing the ISR lock and incrementing
3847:FreeRTOS/Src/tasks.c ****              * uxSchedulerSuspended since that will prevent context switches. */
3848:FreeRTOS/Src/tasks.c ****             ulState = portSET_INTERRUPT_MASK();
3849:FreeRTOS/Src/tasks.c **** 
3850:FreeRTOS/Src/tasks.c ****             /* This must never be called from inside a critical section. */
3851:FreeRTOS/Src/tasks.c ****             configASSERT( portGET_CRITICAL_NESTING_COUNT() == 0 );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 71


3852:FreeRTOS/Src/tasks.c **** 
3853:FreeRTOS/Src/tasks.c ****             /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
3854:FreeRTOS/Src/tasks.c ****              * do not otherwise exhibit real time behaviour. */
3855:FreeRTOS/Src/tasks.c ****             portSOFTWARE_BARRIER();
3856:FreeRTOS/Src/tasks.c **** 
3857:FreeRTOS/Src/tasks.c ****             portGET_TASK_LOCK();
3858:FreeRTOS/Src/tasks.c **** 
3859:FreeRTOS/Src/tasks.c ****             /* uxSchedulerSuspended is increased after prvCheckForRunStateChange. The
3860:FreeRTOS/Src/tasks.c ****              * purpose is to prevent altering the variable when fromISR APIs are readying
3861:FreeRTOS/Src/tasks.c ****              * it. */
3862:FreeRTOS/Src/tasks.c ****             if( uxSchedulerSuspended == 0U )
3863:FreeRTOS/Src/tasks.c ****             {
3864:FreeRTOS/Src/tasks.c ****                 prvCheckForRunStateChange();
3865:FreeRTOS/Src/tasks.c ****             }
3866:FreeRTOS/Src/tasks.c ****             else
3867:FreeRTOS/Src/tasks.c ****             {
3868:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3869:FreeRTOS/Src/tasks.c ****             }
3870:FreeRTOS/Src/tasks.c **** 
3871:FreeRTOS/Src/tasks.c ****             portGET_ISR_LOCK();
3872:FreeRTOS/Src/tasks.c **** 
3873:FreeRTOS/Src/tasks.c ****             /* The scheduler is suspended if uxSchedulerSuspended is non-zero. An increment
3874:FreeRTOS/Src/tasks.c ****              * is used to allow calls to vTaskSuspendAll() to nest. */
3875:FreeRTOS/Src/tasks.c ****             ++uxSchedulerSuspended;
3876:FreeRTOS/Src/tasks.c ****             portRELEASE_ISR_LOCK();
3877:FreeRTOS/Src/tasks.c **** 
3878:FreeRTOS/Src/tasks.c ****             portCLEAR_INTERRUPT_MASK( ulState );
3879:FreeRTOS/Src/tasks.c ****         }
3880:FreeRTOS/Src/tasks.c ****         else
3881:FreeRTOS/Src/tasks.c ****         {
3882:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3883:FreeRTOS/Src/tasks.c ****         }
3884:FreeRTOS/Src/tasks.c ****     }
3885:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
3886:FreeRTOS/Src/tasks.c **** 
3887:FreeRTOS/Src/tasks.c ****     traceRETURN_vTaskSuspendAll();
3888:FreeRTOS/Src/tasks.c **** }
3889:FreeRTOS/Src/tasks.c **** 
3890:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
3891:FreeRTOS/Src/tasks.c **** 
3892:FreeRTOS/Src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3893:FreeRTOS/Src/tasks.c **** 
3894:FreeRTOS/Src/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
3895:FreeRTOS/Src/tasks.c ****     {
3896:FreeRTOS/Src/tasks.c ****         TickType_t xReturn;
3897:FreeRTOS/Src/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
3898:FreeRTOS/Src/tasks.c **** 
3899:FreeRTOS/Src/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
3900:FreeRTOS/Src/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
3901:FreeRTOS/Src/tasks.c ****          * task that are in the Ready state, even though the idle task is
3902:FreeRTOS/Src/tasks.c ****          * running. */
3903:FreeRTOS/Src/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
3904:FreeRTOS/Src/tasks.c ****         {
3905:FreeRTOS/Src/tasks.c ****             if( uxTopReadyPriority > tskIDLE_PRIORITY )
3906:FreeRTOS/Src/tasks.c ****             {
3907:FreeRTOS/Src/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
3908:FreeRTOS/Src/tasks.c ****             }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 72


3909:FreeRTOS/Src/tasks.c ****         }
3910:FreeRTOS/Src/tasks.c ****         #else
3911:FreeRTOS/Src/tasks.c ****         {
3912:FreeRTOS/Src/tasks.c ****             const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
3913:FreeRTOS/Src/tasks.c **** 
3914:FreeRTOS/Src/tasks.c ****             /* When port optimised task selection is used the uxTopReadyPriority
3915:FreeRTOS/Src/tasks.c ****              * variable is used as a bit map.  If bits other than the least
3916:FreeRTOS/Src/tasks.c ****              * significant bit are set then there are tasks that have a priority
3917:FreeRTOS/Src/tasks.c ****              * above the idle priority that are in the Ready state.  This takes
3918:FreeRTOS/Src/tasks.c ****              * care of the case where the co-operative scheduler is in use. */
3919:FreeRTOS/Src/tasks.c ****             if( uxTopReadyPriority > uxLeastSignificantBit )
3920:FreeRTOS/Src/tasks.c ****             {
3921:FreeRTOS/Src/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
3922:FreeRTOS/Src/tasks.c ****             }
3923:FreeRTOS/Src/tasks.c ****         }
3924:FreeRTOS/Src/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
3925:FreeRTOS/Src/tasks.c **** 
3926:FreeRTOS/Src/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
3927:FreeRTOS/Src/tasks.c ****         {
3928:FreeRTOS/Src/tasks.c ****             xReturn = 0;
3929:FreeRTOS/Src/tasks.c ****         }
3930:FreeRTOS/Src/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1U )
3931:FreeRTOS/Src/tasks.c ****         {
3932:FreeRTOS/Src/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
3933:FreeRTOS/Src/tasks.c ****              * time slicing is used then the very next tick interrupt must be
3934:FreeRTOS/Src/tasks.c ****              * processed. */
3935:FreeRTOS/Src/tasks.c ****             xReturn = 0;
3936:FreeRTOS/Src/tasks.c ****         }
3937:FreeRTOS/Src/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
3938:FreeRTOS/Src/tasks.c ****         {
3939:FreeRTOS/Src/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
3940:FreeRTOS/Src/tasks.c ****              * idle priority.  This path can only be reached if
3941:FreeRTOS/Src/tasks.c ****              * configUSE_PREEMPTION is 0. */
3942:FreeRTOS/Src/tasks.c ****             xReturn = 0;
3943:FreeRTOS/Src/tasks.c ****         }
3944:FreeRTOS/Src/tasks.c ****         else
3945:FreeRTOS/Src/tasks.c ****         {
3946:FreeRTOS/Src/tasks.c ****             xReturn = xNextTaskUnblockTime;
3947:FreeRTOS/Src/tasks.c ****             xReturn -= xTickCount;
3948:FreeRTOS/Src/tasks.c ****         }
3949:FreeRTOS/Src/tasks.c **** 
3950:FreeRTOS/Src/tasks.c ****         return xReturn;
3951:FreeRTOS/Src/tasks.c ****     }
3952:FreeRTOS/Src/tasks.c **** 
3953:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3954:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
3955:FreeRTOS/Src/tasks.c **** 
3956:FreeRTOS/Src/tasks.c **** BaseType_t xTaskResumeAll( void )
3957:FreeRTOS/Src/tasks.c **** {
3958:FreeRTOS/Src/tasks.c ****     TCB_t * pxTCB = NULL;
3959:FreeRTOS/Src/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
3960:FreeRTOS/Src/tasks.c **** 
3961:FreeRTOS/Src/tasks.c ****     traceENTER_xTaskResumeAll();
3962:FreeRTOS/Src/tasks.c **** 
3963:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
3964:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning != pdFALSE )
3965:FreeRTOS/Src/tasks.c ****     #endif
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 73


3966:FreeRTOS/Src/tasks.c ****     {
3967:FreeRTOS/Src/tasks.c ****         /* It is possible that an ISR caused a task to be removed from an event
3968:FreeRTOS/Src/tasks.c ****          * list while the scheduler was suspended.  If this was the case then the
3969:FreeRTOS/Src/tasks.c ****          * removed task will have been added to the xPendingReadyList.  Once the
3970:FreeRTOS/Src/tasks.c ****          * scheduler has been resumed it is safe to move all the pending ready
3971:FreeRTOS/Src/tasks.c ****          * tasks from this list into their appropriate ready list. */
3972:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
3973:FreeRTOS/Src/tasks.c ****         {
3974:FreeRTOS/Src/tasks.c ****             BaseType_t xCoreID;
3975:FreeRTOS/Src/tasks.c ****             xCoreID = ( BaseType_t ) portGET_CORE_ID();
3976:FreeRTOS/Src/tasks.c **** 
3977:FreeRTOS/Src/tasks.c ****             /* If uxSchedulerSuspended is zero then this function does not match a
3978:FreeRTOS/Src/tasks.c ****              * previous call to vTaskSuspendAll(). */
3979:FreeRTOS/Src/tasks.c ****             configASSERT( uxSchedulerSuspended != 0U );
3980:FreeRTOS/Src/tasks.c **** 
3981:FreeRTOS/Src/tasks.c ****             uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
3982:FreeRTOS/Src/tasks.c ****             portRELEASE_TASK_LOCK();
3983:FreeRTOS/Src/tasks.c **** 
3984:FreeRTOS/Src/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3985:FreeRTOS/Src/tasks.c ****             {
3986:FreeRTOS/Src/tasks.c ****                 if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
3987:FreeRTOS/Src/tasks.c ****                 {
3988:FreeRTOS/Src/tasks.c ****                     /* Move any readied tasks from the pending list into the
3989:FreeRTOS/Src/tasks.c ****                      * appropriate ready list. */
3990:FreeRTOS/Src/tasks.c ****                     while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
3991:FreeRTOS/Src/tasks.c ****                     {
3992:FreeRTOS/Src/tasks.c ****                         /* MISRA Ref 11.5.3 [Void pointer assignment] */
3993:FreeRTOS/Src/tasks.c ****                         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/M
3994:FreeRTOS/Src/tasks.c ****                         /* coverity[misra_c_2012_rule_11_5_violation] */
3995:FreeRTOS/Src/tasks.c ****                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
3996:FreeRTOS/Src/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
3997:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
3998:FreeRTOS/Src/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
3999:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4000:FreeRTOS/Src/tasks.c **** 
4001:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES == 1 )
4002:FreeRTOS/Src/tasks.c ****                         {
4003:FreeRTOS/Src/tasks.c ****                             /* If the moved task has a priority higher than the current
4004:FreeRTOS/Src/tasks.c ****                              * task then a yield must be performed. */
4005:FreeRTOS/Src/tasks.c ****                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4006:FreeRTOS/Src/tasks.c ****                             {
4007:FreeRTOS/Src/tasks.c ****                                 xYieldPendings[ xCoreID ] = pdTRUE;
4008:FreeRTOS/Src/tasks.c ****                             }
4009:FreeRTOS/Src/tasks.c ****                             else
4010:FreeRTOS/Src/tasks.c ****                             {
4011:FreeRTOS/Src/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
4012:FreeRTOS/Src/tasks.c ****                             }
4013:FreeRTOS/Src/tasks.c ****                         }
4014:FreeRTOS/Src/tasks.c ****                         #else /* #if ( configNUMBER_OF_CORES == 1 ) */
4015:FreeRTOS/Src/tasks.c ****                         {
4016:FreeRTOS/Src/tasks.c ****                             /* All appropriate tasks yield at the moment a task is added to xPendin
4017:FreeRTOS/Src/tasks.c ****                              * If the current core yielded then vTaskSwitchContext() has already be
4018:FreeRTOS/Src/tasks.c ****                              * which sets xYieldPendings for the current core to pdTRUE. */
4019:FreeRTOS/Src/tasks.c ****                         }
4020:FreeRTOS/Src/tasks.c ****                         #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4021:FreeRTOS/Src/tasks.c ****                     }
4022:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 74


4023:FreeRTOS/Src/tasks.c ****                     if( pxTCB != NULL )
4024:FreeRTOS/Src/tasks.c ****                     {
4025:FreeRTOS/Src/tasks.c ****                         /* A task was unblocked while the scheduler was suspended,
4026:FreeRTOS/Src/tasks.c ****                          * which may have prevented the next unblock time from being
4027:FreeRTOS/Src/tasks.c ****                          * re-calculated, in which case re-calculate it now.  Mainly
4028:FreeRTOS/Src/tasks.c ****                          * important for low power tickless implementations, where
4029:FreeRTOS/Src/tasks.c ****                          * this can prevent an unnecessary exit from low power
4030:FreeRTOS/Src/tasks.c ****                          * state. */
4031:FreeRTOS/Src/tasks.c ****                         prvResetNextTaskUnblockTime();
4032:FreeRTOS/Src/tasks.c ****                     }
4033:FreeRTOS/Src/tasks.c **** 
4034:FreeRTOS/Src/tasks.c ****                     /* If any ticks occurred while the scheduler was suspended then
4035:FreeRTOS/Src/tasks.c ****                      * they should be processed now.  This ensures the tick count does
4036:FreeRTOS/Src/tasks.c ****                      * not  slip, and that any delayed tasks are resumed at the correct
4037:FreeRTOS/Src/tasks.c ****                      * time.
4038:FreeRTOS/Src/tasks.c ****                      *
4039:FreeRTOS/Src/tasks.c ****                      * It should be safe to call xTaskIncrementTick here from any core
4040:FreeRTOS/Src/tasks.c ****                      * since we are in a critical section and xTaskIncrementTick itself
4041:FreeRTOS/Src/tasks.c ****                      * protects itself within a critical section. Suspending the scheduler
4042:FreeRTOS/Src/tasks.c ****                      * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
4043:FreeRTOS/Src/tasks.c ****                     {
4044:FreeRTOS/Src/tasks.c ****                         TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
4045:FreeRTOS/Src/tasks.c **** 
4046:FreeRTOS/Src/tasks.c ****                         if( xPendedCounts > ( TickType_t ) 0U )
4047:FreeRTOS/Src/tasks.c ****                         {
4048:FreeRTOS/Src/tasks.c ****                             do
4049:FreeRTOS/Src/tasks.c ****                             {
4050:FreeRTOS/Src/tasks.c ****                                 if( xTaskIncrementTick() != pdFALSE )
4051:FreeRTOS/Src/tasks.c ****                                 {
4052:FreeRTOS/Src/tasks.c ****                                     /* Other cores are interrupted from
4053:FreeRTOS/Src/tasks.c ****                                      * within xTaskIncrementTick(). */
4054:FreeRTOS/Src/tasks.c ****                                     xYieldPendings[ xCoreID ] = pdTRUE;
4055:FreeRTOS/Src/tasks.c ****                                 }
4056:FreeRTOS/Src/tasks.c ****                                 else
4057:FreeRTOS/Src/tasks.c ****                                 {
4058:FreeRTOS/Src/tasks.c ****                                     mtCOVERAGE_TEST_MARKER();
4059:FreeRTOS/Src/tasks.c ****                                 }
4060:FreeRTOS/Src/tasks.c **** 
4061:FreeRTOS/Src/tasks.c ****                                 --xPendedCounts;
4062:FreeRTOS/Src/tasks.c ****                             } while( xPendedCounts > ( TickType_t ) 0U );
4063:FreeRTOS/Src/tasks.c **** 
4064:FreeRTOS/Src/tasks.c ****                             xPendedTicks = 0;
4065:FreeRTOS/Src/tasks.c ****                         }
4066:FreeRTOS/Src/tasks.c ****                         else
4067:FreeRTOS/Src/tasks.c ****                         {
4068:FreeRTOS/Src/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4069:FreeRTOS/Src/tasks.c ****                         }
4070:FreeRTOS/Src/tasks.c ****                     }
4071:FreeRTOS/Src/tasks.c **** 
4072:FreeRTOS/Src/tasks.c ****                     if( xYieldPendings[ xCoreID ] != pdFALSE )
4073:FreeRTOS/Src/tasks.c ****                     {
4074:FreeRTOS/Src/tasks.c ****                         #if ( configUSE_PREEMPTION != 0 )
4075:FreeRTOS/Src/tasks.c ****                         {
4076:FreeRTOS/Src/tasks.c ****                             xAlreadyYielded = pdTRUE;
4077:FreeRTOS/Src/tasks.c ****                         }
4078:FreeRTOS/Src/tasks.c ****                         #endif /* #if ( configUSE_PREEMPTION != 0 ) */
4079:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 75


4080:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES == 1 )
4081:FreeRTOS/Src/tasks.c ****                         {
4082:FreeRTOS/Src/tasks.c ****                             taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
4083:FreeRTOS/Src/tasks.c ****                         }
4084:FreeRTOS/Src/tasks.c ****                         #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4085:FreeRTOS/Src/tasks.c ****                     }
4086:FreeRTOS/Src/tasks.c ****                     else
4087:FreeRTOS/Src/tasks.c ****                     {
4088:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4089:FreeRTOS/Src/tasks.c ****                     }
4090:FreeRTOS/Src/tasks.c ****                 }
4091:FreeRTOS/Src/tasks.c ****             }
4092:FreeRTOS/Src/tasks.c ****             else
4093:FreeRTOS/Src/tasks.c ****             {
4094:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4095:FreeRTOS/Src/tasks.c ****             }
4096:FreeRTOS/Src/tasks.c ****         }
4097:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
4098:FreeRTOS/Src/tasks.c ****     }
4099:FreeRTOS/Src/tasks.c **** 
4100:FreeRTOS/Src/tasks.c ****     traceRETURN_xTaskResumeAll( xAlreadyYielded );
4101:FreeRTOS/Src/tasks.c **** 
4102:FreeRTOS/Src/tasks.c ****     return xAlreadyYielded;
4103:FreeRTOS/Src/tasks.c **** }
4104:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4105:FreeRTOS/Src/tasks.c **** 
4106:FreeRTOS/Src/tasks.c **** TickType_t xTaskGetTickCount( void )
4107:FreeRTOS/Src/tasks.c **** {
4108:FreeRTOS/Src/tasks.c ****     TickType_t xTicks;
4109:FreeRTOS/Src/tasks.c **** 
4110:FreeRTOS/Src/tasks.c ****     traceENTER_xTaskGetTickCount();
4111:FreeRTOS/Src/tasks.c **** 
4112:FreeRTOS/Src/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
4113:FreeRTOS/Src/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
4114:FreeRTOS/Src/tasks.c ****     {
4115:FreeRTOS/Src/tasks.c ****         xTicks = xTickCount;
4116:FreeRTOS/Src/tasks.c ****     }
4117:FreeRTOS/Src/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
4118:FreeRTOS/Src/tasks.c **** 
4119:FreeRTOS/Src/tasks.c ****     traceRETURN_xTaskGetTickCount( xTicks );
4120:FreeRTOS/Src/tasks.c **** 
4121:FreeRTOS/Src/tasks.c ****     return xTicks;
4122:FreeRTOS/Src/tasks.c **** }
4123:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4124:FreeRTOS/Src/tasks.c **** 
4125:FreeRTOS/Src/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
4126:FreeRTOS/Src/tasks.c **** {
4127:FreeRTOS/Src/tasks.c ****     TickType_t xReturn;
4128:FreeRTOS/Src/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
4129:FreeRTOS/Src/tasks.c **** 
4130:FreeRTOS/Src/tasks.c ****     traceENTER_xTaskGetTickCountFromISR();
4131:FreeRTOS/Src/tasks.c **** 
4132:FreeRTOS/Src/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
4133:FreeRTOS/Src/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
4134:FreeRTOS/Src/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
4135:FreeRTOS/Src/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
4136:FreeRTOS/Src/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 76


4137:FreeRTOS/Src/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4138:FreeRTOS/Src/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
4139:FreeRTOS/Src/tasks.c ****      * assigned a priority above the configured maximum system call priority.
4140:FreeRTOS/Src/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
4141:FreeRTOS/Src/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
4142:FreeRTOS/Src/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
4143:FreeRTOS/Src/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
4144:FreeRTOS/Src/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
4145:FreeRTOS/Src/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
4146:FreeRTOS/Src/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4147:FreeRTOS/Src/tasks.c **** 
4148:FreeRTOS/Src/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
4149:FreeRTOS/Src/tasks.c ****     {
4150:FreeRTOS/Src/tasks.c ****         xReturn = xTickCount;
4151:FreeRTOS/Src/tasks.c ****     }
4152:FreeRTOS/Src/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4153:FreeRTOS/Src/tasks.c **** 
4154:FreeRTOS/Src/tasks.c ****     traceRETURN_xTaskGetTickCountFromISR( xReturn );
4155:FreeRTOS/Src/tasks.c **** 
4156:FreeRTOS/Src/tasks.c ****     return xReturn;
4157:FreeRTOS/Src/tasks.c **** }
4158:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4159:FreeRTOS/Src/tasks.c **** 
4160:FreeRTOS/Src/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
4161:FreeRTOS/Src/tasks.c **** {
4162:FreeRTOS/Src/tasks.c ****     traceENTER_uxTaskGetNumberOfTasks();
4163:FreeRTOS/Src/tasks.c **** 
4164:FreeRTOS/Src/tasks.c ****     /* A critical section is not required because the variables are of type
4165:FreeRTOS/Src/tasks.c ****      * BaseType_t. */
4166:FreeRTOS/Src/tasks.c ****     traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
4167:FreeRTOS/Src/tasks.c **** 
4168:FreeRTOS/Src/tasks.c ****     return uxCurrentNumberOfTasks;
4169:FreeRTOS/Src/tasks.c **** }
4170:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4171:FreeRTOS/Src/tasks.c **** 
4172:FreeRTOS/Src/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery )
4173:FreeRTOS/Src/tasks.c **** {
4174:FreeRTOS/Src/tasks.c ****     TCB_t * pxTCB;
4175:FreeRTOS/Src/tasks.c **** 
4176:FreeRTOS/Src/tasks.c ****     traceENTER_pcTaskGetName( xTaskToQuery );
4177:FreeRTOS/Src/tasks.c **** 
4178:FreeRTOS/Src/tasks.c ****     /* If null is passed in here then the name of the calling task is being
4179:FreeRTOS/Src/tasks.c ****      * queried. */
4180:FreeRTOS/Src/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
4181:FreeRTOS/Src/tasks.c ****     configASSERT( pxTCB );
4182:FreeRTOS/Src/tasks.c **** 
4183:FreeRTOS/Src/tasks.c ****     traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );
4184:FreeRTOS/Src/tasks.c **** 
4185:FreeRTOS/Src/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
4186:FreeRTOS/Src/tasks.c **** }
4187:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4188:FreeRTOS/Src/tasks.c **** 
4189:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
4190:FreeRTOS/Src/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
4191:FreeRTOS/Src/tasks.c ****                                                      const char pcNameToQuery[] )
4192:FreeRTOS/Src/tasks.c ****     {
4193:FreeRTOS/Src/tasks.c ****         TCB_t * pxReturn = NULL;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 77


4194:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB = NULL;
4195:FreeRTOS/Src/tasks.c ****         UBaseType_t x;
4196:FreeRTOS/Src/tasks.c ****         char cNextChar;
4197:FreeRTOS/Src/tasks.c ****         BaseType_t xBreakLoop;
4198:FreeRTOS/Src/tasks.c ****         const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
4199:FreeRTOS/Src/tasks.c ****         ListItem_t * pxIterator;
4200:FreeRTOS/Src/tasks.c **** 
4201:FreeRTOS/Src/tasks.c ****         /* This function is called with the scheduler suspended. */
4202:FreeRTOS/Src/tasks.c **** 
4203:FreeRTOS/Src/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
4204:FreeRTOS/Src/tasks.c ****         {
4205:FreeRTOS/Src/tasks.c ****             for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator =
4206:FreeRTOS/Src/tasks.c ****             {
4207:FreeRTOS/Src/tasks.c ****                 /* MISRA Ref 11.5.3 [Void pointer assignment] */
4208:FreeRTOS/Src/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
4209:FreeRTOS/Src/tasks.c ****                 /* coverity[misra_c_2012_rule_11_5_violation] */
4210:FreeRTOS/Src/tasks.c ****                 pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
4211:FreeRTOS/Src/tasks.c **** 
4212:FreeRTOS/Src/tasks.c ****                 /* Check each character in the name looking for a match or
4213:FreeRTOS/Src/tasks.c ****                  * mismatch. */
4214:FreeRTOS/Src/tasks.c ****                 xBreakLoop = pdFALSE;
4215:FreeRTOS/Src/tasks.c **** 
4216:FreeRTOS/Src/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
4217:FreeRTOS/Src/tasks.c ****                 {
4218:FreeRTOS/Src/tasks.c ****                     cNextChar = pxTCB->pcTaskName[ x ];
4219:FreeRTOS/Src/tasks.c **** 
4220:FreeRTOS/Src/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
4221:FreeRTOS/Src/tasks.c ****                     {
4222:FreeRTOS/Src/tasks.c ****                         /* Characters didn't match. */
4223:FreeRTOS/Src/tasks.c ****                         xBreakLoop = pdTRUE;
4224:FreeRTOS/Src/tasks.c ****                     }
4225:FreeRTOS/Src/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
4226:FreeRTOS/Src/tasks.c ****                     {
4227:FreeRTOS/Src/tasks.c ****                         /* Both strings terminated, a match must have been
4228:FreeRTOS/Src/tasks.c ****                          * found. */
4229:FreeRTOS/Src/tasks.c ****                         pxReturn = pxTCB;
4230:FreeRTOS/Src/tasks.c ****                         xBreakLoop = pdTRUE;
4231:FreeRTOS/Src/tasks.c ****                     }
4232:FreeRTOS/Src/tasks.c ****                     else
4233:FreeRTOS/Src/tasks.c ****                     {
4234:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4235:FreeRTOS/Src/tasks.c ****                     }
4236:FreeRTOS/Src/tasks.c **** 
4237:FreeRTOS/Src/tasks.c ****                     if( xBreakLoop != pdFALSE )
4238:FreeRTOS/Src/tasks.c ****                     {
4239:FreeRTOS/Src/tasks.c ****                         break;
4240:FreeRTOS/Src/tasks.c ****                     }
4241:FreeRTOS/Src/tasks.c ****                 }
4242:FreeRTOS/Src/tasks.c **** 
4243:FreeRTOS/Src/tasks.c ****                 if( pxReturn != NULL )
4244:FreeRTOS/Src/tasks.c ****                 {
4245:FreeRTOS/Src/tasks.c ****                     /* The handle has been found. */
4246:FreeRTOS/Src/tasks.c ****                     break;
4247:FreeRTOS/Src/tasks.c ****                 }
4248:FreeRTOS/Src/tasks.c ****             }
4249:FreeRTOS/Src/tasks.c ****         }
4250:FreeRTOS/Src/tasks.c ****         else
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 78


4251:FreeRTOS/Src/tasks.c ****         {
4252:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4253:FreeRTOS/Src/tasks.c ****         }
4254:FreeRTOS/Src/tasks.c **** 
4255:FreeRTOS/Src/tasks.c ****         return pxReturn;
4256:FreeRTOS/Src/tasks.c ****     }
4257:FreeRTOS/Src/tasks.c **** 
4258:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
4259:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4260:FreeRTOS/Src/tasks.c **** 
4261:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
4262:FreeRTOS/Src/tasks.c **** 
4263:FreeRTOS/Src/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery )
4264:FreeRTOS/Src/tasks.c ****     {
4265:FreeRTOS/Src/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
4266:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
4267:FreeRTOS/Src/tasks.c **** 
4268:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGetHandle( pcNameToQuery );
4269:FreeRTOS/Src/tasks.c **** 
4270:FreeRTOS/Src/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
4271:FreeRTOS/Src/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
4272:FreeRTOS/Src/tasks.c **** 
4273:FreeRTOS/Src/tasks.c ****         vTaskSuspendAll();
4274:FreeRTOS/Src/tasks.c ****         {
4275:FreeRTOS/Src/tasks.c ****             /* Search the ready lists. */
4276:FreeRTOS/Src/tasks.c ****             do
4277:FreeRTOS/Src/tasks.c ****             {
4278:FreeRTOS/Src/tasks.c ****                 uxQueue--;
4279:FreeRTOS/Src/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
4280:FreeRTOS/Src/tasks.c **** 
4281:FreeRTOS/Src/tasks.c ****                 if( pxTCB != NULL )
4282:FreeRTOS/Src/tasks.c ****                 {
4283:FreeRTOS/Src/tasks.c ****                     /* Found the handle. */
4284:FreeRTOS/Src/tasks.c ****                     break;
4285:FreeRTOS/Src/tasks.c ****                 }
4286:FreeRTOS/Src/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
4287:FreeRTOS/Src/tasks.c **** 
4288:FreeRTOS/Src/tasks.c ****             /* Search the delayed lists. */
4289:FreeRTOS/Src/tasks.c ****             if( pxTCB == NULL )
4290:FreeRTOS/Src/tasks.c ****             {
4291:FreeRTOS/Src/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
4292:FreeRTOS/Src/tasks.c ****             }
4293:FreeRTOS/Src/tasks.c **** 
4294:FreeRTOS/Src/tasks.c ****             if( pxTCB == NULL )
4295:FreeRTOS/Src/tasks.c ****             {
4296:FreeRTOS/Src/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
4297:FreeRTOS/Src/tasks.c ****             }
4298:FreeRTOS/Src/tasks.c **** 
4299:FreeRTOS/Src/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
4300:FreeRTOS/Src/tasks.c ****             {
4301:FreeRTOS/Src/tasks.c ****                 if( pxTCB == NULL )
4302:FreeRTOS/Src/tasks.c ****                 {
4303:FreeRTOS/Src/tasks.c ****                     /* Search the suspended list. */
4304:FreeRTOS/Src/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
4305:FreeRTOS/Src/tasks.c ****                 }
4306:FreeRTOS/Src/tasks.c ****             }
4307:FreeRTOS/Src/tasks.c ****             #endif
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 79


4308:FreeRTOS/Src/tasks.c **** 
4309:FreeRTOS/Src/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
4310:FreeRTOS/Src/tasks.c ****             {
4311:FreeRTOS/Src/tasks.c ****                 if( pxTCB == NULL )
4312:FreeRTOS/Src/tasks.c ****                 {
4313:FreeRTOS/Src/tasks.c ****                     /* Search the deleted list. */
4314:FreeRTOS/Src/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQu
4315:FreeRTOS/Src/tasks.c ****                 }
4316:FreeRTOS/Src/tasks.c ****             }
4317:FreeRTOS/Src/tasks.c ****             #endif
4318:FreeRTOS/Src/tasks.c ****         }
4319:FreeRTOS/Src/tasks.c ****         ( void ) xTaskResumeAll();
4320:FreeRTOS/Src/tasks.c **** 
4321:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGetHandle( pxTCB );
4322:FreeRTOS/Src/tasks.c **** 
4323:FreeRTOS/Src/tasks.c ****         return pxTCB;
4324:FreeRTOS/Src/tasks.c ****     }
4325:FreeRTOS/Src/tasks.c **** 
4326:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
4327:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4328:FreeRTOS/Src/tasks.c **** 
4329:FreeRTOS/Src/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
4330:FreeRTOS/Src/tasks.c **** 
4331:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskGetStaticBuffers( TaskHandle_t xTask,
4332:FreeRTOS/Src/tasks.c ****                                       StackType_t ** ppuxStackBuffer,
4333:FreeRTOS/Src/tasks.c ****                                       StaticTask_t ** ppxTaskBuffer )
4334:FreeRTOS/Src/tasks.c ****     {
4335:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
4336:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
4337:FreeRTOS/Src/tasks.c **** 
4338:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGetStaticBuffers( xTask, ppuxStackBuffer, ppxTaskBuffer );
4339:FreeRTOS/Src/tasks.c **** 
4340:FreeRTOS/Src/tasks.c ****         configASSERT( ppuxStackBuffer != NULL );
4341:FreeRTOS/Src/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
4342:FreeRTOS/Src/tasks.c **** 
4343:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
4344:FreeRTOS/Src/tasks.c **** 
4345:FreeRTOS/Src/tasks.c ****         #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
4346:FreeRTOS/Src/tasks.c ****         {
4347:FreeRTOS/Src/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB )
4348:FreeRTOS/Src/tasks.c ****             {
4349:FreeRTOS/Src/tasks.c ****                 *ppuxStackBuffer = pxTCB->pxStack;
4350:FreeRTOS/Src/tasks.c ****                 /* MISRA Ref 11.3.1 [Misaligned access] */
4351:FreeRTOS/Src/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
4352:FreeRTOS/Src/tasks.c ****                 /* coverity[misra_c_2012_rule_11_3_violation] */
4353:FreeRTOS/Src/tasks.c ****                 *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
4354:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
4355:FreeRTOS/Src/tasks.c ****             }
4356:FreeRTOS/Src/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
4357:FreeRTOS/Src/tasks.c ****             {
4358:FreeRTOS/Src/tasks.c ****                 *ppuxStackBuffer = pxTCB->pxStack;
4359:FreeRTOS/Src/tasks.c ****                 *ppxTaskBuffer = NULL;
4360:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
4361:FreeRTOS/Src/tasks.c ****             }
4362:FreeRTOS/Src/tasks.c ****             else
4363:FreeRTOS/Src/tasks.c ****             {
4364:FreeRTOS/Src/tasks.c ****                 xReturn = pdFALSE;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 80


4365:FreeRTOS/Src/tasks.c ****             }
4366:FreeRTOS/Src/tasks.c ****         }
4367:FreeRTOS/Src/tasks.c ****         #else /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 */
4368:FreeRTOS/Src/tasks.c ****         {
4369:FreeRTOS/Src/tasks.c ****             *ppuxStackBuffer = pxTCB->pxStack;
4370:FreeRTOS/Src/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
4371:FreeRTOS/Src/tasks.c ****             xReturn = pdTRUE;
4372:FreeRTOS/Src/tasks.c ****         }
4373:FreeRTOS/Src/tasks.c ****         #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 */
4374:FreeRTOS/Src/tasks.c **** 
4375:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGetStaticBuffers( xReturn );
4376:FreeRTOS/Src/tasks.c **** 
4377:FreeRTOS/Src/tasks.c ****         return xReturn;
4378:FreeRTOS/Src/tasks.c ****     }
4379:FreeRTOS/Src/tasks.c **** 
4380:FreeRTOS/Src/tasks.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
4381:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4382:FreeRTOS/Src/tasks.c **** 
4383:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
4384:FreeRTOS/Src/tasks.c **** 
4385:FreeRTOS/Src/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
4386:FreeRTOS/Src/tasks.c ****                                       const UBaseType_t uxArraySize,
4387:FreeRTOS/Src/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
4388:FreeRTOS/Src/tasks.c ****     {
4389:FreeRTOS/Src/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
4390:FreeRTOS/Src/tasks.c **** 
4391:FreeRTOS/Src/tasks.c ****         traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
4392:FreeRTOS/Src/tasks.c **** 
4393:FreeRTOS/Src/tasks.c ****         vTaskSuspendAll();
4394:FreeRTOS/Src/tasks.c ****         {
4395:FreeRTOS/Src/tasks.c ****             /* Is there a space in the array for each task in the system? */
4396:FreeRTOS/Src/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
4397:FreeRTOS/Src/tasks.c ****             {
4398:FreeRTOS/Src/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
4399:FreeRTOS/Src/tasks.c ****                  * task in the Ready state. */
4400:FreeRTOS/Src/tasks.c ****                 do
4401:FreeRTOS/Src/tasks.c ****                 {
4402:FreeRTOS/Src/tasks.c ****                     uxQueue--;
4403:FreeRTOS/Src/tasks.c ****                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStat
4404:FreeRTOS/Src/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
4405:FreeRTOS/Src/tasks.c **** 
4406:FreeRTOS/Src/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
4407:FreeRTOS/Src/tasks.c ****                  * task in the Blocked state. */
4408:FreeRTOS/Src/tasks.c ****                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusAr
4409:FreeRTOS/Src/tasks.c ****                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusAr
4410:FreeRTOS/Src/tasks.c **** 
4411:FreeRTOS/Src/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
4412:FreeRTOS/Src/tasks.c ****                 {
4413:FreeRTOS/Src/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
4414:FreeRTOS/Src/tasks.c ****                      * each task that has been deleted but not yet cleaned up. */
4415:FreeRTOS/Src/tasks.c ****                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStat
4416:FreeRTOS/Src/tasks.c ****                 }
4417:FreeRTOS/Src/tasks.c ****                 #endif
4418:FreeRTOS/Src/tasks.c **** 
4419:FreeRTOS/Src/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
4420:FreeRTOS/Src/tasks.c ****                 {
4421:FreeRTOS/Src/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 81


4422:FreeRTOS/Src/tasks.c ****                      * each task in the Suspended state. */
4423:FreeRTOS/Src/tasks.c ****                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStat
4424:FreeRTOS/Src/tasks.c ****                 }
4425:FreeRTOS/Src/tasks.c ****                 #endif
4426:FreeRTOS/Src/tasks.c **** 
4427:FreeRTOS/Src/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
4428:FreeRTOS/Src/tasks.c ****                 {
4429:FreeRTOS/Src/tasks.c ****                     if( pulTotalRunTime != NULL )
4430:FreeRTOS/Src/tasks.c ****                     {
4431:FreeRTOS/Src/tasks.c ****                         #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
4432:FreeRTOS/Src/tasks.c ****                             portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
4433:FreeRTOS/Src/tasks.c ****                         #else
4434:FreeRTOS/Src/tasks.c ****                             *pulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COU
4435:FreeRTOS/Src/tasks.c ****                         #endif
4436:FreeRTOS/Src/tasks.c ****                     }
4437:FreeRTOS/Src/tasks.c ****                 }
4438:FreeRTOS/Src/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
4439:FreeRTOS/Src/tasks.c ****                 {
4440:FreeRTOS/Src/tasks.c ****                     if( pulTotalRunTime != NULL )
4441:FreeRTOS/Src/tasks.c ****                     {
4442:FreeRTOS/Src/tasks.c ****                         *pulTotalRunTime = 0;
4443:FreeRTOS/Src/tasks.c ****                     }
4444:FreeRTOS/Src/tasks.c ****                 }
4445:FreeRTOS/Src/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
4446:FreeRTOS/Src/tasks.c ****             }
4447:FreeRTOS/Src/tasks.c ****             else
4448:FreeRTOS/Src/tasks.c ****             {
4449:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4450:FreeRTOS/Src/tasks.c ****             }
4451:FreeRTOS/Src/tasks.c ****         }
4452:FreeRTOS/Src/tasks.c ****         ( void ) xTaskResumeAll();
4453:FreeRTOS/Src/tasks.c **** 
4454:FreeRTOS/Src/tasks.c ****         traceRETURN_uxTaskGetSystemState( uxTask );
4455:FreeRTOS/Src/tasks.c **** 
4456:FreeRTOS/Src/tasks.c ****         return uxTask;
4457:FreeRTOS/Src/tasks.c ****     }
4458:FreeRTOS/Src/tasks.c **** 
4459:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
4460:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
4461:FreeRTOS/Src/tasks.c **** 
4462:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
4463:FreeRTOS/Src/tasks.c **** 
4464:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
4465:FreeRTOS/Src/tasks.c ****         TaskHandle_t xTaskGetIdleTaskHandle( void )
4466:FreeRTOS/Src/tasks.c ****         {
4467:FreeRTOS/Src/tasks.c ****             traceENTER_xTaskGetIdleTaskHandle();
4468:FreeRTOS/Src/tasks.c **** 
4469:FreeRTOS/Src/tasks.c ****             /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
4470:FreeRTOS/Src/tasks.c ****              * started, then xIdleTaskHandles will be NULL. */
4471:FreeRTOS/Src/tasks.c ****             configASSERT( ( xIdleTaskHandles[ 0 ] != NULL ) );
4472:FreeRTOS/Src/tasks.c **** 
4473:FreeRTOS/Src/tasks.c ****             traceRETURN_xTaskGetIdleTaskHandle( xIdleTaskHandles[ 0 ] );
4474:FreeRTOS/Src/tasks.c **** 
4475:FreeRTOS/Src/tasks.c ****             return xIdleTaskHandles[ 0 ];
4476:FreeRTOS/Src/tasks.c ****         }
4477:FreeRTOS/Src/tasks.c ****     #endif /* if ( configNUMBER_OF_CORES == 1 ) */
4478:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 82


4479:FreeRTOS/Src/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandleForCore( BaseType_t xCoreID )
4480:FreeRTOS/Src/tasks.c ****     {
4481:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGetIdleTaskHandleForCore( xCoreID );
4482:FreeRTOS/Src/tasks.c **** 
4483:FreeRTOS/Src/tasks.c ****         /* Ensure the core ID is valid. */
4484:FreeRTOS/Src/tasks.c ****         configASSERT( taskVALID_CORE_ID( xCoreID ) == pdTRUE );
4485:FreeRTOS/Src/tasks.c **** 
4486:FreeRTOS/Src/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
4487:FreeRTOS/Src/tasks.c ****          * started, then xIdleTaskHandles will be NULL. */
4488:FreeRTOS/Src/tasks.c ****         configASSERT( ( xIdleTaskHandles[ xCoreID ] != NULL ) );
4489:FreeRTOS/Src/tasks.c **** 
4490:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGetIdleTaskHandleForCore( xIdleTaskHandles[ xCoreID ] );
4491:FreeRTOS/Src/tasks.c **** 
4492:FreeRTOS/Src/tasks.c ****         return xIdleTaskHandles[ xCoreID ];
4493:FreeRTOS/Src/tasks.c ****     }
4494:FreeRTOS/Src/tasks.c **** 
4495:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
4496:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
4497:FreeRTOS/Src/tasks.c **** 
4498:FreeRTOS/Src/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
4499:FreeRTOS/Src/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
4500:FreeRTOS/Src/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
4501:FreeRTOS/Src/tasks.c ****  * 1. */
4502:FreeRTOS/Src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
4503:FreeRTOS/Src/tasks.c **** 
4504:FreeRTOS/Src/tasks.c ****     void vTaskStepTick( TickType_t xTicksToJump )
4505:FreeRTOS/Src/tasks.c ****     {
4506:FreeRTOS/Src/tasks.c ****         TickType_t xUpdatedTickCount;
4507:FreeRTOS/Src/tasks.c **** 
4508:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskStepTick( xTicksToJump );
4509:FreeRTOS/Src/tasks.c **** 
4510:FreeRTOS/Src/tasks.c ****         /* Correct the tick count value after a period during which the tick
4511:FreeRTOS/Src/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
4512:FreeRTOS/Src/tasks.c ****          * each stepped tick. */
4513:FreeRTOS/Src/tasks.c ****         xUpdatedTickCount = xTickCount + xTicksToJump;
4514:FreeRTOS/Src/tasks.c ****         configASSERT( xUpdatedTickCount <= xNextTaskUnblockTime );
4515:FreeRTOS/Src/tasks.c **** 
4516:FreeRTOS/Src/tasks.c ****         if( xUpdatedTickCount == xNextTaskUnblockTime )
4517:FreeRTOS/Src/tasks.c ****         {
4518:FreeRTOS/Src/tasks.c ****             /* Arrange for xTickCount to reach xNextTaskUnblockTime in
4519:FreeRTOS/Src/tasks.c ****              * xTaskIncrementTick() when the scheduler resumes.  This ensures
4520:FreeRTOS/Src/tasks.c ****              * that any delayed tasks are resumed at the correct time. */
4521:FreeRTOS/Src/tasks.c ****             configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
4522:FreeRTOS/Src/tasks.c ****             configASSERT( xTicksToJump != ( TickType_t ) 0 );
4523:FreeRTOS/Src/tasks.c **** 
4524:FreeRTOS/Src/tasks.c ****             /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
4525:FreeRTOS/Src/tasks.c ****             taskENTER_CRITICAL();
4526:FreeRTOS/Src/tasks.c ****             {
4527:FreeRTOS/Src/tasks.c ****                 xPendedTicks++;
4528:FreeRTOS/Src/tasks.c ****             }
4529:FreeRTOS/Src/tasks.c ****             taskEXIT_CRITICAL();
4530:FreeRTOS/Src/tasks.c ****             xTicksToJump--;
4531:FreeRTOS/Src/tasks.c ****         }
4532:FreeRTOS/Src/tasks.c ****         else
4533:FreeRTOS/Src/tasks.c ****         {
4534:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4535:FreeRTOS/Src/tasks.c ****         }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 83


4536:FreeRTOS/Src/tasks.c **** 
4537:FreeRTOS/Src/tasks.c ****         xTickCount += xTicksToJump;
4538:FreeRTOS/Src/tasks.c **** 
4539:FreeRTOS/Src/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
4540:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskStepTick();
4541:FreeRTOS/Src/tasks.c ****     }
4542:FreeRTOS/Src/tasks.c **** 
4543:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
4544:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
4545:FreeRTOS/Src/tasks.c **** 
4546:FreeRTOS/Src/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
4547:FreeRTOS/Src/tasks.c **** {
4548:FreeRTOS/Src/tasks.c ****     BaseType_t xYieldOccurred;
4549:FreeRTOS/Src/tasks.c **** 
4550:FreeRTOS/Src/tasks.c ****     traceENTER_xTaskCatchUpTicks( xTicksToCatchUp );
4551:FreeRTOS/Src/tasks.c **** 
4552:FreeRTOS/Src/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
4553:FreeRTOS/Src/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
4554:FreeRTOS/Src/tasks.c ****     configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
4555:FreeRTOS/Src/tasks.c **** 
4556:FreeRTOS/Src/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
4557:FreeRTOS/Src/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
4558:FreeRTOS/Src/tasks.c ****     vTaskSuspendAll();
4559:FreeRTOS/Src/tasks.c **** 
4560:FreeRTOS/Src/tasks.c ****     /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
4561:FreeRTOS/Src/tasks.c ****     taskENTER_CRITICAL();
4562:FreeRTOS/Src/tasks.c ****     {
4563:FreeRTOS/Src/tasks.c ****         xPendedTicks += xTicksToCatchUp;
4564:FreeRTOS/Src/tasks.c ****     }
4565:FreeRTOS/Src/tasks.c ****     taskEXIT_CRITICAL();
4566:FreeRTOS/Src/tasks.c ****     xYieldOccurred = xTaskResumeAll();
4567:FreeRTOS/Src/tasks.c **** 
4568:FreeRTOS/Src/tasks.c ****     traceRETURN_xTaskCatchUpTicks( xYieldOccurred );
4569:FreeRTOS/Src/tasks.c **** 
4570:FreeRTOS/Src/tasks.c ****     return xYieldOccurred;
4571:FreeRTOS/Src/tasks.c **** }
4572:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
4573:FreeRTOS/Src/tasks.c **** 
4574:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
4575:FreeRTOS/Src/tasks.c **** 
4576:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
4577:FreeRTOS/Src/tasks.c ****     {
4578:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB = xTask;
4579:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
4580:FreeRTOS/Src/tasks.c **** 
4581:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskAbortDelay( xTask );
4582:FreeRTOS/Src/tasks.c **** 
4583:FreeRTOS/Src/tasks.c ****         configASSERT( pxTCB );
4584:FreeRTOS/Src/tasks.c **** 
4585:FreeRTOS/Src/tasks.c ****         vTaskSuspendAll();
4586:FreeRTOS/Src/tasks.c ****         {
4587:FreeRTOS/Src/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
4588:FreeRTOS/Src/tasks.c ****              * it is actually in the Blocked state. */
4589:FreeRTOS/Src/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
4590:FreeRTOS/Src/tasks.c ****             {
4591:FreeRTOS/Src/tasks.c ****                 xReturn = pdPASS;
4592:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 84


4593:FreeRTOS/Src/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
4594:FreeRTOS/Src/tasks.c ****                  * interrupt won't touch the xStateListItem because the
4595:FreeRTOS/Src/tasks.c ****                  * scheduler is suspended. */
4596:FreeRTOS/Src/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4597:FreeRTOS/Src/tasks.c **** 
4598:FreeRTOS/Src/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
4599:FreeRTOS/Src/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
4600:FreeRTOS/Src/tasks.c ****                  * even though the scheduler is suspended, so a critical section
4601:FreeRTOS/Src/tasks.c ****                  * is used. */
4602:FreeRTOS/Src/tasks.c ****                 taskENTER_CRITICAL();
4603:FreeRTOS/Src/tasks.c ****                 {
4604:FreeRTOS/Src/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
4605:FreeRTOS/Src/tasks.c ****                     {
4606:FreeRTOS/Src/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
4607:FreeRTOS/Src/tasks.c **** 
4608:FreeRTOS/Src/tasks.c ****                         /* This lets the task know it was forcibly removed from the
4609:FreeRTOS/Src/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
4610:FreeRTOS/Src/tasks.c ****                          * then block again. */
4611:FreeRTOS/Src/tasks.c ****                         pxTCB->ucDelayAborted = ( uint8_t ) pdTRUE;
4612:FreeRTOS/Src/tasks.c ****                     }
4613:FreeRTOS/Src/tasks.c ****                     else
4614:FreeRTOS/Src/tasks.c ****                     {
4615:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4616:FreeRTOS/Src/tasks.c ****                     }
4617:FreeRTOS/Src/tasks.c ****                 }
4618:FreeRTOS/Src/tasks.c ****                 taskEXIT_CRITICAL();
4619:FreeRTOS/Src/tasks.c **** 
4620:FreeRTOS/Src/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
4621:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4622:FreeRTOS/Src/tasks.c **** 
4623:FreeRTOS/Src/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
4624:FreeRTOS/Src/tasks.c ****                  * switch if preemption is turned off. */
4625:FreeRTOS/Src/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
4626:FreeRTOS/Src/tasks.c ****                 {
4627:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES == 1 )
4628:FreeRTOS/Src/tasks.c ****                     {
4629:FreeRTOS/Src/tasks.c ****                         /* Preemption is on, but a context switch should only be
4630:FreeRTOS/Src/tasks.c ****                          * performed if the unblocked task has a priority that is
4631:FreeRTOS/Src/tasks.c ****                          * higher than the currently executing task. */
4632:FreeRTOS/Src/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4633:FreeRTOS/Src/tasks.c ****                         {
4634:FreeRTOS/Src/tasks.c ****                             /* Pend the yield to be performed when the scheduler
4635:FreeRTOS/Src/tasks.c ****                              * is unsuspended. */
4636:FreeRTOS/Src/tasks.c ****                             xYieldPendings[ 0 ] = pdTRUE;
4637:FreeRTOS/Src/tasks.c ****                         }
4638:FreeRTOS/Src/tasks.c ****                         else
4639:FreeRTOS/Src/tasks.c ****                         {
4640:FreeRTOS/Src/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4641:FreeRTOS/Src/tasks.c ****                         }
4642:FreeRTOS/Src/tasks.c ****                     }
4643:FreeRTOS/Src/tasks.c ****                     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
4644:FreeRTOS/Src/tasks.c ****                     {
4645:FreeRTOS/Src/tasks.c ****                         taskENTER_CRITICAL();
4646:FreeRTOS/Src/tasks.c ****                         {
4647:FreeRTOS/Src/tasks.c ****                             prvYieldForTask( pxTCB );
4648:FreeRTOS/Src/tasks.c ****                         }
4649:FreeRTOS/Src/tasks.c ****                         taskEXIT_CRITICAL();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 85


4650:FreeRTOS/Src/tasks.c ****                     }
4651:FreeRTOS/Src/tasks.c ****                     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4652:FreeRTOS/Src/tasks.c ****                 }
4653:FreeRTOS/Src/tasks.c ****                 #endif /* #if ( configUSE_PREEMPTION == 1 ) */
4654:FreeRTOS/Src/tasks.c ****             }
4655:FreeRTOS/Src/tasks.c ****             else
4656:FreeRTOS/Src/tasks.c ****             {
4657:FreeRTOS/Src/tasks.c ****                 xReturn = pdFAIL;
4658:FreeRTOS/Src/tasks.c ****             }
4659:FreeRTOS/Src/tasks.c ****         }
4660:FreeRTOS/Src/tasks.c ****         ( void ) xTaskResumeAll();
4661:FreeRTOS/Src/tasks.c **** 
4662:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskAbortDelay( xReturn );
4663:FreeRTOS/Src/tasks.c **** 
4664:FreeRTOS/Src/tasks.c ****         return xReturn;
4665:FreeRTOS/Src/tasks.c ****     }
4666:FreeRTOS/Src/tasks.c **** 
4667:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
4668:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
4669:FreeRTOS/Src/tasks.c **** 
4670:FreeRTOS/Src/tasks.c **** BaseType_t xTaskIncrementTick( void )
4671:FreeRTOS/Src/tasks.c **** {
4672:FreeRTOS/Src/tasks.c ****     TCB_t * pxTCB;
4673:FreeRTOS/Src/tasks.c ****     TickType_t xItemValue;
4674:FreeRTOS/Src/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
4675:FreeRTOS/Src/tasks.c **** 
4676:FreeRTOS/Src/tasks.c ****     #if ( configUSE_PREEMPTION == 1 ) && ( configNUMBER_OF_CORES > 1 )
4677:FreeRTOS/Src/tasks.c ****     BaseType_t xYieldRequiredForCore[ configNUMBER_OF_CORES ] = { pdFALSE };
4678:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configUSE_PREEMPTION == 1 ) && ( configNUMBER_OF_CORES > 1 ) */
4679:FreeRTOS/Src/tasks.c **** 
4680:FreeRTOS/Src/tasks.c ****     traceENTER_xTaskIncrementTick();
4681:FreeRTOS/Src/tasks.c **** 
4682:FreeRTOS/Src/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
4683:FreeRTOS/Src/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
4684:FreeRTOS/Src/tasks.c ****      * tasks to be unblocked. */
4685:FreeRTOS/Src/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
4686:FreeRTOS/Src/tasks.c **** 
4687:FreeRTOS/Src/tasks.c ****     /* Tick increment should occur on every kernel timer event. Core 0 has the
4688:FreeRTOS/Src/tasks.c ****      * responsibility to increment the tick, or increment the pended ticks if the
4689:FreeRTOS/Src/tasks.c ****      * scheduler is suspended.  If pended ticks is greater than zero, the core that
4690:FreeRTOS/Src/tasks.c ****      * calls xTaskResumeAll has the responsibility to increment the tick. */
4691:FreeRTOS/Src/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
4692:FreeRTOS/Src/tasks.c ****     {
4693:FreeRTOS/Src/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
4694:FreeRTOS/Src/tasks.c ****          * block. */
4695:FreeRTOS/Src/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
4696:FreeRTOS/Src/tasks.c **** 
4697:FreeRTOS/Src/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
4698:FreeRTOS/Src/tasks.c ****          * delayed lists if it wraps to 0. */
4699:FreeRTOS/Src/tasks.c ****         xTickCount = xConstTickCount;
4700:FreeRTOS/Src/tasks.c **** 
4701:FreeRTOS/Src/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U )
4702:FreeRTOS/Src/tasks.c ****         {
4703:FreeRTOS/Src/tasks.c ****             taskSWITCH_DELAYED_LISTS();
4704:FreeRTOS/Src/tasks.c ****         }
4705:FreeRTOS/Src/tasks.c ****         else
4706:FreeRTOS/Src/tasks.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 86


4707:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4708:FreeRTOS/Src/tasks.c ****         }
4709:FreeRTOS/Src/tasks.c **** 
4710:FreeRTOS/Src/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
4711:FreeRTOS/Src/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
4712:FreeRTOS/Src/tasks.c ****          * has been found whose block time has not expired there is no need to
4713:FreeRTOS/Src/tasks.c ****          * look any further down the list. */
4714:FreeRTOS/Src/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
4715:FreeRTOS/Src/tasks.c ****         {
4716:FreeRTOS/Src/tasks.c ****             for( ; ; )
4717:FreeRTOS/Src/tasks.c ****             {
4718:FreeRTOS/Src/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
4719:FreeRTOS/Src/tasks.c ****                 {
4720:FreeRTOS/Src/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
4721:FreeRTOS/Src/tasks.c ****                      * to the maximum possible value so it is extremely
4722:FreeRTOS/Src/tasks.c ****                      * unlikely that the
4723:FreeRTOS/Src/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
4724:FreeRTOS/Src/tasks.c ****                      * next time through. */
4725:FreeRTOS/Src/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY;
4726:FreeRTOS/Src/tasks.c ****                     break;
4727:FreeRTOS/Src/tasks.c ****                 }
4728:FreeRTOS/Src/tasks.c ****                 else
4729:FreeRTOS/Src/tasks.c ****                 {
4730:FreeRTOS/Src/tasks.c ****                     /* The delayed list is not empty, get the value of the
4731:FreeRTOS/Src/tasks.c ****                      * item at the head of the delayed list.  This is the time
4732:FreeRTOS/Src/tasks.c ****                      * at which the task at the head of the delayed list must
4733:FreeRTOS/Src/tasks.c ****                      * be removed from the Blocked state. */
4734:FreeRTOS/Src/tasks.c ****                     /* MISRA Ref 11.5.3 [Void pointer assignment] */
4735:FreeRTOS/Src/tasks.c ****                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA
4736:FreeRTOS/Src/tasks.c ****                     /* coverity[misra_c_2012_rule_11_5_violation] */
4737:FreeRTOS/Src/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
4738:FreeRTOS/Src/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
4739:FreeRTOS/Src/tasks.c **** 
4740:FreeRTOS/Src/tasks.c ****                     if( xConstTickCount < xItemValue )
4741:FreeRTOS/Src/tasks.c ****                     {
4742:FreeRTOS/Src/tasks.c ****                         /* It is not time to unblock this item yet, but the
4743:FreeRTOS/Src/tasks.c ****                          * item value is the time at which the task at the head
4744:FreeRTOS/Src/tasks.c ****                          * of the blocked list must be removed from the Blocked
4745:FreeRTOS/Src/tasks.c ****                          * state -  so record the item value in
4746:FreeRTOS/Src/tasks.c ****                          * xNextTaskUnblockTime. */
4747:FreeRTOS/Src/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
4748:FreeRTOS/Src/tasks.c ****                         break;
4749:FreeRTOS/Src/tasks.c ****                     }
4750:FreeRTOS/Src/tasks.c ****                     else
4751:FreeRTOS/Src/tasks.c ****                     {
4752:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4753:FreeRTOS/Src/tasks.c ****                     }
4754:FreeRTOS/Src/tasks.c **** 
4755:FreeRTOS/Src/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
4756:FreeRTOS/Src/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
4757:FreeRTOS/Src/tasks.c **** 
4758:FreeRTOS/Src/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
4759:FreeRTOS/Src/tasks.c ****                      * it from the event list. */
4760:FreeRTOS/Src/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
4761:FreeRTOS/Src/tasks.c ****                     {
4762:FreeRTOS/Src/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
4763:FreeRTOS/Src/tasks.c ****                     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 87


4764:FreeRTOS/Src/tasks.c ****                     else
4765:FreeRTOS/Src/tasks.c ****                     {
4766:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4767:FreeRTOS/Src/tasks.c ****                     }
4768:FreeRTOS/Src/tasks.c **** 
4769:FreeRTOS/Src/tasks.c ****                     /* Place the unblocked task into the appropriate ready
4770:FreeRTOS/Src/tasks.c ****                      * list. */
4771:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4772:FreeRTOS/Src/tasks.c **** 
4773:FreeRTOS/Src/tasks.c ****                     /* A task being unblocked cannot cause an immediate
4774:FreeRTOS/Src/tasks.c ****                      * context switch if preemption is turned off. */
4775:FreeRTOS/Src/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
4776:FreeRTOS/Src/tasks.c ****                     {
4777:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES == 1 )
4778:FreeRTOS/Src/tasks.c ****                         {
4779:FreeRTOS/Src/tasks.c ****                             /* Preemption is on, but a context switch should
4780:FreeRTOS/Src/tasks.c ****                              * only be performed if the unblocked task's
4781:FreeRTOS/Src/tasks.c ****                              * priority is higher than the currently executing
4782:FreeRTOS/Src/tasks.c ****                              * task.
4783:FreeRTOS/Src/tasks.c ****                              * The case of equal priority tasks sharing
4784:FreeRTOS/Src/tasks.c ****                              * processing time (which happens when both
4785:FreeRTOS/Src/tasks.c ****                              * preemption and time slicing are on) is
4786:FreeRTOS/Src/tasks.c ****                              * handled below.*/
4787:FreeRTOS/Src/tasks.c ****                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4788:FreeRTOS/Src/tasks.c ****                             {
4789:FreeRTOS/Src/tasks.c ****                                 xSwitchRequired = pdTRUE;
4790:FreeRTOS/Src/tasks.c ****                             }
4791:FreeRTOS/Src/tasks.c ****                             else
4792:FreeRTOS/Src/tasks.c ****                             {
4793:FreeRTOS/Src/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
4794:FreeRTOS/Src/tasks.c ****                             }
4795:FreeRTOS/Src/tasks.c ****                         }
4796:FreeRTOS/Src/tasks.c ****                         #else /* #if( configNUMBER_OF_CORES == 1 ) */
4797:FreeRTOS/Src/tasks.c ****                         {
4798:FreeRTOS/Src/tasks.c ****                             prvYieldForTask( pxTCB );
4799:FreeRTOS/Src/tasks.c ****                         }
4800:FreeRTOS/Src/tasks.c ****                         #endif /* #if( configNUMBER_OF_CORES == 1 ) */
4801:FreeRTOS/Src/tasks.c ****                     }
4802:FreeRTOS/Src/tasks.c ****                     #endif /* #if ( configUSE_PREEMPTION == 1 ) */
4803:FreeRTOS/Src/tasks.c ****                 }
4804:FreeRTOS/Src/tasks.c ****             }
4805:FreeRTOS/Src/tasks.c ****         }
4806:FreeRTOS/Src/tasks.c **** 
4807:FreeRTOS/Src/tasks.c ****         /* Tasks of equal priority to the currently running task will share
4808:FreeRTOS/Src/tasks.c ****          * processing time (time slice) if preemption is on, and the application
4809:FreeRTOS/Src/tasks.c ****          * writer has not explicitly turned time slicing off. */
4810:FreeRTOS/Src/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
4811:FreeRTOS/Src/tasks.c ****         {
4812:FreeRTOS/Src/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
4813:FreeRTOS/Src/tasks.c ****             {
4814:FreeRTOS/Src/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
4815:FreeRTOS/Src/tasks.c ****                 {
4816:FreeRTOS/Src/tasks.c ****                     xSwitchRequired = pdTRUE;
4817:FreeRTOS/Src/tasks.c ****                 }
4818:FreeRTOS/Src/tasks.c ****                 else
4819:FreeRTOS/Src/tasks.c ****                 {
4820:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 88


4821:FreeRTOS/Src/tasks.c ****                 }
4822:FreeRTOS/Src/tasks.c ****             }
4823:FreeRTOS/Src/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
4824:FreeRTOS/Src/tasks.c ****             {
4825:FreeRTOS/Src/tasks.c ****                 BaseType_t xCoreID;
4826:FreeRTOS/Src/tasks.c **** 
4827:FreeRTOS/Src/tasks.c ****                 for( xCoreID = 0; xCoreID < ( ( BaseType_t ) configNUMBER_OF_CORES ); xCoreID++ )
4828:FreeRTOS/Src/tasks.c ****                 {
4829:FreeRTOS/Src/tasks.c ****                     if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCBs[ xCoreID ]->ux
4830:FreeRTOS/Src/tasks.c ****                     {
4831:FreeRTOS/Src/tasks.c ****                         xYieldRequiredForCore[ xCoreID ] = pdTRUE;
4832:FreeRTOS/Src/tasks.c ****                     }
4833:FreeRTOS/Src/tasks.c ****                     else
4834:FreeRTOS/Src/tasks.c ****                     {
4835:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4836:FreeRTOS/Src/tasks.c ****                     }
4837:FreeRTOS/Src/tasks.c ****                 }
4838:FreeRTOS/Src/tasks.c ****             }
4839:FreeRTOS/Src/tasks.c ****             #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4840:FreeRTOS/Src/tasks.c ****         }
4841:FreeRTOS/Src/tasks.c ****         #endif /* #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
4842:FreeRTOS/Src/tasks.c **** 
4843:FreeRTOS/Src/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
4844:FreeRTOS/Src/tasks.c ****         {
4845:FreeRTOS/Src/tasks.c ****             /* Guard against the tick hook being called when the pended tick
4846:FreeRTOS/Src/tasks.c ****              * count is being unwound (when the scheduler is being unlocked). */
4847:FreeRTOS/Src/tasks.c ****             if( xPendedTicks == ( TickType_t ) 0 )
4848:FreeRTOS/Src/tasks.c ****             {
4849:FreeRTOS/Src/tasks.c ****                 vApplicationTickHook();
4850:FreeRTOS/Src/tasks.c ****             }
4851:FreeRTOS/Src/tasks.c ****             else
4852:FreeRTOS/Src/tasks.c ****             {
4853:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4854:FreeRTOS/Src/tasks.c ****             }
4855:FreeRTOS/Src/tasks.c ****         }
4856:FreeRTOS/Src/tasks.c ****         #endif /* configUSE_TICK_HOOK */
4857:FreeRTOS/Src/tasks.c **** 
4858:FreeRTOS/Src/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
4859:FreeRTOS/Src/tasks.c ****         {
4860:FreeRTOS/Src/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
4861:FreeRTOS/Src/tasks.c ****             {
4862:FreeRTOS/Src/tasks.c ****                 /* For single core the core ID is always 0. */
4863:FreeRTOS/Src/tasks.c ****                 if( xYieldPendings[ 0 ] != pdFALSE )
4864:FreeRTOS/Src/tasks.c ****                 {
4865:FreeRTOS/Src/tasks.c ****                     xSwitchRequired = pdTRUE;
4866:FreeRTOS/Src/tasks.c ****                 }
4867:FreeRTOS/Src/tasks.c ****                 else
4868:FreeRTOS/Src/tasks.c ****                 {
4869:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4870:FreeRTOS/Src/tasks.c ****                 }
4871:FreeRTOS/Src/tasks.c ****             }
4872:FreeRTOS/Src/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
4873:FreeRTOS/Src/tasks.c ****             {
4874:FreeRTOS/Src/tasks.c ****                 BaseType_t xCoreID, xCurrentCoreID;
4875:FreeRTOS/Src/tasks.c ****                 xCurrentCoreID = ( BaseType_t ) portGET_CORE_ID();
4876:FreeRTOS/Src/tasks.c **** 
4877:FreeRTOS/Src/tasks.c ****                 for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 89


4878:FreeRTOS/Src/tasks.c ****                 {
4879:FreeRTOS/Src/tasks.c ****                     #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
4880:FreeRTOS/Src/tasks.c ****                         if( pxCurrentTCBs[ xCoreID ]->xPreemptionDisable == pdFALSE )
4881:FreeRTOS/Src/tasks.c ****                     #endif
4882:FreeRTOS/Src/tasks.c ****                     {
4883:FreeRTOS/Src/tasks.c ****                         if( ( xYieldRequiredForCore[ xCoreID ] != pdFALSE ) || ( xYieldPendings[ xC
4884:FreeRTOS/Src/tasks.c ****                         {
4885:FreeRTOS/Src/tasks.c ****                             if( xCoreID == xCurrentCoreID )
4886:FreeRTOS/Src/tasks.c ****                             {
4887:FreeRTOS/Src/tasks.c ****                                 xSwitchRequired = pdTRUE;
4888:FreeRTOS/Src/tasks.c ****                             }
4889:FreeRTOS/Src/tasks.c ****                             else
4890:FreeRTOS/Src/tasks.c ****                             {
4891:FreeRTOS/Src/tasks.c ****                                 prvYieldCore( xCoreID );
4892:FreeRTOS/Src/tasks.c ****                             }
4893:FreeRTOS/Src/tasks.c ****                         }
4894:FreeRTOS/Src/tasks.c ****                         else
4895:FreeRTOS/Src/tasks.c ****                         {
4896:FreeRTOS/Src/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4897:FreeRTOS/Src/tasks.c ****                         }
4898:FreeRTOS/Src/tasks.c ****                     }
4899:FreeRTOS/Src/tasks.c ****                 }
4900:FreeRTOS/Src/tasks.c ****             }
4901:FreeRTOS/Src/tasks.c ****             #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4902:FreeRTOS/Src/tasks.c ****         }
4903:FreeRTOS/Src/tasks.c ****         #endif /* #if ( configUSE_PREEMPTION == 1 ) */
4904:FreeRTOS/Src/tasks.c ****     }
4905:FreeRTOS/Src/tasks.c ****     else
4906:FreeRTOS/Src/tasks.c ****     {
4907:FreeRTOS/Src/tasks.c ****         xPendedTicks += 1U;
4908:FreeRTOS/Src/tasks.c **** 
4909:FreeRTOS/Src/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
4910:FreeRTOS/Src/tasks.c ****          * scheduler is locked. */
4911:FreeRTOS/Src/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
4912:FreeRTOS/Src/tasks.c ****         {
4913:FreeRTOS/Src/tasks.c ****             vApplicationTickHook();
4914:FreeRTOS/Src/tasks.c ****         }
4915:FreeRTOS/Src/tasks.c ****         #endif
4916:FreeRTOS/Src/tasks.c ****     }
4917:FreeRTOS/Src/tasks.c **** 
4918:FreeRTOS/Src/tasks.c ****     traceRETURN_xTaskIncrementTick( xSwitchRequired );
4919:FreeRTOS/Src/tasks.c **** 
4920:FreeRTOS/Src/tasks.c ****     return xSwitchRequired;
4921:FreeRTOS/Src/tasks.c **** }
4922:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4923:FreeRTOS/Src/tasks.c **** 
4924:FreeRTOS/Src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
4925:FreeRTOS/Src/tasks.c **** 
4926:FreeRTOS/Src/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
4927:FreeRTOS/Src/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
4928:FreeRTOS/Src/tasks.c ****     {
4929:FreeRTOS/Src/tasks.c ****         TCB_t * xTCB;
4930:FreeRTOS/Src/tasks.c **** 
4931:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskSetApplicationTaskTag( xTask, pxHookFunction );
4932:FreeRTOS/Src/tasks.c **** 
4933:FreeRTOS/Src/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
4934:FreeRTOS/Src/tasks.c ****          * getting set. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 90


4935:FreeRTOS/Src/tasks.c ****         if( xTask == NULL )
4936:FreeRTOS/Src/tasks.c ****         {
4937:FreeRTOS/Src/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
4938:FreeRTOS/Src/tasks.c ****         }
4939:FreeRTOS/Src/tasks.c ****         else
4940:FreeRTOS/Src/tasks.c ****         {
4941:FreeRTOS/Src/tasks.c ****             xTCB = xTask;
4942:FreeRTOS/Src/tasks.c ****         }
4943:FreeRTOS/Src/tasks.c **** 
4944:FreeRTOS/Src/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
4945:FreeRTOS/Src/tasks.c ****          * the value can be accessed from an interrupt. */
4946:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
4947:FreeRTOS/Src/tasks.c ****         {
4948:FreeRTOS/Src/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
4949:FreeRTOS/Src/tasks.c ****         }
4950:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
4951:FreeRTOS/Src/tasks.c **** 
4952:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskSetApplicationTaskTag();
4953:FreeRTOS/Src/tasks.c ****     }
4954:FreeRTOS/Src/tasks.c **** 
4955:FreeRTOS/Src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
4956:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4957:FreeRTOS/Src/tasks.c **** 
4958:FreeRTOS/Src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
4959:FreeRTOS/Src/tasks.c **** 
4960:FreeRTOS/Src/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
4961:FreeRTOS/Src/tasks.c ****     {
4962:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
4963:FreeRTOS/Src/tasks.c ****         TaskHookFunction_t xReturn;
4964:FreeRTOS/Src/tasks.c **** 
4965:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGetApplicationTaskTag( xTask );
4966:FreeRTOS/Src/tasks.c **** 
4967:FreeRTOS/Src/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
4968:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
4969:FreeRTOS/Src/tasks.c **** 
4970:FreeRTOS/Src/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
4971:FreeRTOS/Src/tasks.c ****          * the value can be accessed from an interrupt. */
4972:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
4973:FreeRTOS/Src/tasks.c ****         {
4974:FreeRTOS/Src/tasks.c ****             xReturn = pxTCB->pxTaskTag;
4975:FreeRTOS/Src/tasks.c ****         }
4976:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
4977:FreeRTOS/Src/tasks.c **** 
4978:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGetApplicationTaskTag( xReturn );
4979:FreeRTOS/Src/tasks.c **** 
4980:FreeRTOS/Src/tasks.c ****         return xReturn;
4981:FreeRTOS/Src/tasks.c ****     }
4982:FreeRTOS/Src/tasks.c **** 
4983:FreeRTOS/Src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
4984:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
4985:FreeRTOS/Src/tasks.c **** 
4986:FreeRTOS/Src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
4987:FreeRTOS/Src/tasks.c **** 
4988:FreeRTOS/Src/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
4989:FreeRTOS/Src/tasks.c ****     {
4990:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
4991:FreeRTOS/Src/tasks.c ****         TaskHookFunction_t xReturn;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 91


4992:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4993:FreeRTOS/Src/tasks.c **** 
4994:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGetApplicationTaskTagFromISR( xTask );
4995:FreeRTOS/Src/tasks.c **** 
4996:FreeRTOS/Src/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
4997:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
4998:FreeRTOS/Src/tasks.c **** 
4999:FreeRTOS/Src/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
5000:FreeRTOS/Src/tasks.c ****          * the value can be accessed from an interrupt. */
5001:FreeRTOS/Src/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
5002:FreeRTOS/Src/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
5003:FreeRTOS/Src/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
5004:FreeRTOS/Src/tasks.c ****         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
5005:FreeRTOS/Src/tasks.c ****         {
5006:FreeRTOS/Src/tasks.c ****             xReturn = pxTCB->pxTaskTag;
5007:FreeRTOS/Src/tasks.c ****         }
5008:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
5009:FreeRTOS/Src/tasks.c **** 
5010:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGetApplicationTaskTagFromISR( xReturn );
5011:FreeRTOS/Src/tasks.c **** 
5012:FreeRTOS/Src/tasks.c ****         return xReturn;
5013:FreeRTOS/Src/tasks.c ****     }
5014:FreeRTOS/Src/tasks.c **** 
5015:FreeRTOS/Src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
5016:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5017:FreeRTOS/Src/tasks.c **** 
5018:FreeRTOS/Src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
5019:FreeRTOS/Src/tasks.c **** 
5020:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
5021:FreeRTOS/Src/tasks.c ****                                              void * pvParameter )
5022:FreeRTOS/Src/tasks.c ****     {
5023:FreeRTOS/Src/tasks.c ****         TCB_t * xTCB;
5024:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
5025:FreeRTOS/Src/tasks.c **** 
5026:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskCallApplicationTaskHook( xTask, pvParameter );
5027:FreeRTOS/Src/tasks.c **** 
5028:FreeRTOS/Src/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
5029:FreeRTOS/Src/tasks.c ****         if( xTask == NULL )
5030:FreeRTOS/Src/tasks.c ****         {
5031:FreeRTOS/Src/tasks.c ****             xTCB = pxCurrentTCB;
5032:FreeRTOS/Src/tasks.c ****         }
5033:FreeRTOS/Src/tasks.c ****         else
5034:FreeRTOS/Src/tasks.c ****         {
5035:FreeRTOS/Src/tasks.c ****             xTCB = xTask;
5036:FreeRTOS/Src/tasks.c ****         }
5037:FreeRTOS/Src/tasks.c **** 
5038:FreeRTOS/Src/tasks.c ****         if( xTCB->pxTaskTag != NULL )
5039:FreeRTOS/Src/tasks.c ****         {
5040:FreeRTOS/Src/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
5041:FreeRTOS/Src/tasks.c ****         }
5042:FreeRTOS/Src/tasks.c ****         else
5043:FreeRTOS/Src/tasks.c ****         {
5044:FreeRTOS/Src/tasks.c ****             xReturn = pdFAIL;
5045:FreeRTOS/Src/tasks.c ****         }
5046:FreeRTOS/Src/tasks.c **** 
5047:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskCallApplicationTaskHook( xReturn );
5048:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 92


5049:FreeRTOS/Src/tasks.c ****         return xReturn;
5050:FreeRTOS/Src/tasks.c ****     }
5051:FreeRTOS/Src/tasks.c **** 
5052:FreeRTOS/Src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
5053:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5054:FreeRTOS/Src/tasks.c **** 
5055:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES == 1 )
5056:FreeRTOS/Src/tasks.c ****     void vTaskSwitchContext( void )
5057:FreeRTOS/Src/tasks.c ****     {
5058:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskSwitchContext();
5059:FreeRTOS/Src/tasks.c **** 
5060:FreeRTOS/Src/tasks.c ****         if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
5061:FreeRTOS/Src/tasks.c ****         {
5062:FreeRTOS/Src/tasks.c ****             /* The scheduler is currently suspended - do not allow a context
5063:FreeRTOS/Src/tasks.c ****              * switch. */
5064:FreeRTOS/Src/tasks.c ****             xYieldPendings[ 0 ] = pdTRUE;
5065:FreeRTOS/Src/tasks.c ****         }
5066:FreeRTOS/Src/tasks.c ****         else
5067:FreeRTOS/Src/tasks.c ****         {
5068:FreeRTOS/Src/tasks.c ****             xYieldPendings[ 0 ] = pdFALSE;
5069:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_OUT();
5070:FreeRTOS/Src/tasks.c **** 
5071:FreeRTOS/Src/tasks.c ****             #if ( configGENERATE_RUN_TIME_STATS == 1 )
5072:FreeRTOS/Src/tasks.c ****             {
5073:FreeRTOS/Src/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
5074:FreeRTOS/Src/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime[ 0 ] );
5075:FreeRTOS/Src/tasks.c ****                 #else
5076:FreeRTOS/Src/tasks.c ****                     ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
5077:FreeRTOS/Src/tasks.c ****                 #endif
5078:FreeRTOS/Src/tasks.c **** 
5079:FreeRTOS/Src/tasks.c ****                 /* Add the amount of time the task has been running to the
5080:FreeRTOS/Src/tasks.c ****                  * accumulated time so far.  The time the task started running was
5081:FreeRTOS/Src/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
5082:FreeRTOS/Src/tasks.c ****                  * protection here so count values are only valid until the timer
5083:FreeRTOS/Src/tasks.c ****                  * overflows.  The guard against negative values is to protect
5084:FreeRTOS/Src/tasks.c ****                  * against suspect run time stat counter implementations - which
5085:FreeRTOS/Src/tasks.c ****                  * are provided by the application, not the kernel. */
5086:FreeRTOS/Src/tasks.c ****                 if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
5087:FreeRTOS/Src/tasks.c ****                 {
5088:FreeRTOS/Src/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[
5089:FreeRTOS/Src/tasks.c ****                 }
5090:FreeRTOS/Src/tasks.c ****                 else
5091:FreeRTOS/Src/tasks.c ****                 {
5092:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5093:FreeRTOS/Src/tasks.c ****                 }
5094:FreeRTOS/Src/tasks.c **** 
5095:FreeRTOS/Src/tasks.c ****                 ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
5096:FreeRTOS/Src/tasks.c ****             }
5097:FreeRTOS/Src/tasks.c ****             #endif /* configGENERATE_RUN_TIME_STATS */
5098:FreeRTOS/Src/tasks.c **** 
5099:FreeRTOS/Src/tasks.c ****             /* Check for stack overflow, if configured. */
5100:FreeRTOS/Src/tasks.c ****             taskCHECK_FOR_STACK_OVERFLOW();
5101:FreeRTOS/Src/tasks.c **** 
5102:FreeRTOS/Src/tasks.c ****             /* Before the currently running task is switched out, save its errno. */
5103:FreeRTOS/Src/tasks.c ****             #if ( configUSE_POSIX_ERRNO == 1 )
5104:FreeRTOS/Src/tasks.c ****             {
5105:FreeRTOS/Src/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 93


5106:FreeRTOS/Src/tasks.c ****             }
5107:FreeRTOS/Src/tasks.c ****             #endif
5108:FreeRTOS/Src/tasks.c **** 
5109:FreeRTOS/Src/tasks.c ****             /* Select a new task to run using either the generic C or port
5110:FreeRTOS/Src/tasks.c ****              * optimised asm code. */
5111:FreeRTOS/Src/tasks.c ****             /* MISRA Ref 11.5.3 [Void pointer assignment] */
5112:FreeRTOS/Src/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
5113:FreeRTOS/Src/tasks.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
5114:FreeRTOS/Src/tasks.c ****             taskSELECT_HIGHEST_PRIORITY_TASK();
5115:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
5116:FreeRTOS/Src/tasks.c **** 
5117:FreeRTOS/Src/tasks.c ****             /* Macro to inject port specific behaviour immediately after
5118:FreeRTOS/Src/tasks.c ****              * switching tasks, such as setting an end of stack watchpoint
5119:FreeRTOS/Src/tasks.c ****              * or reconfiguring the MPU. */
5120:FreeRTOS/Src/tasks.c ****             portTASK_SWITCH_HOOK( pxCurrentTCB );
5121:FreeRTOS/Src/tasks.c **** 
5122:FreeRTOS/Src/tasks.c ****             /* After the new task is switched in, update the global errno. */
5123:FreeRTOS/Src/tasks.c ****             #if ( configUSE_POSIX_ERRNO == 1 )
5124:FreeRTOS/Src/tasks.c ****             {
5125:FreeRTOS/Src/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
5126:FreeRTOS/Src/tasks.c ****             }
5127:FreeRTOS/Src/tasks.c ****             #endif
5128:FreeRTOS/Src/tasks.c **** 
5129:FreeRTOS/Src/tasks.c ****             #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
5130:FreeRTOS/Src/tasks.c ****             {
5131:FreeRTOS/Src/tasks.c ****                 /* Switch C-Runtime's TLS Block to point to the TLS
5132:FreeRTOS/Src/tasks.c ****                  * Block specific to this task. */
5133:FreeRTOS/Src/tasks.c ****                 configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
5134:FreeRTOS/Src/tasks.c ****             }
5135:FreeRTOS/Src/tasks.c ****             #endif
5136:FreeRTOS/Src/tasks.c ****         }
5137:FreeRTOS/Src/tasks.c **** 
5138:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskSwitchContext();
5139:FreeRTOS/Src/tasks.c ****     }
5140:FreeRTOS/Src/tasks.c **** #else /* if ( configNUMBER_OF_CORES == 1 ) */
5141:FreeRTOS/Src/tasks.c ****     void vTaskSwitchContext( BaseType_t xCoreID )
5142:FreeRTOS/Src/tasks.c ****     {
5143:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskSwitchContext();
5144:FreeRTOS/Src/tasks.c **** 
5145:FreeRTOS/Src/tasks.c ****         /* Acquire both locks:
5146:FreeRTOS/Src/tasks.c ****          * - The ISR lock protects the ready list from simultaneous access by
5147:FreeRTOS/Src/tasks.c ****          *   both other ISRs and tasks.
5148:FreeRTOS/Src/tasks.c ****          * - We also take the task lock to pause here in case another core has
5149:FreeRTOS/Src/tasks.c ****          *   suspended the scheduler. We don't want to simply set xYieldPending
5150:FreeRTOS/Src/tasks.c ****          *   and move on if another core suspended the scheduler. We should only
5151:FreeRTOS/Src/tasks.c ****          *   do that if the current core has suspended the scheduler. */
5152:FreeRTOS/Src/tasks.c **** 
5153:FreeRTOS/Src/tasks.c ****         portGET_TASK_LOCK(); /* Must always acquire the task lock first. */
5154:FreeRTOS/Src/tasks.c ****         portGET_ISR_LOCK();
5155:FreeRTOS/Src/tasks.c ****         {
5156:FreeRTOS/Src/tasks.c ****             /* vTaskSwitchContext() must never be called from within a critical section.
5157:FreeRTOS/Src/tasks.c ****              * This is not necessarily true for single core FreeRTOS, but it is for this
5158:FreeRTOS/Src/tasks.c ****              * SMP port. */
5159:FreeRTOS/Src/tasks.c ****             configASSERT( portGET_CRITICAL_NESTING_COUNT() == 0 );
5160:FreeRTOS/Src/tasks.c **** 
5161:FreeRTOS/Src/tasks.c ****             if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
5162:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 94


5163:FreeRTOS/Src/tasks.c ****                 /* The scheduler is currently suspended - do not allow a context
5164:FreeRTOS/Src/tasks.c ****                  * switch. */
5165:FreeRTOS/Src/tasks.c ****                 xYieldPendings[ xCoreID ] = pdTRUE;
5166:FreeRTOS/Src/tasks.c ****             }
5167:FreeRTOS/Src/tasks.c ****             else
5168:FreeRTOS/Src/tasks.c ****             {
5169:FreeRTOS/Src/tasks.c ****                 xYieldPendings[ xCoreID ] = pdFALSE;
5170:FreeRTOS/Src/tasks.c ****                 traceTASK_SWITCHED_OUT();
5171:FreeRTOS/Src/tasks.c **** 
5172:FreeRTOS/Src/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
5173:FreeRTOS/Src/tasks.c ****                 {
5174:FreeRTOS/Src/tasks.c ****                     #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
5175:FreeRTOS/Src/tasks.c ****                         portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime[ xCoreID ] );
5176:FreeRTOS/Src/tasks.c ****                     #else
5177:FreeRTOS/Src/tasks.c ****                         ulTotalRunTime[ xCoreID ] = portGET_RUN_TIME_COUNTER_VALUE();
5178:FreeRTOS/Src/tasks.c ****                     #endif
5179:FreeRTOS/Src/tasks.c **** 
5180:FreeRTOS/Src/tasks.c ****                     /* Add the amount of time the task has been running to the
5181:FreeRTOS/Src/tasks.c ****                      * accumulated time so far.  The time the task started running was
5182:FreeRTOS/Src/tasks.c ****                      * stored in ulTaskSwitchedInTime.  Note that there is no overflow
5183:FreeRTOS/Src/tasks.c ****                      * protection here so count values are only valid until the timer
5184:FreeRTOS/Src/tasks.c ****                      * overflows.  The guard against negative values is to protect
5185:FreeRTOS/Src/tasks.c ****                      * against suspect run time stat counter implementations - which
5186:FreeRTOS/Src/tasks.c ****                      * are provided by the application, not the kernel. */
5187:FreeRTOS/Src/tasks.c ****                     if( ulTotalRunTime[ xCoreID ] > ulTaskSwitchedInTime[ xCoreID ] )
5188:FreeRTOS/Src/tasks.c ****                     {
5189:FreeRTOS/Src/tasks.c ****                         pxCurrentTCBs[ xCoreID ]->ulRunTimeCounter += ( ulTotalRunTime[ xCoreID ] -
5190:FreeRTOS/Src/tasks.c ****                     }
5191:FreeRTOS/Src/tasks.c ****                     else
5192:FreeRTOS/Src/tasks.c ****                     {
5193:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5194:FreeRTOS/Src/tasks.c ****                     }
5195:FreeRTOS/Src/tasks.c **** 
5196:FreeRTOS/Src/tasks.c ****                     ulTaskSwitchedInTime[ xCoreID ] = ulTotalRunTime[ xCoreID ];
5197:FreeRTOS/Src/tasks.c ****                 }
5198:FreeRTOS/Src/tasks.c ****                 #endif /* configGENERATE_RUN_TIME_STATS */
5199:FreeRTOS/Src/tasks.c **** 
5200:FreeRTOS/Src/tasks.c ****                 /* Check for stack overflow, if configured. */
5201:FreeRTOS/Src/tasks.c ****                 taskCHECK_FOR_STACK_OVERFLOW();
5202:FreeRTOS/Src/tasks.c **** 
5203:FreeRTOS/Src/tasks.c ****                 /* Before the currently running task is switched out, save its errno. */
5204:FreeRTOS/Src/tasks.c ****                 #if ( configUSE_POSIX_ERRNO == 1 )
5205:FreeRTOS/Src/tasks.c ****                 {
5206:FreeRTOS/Src/tasks.c ****                     pxCurrentTCBs[ xCoreID ]->iTaskErrno = FreeRTOS_errno;
5207:FreeRTOS/Src/tasks.c ****                 }
5208:FreeRTOS/Src/tasks.c ****                 #endif
5209:FreeRTOS/Src/tasks.c **** 
5210:FreeRTOS/Src/tasks.c ****                 /* Select a new task to run. */
5211:FreeRTOS/Src/tasks.c ****                 taskSELECT_HIGHEST_PRIORITY_TASK( xCoreID );
5212:FreeRTOS/Src/tasks.c ****                 traceTASK_SWITCHED_IN();
5213:FreeRTOS/Src/tasks.c **** 
5214:FreeRTOS/Src/tasks.c ****                 /* Macro to inject port specific behaviour immediately after
5215:FreeRTOS/Src/tasks.c ****                  * switching tasks, such as setting an end of stack watchpoint
5216:FreeRTOS/Src/tasks.c ****                  * or reconfiguring the MPU. */
5217:FreeRTOS/Src/tasks.c ****                 portTASK_SWITCH_HOOK( pxCurrentTCBs[ portGET_CORE_ID() ] );
5218:FreeRTOS/Src/tasks.c **** 
5219:FreeRTOS/Src/tasks.c ****                 /* After the new task is switched in, update the global errno. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 95


5220:FreeRTOS/Src/tasks.c ****                 #if ( configUSE_POSIX_ERRNO == 1 )
5221:FreeRTOS/Src/tasks.c ****                 {
5222:FreeRTOS/Src/tasks.c ****                     FreeRTOS_errno = pxCurrentTCBs[ xCoreID ]->iTaskErrno;
5223:FreeRTOS/Src/tasks.c ****                 }
5224:FreeRTOS/Src/tasks.c ****                 #endif
5225:FreeRTOS/Src/tasks.c **** 
5226:FreeRTOS/Src/tasks.c ****                 #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
5227:FreeRTOS/Src/tasks.c ****                 {
5228:FreeRTOS/Src/tasks.c ****                     /* Switch C-Runtime's TLS Block to point to the TLS
5229:FreeRTOS/Src/tasks.c ****                      * Block specific to this task. */
5230:FreeRTOS/Src/tasks.c ****                     configSET_TLS_BLOCK( pxCurrentTCBs[ xCoreID ]->xTLSBlock );
5231:FreeRTOS/Src/tasks.c ****                 }
5232:FreeRTOS/Src/tasks.c ****                 #endif
5233:FreeRTOS/Src/tasks.c ****             }
5234:FreeRTOS/Src/tasks.c ****         }
5235:FreeRTOS/Src/tasks.c ****         portRELEASE_ISR_LOCK();
5236:FreeRTOS/Src/tasks.c ****         portRELEASE_TASK_LOCK();
5237:FreeRTOS/Src/tasks.c **** 
5238:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskSwitchContext();
5239:FreeRTOS/Src/tasks.c ****     }
5240:FreeRTOS/Src/tasks.c **** #endif /* if ( configNUMBER_OF_CORES > 1 ) */
5241:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5242:FreeRTOS/Src/tasks.c **** 
5243:FreeRTOS/Src/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
5244:FreeRTOS/Src/tasks.c ****                             const TickType_t xTicksToWait )
5245:FreeRTOS/Src/tasks.c **** {
5246:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );
5247:FreeRTOS/Src/tasks.c **** 
5248:FreeRTOS/Src/tasks.c ****     configASSERT( pxEventList );
5249:FreeRTOS/Src/tasks.c **** 
5250:FreeRTOS/Src/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE
5251:FreeRTOS/Src/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
5252:FreeRTOS/Src/tasks.c **** 
5253:FreeRTOS/Src/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
5254:FreeRTOS/Src/tasks.c ****      * This is placed in the list in priority order so the highest priority task
5255:FreeRTOS/Src/tasks.c ****      * is the first to be woken by the event.
5256:FreeRTOS/Src/tasks.c ****      *
5257:FreeRTOS/Src/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
5258:FreeRTOS/Src/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
5259:FreeRTOS/Src/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
5260:FreeRTOS/Src/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
5261:FreeRTOS/Src/tasks.c ****      *
5262:FreeRTOS/Src/tasks.c ****      * The queue that contains the event list is locked, preventing
5263:FreeRTOS/Src/tasks.c ****      * simultaneous access from interrupts. */
5264:FreeRTOS/Src/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
5265:FreeRTOS/Src/tasks.c **** 
5266:FreeRTOS/Src/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
5267:FreeRTOS/Src/tasks.c **** 
5268:FreeRTOS/Src/tasks.c ****     traceRETURN_vTaskPlaceOnEventList();
5269:FreeRTOS/Src/tasks.c **** }
5270:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5271:FreeRTOS/Src/tasks.c **** 
5272:FreeRTOS/Src/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
5273:FreeRTOS/Src/tasks.c ****                                      const TickType_t xItemValue,
5274:FreeRTOS/Src/tasks.c ****                                      const TickType_t xTicksToWait )
5275:FreeRTOS/Src/tasks.c **** {
5276:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 96


5277:FreeRTOS/Src/tasks.c **** 
5278:FreeRTOS/Src/tasks.c ****     configASSERT( pxEventList );
5279:FreeRTOS/Src/tasks.c **** 
5280:FreeRTOS/Src/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
5281:FreeRTOS/Src/tasks.c ****      * the event groups implementation. */
5282:FreeRTOS/Src/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
5283:FreeRTOS/Src/tasks.c **** 
5284:FreeRTOS/Src/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
5285:FreeRTOS/Src/tasks.c ****      * event list item here as interrupts won't access the event list item of a
5286:FreeRTOS/Src/tasks.c ****      * task that is not in the Blocked state. */
5287:FreeRTOS/Src/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
5288:FreeRTOS/Src/tasks.c **** 
5289:FreeRTOS/Src/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
5290:FreeRTOS/Src/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
5291:FreeRTOS/Src/tasks.c ****      * event group implementation - and interrupts don't access event groups
5292:FreeRTOS/Src/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
5293:FreeRTOS/Src/tasks.c ****      * the task level). */
5294:FreeRTOS/Src/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
5295:FreeRTOS/Src/tasks.c **** 
5296:FreeRTOS/Src/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
5297:FreeRTOS/Src/tasks.c **** 
5298:FreeRTOS/Src/tasks.c ****     traceRETURN_vTaskPlaceOnUnorderedEventList();
5299:FreeRTOS/Src/tasks.c **** }
5300:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5301:FreeRTOS/Src/tasks.c **** 
5302:FreeRTOS/Src/tasks.c **** #if ( configUSE_TIMERS == 1 )
5303:FreeRTOS/Src/tasks.c **** 
5304:FreeRTOS/Src/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
5305:FreeRTOS/Src/tasks.c ****                                           TickType_t xTicksToWait,
5306:FreeRTOS/Src/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
5307:FreeRTOS/Src/tasks.c ****     {
5308:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );
5309:FreeRTOS/Src/tasks.c **** 
5310:FreeRTOS/Src/tasks.c ****         configASSERT( pxEventList );
5311:FreeRTOS/Src/tasks.c **** 
5312:FreeRTOS/Src/tasks.c ****         /* This function should not be called by application code hence the
5313:FreeRTOS/Src/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
5314:FreeRTOS/Src/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
5315:FreeRTOS/Src/tasks.c ****          * it should be called with the scheduler suspended. */
5316:FreeRTOS/Src/tasks.c **** 
5317:FreeRTOS/Src/tasks.c **** 
5318:FreeRTOS/Src/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
5319:FreeRTOS/Src/tasks.c ****          * In this case it is assume that this is the only task that is going to
5320:FreeRTOS/Src/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
5321:FreeRTOS/Src/tasks.c ****          * can be used in place of vListInsert. */
5322:FreeRTOS/Src/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
5323:FreeRTOS/Src/tasks.c **** 
5324:FreeRTOS/Src/tasks.c ****         /* If the task should block indefinitely then set the block time to a
5325:FreeRTOS/Src/tasks.c ****          * value that will be recognised as an indefinite delay inside the
5326:FreeRTOS/Src/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
5327:FreeRTOS/Src/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
5328:FreeRTOS/Src/tasks.c ****         {
5329:FreeRTOS/Src/tasks.c ****             xTicksToWait = portMAX_DELAY;
5330:FreeRTOS/Src/tasks.c ****         }
5331:FreeRTOS/Src/tasks.c **** 
5332:FreeRTOS/Src/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
5333:FreeRTOS/Src/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 97


5334:FreeRTOS/Src/tasks.c **** 
5335:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskPlaceOnEventListRestricted();
5336:FreeRTOS/Src/tasks.c ****     }
5337:FreeRTOS/Src/tasks.c **** 
5338:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TIMERS */
5339:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5340:FreeRTOS/Src/tasks.c **** 
5341:FreeRTOS/Src/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
5342:FreeRTOS/Src/tasks.c **** {
5343:FreeRTOS/Src/tasks.c ****     TCB_t * pxUnblockedTCB;
5344:FreeRTOS/Src/tasks.c ****     BaseType_t xReturn;
5345:FreeRTOS/Src/tasks.c **** 
5346:FreeRTOS/Src/tasks.c ****     traceENTER_xTaskRemoveFromEventList( pxEventList );
5347:FreeRTOS/Src/tasks.c **** 
5348:FreeRTOS/Src/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
5349:FreeRTOS/Src/tasks.c ****      * called from a critical section within an ISR. */
5350:FreeRTOS/Src/tasks.c **** 
5351:FreeRTOS/Src/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
5352:FreeRTOS/Src/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
5353:FreeRTOS/Src/tasks.c ****      * the delayed list, and add it to the ready list.
5354:FreeRTOS/Src/tasks.c ****      *
5355:FreeRTOS/Src/tasks.c ****      * If an event is for a queue that is locked then this function will never
5356:FreeRTOS/Src/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
5357:FreeRTOS/Src/tasks.c ****      * means exclusive access to the event list is guaranteed here.
5358:FreeRTOS/Src/tasks.c ****      *
5359:FreeRTOS/Src/tasks.c ****      * This function assumes that a check has already been made to ensure that
5360:FreeRTOS/Src/tasks.c ****      * pxEventList is not empty. */
5361:FreeRTOS/Src/tasks.c ****     /* MISRA Ref 11.5.3 [Void pointer assignment] */
5362:FreeRTOS/Src/tasks.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
5363:FreeRTOS/Src/tasks.c ****     /* coverity[misra_c_2012_rule_11_5_violation] */
5364:FreeRTOS/Src/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
5365:FreeRTOS/Src/tasks.c ****     configASSERT( pxUnblockedTCB );
5366:FreeRTOS/Src/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
5367:FreeRTOS/Src/tasks.c **** 
5368:FreeRTOS/Src/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
5369:FreeRTOS/Src/tasks.c ****     {
5370:FreeRTOS/Src/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
5371:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
5372:FreeRTOS/Src/tasks.c **** 
5373:FreeRTOS/Src/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
5374:FreeRTOS/Src/tasks.c ****         {
5375:FreeRTOS/Src/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
5376:FreeRTOS/Src/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
5377:FreeRTOS/Src/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
5378:FreeRTOS/Src/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
5379:FreeRTOS/Src/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
5380:FreeRTOS/Src/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
5381:FreeRTOS/Src/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
5382:FreeRTOS/Src/tasks.c ****              * ensure it is updated at the earliest possible time. */
5383:FreeRTOS/Src/tasks.c ****             prvResetNextTaskUnblockTime();
5384:FreeRTOS/Src/tasks.c ****         }
5385:FreeRTOS/Src/tasks.c ****         #endif
5386:FreeRTOS/Src/tasks.c ****     }
5387:FreeRTOS/Src/tasks.c ****     else
5388:FreeRTOS/Src/tasks.c ****     {
5389:FreeRTOS/Src/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
5390:FreeRTOS/Src/tasks.c ****          * pending until the scheduler is resumed. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 98


5391:FreeRTOS/Src/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
5392:FreeRTOS/Src/tasks.c ****     }
5393:FreeRTOS/Src/tasks.c **** 
5394:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
5395:FreeRTOS/Src/tasks.c ****     {
5396:FreeRTOS/Src/tasks.c ****         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
5397:FreeRTOS/Src/tasks.c ****         {
5398:FreeRTOS/Src/tasks.c ****             /* Return true if the task removed from the event list has a higher
5399:FreeRTOS/Src/tasks.c ****              * priority than the calling task.  This allows the calling task to know if
5400:FreeRTOS/Src/tasks.c ****              * it should force a context switch now. */
5401:FreeRTOS/Src/tasks.c ****             xReturn = pdTRUE;
5402:FreeRTOS/Src/tasks.c **** 
5403:FreeRTOS/Src/tasks.c ****             /* Mark that a yield is pending in case the user is not using the
5404:FreeRTOS/Src/tasks.c ****              * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
5405:FreeRTOS/Src/tasks.c ****             xYieldPendings[ 0 ] = pdTRUE;
5406:FreeRTOS/Src/tasks.c ****         }
5407:FreeRTOS/Src/tasks.c ****         else
5408:FreeRTOS/Src/tasks.c ****         {
5409:FreeRTOS/Src/tasks.c ****             xReturn = pdFALSE;
5410:FreeRTOS/Src/tasks.c ****         }
5411:FreeRTOS/Src/tasks.c ****     }
5412:FreeRTOS/Src/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
5413:FreeRTOS/Src/tasks.c ****     {
5414:FreeRTOS/Src/tasks.c ****         xReturn = pdFALSE;
5415:FreeRTOS/Src/tasks.c **** 
5416:FreeRTOS/Src/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
5417:FreeRTOS/Src/tasks.c ****         {
5418:FreeRTOS/Src/tasks.c ****             prvYieldForTask( pxUnblockedTCB );
5419:FreeRTOS/Src/tasks.c **** 
5420:FreeRTOS/Src/tasks.c ****             if( xYieldPendings[ portGET_CORE_ID() ] != pdFALSE )
5421:FreeRTOS/Src/tasks.c ****             {
5422:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
5423:FreeRTOS/Src/tasks.c ****             }
5424:FreeRTOS/Src/tasks.c ****         }
5425:FreeRTOS/Src/tasks.c ****         #endif /* #if ( configUSE_PREEMPTION == 1 ) */
5426:FreeRTOS/Src/tasks.c ****     }
5427:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
5428:FreeRTOS/Src/tasks.c **** 
5429:FreeRTOS/Src/tasks.c ****     traceRETURN_xTaskRemoveFromEventList( xReturn );
5430:FreeRTOS/Src/tasks.c ****     return xReturn;
5431:FreeRTOS/Src/tasks.c **** }
5432:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5433:FreeRTOS/Src/tasks.c **** 
5434:FreeRTOS/Src/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
5435:FreeRTOS/Src/tasks.c ****                                         const TickType_t xItemValue )
5436:FreeRTOS/Src/tasks.c **** {
5437:FreeRTOS/Src/tasks.c ****     TCB_t * pxUnblockedTCB;
5438:FreeRTOS/Src/tasks.c **** 
5439:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );
5440:FreeRTOS/Src/tasks.c **** 
5441:FreeRTOS/Src/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
5442:FreeRTOS/Src/tasks.c ****      * the event flags implementation. */
5443:FreeRTOS/Src/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
5444:FreeRTOS/Src/tasks.c **** 
5445:FreeRTOS/Src/tasks.c ****     /* Store the new item value in the event list. */
5446:FreeRTOS/Src/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
5447:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 99


5448:FreeRTOS/Src/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
5449:FreeRTOS/Src/tasks.c ****      * event flags. */
5450:FreeRTOS/Src/tasks.c ****     /* MISRA Ref 11.5.3 [Void pointer assignment] */
5451:FreeRTOS/Src/tasks.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
5452:FreeRTOS/Src/tasks.c ****     /* coverity[misra_c_2012_rule_11_5_violation] */
5453:FreeRTOS/Src/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
5454:FreeRTOS/Src/tasks.c ****     configASSERT( pxUnblockedTCB );
5455:FreeRTOS/Src/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
5456:FreeRTOS/Src/tasks.c **** 
5457:FreeRTOS/Src/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
5458:FreeRTOS/Src/tasks.c ****     {
5459:FreeRTOS/Src/tasks.c ****         /* If a task is blocked on a kernel object then xNextTaskUnblockTime
5460:FreeRTOS/Src/tasks.c ****          * might be set to the blocked task's time out time.  If the task is
5461:FreeRTOS/Src/tasks.c ****          * unblocked for a reason other than a timeout xNextTaskUnblockTime is
5462:FreeRTOS/Src/tasks.c ****          * normally left unchanged, because it is automatically reset to a new
5463:FreeRTOS/Src/tasks.c ****          * value when the tick count equals xNextTaskUnblockTime.  However if
5464:FreeRTOS/Src/tasks.c ****          * tickless idling is used it might be more important to enter sleep mode
5465:FreeRTOS/Src/tasks.c ****          * at the earliest possible time - so reset xNextTaskUnblockTime here to
5466:FreeRTOS/Src/tasks.c ****          * ensure it is updated at the earliest possible time. */
5467:FreeRTOS/Src/tasks.c ****         prvResetNextTaskUnblockTime();
5468:FreeRTOS/Src/tasks.c ****     }
5469:FreeRTOS/Src/tasks.c ****     #endif
5470:FreeRTOS/Src/tasks.c **** 
5471:FreeRTOS/Src/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
5472:FreeRTOS/Src/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
5473:FreeRTOS/Src/tasks.c ****      * lists. */
5474:FreeRTOS/Src/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
5475:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
5476:FreeRTOS/Src/tasks.c **** 
5477:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
5478:FreeRTOS/Src/tasks.c ****     {
5479:FreeRTOS/Src/tasks.c ****         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
5480:FreeRTOS/Src/tasks.c ****         {
5481:FreeRTOS/Src/tasks.c ****             /* The unblocked task has a priority above that of the calling task, so
5482:FreeRTOS/Src/tasks.c ****              * a context switch is required.  This function is called with the
5483:FreeRTOS/Src/tasks.c ****              * scheduler suspended so xYieldPending is set so the context switch
5484:FreeRTOS/Src/tasks.c ****              * occurs immediately that the scheduler is resumed (unsuspended). */
5485:FreeRTOS/Src/tasks.c ****             xYieldPendings[ 0 ] = pdTRUE;
5486:FreeRTOS/Src/tasks.c ****         }
5487:FreeRTOS/Src/tasks.c ****     }
5488:FreeRTOS/Src/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
5489:FreeRTOS/Src/tasks.c ****     {
5490:FreeRTOS/Src/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
5491:FreeRTOS/Src/tasks.c ****         {
5492:FreeRTOS/Src/tasks.c ****             taskENTER_CRITICAL();
5493:FreeRTOS/Src/tasks.c ****             {
5494:FreeRTOS/Src/tasks.c ****                 prvYieldForTask( pxUnblockedTCB );
5495:FreeRTOS/Src/tasks.c ****             }
5496:FreeRTOS/Src/tasks.c ****             taskEXIT_CRITICAL();
5497:FreeRTOS/Src/tasks.c ****         }
5498:FreeRTOS/Src/tasks.c ****         #endif
5499:FreeRTOS/Src/tasks.c ****     }
5500:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
5501:FreeRTOS/Src/tasks.c **** 
5502:FreeRTOS/Src/tasks.c ****     traceRETURN_vTaskRemoveFromUnorderedEventList();
5503:FreeRTOS/Src/tasks.c **** }
5504:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 100


5505:FreeRTOS/Src/tasks.c **** 
5506:FreeRTOS/Src/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
5507:FreeRTOS/Src/tasks.c **** {
5508:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskSetTimeOutState( pxTimeOut );
5509:FreeRTOS/Src/tasks.c **** 
5510:FreeRTOS/Src/tasks.c ****     configASSERT( pxTimeOut );
5511:FreeRTOS/Src/tasks.c ****     taskENTER_CRITICAL();
5512:FreeRTOS/Src/tasks.c ****     {
5513:FreeRTOS/Src/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
5514:FreeRTOS/Src/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
5515:FreeRTOS/Src/tasks.c ****     }
5516:FreeRTOS/Src/tasks.c ****     taskEXIT_CRITICAL();
5517:FreeRTOS/Src/tasks.c **** 
5518:FreeRTOS/Src/tasks.c ****     traceRETURN_vTaskSetTimeOutState();
5519:FreeRTOS/Src/tasks.c **** }
5520:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5521:FreeRTOS/Src/tasks.c **** 
5522:FreeRTOS/Src/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
5523:FreeRTOS/Src/tasks.c **** {
5524:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );
5525:FreeRTOS/Src/tasks.c **** 
5526:FreeRTOS/Src/tasks.c ****     /* For internal use only as it does not use a critical section. */
5527:FreeRTOS/Src/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
5528:FreeRTOS/Src/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
5529:FreeRTOS/Src/tasks.c **** 
5530:FreeRTOS/Src/tasks.c ****     traceRETURN_vTaskInternalSetTimeOutState();
5531:FreeRTOS/Src/tasks.c **** }
5532:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5533:FreeRTOS/Src/tasks.c **** 
5534:FreeRTOS/Src/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
5535:FreeRTOS/Src/tasks.c ****                                  TickType_t * const pxTicksToWait )
5536:FreeRTOS/Src/tasks.c **** {
5537:FreeRTOS/Src/tasks.c ****     BaseType_t xReturn;
5538:FreeRTOS/Src/tasks.c **** 
5539:FreeRTOS/Src/tasks.c ****     traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
5540:FreeRTOS/Src/tasks.c **** 
5541:FreeRTOS/Src/tasks.c ****     configASSERT( pxTimeOut );
5542:FreeRTOS/Src/tasks.c ****     configASSERT( pxTicksToWait );
5543:FreeRTOS/Src/tasks.c **** 
5544:FreeRTOS/Src/tasks.c ****     taskENTER_CRITICAL();
5545:FreeRTOS/Src/tasks.c ****     {
5546:FreeRTOS/Src/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
5547:FreeRTOS/Src/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
5548:FreeRTOS/Src/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
5549:FreeRTOS/Src/tasks.c **** 
5550:FreeRTOS/Src/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
5551:FreeRTOS/Src/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
5552:FreeRTOS/Src/tasks.c ****             {
5553:FreeRTOS/Src/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
5554:FreeRTOS/Src/tasks.c ****                  * but has the same result. */
5555:FreeRTOS/Src/tasks.c ****                 pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
5556:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
5557:FreeRTOS/Src/tasks.c ****             }
5558:FreeRTOS/Src/tasks.c ****             else
5559:FreeRTOS/Src/tasks.c ****         #endif
5560:FreeRTOS/Src/tasks.c **** 
5561:FreeRTOS/Src/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 101


5562:FreeRTOS/Src/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
5563:FreeRTOS/Src/tasks.c ****             {
5564:FreeRTOS/Src/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
5565:FreeRTOS/Src/tasks.c ****                  * specified is the maximum block time then the task should block
5566:FreeRTOS/Src/tasks.c ****                  * indefinitely, and therefore never time out. */
5567:FreeRTOS/Src/tasks.c ****                 xReturn = pdFALSE;
5568:FreeRTOS/Src/tasks.c ****             }
5569:FreeRTOS/Src/tasks.c ****             else
5570:FreeRTOS/Src/tasks.c ****         #endif
5571:FreeRTOS/Src/tasks.c **** 
5572:FreeRTOS/Src/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
5573:FreeRTOS/Src/tasks.c ****         {
5574:FreeRTOS/Src/tasks.c ****             /* The tick count is greater than the time at which
5575:FreeRTOS/Src/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
5576:FreeRTOS/Src/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
5577:FreeRTOS/Src/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
5578:FreeRTOS/Src/tasks.c ****              * was called. */
5579:FreeRTOS/Src/tasks.c ****             xReturn = pdTRUE;
5580:FreeRTOS/Src/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
5581:FreeRTOS/Src/tasks.c ****         }
5582:FreeRTOS/Src/tasks.c ****         else if( xElapsedTime < *pxTicksToWait )
5583:FreeRTOS/Src/tasks.c ****         {
5584:FreeRTOS/Src/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
5585:FreeRTOS/Src/tasks.c ****             *pxTicksToWait -= xElapsedTime;
5586:FreeRTOS/Src/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
5587:FreeRTOS/Src/tasks.c ****             xReturn = pdFALSE;
5588:FreeRTOS/Src/tasks.c ****         }
5589:FreeRTOS/Src/tasks.c ****         else
5590:FreeRTOS/Src/tasks.c ****         {
5591:FreeRTOS/Src/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
5592:FreeRTOS/Src/tasks.c ****             xReturn = pdTRUE;
5593:FreeRTOS/Src/tasks.c ****         }
5594:FreeRTOS/Src/tasks.c ****     }
5595:FreeRTOS/Src/tasks.c ****     taskEXIT_CRITICAL();
5596:FreeRTOS/Src/tasks.c **** 
5597:FreeRTOS/Src/tasks.c ****     traceRETURN_xTaskCheckForTimeOut( xReturn );
5598:FreeRTOS/Src/tasks.c **** 
5599:FreeRTOS/Src/tasks.c ****     return xReturn;
5600:FreeRTOS/Src/tasks.c **** }
5601:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5602:FreeRTOS/Src/tasks.c **** 
5603:FreeRTOS/Src/tasks.c **** void vTaskMissedYield( void )
5604:FreeRTOS/Src/tasks.c **** {
5605:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskMissedYield();
5606:FreeRTOS/Src/tasks.c **** 
5607:FreeRTOS/Src/tasks.c ****     /* Must be called from within a critical section. */
5608:FreeRTOS/Src/tasks.c ****     xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
5609:FreeRTOS/Src/tasks.c **** 
5610:FreeRTOS/Src/tasks.c ****     traceRETURN_vTaskMissedYield();
5611:FreeRTOS/Src/tasks.c **** }
5612:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5613:FreeRTOS/Src/tasks.c **** 
5614:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
5615:FreeRTOS/Src/tasks.c **** 
5616:FreeRTOS/Src/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
5617:FreeRTOS/Src/tasks.c ****     {
5618:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 102


5619:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
5620:FreeRTOS/Src/tasks.c **** 
5621:FreeRTOS/Src/tasks.c ****         traceENTER_uxTaskGetTaskNumber( xTask );
5622:FreeRTOS/Src/tasks.c **** 
5623:FreeRTOS/Src/tasks.c ****         if( xTask != NULL )
5624:FreeRTOS/Src/tasks.c ****         {
5625:FreeRTOS/Src/tasks.c ****             pxTCB = xTask;
5626:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
5627:FreeRTOS/Src/tasks.c ****         }
5628:FreeRTOS/Src/tasks.c ****         else
5629:FreeRTOS/Src/tasks.c ****         {
5630:FreeRTOS/Src/tasks.c ****             uxReturn = 0U;
5631:FreeRTOS/Src/tasks.c ****         }
5632:FreeRTOS/Src/tasks.c **** 
5633:FreeRTOS/Src/tasks.c ****         traceRETURN_uxTaskGetTaskNumber( uxReturn );
5634:FreeRTOS/Src/tasks.c **** 
5635:FreeRTOS/Src/tasks.c ****         return uxReturn;
5636:FreeRTOS/Src/tasks.c ****     }
5637:FreeRTOS/Src/tasks.c **** 
5638:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
5639:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5640:FreeRTOS/Src/tasks.c **** 
5641:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
5642:FreeRTOS/Src/tasks.c **** 
5643:FreeRTOS/Src/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
5644:FreeRTOS/Src/tasks.c ****                              const UBaseType_t uxHandle )
5645:FreeRTOS/Src/tasks.c ****     {
5646:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
5647:FreeRTOS/Src/tasks.c **** 
5648:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskSetTaskNumber( xTask, uxHandle );
5649:FreeRTOS/Src/tasks.c **** 
5650:FreeRTOS/Src/tasks.c ****         if( xTask != NULL )
5651:FreeRTOS/Src/tasks.c ****         {
5652:FreeRTOS/Src/tasks.c ****             pxTCB = xTask;
5653:FreeRTOS/Src/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
5654:FreeRTOS/Src/tasks.c ****         }
5655:FreeRTOS/Src/tasks.c **** 
5656:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskSetTaskNumber();
5657:FreeRTOS/Src/tasks.c ****     }
5658:FreeRTOS/Src/tasks.c **** 
5659:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
5660:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5661:FreeRTOS/Src/tasks.c **** 
5662:FreeRTOS/Src/tasks.c **** /*
5663:FreeRTOS/Src/tasks.c ****  * -----------------------------------------------------------
5664:FreeRTOS/Src/tasks.c ****  * The passive idle task.
5665:FreeRTOS/Src/tasks.c ****  * ----------------------------------------------------------
5666:FreeRTOS/Src/tasks.c ****  *
5667:FreeRTOS/Src/tasks.c ****  * The passive idle task is used for all the additional cores in a SMP
5668:FreeRTOS/Src/tasks.c ****  * system. There must be only 1 active idle task and the rest are passive
5669:FreeRTOS/Src/tasks.c ****  * idle tasks.
5670:FreeRTOS/Src/tasks.c ****  *
5671:FreeRTOS/Src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
5672:FreeRTOS/Src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
5673:FreeRTOS/Src/tasks.c ****  *
5674:FreeRTOS/Src/tasks.c ****  * void prvPassiveIdleTask( void *pvParameters );
5675:FreeRTOS/Src/tasks.c ****  */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 103


5676:FreeRTOS/Src/tasks.c **** 
5677:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
5678:FreeRTOS/Src/tasks.c ****     static portTASK_FUNCTION( prvPassiveIdleTask, pvParameters )
5679:FreeRTOS/Src/tasks.c ****     {
5680:FreeRTOS/Src/tasks.c ****         ( void ) pvParameters;
5681:FreeRTOS/Src/tasks.c **** 
5682:FreeRTOS/Src/tasks.c ****         taskYIELD();
5683:FreeRTOS/Src/tasks.c **** 
5684:FreeRTOS/Src/tasks.c ****         for( ; configCONTROL_INFINITE_LOOP(); )
5685:FreeRTOS/Src/tasks.c ****         {
5686:FreeRTOS/Src/tasks.c ****             #if ( configUSE_PREEMPTION == 0 )
5687:FreeRTOS/Src/tasks.c ****             {
5688:FreeRTOS/Src/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
5689:FreeRTOS/Src/tasks.c ****                  * see if any other task has become available.  If we are using
5690:FreeRTOS/Src/tasks.c ****                  * preemption we don't need to do this as any task becoming available
5691:FreeRTOS/Src/tasks.c ****                  * will automatically get the processor anyway. */
5692:FreeRTOS/Src/tasks.c ****                 taskYIELD();
5693:FreeRTOS/Src/tasks.c ****             }
5694:FreeRTOS/Src/tasks.c ****             #endif /* configUSE_PREEMPTION */
5695:FreeRTOS/Src/tasks.c **** 
5696:FreeRTOS/Src/tasks.c ****             #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
5697:FreeRTOS/Src/tasks.c ****             {
5698:FreeRTOS/Src/tasks.c ****                 /* When using preemption tasks of equal priority will be
5699:FreeRTOS/Src/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
5700:FreeRTOS/Src/tasks.c ****                  * to run then the idle task should yield before the end of the
5701:FreeRTOS/Src/tasks.c ****                  * timeslice.
5702:FreeRTOS/Src/tasks.c ****                  *
5703:FreeRTOS/Src/tasks.c ****                  * A critical region is not required here as we are just reading from
5704:FreeRTOS/Src/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
5705:FreeRTOS/Src/tasks.c ****                  * the ready list at the idle priority contains one more task than the
5706:FreeRTOS/Src/tasks.c ****                  * number of idle tasks, which is equal to the configured numbers of cores
5707:FreeRTOS/Src/tasks.c ****                  * then a task other than the idle task is ready to execute. */
5708:FreeRTOS/Src/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
5709:FreeRTOS/Src/tasks.c ****                 {
5710:FreeRTOS/Src/tasks.c ****                     taskYIELD();
5711:FreeRTOS/Src/tasks.c ****                 }
5712:FreeRTOS/Src/tasks.c ****                 else
5713:FreeRTOS/Src/tasks.c ****                 {
5714:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5715:FreeRTOS/Src/tasks.c ****                 }
5716:FreeRTOS/Src/tasks.c ****             }
5717:FreeRTOS/Src/tasks.c ****             #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
5718:FreeRTOS/Src/tasks.c **** 
5719:FreeRTOS/Src/tasks.c ****             #if ( configUSE_PASSIVE_IDLE_HOOK == 1 )
5720:FreeRTOS/Src/tasks.c ****             {
5721:FreeRTOS/Src/tasks.c ****                 /* Call the user defined function from within the idle task.  This
5722:FreeRTOS/Src/tasks.c ****                  * allows the application designer to add background functionality
5723:FreeRTOS/Src/tasks.c ****                  * without the overhead of a separate task.
5724:FreeRTOS/Src/tasks.c ****                  *
5725:FreeRTOS/Src/tasks.c ****                  * This hook is intended to manage core activity such as disabling cores that go id
5726:FreeRTOS/Src/tasks.c ****                  *
5727:FreeRTOS/Src/tasks.c ****                  * NOTE: vApplicationPassiveIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
5728:FreeRTOS/Src/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
5729:FreeRTOS/Src/tasks.c ****                 vApplicationPassiveIdleHook();
5730:FreeRTOS/Src/tasks.c ****             }
5731:FreeRTOS/Src/tasks.c ****             #endif /* configUSE_PASSIVE_IDLE_HOOK */
5732:FreeRTOS/Src/tasks.c ****         }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 104


5733:FreeRTOS/Src/tasks.c ****     }
5734:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
5735:FreeRTOS/Src/tasks.c **** 
5736:FreeRTOS/Src/tasks.c **** /*
5737:FreeRTOS/Src/tasks.c ****  * -----------------------------------------------------------
5738:FreeRTOS/Src/tasks.c ****  * The idle task.
5739:FreeRTOS/Src/tasks.c ****  * ----------------------------------------------------------
5740:FreeRTOS/Src/tasks.c ****  *
5741:FreeRTOS/Src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
5742:FreeRTOS/Src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
5743:FreeRTOS/Src/tasks.c ****  *
5744:FreeRTOS/Src/tasks.c ****  * void prvIdleTask( void *pvParameters );
5745:FreeRTOS/Src/tasks.c ****  *
5746:FreeRTOS/Src/tasks.c ****  */
5747:FreeRTOS/Src/tasks.c **** 
5748:FreeRTOS/Src/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
5749:FreeRTOS/Src/tasks.c **** {
5750:FreeRTOS/Src/tasks.c ****     /* Stop warnings. */
5751:FreeRTOS/Src/tasks.c ****     ( void ) pvParameters;
5752:FreeRTOS/Src/tasks.c **** 
5753:FreeRTOS/Src/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
5754:FreeRTOS/Src/tasks.c ****      * SCHEDULER IS STARTED. **/
5755:FreeRTOS/Src/tasks.c **** 
5756:FreeRTOS/Src/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
5757:FreeRTOS/Src/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
5758:FreeRTOS/Src/tasks.c ****      * any. */
5759:FreeRTOS/Src/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
5760:FreeRTOS/Src/tasks.c **** 
5761:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
5762:FreeRTOS/Src/tasks.c ****     {
5763:FreeRTOS/Src/tasks.c ****         /* SMP all cores start up in the idle task. This initial yield gets the application
5764:FreeRTOS/Src/tasks.c ****          * tasks started. */
5765:FreeRTOS/Src/tasks.c ****         taskYIELD();
5766:FreeRTOS/Src/tasks.c ****     }
5767:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
5768:FreeRTOS/Src/tasks.c **** 
5769:FreeRTOS/Src/tasks.c ****     for( ; configCONTROL_INFINITE_LOOP(); )
5770:FreeRTOS/Src/tasks.c ****     {
5771:FreeRTOS/Src/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
5772:FreeRTOS/Src/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
5773:FreeRTOS/Src/tasks.c ****         prvCheckTasksWaitingTermination();
5774:FreeRTOS/Src/tasks.c **** 
5775:FreeRTOS/Src/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
5776:FreeRTOS/Src/tasks.c ****         {
5777:FreeRTOS/Src/tasks.c ****             /* If we are not using preemption we keep forcing a task switch to
5778:FreeRTOS/Src/tasks.c ****              * see if any other task has become available.  If we are using
5779:FreeRTOS/Src/tasks.c ****              * preemption we don't need to do this as any task becoming available
5780:FreeRTOS/Src/tasks.c ****              * will automatically get the processor anyway. */
5781:FreeRTOS/Src/tasks.c ****             taskYIELD();
5782:FreeRTOS/Src/tasks.c ****         }
5783:FreeRTOS/Src/tasks.c ****         #endif /* configUSE_PREEMPTION */
5784:FreeRTOS/Src/tasks.c **** 
5785:FreeRTOS/Src/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
5786:FreeRTOS/Src/tasks.c ****         {
5787:FreeRTOS/Src/tasks.c ****             /* When using preemption tasks of equal priority will be
5788:FreeRTOS/Src/tasks.c ****              * timesliced.  If a task that is sharing the idle priority is ready
5789:FreeRTOS/Src/tasks.c ****              * to run then the idle task should yield before the end of the
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 105


5790:FreeRTOS/Src/tasks.c ****              * timeslice.
5791:FreeRTOS/Src/tasks.c ****              *
5792:FreeRTOS/Src/tasks.c ****              * A critical region is not required here as we are just reading from
5793:FreeRTOS/Src/tasks.c ****              * the list, and an occasional incorrect value will not matter.  If
5794:FreeRTOS/Src/tasks.c ****              * the ready list at the idle priority contains one more task than the
5795:FreeRTOS/Src/tasks.c ****              * number of idle tasks, which is equal to the configured numbers of cores
5796:FreeRTOS/Src/tasks.c ****              * then a task other than the idle task is ready to execute. */
5797:FreeRTOS/Src/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType
5798:FreeRTOS/Src/tasks.c ****             {
5799:FreeRTOS/Src/tasks.c ****                 taskYIELD();
5800:FreeRTOS/Src/tasks.c ****             }
5801:FreeRTOS/Src/tasks.c ****             else
5802:FreeRTOS/Src/tasks.c ****             {
5803:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5804:FreeRTOS/Src/tasks.c ****             }
5805:FreeRTOS/Src/tasks.c ****         }
5806:FreeRTOS/Src/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
5807:FreeRTOS/Src/tasks.c **** 
5808:FreeRTOS/Src/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
5809:FreeRTOS/Src/tasks.c ****         {
5810:FreeRTOS/Src/tasks.c ****             /* Call the user defined function from within the idle task. */
5811:FreeRTOS/Src/tasks.c ****             vApplicationIdleHook();
5812:FreeRTOS/Src/tasks.c ****         }
5813:FreeRTOS/Src/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
5814:FreeRTOS/Src/tasks.c **** 
5815:FreeRTOS/Src/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
5816:FreeRTOS/Src/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
5817:FreeRTOS/Src/tasks.c ****          * user defined low power mode  implementations require
5818:FreeRTOS/Src/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
5819:FreeRTOS/Src/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
5820:FreeRTOS/Src/tasks.c ****         {
5821:FreeRTOS/Src/tasks.c ****             TickType_t xExpectedIdleTime;
5822:FreeRTOS/Src/tasks.c **** 
5823:FreeRTOS/Src/tasks.c ****             /* It is not desirable to suspend then resume the scheduler on
5824:FreeRTOS/Src/tasks.c ****              * each iteration of the idle task.  Therefore, a preliminary
5825:FreeRTOS/Src/tasks.c ****              * test of the expected idle time is performed without the
5826:FreeRTOS/Src/tasks.c ****              * scheduler suspended.  The result here is not necessarily
5827:FreeRTOS/Src/tasks.c ****              * valid. */
5828:FreeRTOS/Src/tasks.c ****             xExpectedIdleTime = prvGetExpectedIdleTime();
5829:FreeRTOS/Src/tasks.c **** 
5830:FreeRTOS/Src/tasks.c ****             if( xExpectedIdleTime >= ( TickType_t ) configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
5831:FreeRTOS/Src/tasks.c ****             {
5832:FreeRTOS/Src/tasks.c ****                 vTaskSuspendAll();
5833:FreeRTOS/Src/tasks.c ****                 {
5834:FreeRTOS/Src/tasks.c ****                     /* Now the scheduler is suspended, the expected idle
5835:FreeRTOS/Src/tasks.c ****                      * time can be sampled again, and this time its value can
5836:FreeRTOS/Src/tasks.c ****                      * be used. */
5837:FreeRTOS/Src/tasks.c ****                     configASSERT( xNextTaskUnblockTime >= xTickCount );
5838:FreeRTOS/Src/tasks.c ****                     xExpectedIdleTime = prvGetExpectedIdleTime();
5839:FreeRTOS/Src/tasks.c **** 
5840:FreeRTOS/Src/tasks.c ****                     /* Define the following macro to set xExpectedIdleTime to 0
5841:FreeRTOS/Src/tasks.c ****                      * if the application does not want
5842:FreeRTOS/Src/tasks.c ****                      * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
5843:FreeRTOS/Src/tasks.c ****                     configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
5844:FreeRTOS/Src/tasks.c **** 
5845:FreeRTOS/Src/tasks.c ****                     if( xExpectedIdleTime >= ( TickType_t ) configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
5846:FreeRTOS/Src/tasks.c ****                     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 106


5847:FreeRTOS/Src/tasks.c ****                         traceLOW_POWER_IDLE_BEGIN();
5848:FreeRTOS/Src/tasks.c ****                         portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
5849:FreeRTOS/Src/tasks.c ****                         traceLOW_POWER_IDLE_END();
5850:FreeRTOS/Src/tasks.c ****                     }
5851:FreeRTOS/Src/tasks.c ****                     else
5852:FreeRTOS/Src/tasks.c ****                     {
5853:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5854:FreeRTOS/Src/tasks.c ****                     }
5855:FreeRTOS/Src/tasks.c ****                 }
5856:FreeRTOS/Src/tasks.c ****                 ( void ) xTaskResumeAll();
5857:FreeRTOS/Src/tasks.c ****             }
5858:FreeRTOS/Src/tasks.c ****             else
5859:FreeRTOS/Src/tasks.c ****             {
5860:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5861:FreeRTOS/Src/tasks.c ****             }
5862:FreeRTOS/Src/tasks.c ****         }
5863:FreeRTOS/Src/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
5864:FreeRTOS/Src/tasks.c **** 
5865:FreeRTOS/Src/tasks.c ****         #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_PASSIVE_IDLE_HOOK == 1 ) )
5866:FreeRTOS/Src/tasks.c ****         {
5867:FreeRTOS/Src/tasks.c ****             /* Call the user defined function from within the idle task.  This
5868:FreeRTOS/Src/tasks.c ****              * allows the application designer to add background functionality
5869:FreeRTOS/Src/tasks.c ****              * without the overhead of a separate task.
5870:FreeRTOS/Src/tasks.c ****              *
5871:FreeRTOS/Src/tasks.c ****              * This hook is intended to manage core activity such as disabling cores that go idle.
5872:FreeRTOS/Src/tasks.c ****              *
5873:FreeRTOS/Src/tasks.c ****              * NOTE: vApplicationPassiveIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
5874:FreeRTOS/Src/tasks.c ****              * CALL A FUNCTION THAT MIGHT BLOCK. */
5875:FreeRTOS/Src/tasks.c ****             vApplicationPassiveIdleHook();
5876:FreeRTOS/Src/tasks.c ****         }
5877:FreeRTOS/Src/tasks.c ****         #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_PASSIVE_IDLE_HOOK == 1 ) ) */
5878:FreeRTOS/Src/tasks.c ****     }
5879:FreeRTOS/Src/tasks.c **** }
5880:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5881:FreeRTOS/Src/tasks.c **** 
5882:FreeRTOS/Src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
5883:FreeRTOS/Src/tasks.c **** 
5884:FreeRTOS/Src/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
5885:FreeRTOS/Src/tasks.c ****     {
5886:FreeRTOS/Src/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
5887:FreeRTOS/Src/tasks.c ****             /* The idle task exists in addition to the application tasks. */
5888:FreeRTOS/Src/tasks.c ****             const UBaseType_t uxNonApplicationTasks = configNUMBER_OF_CORES;
5889:FreeRTOS/Src/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
5890:FreeRTOS/Src/tasks.c **** 
5891:FreeRTOS/Src/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
5892:FreeRTOS/Src/tasks.c **** 
5893:FreeRTOS/Src/tasks.c ****         traceENTER_eTaskConfirmSleepModeStatus();
5894:FreeRTOS/Src/tasks.c **** 
5895:FreeRTOS/Src/tasks.c ****         /* This function must be called from a critical section. */
5896:FreeRTOS/Src/tasks.c **** 
5897:FreeRTOS/Src/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0U )
5898:FreeRTOS/Src/tasks.c ****         {
5899:FreeRTOS/Src/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
5900:FreeRTOS/Src/tasks.c ****             eReturn = eAbortSleep;
5901:FreeRTOS/Src/tasks.c ****         }
5902:FreeRTOS/Src/tasks.c ****         else if( xYieldPendings[ portGET_CORE_ID() ] != pdFALSE )
5903:FreeRTOS/Src/tasks.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 107


5904:FreeRTOS/Src/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
5905:FreeRTOS/Src/tasks.c ****             eReturn = eAbortSleep;
5906:FreeRTOS/Src/tasks.c ****         }
5907:FreeRTOS/Src/tasks.c ****         else if( xPendedTicks != 0U )
5908:FreeRTOS/Src/tasks.c ****         {
5909:FreeRTOS/Src/tasks.c ****             /* A tick interrupt has already occurred but was held pending
5910:FreeRTOS/Src/tasks.c ****              * because the scheduler is suspended. */
5911:FreeRTOS/Src/tasks.c ****             eReturn = eAbortSleep;
5912:FreeRTOS/Src/tasks.c ****         }
5913:FreeRTOS/Src/tasks.c **** 
5914:FreeRTOS/Src/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
5915:FreeRTOS/Src/tasks.c ****             else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - u
5916:FreeRTOS/Src/tasks.c ****             {
5917:FreeRTOS/Src/tasks.c ****                 /* If all the tasks are in the suspended list (which might mean they
5918:FreeRTOS/Src/tasks.c ****                  * have an infinite block time rather than actually being suspended)
5919:FreeRTOS/Src/tasks.c ****                  * then it is safe to turn all clocks off and just wait for external
5920:FreeRTOS/Src/tasks.c ****                  * interrupts. */
5921:FreeRTOS/Src/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
5922:FreeRTOS/Src/tasks.c ****             }
5923:FreeRTOS/Src/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
5924:FreeRTOS/Src/tasks.c ****         else
5925:FreeRTOS/Src/tasks.c ****         {
5926:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
5927:FreeRTOS/Src/tasks.c ****         }
5928:FreeRTOS/Src/tasks.c **** 
5929:FreeRTOS/Src/tasks.c ****         traceRETURN_eTaskConfirmSleepModeStatus( eReturn );
5930:FreeRTOS/Src/tasks.c **** 
5931:FreeRTOS/Src/tasks.c ****         return eReturn;
5932:FreeRTOS/Src/tasks.c ****     }
5933:FreeRTOS/Src/tasks.c **** 
5934:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
5935:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5936:FreeRTOS/Src/tasks.c **** 
5937:FreeRTOS/Src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
5938:FreeRTOS/Src/tasks.c **** 
5939:FreeRTOS/Src/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
5940:FreeRTOS/Src/tasks.c ****                                             BaseType_t xIndex,
5941:FreeRTOS/Src/tasks.c ****                                             void * pvValue )
5942:FreeRTOS/Src/tasks.c ****     {
5943:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
5944:FreeRTOS/Src/tasks.c **** 
5945:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskSetThreadLocalStoragePointer( xTaskToSet, xIndex, pvValue );
5946:FreeRTOS/Src/tasks.c **** 
5947:FreeRTOS/Src/tasks.c ****         if( ( xIndex >= 0 ) &&
5948:FreeRTOS/Src/tasks.c ****             ( xIndex < ( BaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
5949:FreeRTOS/Src/tasks.c ****         {
5950:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
5951:FreeRTOS/Src/tasks.c ****             configASSERT( pxTCB != NULL );
5952:FreeRTOS/Src/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
5953:FreeRTOS/Src/tasks.c ****         }
5954:FreeRTOS/Src/tasks.c **** 
5955:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskSetThreadLocalStoragePointer();
5956:FreeRTOS/Src/tasks.c ****     }
5957:FreeRTOS/Src/tasks.c **** 
5958:FreeRTOS/Src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
5959:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5960:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 108


5961:FreeRTOS/Src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
5962:FreeRTOS/Src/tasks.c **** 
5963:FreeRTOS/Src/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
5964:FreeRTOS/Src/tasks.c ****                                                BaseType_t xIndex )
5965:FreeRTOS/Src/tasks.c ****     {
5966:FreeRTOS/Src/tasks.c ****         void * pvReturn = NULL;
5967:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
5968:FreeRTOS/Src/tasks.c **** 
5969:FreeRTOS/Src/tasks.c ****         traceENTER_pvTaskGetThreadLocalStoragePointer( xTaskToQuery, xIndex );
5970:FreeRTOS/Src/tasks.c **** 
5971:FreeRTOS/Src/tasks.c ****         if( ( xIndex >= 0 ) &&
5972:FreeRTOS/Src/tasks.c ****             ( xIndex < ( BaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
5973:FreeRTOS/Src/tasks.c ****         {
5974:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
5975:FreeRTOS/Src/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
5976:FreeRTOS/Src/tasks.c ****         }
5977:FreeRTOS/Src/tasks.c ****         else
5978:FreeRTOS/Src/tasks.c ****         {
5979:FreeRTOS/Src/tasks.c ****             pvReturn = NULL;
5980:FreeRTOS/Src/tasks.c ****         }
5981:FreeRTOS/Src/tasks.c **** 
5982:FreeRTOS/Src/tasks.c ****         traceRETURN_pvTaskGetThreadLocalStoragePointer( pvReturn );
5983:FreeRTOS/Src/tasks.c **** 
5984:FreeRTOS/Src/tasks.c ****         return pvReturn;
5985:FreeRTOS/Src/tasks.c ****     }
5986:FreeRTOS/Src/tasks.c **** 
5987:FreeRTOS/Src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
5988:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
5989:FreeRTOS/Src/tasks.c **** 
5990:FreeRTOS/Src/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
5991:FreeRTOS/Src/tasks.c **** 
5992:FreeRTOS/Src/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
5993:FreeRTOS/Src/tasks.c ****                                   const MemoryRegion_t * const pxRegions )
5994:FreeRTOS/Src/tasks.c ****     {
5995:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
5996:FreeRTOS/Src/tasks.c **** 
5997:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskAllocateMPURegions( xTaskToModify, pxRegions );
5998:FreeRTOS/Src/tasks.c **** 
5999:FreeRTOS/Src/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
6000:FreeRTOS/Src/tasks.c ****          * the calling task. */
6001:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
6002:FreeRTOS/Src/tasks.c **** 
6003:FreeRTOS/Src/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), pxRegions, NULL, 0 );
6004:FreeRTOS/Src/tasks.c **** 
6005:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskAllocateMPURegions();
6006:FreeRTOS/Src/tasks.c ****     }
6007:FreeRTOS/Src/tasks.c **** 
6008:FreeRTOS/Src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
6009:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6010:FreeRTOS/Src/tasks.c **** 
6011:FreeRTOS/Src/tasks.c **** static void prvInitialiseTaskLists( void )
6012:FreeRTOS/Src/tasks.c **** {
6013:FreeRTOS/Src/tasks.c ****     UBaseType_t uxPriority;
6014:FreeRTOS/Src/tasks.c **** 
6015:FreeRTOS/Src/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
6016:FreeRTOS/Src/tasks.c ****     {
6017:FreeRTOS/Src/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 109


6018:FreeRTOS/Src/tasks.c ****     }
6019:FreeRTOS/Src/tasks.c **** 
6020:FreeRTOS/Src/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
6021:FreeRTOS/Src/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
6022:FreeRTOS/Src/tasks.c ****     vListInitialise( &xPendingReadyList );
6023:FreeRTOS/Src/tasks.c **** 
6024:FreeRTOS/Src/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
6025:FreeRTOS/Src/tasks.c ****     {
6026:FreeRTOS/Src/tasks.c ****         vListInitialise( &xTasksWaitingTermination );
6027:FreeRTOS/Src/tasks.c ****     }
6028:FreeRTOS/Src/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
6029:FreeRTOS/Src/tasks.c **** 
6030:FreeRTOS/Src/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
6031:FreeRTOS/Src/tasks.c ****     {
6032:FreeRTOS/Src/tasks.c ****         vListInitialise( &xSuspendedTaskList );
6033:FreeRTOS/Src/tasks.c ****     }
6034:FreeRTOS/Src/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
6035:FreeRTOS/Src/tasks.c **** 
6036:FreeRTOS/Src/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
6037:FreeRTOS/Src/tasks.c ****      * using list2. */
6038:FreeRTOS/Src/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
6039:FreeRTOS/Src/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
6040:FreeRTOS/Src/tasks.c **** }
6041:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6042:FreeRTOS/Src/tasks.c **** 
6043:FreeRTOS/Src/tasks.c **** static void prvCheckTasksWaitingTermination( void )
6044:FreeRTOS/Src/tasks.c **** {
6045:FreeRTOS/Src/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
6046:FreeRTOS/Src/tasks.c **** 
6047:FreeRTOS/Src/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
6048:FreeRTOS/Src/tasks.c ****     {
6049:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
6050:FreeRTOS/Src/tasks.c **** 
6051:FreeRTOS/Src/tasks.c ****         /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
6052:FreeRTOS/Src/tasks.c ****          * being called too often in the idle task. */
6053:FreeRTOS/Src/tasks.c ****         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
6054:FreeRTOS/Src/tasks.c ****         {
6055:FreeRTOS/Src/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
6056:FreeRTOS/Src/tasks.c ****             {
6057:FreeRTOS/Src/tasks.c ****                 taskENTER_CRITICAL();
6058:FreeRTOS/Src/tasks.c ****                 {
6059:FreeRTOS/Src/tasks.c ****                     {
6060:FreeRTOS/Src/tasks.c ****                         /* MISRA Ref 11.5.3 [Void pointer assignment] */
6061:FreeRTOS/Src/tasks.c ****                         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/M
6062:FreeRTOS/Src/tasks.c ****                         /* coverity[misra_c_2012_rule_11_5_violation] */
6063:FreeRTOS/Src/tasks.c ****                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
6064:FreeRTOS/Src/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
6065:FreeRTOS/Src/tasks.c ****                         --uxCurrentNumberOfTasks;
6066:FreeRTOS/Src/tasks.c ****                         --uxDeletedTasksWaitingCleanUp;
6067:FreeRTOS/Src/tasks.c ****                     }
6068:FreeRTOS/Src/tasks.c ****                 }
6069:FreeRTOS/Src/tasks.c ****                 taskEXIT_CRITICAL();
6070:FreeRTOS/Src/tasks.c **** 
6071:FreeRTOS/Src/tasks.c ****                 prvDeleteTCB( pxTCB );
6072:FreeRTOS/Src/tasks.c ****             }
6073:FreeRTOS/Src/tasks.c ****             #else /* #if( configNUMBER_OF_CORES == 1 ) */
6074:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 110


6075:FreeRTOS/Src/tasks.c ****                 pxTCB = NULL;
6076:FreeRTOS/Src/tasks.c **** 
6077:FreeRTOS/Src/tasks.c ****                 taskENTER_CRITICAL();
6078:FreeRTOS/Src/tasks.c ****                 {
6079:FreeRTOS/Src/tasks.c ****                     /* For SMP, multiple idles can be running simultaneously
6080:FreeRTOS/Src/tasks.c ****                      * and we need to check that other idles did not cleanup while we were
6081:FreeRTOS/Src/tasks.c ****                      * waiting to enter the critical section. */
6082:FreeRTOS/Src/tasks.c ****                     if( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
6083:FreeRTOS/Src/tasks.c ****                     {
6084:FreeRTOS/Src/tasks.c ****                         /* MISRA Ref 11.5.3 [Void pointer assignment] */
6085:FreeRTOS/Src/tasks.c ****                         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/M
6086:FreeRTOS/Src/tasks.c ****                         /* coverity[misra_c_2012_rule_11_5_violation] */
6087:FreeRTOS/Src/tasks.c ****                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
6088:FreeRTOS/Src/tasks.c **** 
6089:FreeRTOS/Src/tasks.c ****                         if( pxTCB->xTaskRunState == taskTASK_NOT_RUNNING )
6090:FreeRTOS/Src/tasks.c ****                         {
6091:FreeRTOS/Src/tasks.c ****                             ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
6092:FreeRTOS/Src/tasks.c ****                             --uxCurrentNumberOfTasks;
6093:FreeRTOS/Src/tasks.c ****                             --uxDeletedTasksWaitingCleanUp;
6094:FreeRTOS/Src/tasks.c ****                         }
6095:FreeRTOS/Src/tasks.c ****                         else
6096:FreeRTOS/Src/tasks.c ****                         {
6097:FreeRTOS/Src/tasks.c ****                             /* The TCB to be deleted still has not yet been switched out
6098:FreeRTOS/Src/tasks.c ****                              * by the scheduler, so we will just exit this loop early and
6099:FreeRTOS/Src/tasks.c ****                              * try again next time. */
6100:FreeRTOS/Src/tasks.c ****                             taskEXIT_CRITICAL();
6101:FreeRTOS/Src/tasks.c ****                             break;
6102:FreeRTOS/Src/tasks.c ****                         }
6103:FreeRTOS/Src/tasks.c ****                     }
6104:FreeRTOS/Src/tasks.c ****                 }
6105:FreeRTOS/Src/tasks.c ****                 taskEXIT_CRITICAL();
6106:FreeRTOS/Src/tasks.c **** 
6107:FreeRTOS/Src/tasks.c ****                 if( pxTCB != NULL )
6108:FreeRTOS/Src/tasks.c ****                 {
6109:FreeRTOS/Src/tasks.c ****                     prvDeleteTCB( pxTCB );
6110:FreeRTOS/Src/tasks.c ****                 }
6111:FreeRTOS/Src/tasks.c ****             }
6112:FreeRTOS/Src/tasks.c ****             #endif /* #if( configNUMBER_OF_CORES == 1 ) */
6113:FreeRTOS/Src/tasks.c ****         }
6114:FreeRTOS/Src/tasks.c ****     }
6115:FreeRTOS/Src/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
6116:FreeRTOS/Src/tasks.c **** }
6117:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6118:FreeRTOS/Src/tasks.c **** 
6119:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
6120:FreeRTOS/Src/tasks.c **** 
6121:FreeRTOS/Src/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
6122:FreeRTOS/Src/tasks.c ****                        TaskStatus_t * pxTaskStatus,
6123:FreeRTOS/Src/tasks.c ****                        BaseType_t xGetFreeStackSpace,
6124:FreeRTOS/Src/tasks.c ****                        eTaskState eState )
6125:FreeRTOS/Src/tasks.c ****     {
6126:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
6127:FreeRTOS/Src/tasks.c **** 
6128:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
6129:FreeRTOS/Src/tasks.c **** 
6130:FreeRTOS/Src/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
6131:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 111


6132:FreeRTOS/Src/tasks.c **** 
6133:FreeRTOS/Src/tasks.c ****         pxTaskStatus->xHandle = pxTCB;
6134:FreeRTOS/Src/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
6135:FreeRTOS/Src/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
6136:FreeRTOS/Src/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
6137:FreeRTOS/Src/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
6138:FreeRTOS/Src/tasks.c ****             pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
6139:FreeRTOS/Src/tasks.c ****             pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
6140:FreeRTOS/Src/tasks.c ****         #endif
6141:FreeRTOS/Src/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
6142:FreeRTOS/Src/tasks.c **** 
6143:FreeRTOS/Src/tasks.c ****         #if ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) )
6144:FreeRTOS/Src/tasks.c ****         {
6145:FreeRTOS/Src/tasks.c ****             pxTaskStatus->uxCoreAffinityMask = pxTCB->uxCoreAffinityMask;
6146:FreeRTOS/Src/tasks.c ****         }
6147:FreeRTOS/Src/tasks.c ****         #endif
6148:FreeRTOS/Src/tasks.c **** 
6149:FreeRTOS/Src/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
6150:FreeRTOS/Src/tasks.c ****         {
6151:FreeRTOS/Src/tasks.c ****             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
6152:FreeRTOS/Src/tasks.c ****         }
6153:FreeRTOS/Src/tasks.c ****         #else
6154:FreeRTOS/Src/tasks.c ****         {
6155:FreeRTOS/Src/tasks.c ****             pxTaskStatus->uxBasePriority = 0;
6156:FreeRTOS/Src/tasks.c ****         }
6157:FreeRTOS/Src/tasks.c ****         #endif
6158:FreeRTOS/Src/tasks.c **** 
6159:FreeRTOS/Src/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
6160:FreeRTOS/Src/tasks.c ****         {
6161:FreeRTOS/Src/tasks.c ****             pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
6162:FreeRTOS/Src/tasks.c ****         }
6163:FreeRTOS/Src/tasks.c ****         #else
6164:FreeRTOS/Src/tasks.c ****         {
6165:FreeRTOS/Src/tasks.c ****             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
6166:FreeRTOS/Src/tasks.c ****         }
6167:FreeRTOS/Src/tasks.c ****         #endif
6168:FreeRTOS/Src/tasks.c **** 
6169:FreeRTOS/Src/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
6170:FreeRTOS/Src/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
6171:FreeRTOS/Src/tasks.c ****          * state is just set to whatever is passed in. */
6172:FreeRTOS/Src/tasks.c ****         if( eState != eInvalid )
6173:FreeRTOS/Src/tasks.c ****         {
6174:FreeRTOS/Src/tasks.c ****             if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
6175:FreeRTOS/Src/tasks.c ****             {
6176:FreeRTOS/Src/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
6177:FreeRTOS/Src/tasks.c ****             }
6178:FreeRTOS/Src/tasks.c ****             else
6179:FreeRTOS/Src/tasks.c ****             {
6180:FreeRTOS/Src/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
6181:FreeRTOS/Src/tasks.c **** 
6182:FreeRTOS/Src/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
6183:FreeRTOS/Src/tasks.c ****                 {
6184:FreeRTOS/Src/tasks.c ****                     /* If the task is in the suspended list then there is a
6185:FreeRTOS/Src/tasks.c ****                      *  chance it is actually just blocked indefinitely - so really
6186:FreeRTOS/Src/tasks.c ****                      *  it should be reported as being in the Blocked state. */
6187:FreeRTOS/Src/tasks.c ****                     if( eState == eSuspended )
6188:FreeRTOS/Src/tasks.c ****                     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 112


6189:FreeRTOS/Src/tasks.c ****                         vTaskSuspendAll();
6190:FreeRTOS/Src/tasks.c ****                         {
6191:FreeRTOS/Src/tasks.c ****                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
6192:FreeRTOS/Src/tasks.c ****                             {
6193:FreeRTOS/Src/tasks.c ****                                 pxTaskStatus->eCurrentState = eBlocked;
6194:FreeRTOS/Src/tasks.c ****                             }
6195:FreeRTOS/Src/tasks.c ****                             else
6196:FreeRTOS/Src/tasks.c ****                             {
6197:FreeRTOS/Src/tasks.c ****                                 #if ( configUSE_TASK_NOTIFICATIONS == 1 )
6198:FreeRTOS/Src/tasks.c ****                                 {
6199:FreeRTOS/Src/tasks.c ****                                     BaseType_t x;
6200:FreeRTOS/Src/tasks.c **** 
6201:FreeRTOS/Src/tasks.c ****                                     /* The task does not appear on the event list item of
6202:FreeRTOS/Src/tasks.c ****                                      * and of the RTOS objects, but could still be in the
6203:FreeRTOS/Src/tasks.c ****                                      * blocked state if it is waiting on its notification
6204:FreeRTOS/Src/tasks.c ****                                      * rather than waiting on an object.  If not, is
6205:FreeRTOS/Src/tasks.c ****                                      * suspended. */
6206:FreeRTOS/Src/tasks.c ****                                     for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFI
6207:FreeRTOS/Src/tasks.c ****                                     {
6208:FreeRTOS/Src/tasks.c ****                                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
6209:FreeRTOS/Src/tasks.c ****                                         {
6210:FreeRTOS/Src/tasks.c ****                                             pxTaskStatus->eCurrentState = eBlocked;
6211:FreeRTOS/Src/tasks.c ****                                             break;
6212:FreeRTOS/Src/tasks.c ****                                         }
6213:FreeRTOS/Src/tasks.c ****                                     }
6214:FreeRTOS/Src/tasks.c ****                                 }
6215:FreeRTOS/Src/tasks.c ****                                 #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
6216:FreeRTOS/Src/tasks.c ****                             }
6217:FreeRTOS/Src/tasks.c ****                         }
6218:FreeRTOS/Src/tasks.c ****                         ( void ) xTaskResumeAll();
6219:FreeRTOS/Src/tasks.c ****                     }
6220:FreeRTOS/Src/tasks.c ****                 }
6221:FreeRTOS/Src/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
6222:FreeRTOS/Src/tasks.c **** 
6223:FreeRTOS/Src/tasks.c ****                 /* Tasks can be in pending ready list and other state list at the
6224:FreeRTOS/Src/tasks.c ****                  * same time. These tasks are in ready state no matter what state
6225:FreeRTOS/Src/tasks.c ****                  * list the task is in. */
6226:FreeRTOS/Src/tasks.c ****                 taskENTER_CRITICAL();
6227:FreeRTOS/Src/tasks.c ****                 {
6228:FreeRTOS/Src/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) !
6229:FreeRTOS/Src/tasks.c ****                     {
6230:FreeRTOS/Src/tasks.c ****                         pxTaskStatus->eCurrentState = eReady;
6231:FreeRTOS/Src/tasks.c ****                     }
6232:FreeRTOS/Src/tasks.c ****                 }
6233:FreeRTOS/Src/tasks.c ****                 taskEXIT_CRITICAL();
6234:FreeRTOS/Src/tasks.c ****             }
6235:FreeRTOS/Src/tasks.c ****         }
6236:FreeRTOS/Src/tasks.c ****         else
6237:FreeRTOS/Src/tasks.c ****         {
6238:FreeRTOS/Src/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
6239:FreeRTOS/Src/tasks.c ****         }
6240:FreeRTOS/Src/tasks.c **** 
6241:FreeRTOS/Src/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
6242:FreeRTOS/Src/tasks.c ****          * parameter is provided to allow it to be skipped. */
6243:FreeRTOS/Src/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
6244:FreeRTOS/Src/tasks.c ****         {
6245:FreeRTOS/Src/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 113


6246:FreeRTOS/Src/tasks.c ****             {
6247:FreeRTOS/Src/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
6248:FreeRTOS/Src/tasks.c ****             }
6249:FreeRTOS/Src/tasks.c ****             #else
6250:FreeRTOS/Src/tasks.c ****             {
6251:FreeRTOS/Src/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
6252:FreeRTOS/Src/tasks.c ****             }
6253:FreeRTOS/Src/tasks.c ****             #endif
6254:FreeRTOS/Src/tasks.c ****         }
6255:FreeRTOS/Src/tasks.c ****         else
6256:FreeRTOS/Src/tasks.c ****         {
6257:FreeRTOS/Src/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
6258:FreeRTOS/Src/tasks.c ****         }
6259:FreeRTOS/Src/tasks.c **** 
6260:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskGetInfo();
6261:FreeRTOS/Src/tasks.c ****     }
6262:FreeRTOS/Src/tasks.c **** 
6263:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
6264:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6265:FreeRTOS/Src/tasks.c **** 
6266:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
6267:FreeRTOS/Src/tasks.c **** 
6268:FreeRTOS/Src/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
6269:FreeRTOS/Src/tasks.c ****                                                      List_t * pxList,
6270:FreeRTOS/Src/tasks.c ****                                                      eTaskState eState )
6271:FreeRTOS/Src/tasks.c ****     {
6272:FreeRTOS/Src/tasks.c ****         UBaseType_t uxTask = 0;
6273:FreeRTOS/Src/tasks.c ****         const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
6274:FreeRTOS/Src/tasks.c ****         ListItem_t * pxIterator;
6275:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB = NULL;
6276:FreeRTOS/Src/tasks.c **** 
6277:FreeRTOS/Src/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
6278:FreeRTOS/Src/tasks.c ****         {
6279:FreeRTOS/Src/tasks.c ****             /* Populate an TaskStatus_t structure within the
6280:FreeRTOS/Src/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
6281:FreeRTOS/Src/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
6282:FreeRTOS/Src/tasks.c ****              * meaning of each TaskStatus_t structure member. */
6283:FreeRTOS/Src/tasks.c ****             for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator =
6284:FreeRTOS/Src/tasks.c ****             {
6285:FreeRTOS/Src/tasks.c ****                 /* MISRA Ref 11.5.3 [Void pointer assignment] */
6286:FreeRTOS/Src/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
6287:FreeRTOS/Src/tasks.c ****                 /* coverity[misra_c_2012_rule_11_5_violation] */
6288:FreeRTOS/Src/tasks.c ****                 pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
6289:FreeRTOS/Src/tasks.c **** 
6290:FreeRTOS/Src/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eSt
6291:FreeRTOS/Src/tasks.c ****                 uxTask++;
6292:FreeRTOS/Src/tasks.c ****             }
6293:FreeRTOS/Src/tasks.c ****         }
6294:FreeRTOS/Src/tasks.c ****         else
6295:FreeRTOS/Src/tasks.c ****         {
6296:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6297:FreeRTOS/Src/tasks.c ****         }
6298:FreeRTOS/Src/tasks.c **** 
6299:FreeRTOS/Src/tasks.c ****         return uxTask;
6300:FreeRTOS/Src/tasks.c ****     }
6301:FreeRTOS/Src/tasks.c **** 
6302:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 114


6303:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6304:FreeRTOS/Src/tasks.c **** 
6305:FreeRTOS/Src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
6306:FreeRTOS/Src/tasks.c **** 
6307:FreeRTOS/Src/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
6308:FreeRTOS/Src/tasks.c ****     {
6309:FreeRTOS/Src/tasks.c ****         configSTACK_DEPTH_TYPE uxCount = 0U;
6310:FreeRTOS/Src/tasks.c **** 
6311:FreeRTOS/Src/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
6312:FreeRTOS/Src/tasks.c ****         {
6313:FreeRTOS/Src/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
6314:FreeRTOS/Src/tasks.c ****             uxCount++;
6315:FreeRTOS/Src/tasks.c ****         }
6316:FreeRTOS/Src/tasks.c **** 
6317:FreeRTOS/Src/tasks.c ****         uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
6318:FreeRTOS/Src/tasks.c **** 
6319:FreeRTOS/Src/tasks.c ****         return uxCount;
6320:FreeRTOS/Src/tasks.c ****     }
6321:FreeRTOS/Src/tasks.c **** 
6322:FreeRTOS/Src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
6323:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6324:FreeRTOS/Src/tasks.c **** 
6325:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
6326:FreeRTOS/Src/tasks.c **** 
6327:FreeRTOS/Src/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
6328:FreeRTOS/Src/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
6329:FreeRTOS/Src/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
6330:FreeRTOS/Src/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
6331:FreeRTOS/Src/tasks.c ****  * applications that expect an 8-bit return type. */
6332:FreeRTOS/Src/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
6333:FreeRTOS/Src/tasks.c ****     {
6334:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
6335:FreeRTOS/Src/tasks.c ****         uint8_t * pucEndOfStack;
6336:FreeRTOS/Src/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
6337:FreeRTOS/Src/tasks.c **** 
6338:FreeRTOS/Src/tasks.c ****         traceENTER_uxTaskGetStackHighWaterMark2( xTask );
6339:FreeRTOS/Src/tasks.c **** 
6340:FreeRTOS/Src/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
6341:FreeRTOS/Src/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
6342:FreeRTOS/Src/tasks.c ****          * allows the user to determine the return type.  It gets around the
6343:FreeRTOS/Src/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
6344:FreeRTOS/Src/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
6345:FreeRTOS/Src/tasks.c ****          * type. */
6346:FreeRTOS/Src/tasks.c **** 
6347:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
6348:FreeRTOS/Src/tasks.c **** 
6349:FreeRTOS/Src/tasks.c ****         #if portSTACK_GROWTH < 0
6350:FreeRTOS/Src/tasks.c ****         {
6351:FreeRTOS/Src/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
6352:FreeRTOS/Src/tasks.c ****         }
6353:FreeRTOS/Src/tasks.c ****         #else
6354:FreeRTOS/Src/tasks.c ****         {
6355:FreeRTOS/Src/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
6356:FreeRTOS/Src/tasks.c ****         }
6357:FreeRTOS/Src/tasks.c ****         #endif
6358:FreeRTOS/Src/tasks.c **** 
6359:FreeRTOS/Src/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 115


6360:FreeRTOS/Src/tasks.c **** 
6361:FreeRTOS/Src/tasks.c ****         traceRETURN_uxTaskGetStackHighWaterMark2( uxReturn );
6362:FreeRTOS/Src/tasks.c **** 
6363:FreeRTOS/Src/tasks.c ****         return uxReturn;
6364:FreeRTOS/Src/tasks.c ****     }
6365:FreeRTOS/Src/tasks.c **** 
6366:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
6367:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6368:FreeRTOS/Src/tasks.c **** 
6369:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
6370:FreeRTOS/Src/tasks.c **** 
6371:FreeRTOS/Src/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
6372:FreeRTOS/Src/tasks.c ****     {
6373:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
6374:FreeRTOS/Src/tasks.c ****         uint8_t * pucEndOfStack;
6375:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
6376:FreeRTOS/Src/tasks.c **** 
6377:FreeRTOS/Src/tasks.c ****         traceENTER_uxTaskGetStackHighWaterMark( xTask );
6378:FreeRTOS/Src/tasks.c **** 
6379:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
6380:FreeRTOS/Src/tasks.c **** 
6381:FreeRTOS/Src/tasks.c ****         #if portSTACK_GROWTH < 0
6382:FreeRTOS/Src/tasks.c ****         {
6383:FreeRTOS/Src/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
6384:FreeRTOS/Src/tasks.c ****         }
6385:FreeRTOS/Src/tasks.c ****         #else
6386:FreeRTOS/Src/tasks.c ****         {
6387:FreeRTOS/Src/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
6388:FreeRTOS/Src/tasks.c ****         }
6389:FreeRTOS/Src/tasks.c ****         #endif
6390:FreeRTOS/Src/tasks.c **** 
6391:FreeRTOS/Src/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
6392:FreeRTOS/Src/tasks.c **** 
6393:FreeRTOS/Src/tasks.c ****         traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );
6394:FreeRTOS/Src/tasks.c **** 
6395:FreeRTOS/Src/tasks.c ****         return uxReturn;
6396:FreeRTOS/Src/tasks.c ****     }
6397:FreeRTOS/Src/tasks.c **** 
6398:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
6399:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6400:FreeRTOS/Src/tasks.c **** 
6401:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
6402:FreeRTOS/Src/tasks.c **** 
6403:FreeRTOS/Src/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
6404:FreeRTOS/Src/tasks.c ****     {
6405:FreeRTOS/Src/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
6406:FreeRTOS/Src/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
6407:FreeRTOS/Src/tasks.c ****          * want to allocate and clean RAM statically. */
6408:FreeRTOS/Src/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
6409:FreeRTOS/Src/tasks.c **** 
6410:FreeRTOS/Src/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
6411:FreeRTOS/Src/tasks.c ****         {
6412:FreeRTOS/Src/tasks.c ****             /* Free up the memory allocated for the task's TLS Block. */
6413:FreeRTOS/Src/tasks.c ****             configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
6414:FreeRTOS/Src/tasks.c ****         }
6415:FreeRTOS/Src/tasks.c ****         #endif
6416:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 116


6417:FreeRTOS/Src/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
6418:FreeRTOS/Src/tasks.c ****         {
6419:FreeRTOS/Src/tasks.c ****             /* The task can only have been allocated dynamically - free both
6420:FreeRTOS/Src/tasks.c ****              * the stack and TCB. */
6421:FreeRTOS/Src/tasks.c ****             vPortFreeStack( pxTCB->pxStack );
6422:FreeRTOS/Src/tasks.c ****             vPortFree( pxTCB );
6423:FreeRTOS/Src/tasks.c ****         }
6424:FreeRTOS/Src/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
6425:FreeRTOS/Src/tasks.c ****         {
6426:FreeRTOS/Src/tasks.c ****             /* The task could have been allocated statically or dynamically, so
6427:FreeRTOS/Src/tasks.c ****              * check what was statically allocated before trying to free the
6428:FreeRTOS/Src/tasks.c ****              * memory. */
6429:FreeRTOS/Src/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
6430:FreeRTOS/Src/tasks.c ****             {
6431:FreeRTOS/Src/tasks.c ****                 /* Both the stack and TCB were allocated dynamically, so both
6432:FreeRTOS/Src/tasks.c ****                  * must be freed. */
6433:FreeRTOS/Src/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
6434:FreeRTOS/Src/tasks.c ****                 vPortFree( pxTCB );
6435:FreeRTOS/Src/tasks.c ****             }
6436:FreeRTOS/Src/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
6437:FreeRTOS/Src/tasks.c ****             {
6438:FreeRTOS/Src/tasks.c ****                 /* Only the stack was statically allocated, so the TCB is the
6439:FreeRTOS/Src/tasks.c ****                  * only memory that must be freed. */
6440:FreeRTOS/Src/tasks.c ****                 vPortFree( pxTCB );
6441:FreeRTOS/Src/tasks.c ****             }
6442:FreeRTOS/Src/tasks.c ****             else
6443:FreeRTOS/Src/tasks.c ****             {
6444:FreeRTOS/Src/tasks.c ****                 /* Neither the stack nor the TCB were allocated dynamically, so
6445:FreeRTOS/Src/tasks.c ****                  * nothing needs to be freed. */
6446:FreeRTOS/Src/tasks.c ****                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB
6447:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
6448:FreeRTOS/Src/tasks.c ****             }
6449:FreeRTOS/Src/tasks.c ****         }
6450:FreeRTOS/Src/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
6451:FreeRTOS/Src/tasks.c ****     }
6452:FreeRTOS/Src/tasks.c **** 
6453:FreeRTOS/Src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
6454:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6455:FreeRTOS/Src/tasks.c **** 
6456:FreeRTOS/Src/tasks.c **** static void prvResetNextTaskUnblockTime( void )
6457:FreeRTOS/Src/tasks.c **** {
 130              		.loc 1 6457 1 is_stmt 1 view -0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
6458:FreeRTOS/Src/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 135              		.loc 1 6458 5 view .LVU34
 136              		.loc 1 6458 9 is_stmt 0 view .LVU35
 137 0000 074B     		ldr	r3, .L15
 138 0002 1B68     		ldr	r3, [r3]
 139 0004 1B68     		ldr	r3, [r3]
 140              		.loc 1 6458 7 view .LVU36
 141 0006 23B9     		cbnz	r3, .L13
6459:FreeRTOS/Src/tasks.c ****     {
6460:FreeRTOS/Src/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
6461:FreeRTOS/Src/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 117


6462:FreeRTOS/Src/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
6463:FreeRTOS/Src/tasks.c ****          * there is an item in the delayed list. */
6464:FreeRTOS/Src/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 142              		.loc 1 6464 9 is_stmt 1 view .LVU37
 143              		.loc 1 6464 30 is_stmt 0 view .LVU38
 144 0008 064B     		ldr	r3, .L15+4
 145 000a 4FF0FF32 		mov	r2, #-1
 146 000e 1A60     		str	r2, [r3]
 147 0010 7047     		bx	lr
 148              	.L13:
6465:FreeRTOS/Src/tasks.c ****     }
6466:FreeRTOS/Src/tasks.c ****     else
6467:FreeRTOS/Src/tasks.c ****     {
6468:FreeRTOS/Src/tasks.c ****         /* The new current delayed list is not empty, get the value of
6469:FreeRTOS/Src/tasks.c ****          * the item at the head of the delayed list.  This is the time at
6470:FreeRTOS/Src/tasks.c ****          * which the task at the head of the delayed list should be removed
6471:FreeRTOS/Src/tasks.c ****          * from the Blocked state. */
6472:FreeRTOS/Src/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 149              		.loc 1 6472 9 is_stmt 1 view .LVU39
 150              		.loc 1 6472 32 is_stmt 0 view .LVU40
 151 0012 034B     		ldr	r3, .L15
 152 0014 1B68     		ldr	r3, [r3]
 153 0016 DB68     		ldr	r3, [r3, #12]
 154 0018 1A68     		ldr	r2, [r3]
 155              		.loc 1 6472 30 view .LVU41
 156 001a 024B     		ldr	r3, .L15+4
 157 001c 1A60     		str	r2, [r3]
6473:FreeRTOS/Src/tasks.c ****     }
6474:FreeRTOS/Src/tasks.c **** }
 158              		.loc 1 6474 1 view .LVU42
 159 001e 7047     		bx	lr
 160              	.L16:
 161              		.align	2
 162              	.L15:
 163 0020 00000000 		.word	pxDelayedTaskList
 164 0024 00000000 		.word	xNextTaskUnblockTime
 165              		.cfi_endproc
 166              	.LFE169:
 168              		.section	.text.prvDeleteTCB,"ax",%progbits
 169              		.align	1
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 174              	prvDeleteTCB:
 175              	.LVL13:
 176              	.LFB168:
6404:FreeRTOS/Src/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 177              		.loc 1 6404 5 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
6404:FreeRTOS/Src/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 181              		.loc 1 6404 5 is_stmt 0 view .LVU44
 182 0000 10B5     		push	{r4, lr}
 183              	.LCFI0:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 118


 186              		.cfi_offset 14, -4
 187 0002 0446     		mov	r4, r0
6408:FreeRTOS/Src/tasks.c **** 
 188              		.loc 1 6408 9 is_stmt 1 view .LVU45
6421:FreeRTOS/Src/tasks.c ****             vPortFree( pxTCB );
 189              		.loc 1 6421 13 view .LVU46
 190 0004 006B     		ldr	r0, [r0, #48]
 191              	.LVL14:
6421:FreeRTOS/Src/tasks.c ****             vPortFree( pxTCB );
 192              		.loc 1 6421 13 is_stmt 0 view .LVU47
 193 0006 FFF7FEFF 		bl	vPortFree
 194              	.LVL15:
6422:FreeRTOS/Src/tasks.c ****         }
 195              		.loc 1 6422 13 is_stmt 1 view .LVU48
 196 000a 2046     		mov	r0, r4
 197 000c FFF7FEFF 		bl	vPortFree
 198              	.LVL16:
6451:FreeRTOS/Src/tasks.c **** 
 199              		.loc 1 6451 5 is_stmt 0 view .LVU49
 200 0010 10BD     		pop	{r4, pc}
6451:FreeRTOS/Src/tasks.c **** 
 201              		.loc 1 6451 5 view .LVU50
 202              		.cfi_endproc
 203              	.LFE168:
 205              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 206              		.align	1
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 211              	prvInitialiseNewTask:
 212              	.LVL17:
 213              	.LFB130:
1801:FreeRTOS/Src/tasks.c ****     StackType_t * pxTopOfStack;
 214              		.loc 1 1801 1 is_stmt 1 view -0
 215              		.cfi_startproc
 216              		@ args = 16, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
1801:FreeRTOS/Src/tasks.c ****     StackType_t * pxTopOfStack;
 218              		.loc 1 1801 1 is_stmt 0 view .LVU52
 219 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 220              	.LCFI1:
 221              		.cfi_def_cfa_offset 32
 222              		.cfi_offset 4, -32
 223              		.cfi_offset 5, -28
 224              		.cfi_offset 6, -24
 225              		.cfi_offset 7, -20
 226              		.cfi_offset 8, -16
 227              		.cfi_offset 9, -12
 228              		.cfi_offset 10, -8
 229              		.cfi_offset 14, -4
 230 0004 8046     		mov	r8, r0
 231 0006 0D46     		mov	r5, r1
 232 0008 1746     		mov	r7, r2
 233 000a 9946     		mov	r9, r3
 234 000c 089E     		ldr	r6, [sp, #32]
 235 000e DDF824A0 		ldr	r10, [sp, #36]
 236 0012 0A9C     		ldr	r4, [sp, #40]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 119


1802:FreeRTOS/Src/tasks.c ****     UBaseType_t x;
 237              		.loc 1 1802 5 is_stmt 1 view .LVU53
1803:FreeRTOS/Src/tasks.c **** 
 238              		.loc 1 1803 5 view .LVU54
1824:FreeRTOS/Src/tasks.c ****     }
 239              		.loc 1 1824 9 view .LVU55
1824:FreeRTOS/Src/tasks.c ****     }
 240              		.loc 1 1824 18 is_stmt 0 view .LVU56
 241 0014 9200     		lsls	r2, r2, #2
 242              	.LVL18:
1824:FreeRTOS/Src/tasks.c ****     }
 243              		.loc 1 1824 18 view .LVU57
 244 0016 A521     		movs	r1, #165
 245              	.LVL19:
1824:FreeRTOS/Src/tasks.c ****     }
 246              		.loc 1 1824 18 view .LVU58
 247 0018 206B     		ldr	r0, [r4, #48]
 248              	.LVL20:
1824:FreeRTOS/Src/tasks.c ****     }
 249              		.loc 1 1824 18 view .LVU59
 250 001a FFF7FEFF 		bl	memset
 251              	.LVL21:
1834:FreeRTOS/Src/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 252              		.loc 1 1834 9 is_stmt 1 view .LVU60
1834:FreeRTOS/Src/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 253              		.loc 1 1834 35 is_stmt 0 view .LVU61
 254 001e 236B     		ldr	r3, [r4, #48]
1834:FreeRTOS/Src/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 255              		.loc 1 1834 44 view .LVU62
 256 0020 07F18042 		add	r2, r7, #1073741824
 257 0024 013A     		subs	r2, r2, #1
1834:FreeRTOS/Src/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 258              		.loc 1 1834 22 view .LVU63
 259 0026 03EB8207 		add	r7, r3, r2, lsl #2
 260              	.LVL22:
1835:FreeRTOS/Src/tasks.c **** 
 261              		.loc 1 1835 9 is_stmt 1 view .LVU64
1835:FreeRTOS/Src/tasks.c **** 
 262              		.loc 1 1835 87 is_stmt 0 view .LVU65
 263 002a 27F00707 		bic	r7, r7, #7
 264              	.LVL23:
1838:FreeRTOS/Src/tasks.c **** 
 265              		.loc 1 1838 129 is_stmt 1 view .LVU66
1863:FreeRTOS/Src/tasks.c ****     {
 266              		.loc 1 1863 5 view .LVU67
1863:FreeRTOS/Src/tasks.c ****     {
 267              		.loc 1 1863 7 is_stmt 0 view .LVU68
 268 002e 8DB1     		cbz	r5, .L21
1865:FreeRTOS/Src/tasks.c ****         {
 269              		.loc 1 1865 16 view .LVU69
 270 0030 4FF0000C 		mov	ip, #0
 271              	.LVL24:
 272              	.L20:
1865:FreeRTOS/Src/tasks.c ****         {
 273              		.loc 1 1865 39 is_stmt 1 discriminator 1 view .LVU70
 274 0034 BCF1070F 		cmp	ip, #7
 275 0038 09D8     		bhi	.L22
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 120


1867:FreeRTOS/Src/tasks.c **** 
 276              		.loc 1 1867 13 view .LVU71
1867:FreeRTOS/Src/tasks.c **** 
 277              		.loc 1 1867 47 is_stmt 0 view .LVU72
 278 003a 15F80C30 		ldrb	r3, [r5, ip]	@ zero_extendqisi2
1867:FreeRTOS/Src/tasks.c **** 
 279              		.loc 1 1867 39 view .LVU73
 280 003e 04EB0C02 		add	r2, r4, ip
 281 0042 82F83430 		strb	r3, [r2, #52]
1872:FreeRTOS/Src/tasks.c ****             {
 282              		.loc 1 1872 13 is_stmt 1 view .LVU74
1872:FreeRTOS/Src/tasks.c ****             {
 283              		.loc 1 1872 15 is_stmt 0 view .LVU75
 284 0046 13B1     		cbz	r3, .L22
1878:FreeRTOS/Src/tasks.c ****             }
 285              		.loc 1 1878 41 is_stmt 1 view .LVU76
1865:FreeRTOS/Src/tasks.c ****         {
 286              		.loc 1 1865 83 discriminator 2 view .LVU77
 287 0048 0CF1010C 		add	ip, ip, #1
 288              	.LVL25:
1865:FreeRTOS/Src/tasks.c ****         {
 289              		.loc 1 1865 83 is_stmt 0 discriminator 2 view .LVU78
 290 004c F2E7     		b	.L20
 291              	.L22:
1884:FreeRTOS/Src/tasks.c ****     }
 292              		.loc 1 1884 9 is_stmt 1 view .LVU79
1884:FreeRTOS/Src/tasks.c ****     }
 293              		.loc 1 1884 62 is_stmt 0 view .LVU80
 294 004e 0023     		movs	r3, #0
 295 0050 84F83B30 		strb	r3, [r4, #59]
 296              	.LVL26:
 297              	.L21:
1888:FreeRTOS/Src/tasks.c ****     }
 298              		.loc 1 1888 33 is_stmt 1 view .LVU81
1892:FreeRTOS/Src/tasks.c **** 
 299              		.loc 1 1892 54 view .LVU82
1894:FreeRTOS/Src/tasks.c ****     {
 300              		.loc 1 1894 5 view .LVU83
1894:FreeRTOS/Src/tasks.c ****     {
 301              		.loc 1 1894 7 is_stmt 0 view .LVU84
 302 0054 042E     		cmp	r6, #4
 303 0056 00D9     		bls	.L24
1896:FreeRTOS/Src/tasks.c ****     }
 304              		.loc 1 1896 20 view .LVU85
 305 0058 0426     		movs	r6, #4
 306              	.L24:
 307              	.LVL27:
1900:FreeRTOS/Src/tasks.c ****     }
 308              		.loc 1 1900 33 is_stmt 1 view .LVU86
1903:FreeRTOS/Src/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 309              		.loc 1 1903 5 view .LVU87
1903:FreeRTOS/Src/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 310              		.loc 1 1903 26 is_stmt 0 view .LVU88
 311 005a E662     		str	r6, [r4, #44]
1906:FreeRTOS/Src/tasks.c ****     }
 312              		.loc 1 1906 9 is_stmt 1 view .LVU89
1906:FreeRTOS/Src/tasks.c ****     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 121


 313              		.loc 1 1906 34 is_stmt 0 view .LVU90
 314 005c E663     		str	r6, [r4, #60]
1910:FreeRTOS/Src/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 315              		.loc 1 1910 5 is_stmt 1 view .LVU91
 316 005e 201D     		adds	r0, r4, #4
 317 0060 FFF7FEFF 		bl	vListInitialiseItem
 318              	.LVL28:
1911:FreeRTOS/Src/tasks.c **** 
 319              		.loc 1 1911 5 view .LVU92
 320 0064 04F11800 		add	r0, r4, #24
 321 0068 FFF7FEFF 		bl	vListInitialiseItem
 322              	.LVL29:
1915:FreeRTOS/Src/tasks.c **** 
 323              		.loc 1 1915 5 view .LVU93
 324 006c 2461     		str	r4, [r4, #16]
1918:FreeRTOS/Src/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 325              		.loc 1 1918 5 view .LVU94
 326 006e C6F10506 		rsb	r6, r6, #5
 327              	.LVL30:
1918:FreeRTOS/Src/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 328              		.loc 1 1918 5 is_stmt 0 view .LVU95
 329 0072 A661     		str	r6, [r4, #24]
1919:FreeRTOS/Src/tasks.c **** 
 330              		.loc 1 1919 5 is_stmt 1 view .LVU96
 331 0074 6462     		str	r4, [r4, #36]
1928:FreeRTOS/Src/tasks.c ****     }
 332              		.loc 1 1928 9 view .LVU97
1985:FreeRTOS/Src/tasks.c ****         }
 333              		.loc 1 1985 13 view .LVU98
1985:FreeRTOS/Src/tasks.c ****         }
 334              		.loc 1 1985 38 is_stmt 0 view .LVU99
 335 0076 4A46     		mov	r2, r9
 336 0078 4146     		mov	r1, r8
 337 007a 3846     		mov	r0, r7
 338 007c FFF7FEFF 		bl	pxPortInitialiseStack
 339              	.LVL31:
1985:FreeRTOS/Src/tasks.c ****         }
 340              		.loc 1 1985 36 discriminator 1 view .LVU100
 341 0080 2060     		str	r0, [r4]
2004:FreeRTOS/Src/tasks.c ****     {
 342              		.loc 1 2004 5 is_stmt 1 view .LVU101
2004:FreeRTOS/Src/tasks.c ****     {
 343              		.loc 1 2004 7 is_stmt 0 view .LVU102
 344 0082 BAF1000F 		cmp	r10, #0
 345 0086 01D0     		beq	.L19
2008:FreeRTOS/Src/tasks.c ****     }
 346              		.loc 1 2008 9 is_stmt 1 view .LVU103
2008:FreeRTOS/Src/tasks.c ****     }
 347              		.loc 1 2008 24 is_stmt 0 view .LVU104
 348 0088 CAF80040 		str	r4, [r10]
2012:FreeRTOS/Src/tasks.c ****     }
 349              		.loc 1 2012 33 is_stmt 1 view .LVU105
 350              	.L19:
2014:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 351              		.loc 1 2014 1 is_stmt 0 view .LVU106
 352 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
2014:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 122


 353              		.loc 1 2014 1 view .LVU107
 354              		.cfi_endproc
 355              	.LFE130:
 357              		.section	.text.prvCreateTask,"ax",%progbits
 358              		.align	1
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 363              	prvCreateTask:
 364              	.LVL32:
 365              	.LFB128:
1626:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
 366              		.loc 1 1626 5 is_stmt 1 view -0
 367              		.cfi_startproc
 368              		@ args = 8, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
1626:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
 370              		.loc 1 1626 5 is_stmt 0 view .LVU109
 371 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 372              	.LCFI2:
 373              		.cfi_def_cfa_offset 28
 374              		.cfi_offset 4, -28
 375              		.cfi_offset 5, -24
 376              		.cfi_offset 6, -20
 377              		.cfi_offset 7, -16
 378              		.cfi_offset 8, -12
 379              		.cfi_offset 9, -8
 380              		.cfi_offset 14, -4
 381 0004 85B0     		sub	sp, sp, #20
 382              	.LCFI3:
 383              		.cfi_def_cfa_offset 48
 384 0006 0646     		mov	r6, r0
 385 0008 0F46     		mov	r7, r1
 386 000a 1446     		mov	r4, r2
 387 000c 9846     		mov	r8, r3
1627:FreeRTOS/Src/tasks.c **** 
 388              		.loc 1 1627 9 is_stmt 1 view .LVU110
 389              	.LBB42:
1664:FreeRTOS/Src/tasks.c **** 
 390              		.loc 1 1664 13 view .LVU111
1670:FreeRTOS/Src/tasks.c **** 
 391              		.loc 1 1670 13 view .LVU112
1670:FreeRTOS/Src/tasks.c **** 
 392              		.loc 1 1670 23 is_stmt 0 view .LVU113
 393 000e 9000     		lsls	r0, r2, #2
 394              	.LVL33:
1670:FreeRTOS/Src/tasks.c **** 
 395              		.loc 1 1670 23 view .LVU114
 396 0010 FFF7FEFF 		bl	pvPortMalloc
 397              	.LVL34:
1672:FreeRTOS/Src/tasks.c ****             {
 398              		.loc 1 1672 13 is_stmt 1 view .LVU115
1672:FreeRTOS/Src/tasks.c ****             {
 399              		.loc 1 1672 15 is_stmt 0 view .LVU116
 400 0014 8146     		mov	r9, r0
 401 0016 F8B1     		cbz	r0, .L32
1678:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 123


 402              		.loc 1 1678 17 is_stmt 1 view .LVU117
1678:FreeRTOS/Src/tasks.c **** 
 403              		.loc 1 1678 40 is_stmt 0 view .LVU118
 404 0018 4C20     		movs	r0, #76
 405              	.LVL35:
1678:FreeRTOS/Src/tasks.c **** 
 406              		.loc 1 1678 40 view .LVU119
 407 001a FFF7FEFF 		bl	pvPortMalloc
 408              	.LVL36:
1680:FreeRTOS/Src/tasks.c ****                 {
 409              		.loc 1 1680 17 is_stmt 1 view .LVU120
1680:FreeRTOS/Src/tasks.c ****                 {
 410              		.loc 1 1680 19 is_stmt 0 view .LVU121
 411 001e 0546     		mov	r5, r0
 412 0020 B0B1     		cbz	r0, .L31
1682:FreeRTOS/Src/tasks.c **** 
 413              		.loc 1 1682 21 is_stmt 1 view .LVU122
1682:FreeRTOS/Src/tasks.c **** 
 414              		.loc 1 1682 30 is_stmt 0 view .LVU123
 415 0022 4C22     		movs	r2, #76
 416 0024 0021     		movs	r1, #0
 417 0026 FFF7FEFF 		bl	memset
 418              	.LVL37:
1685:FreeRTOS/Src/tasks.c ****                 }
 419              		.loc 1 1685 21 is_stmt 1 view .LVU124
1685:FreeRTOS/Src/tasks.c ****                 }
 420              		.loc 1 1685 39 is_stmt 0 view .LVU125
 421 002a C5F83090 		str	r9, [r5, #48]
1685:FreeRTOS/Src/tasks.c ****                 }
 422              		.loc 1 1685 39 view .LVU126
 423              	.LBE42:
1701:FreeRTOS/Src/tasks.c ****         {
 424              		.loc 1 1701 9 is_stmt 1 view .LVU127
1711:FreeRTOS/Src/tasks.c ****         }
 425              		.loc 1 1711 13 view .LVU128
 426 002e 0023     		movs	r3, #0
 427 0030 0393     		str	r3, [sp, #12]
 428 0032 0295     		str	r5, [sp, #8]
 429 0034 0D9B     		ldr	r3, [sp, #52]
 430 0036 0193     		str	r3, [sp, #4]
 431 0038 0C9B     		ldr	r3, [sp, #48]
 432 003a 0093     		str	r3, [sp]
 433 003c 4346     		mov	r3, r8
 434 003e 2246     		mov	r2, r4
 435 0040 3946     		mov	r1, r7
 436 0042 3046     		mov	r0, r6
 437 0044 FFF7FEFF 		bl	prvInitialiseNewTask
 438              	.LVL38:
 439              	.L29:
1715:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 440              		.loc 1 1715 5 is_stmt 0 view .LVU129
 441 0048 2846     		mov	r0, r5
 442 004a 05B0     		add	sp, sp, #20
 443              	.LCFI4:
 444              		.cfi_remember_state
 445              		.cfi_def_cfa_offset 28
 446              		@ sp needed
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 124


 447 004c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 448              	.LVL39:
 449              	.L31:
 450              	.LCFI5:
 451              		.cfi_restore_state
 452              	.LBB43:
1691:FreeRTOS/Src/tasks.c ****                 }
 453              		.loc 1 1691 21 is_stmt 1 view .LVU130
 454 0050 4846     		mov	r0, r9
 455              	.LVL40:
1691:FreeRTOS/Src/tasks.c ****                 }
 456              		.loc 1 1691 21 is_stmt 0 view .LVU131
 457 0052 FFF7FEFF 		bl	vPortFree
 458              	.LVL41:
1691:FreeRTOS/Src/tasks.c ****                 }
 459              		.loc 1 1691 21 view .LVU132
 460              	.LBE43:
1701:FreeRTOS/Src/tasks.c ****         {
 461              		.loc 1 1701 9 is_stmt 1 view .LVU133
 462 0056 F7E7     		b	.L29
 463              	.LVL42:
 464              	.L32:
 465              	.LBB44:
1696:FreeRTOS/Src/tasks.c ****             }
 466              		.loc 1 1696 26 is_stmt 0 view .LVU134
 467 0058 0546     		mov	r5, r0
 468              	.LBE44:
1714:FreeRTOS/Src/tasks.c ****     }
 469              		.loc 1 1714 9 is_stmt 1 view .LVU135
1714:FreeRTOS/Src/tasks.c ****     }
 470              		.loc 1 1714 16 is_stmt 0 view .LVU136
 471 005a F5E7     		b	.L29
 472              		.cfi_endproc
 473              	.LFE128:
 475              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 476              		.align	1
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 481              	prvInitialiseTaskLists:
 482              	.LFB166:
6012:FreeRTOS/Src/tasks.c ****     UBaseType_t uxPriority;
 483              		.loc 1 6012 1 is_stmt 1 view -0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487 0000 38B5     		push	{r3, r4, r5, lr}
 488              	.LCFI6:
 489              		.cfi_def_cfa_offset 16
 490              		.cfi_offset 3, -16
 491              		.cfi_offset 4, -12
 492              		.cfi_offset 5, -8
 493              		.cfi_offset 14, -4
6013:FreeRTOS/Src/tasks.c **** 
 494              		.loc 1 6013 5 view .LVU138
6015:FreeRTOS/Src/tasks.c ****     {
 495              		.loc 1 6015 5 view .LVU139
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 125


 496              	.LVL43:
6015:FreeRTOS/Src/tasks.c ****     {
 497              		.loc 1 6015 21 is_stmt 0 view .LVU140
 498 0002 0024     		movs	r4, #0
6015:FreeRTOS/Src/tasks.c ****     {
 499              		.loc 1 6015 5 view .LVU141
 500 0004 07E0     		b	.L35
 501              	.LVL44:
 502              	.L36:
6017:FreeRTOS/Src/tasks.c ****     }
 503              		.loc 1 6017 9 is_stmt 1 view .LVU142
 504 0006 04EB8402 		add	r2, r4, r4, lsl #2
 505 000a 9300     		lsls	r3, r2, #2
 506 000c 0E48     		ldr	r0, .L38
 507 000e 1844     		add	r0, r0, r3
 508 0010 FFF7FEFF 		bl	vListInitialise
 509              	.LVL45:
6015:FreeRTOS/Src/tasks.c ****     {
 510              		.loc 1 6015 104 discriminator 3 view .LVU143
 511 0014 0134     		adds	r4, r4, #1
 512              	.LVL46:
 513              	.L35:
6015:FreeRTOS/Src/tasks.c ****     {
 514              		.loc 1 6015 54 discriminator 1 view .LVU144
 515 0016 042C     		cmp	r4, #4
 516 0018 F5D9     		bls	.L36
6020:FreeRTOS/Src/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 517              		.loc 1 6020 5 view .LVU145
 518 001a 0C4D     		ldr	r5, .L38+4
 519 001c 2846     		mov	r0, r5
 520 001e FFF7FEFF 		bl	vListInitialise
 521              	.LVL47:
6021:FreeRTOS/Src/tasks.c ****     vListInitialise( &xPendingReadyList );
 522              		.loc 1 6021 5 view .LVU146
 523 0022 0B4C     		ldr	r4, .L38+8
 524              	.LVL48:
6021:FreeRTOS/Src/tasks.c ****     vListInitialise( &xPendingReadyList );
 525              		.loc 1 6021 5 is_stmt 0 view .LVU147
 526 0024 2046     		mov	r0, r4
 527 0026 FFF7FEFF 		bl	vListInitialise
 528              	.LVL49:
6022:FreeRTOS/Src/tasks.c **** 
 529              		.loc 1 6022 5 is_stmt 1 view .LVU148
 530 002a 0A48     		ldr	r0, .L38+12
 531 002c FFF7FEFF 		bl	vListInitialise
 532              	.LVL50:
6026:FreeRTOS/Src/tasks.c ****     }
 533              		.loc 1 6026 9 view .LVU149
 534 0030 0948     		ldr	r0, .L38+16
 535 0032 FFF7FEFF 		bl	vListInitialise
 536              	.LVL51:
6032:FreeRTOS/Src/tasks.c ****     }
 537              		.loc 1 6032 9 view .LVU150
 538 0036 0948     		ldr	r0, .L38+20
 539 0038 FFF7FEFF 		bl	vListInitialise
 540              	.LVL52:
6038:FreeRTOS/Src/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 126


 541              		.loc 1 6038 5 view .LVU151
6038:FreeRTOS/Src/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 542              		.loc 1 6038 23 is_stmt 0 view .LVU152
 543 003c 084B     		ldr	r3, .L38+24
 544 003e 1D60     		str	r5, [r3]
6039:FreeRTOS/Src/tasks.c **** }
 545              		.loc 1 6039 5 is_stmt 1 view .LVU153
6039:FreeRTOS/Src/tasks.c **** }
 546              		.loc 1 6039 31 is_stmt 0 view .LVU154
 547 0040 084B     		ldr	r3, .L38+28
 548 0042 1C60     		str	r4, [r3]
6040:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 549              		.loc 1 6040 1 view .LVU155
 550 0044 38BD     		pop	{r3, r4, r5, pc}
 551              	.L39:
 552 0046 00BF     		.align	2
 553              	.L38:
 554 0048 00000000 		.word	pxReadyTasksLists
 555 004c 00000000 		.word	xDelayedTaskList1
 556 0050 00000000 		.word	xDelayedTaskList2
 557 0054 00000000 		.word	xPendingReadyList
 558 0058 00000000 		.word	xTasksWaitingTermination
 559 005c 00000000 		.word	xSuspendedTaskList
 560 0060 00000000 		.word	pxDelayedTaskList
 561 0064 00000000 		.word	pxOverflowDelayedTaskList
 562              		.cfi_endproc
 563              	.LFE166:
 565              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 566              		.align	1
 567              		.syntax unified
 568              		.thumb
 569              		.thumb_func
 571              	prvAddNewTaskToReadyList:
 572              	.LVL53:
 573              	.LFB131:
2020:FreeRTOS/Src/tasks.c ****         /* Ensure interrupts don't access the task lists while the lists are being
 574              		.loc 1 2020 5 is_stmt 1 view -0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
2020:FreeRTOS/Src/tasks.c ****         /* Ensure interrupts don't access the task lists while the lists are being
 578              		.loc 1 2020 5 is_stmt 0 view .LVU157
 579 0000 10B5     		push	{r4, lr}
 580              	.LCFI7:
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 4, -8
 583              		.cfi_offset 14, -4
 584 0002 0446     		mov	r4, r0
2023:FreeRTOS/Src/tasks.c ****         {
 585              		.loc 1 2023 9 is_stmt 1 view .LVU158
 586 0004 FFF7FEFF 		bl	vPortEnterCritical
 587              	.LVL54:
2025:FreeRTOS/Src/tasks.c **** 
 588              		.loc 1 2025 13 view .LVU159
2025:FreeRTOS/Src/tasks.c **** 
 589              		.loc 1 2025 38 is_stmt 0 view .LVU160
 590 0008 2A4A     		ldr	r2, .L47
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 127


 591 000a 1368     		ldr	r3, [r2]
 592 000c 0133     		adds	r3, r3, #1
2025:FreeRTOS/Src/tasks.c **** 
 593              		.loc 1 2025 36 view .LVU161
 594 000e 1360     		str	r3, [r2]
2027:FreeRTOS/Src/tasks.c ****             {
 595              		.loc 1 2027 13 is_stmt 1 view .LVU162
2027:FreeRTOS/Src/tasks.c ****             {
 596              		.loc 1 2027 30 is_stmt 0 view .LVU163
 597 0010 294B     		ldr	r3, .L47+4
 598 0012 1B68     		ldr	r3, [r3]
2027:FreeRTOS/Src/tasks.c ****             {
 599              		.loc 1 2027 15 view .LVU164
 600 0014 5BB1     		cbz	r3, .L45
2050:FreeRTOS/Src/tasks.c ****                 {
 601              		.loc 1 2050 17 is_stmt 1 view .LVU165
2050:FreeRTOS/Src/tasks.c ****                 {
 602              		.loc 1 2050 39 is_stmt 0 view .LVU166
 603 0016 294B     		ldr	r3, .L47+8
 604 0018 1B68     		ldr	r3, [r3]
2050:FreeRTOS/Src/tasks.c ****                 {
 605              		.loc 1 2050 19 view .LVU167
 606 001a 6BB9     		cbnz	r3, .L42
2052:FreeRTOS/Src/tasks.c ****                     {
 607              		.loc 1 2052 21 is_stmt 1 view .LVU168
2052:FreeRTOS/Src/tasks.c ****                     {
 608              		.loc 1 2052 37 is_stmt 0 view .LVU169
 609 001c 264B     		ldr	r3, .L47+4
 610 001e 1B68     		ldr	r3, [r3]
 611 0020 DA6A     		ldr	r2, [r3, #44]
2052:FreeRTOS/Src/tasks.c ****                     {
 612              		.loc 1 2052 61 view .LVU170
 613 0022 E36A     		ldr	r3, [r4, #44]
2052:FreeRTOS/Src/tasks.c ****                     {
 614              		.loc 1 2052 23 view .LVU171
 615 0024 9A42     		cmp	r2, r3
 616 0026 07D8     		bhi	.L42
2054:FreeRTOS/Src/tasks.c ****                     }
 617              		.loc 1 2054 25 is_stmt 1 view .LVU172
2054:FreeRTOS/Src/tasks.c ****                     }
 618              		.loc 1 2054 38 is_stmt 0 view .LVU173
 619 0028 234B     		ldr	r3, .L47+4
 620 002a 1C60     		str	r4, [r3]
 621 002c 04E0     		b	.L42
 622              	.L45:
2031:FreeRTOS/Src/tasks.c **** 
 623              		.loc 1 2031 17 is_stmt 1 view .LVU174
2031:FreeRTOS/Src/tasks.c **** 
 624              		.loc 1 2031 30 is_stmt 0 view .LVU175
 625 002e 224B     		ldr	r3, .L47+4
 626 0030 1C60     		str	r4, [r3]
2033:FreeRTOS/Src/tasks.c ****                 {
 627              		.loc 1 2033 17 is_stmt 1 view .LVU176
2033:FreeRTOS/Src/tasks.c ****                 {
 628              		.loc 1 2033 44 is_stmt 0 view .LVU177
 629 0032 1368     		ldr	r3, [r2]
2033:FreeRTOS/Src/tasks.c ****                 {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 128


 630              		.loc 1 2033 19 view .LVU178
 631 0034 012B     		cmp	r3, #1
 632 0036 39D0     		beq	.L46
 633              	.L42:
2063:FreeRTOS/Src/tasks.c ****                 }
 634              		.loc 1 2063 45 is_stmt 1 view .LVU179
2067:FreeRTOS/Src/tasks.c **** 
 635              		.loc 1 2067 13 view .LVU180
2067:FreeRTOS/Src/tasks.c **** 
 636              		.loc 1 2067 25 is_stmt 0 view .LVU181
 637 0038 214A     		ldr	r2, .L47+12
 638 003a 1368     		ldr	r3, [r2]
 639 003c 0133     		adds	r3, r3, #1
 640 003e 1360     		str	r3, [r2]
2075:FreeRTOS/Src/tasks.c **** 
 641              		.loc 1 2075 41 is_stmt 1 view .LVU182
2077:FreeRTOS/Src/tasks.c **** 
 642              		.loc 1 2077 13 view .LVU183
2077:FreeRTOS/Src/tasks.c **** 
 643              		.loc 1 2077 13 view .LVU184
2077:FreeRTOS/Src/tasks.c **** 
 644              		.loc 1 2077 13 view .LVU185
 645 0040 E36A     		ldr	r3, [r4, #44]
 646 0042 0122     		movs	r2, #1
 647 0044 9A40     		lsls	r2, r2, r3
 648 0046 1F49     		ldr	r1, .L47+16
 649 0048 0868     		ldr	r0, [r1]
 650 004a 0243     		orrs	r2, r2, r0
 651 004c 0A60     		str	r2, [r1]
2077:FreeRTOS/Src/tasks.c **** 
 652              		.loc 1 2077 13 view .LVU186
 653              	.LBB45:
2077:FreeRTOS/Src/tasks.c **** 
 654              		.loc 1 2077 13 view .LVU187
 655 004e 1E4A     		ldr	r2, .L47+20
 656 0050 03EB8303 		add	r3, r3, r3, lsl #2
 657 0054 02EB8303 		add	r3, r2, r3, lsl #2
 658 0058 5B68     		ldr	r3, [r3, #4]
 659              	.LVL55:
2077:FreeRTOS/Src/tasks.c **** 
 660              		.loc 1 2077 13 view .LVU188
2077:FreeRTOS/Src/tasks.c **** 
 661              		.loc 1 2077 13 view .LVU189
2077:FreeRTOS/Src/tasks.c **** 
 662              		.loc 1 2077 13 view .LVU190
 663 005a A360     		str	r3, [r4, #8]
2077:FreeRTOS/Src/tasks.c **** 
 664              		.loc 1 2077 13 view .LVU191
 665 005c 9868     		ldr	r0, [r3, #8]
 666 005e E060     		str	r0, [r4, #12]
2077:FreeRTOS/Src/tasks.c **** 
 667              		.loc 1 2077 13 view .LVU192
 668 0060 211D     		adds	r1, r4, #4
 669 0062 4160     		str	r1, [r0, #4]
2077:FreeRTOS/Src/tasks.c **** 
 670              		.loc 1 2077 13 view .LVU193
 671 0064 9960     		str	r1, [r3, #8]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 129


2077:FreeRTOS/Src/tasks.c **** 
 672              		.loc 1 2077 13 view .LVU194
 673 0066 E36A     		ldr	r3, [r4, #44]
 674              	.LVL56:
2077:FreeRTOS/Src/tasks.c **** 
 675              		.loc 1 2077 13 is_stmt 0 view .LVU195
 676 0068 03EB8301 		add	r1, r3, r3, lsl #2
 677 006c 02EB8100 		add	r0, r2, r1, lsl #2
 678 0070 6061     		str	r0, [r4, #20]
2077:FreeRTOS/Src/tasks.c **** 
 679              		.loc 1 2077 13 is_stmt 1 view .LVU196
 680 0072 52F82110 		ldr	r1, [r2, r1, lsl #2]
 681 0076 0131     		adds	r1, r1, #1
 682 0078 03EB8303 		add	r3, r3, r3, lsl #2
 683 007c 42F82310 		str	r1, [r2, r3, lsl #2]
 684              	.LBE45:
2077:FreeRTOS/Src/tasks.c **** 
 685              		.loc 1 2077 13 view .LVU197
2077:FreeRTOS/Src/tasks.c **** 
 686              		.loc 1 2077 13 view .LVU198
2077:FreeRTOS/Src/tasks.c **** 
 687              		.loc 1 2077 13 view .LVU199
2079:FreeRTOS/Src/tasks.c ****         }
 688              		.loc 1 2079 13 view .LVU200
2081:FreeRTOS/Src/tasks.c **** 
 689              		.loc 1 2081 9 view .LVU201
 690 0080 FFF7FEFF 		bl	vPortExitCritical
 691              	.LVL57:
2083:FreeRTOS/Src/tasks.c ****         {
 692              		.loc 1 2083 9 view .LVU202
2083:FreeRTOS/Src/tasks.c ****         {
 693              		.loc 1 2083 31 is_stmt 0 view .LVU203
 694 0084 0D4B     		ldr	r3, .L47+8
 695 0086 1B68     		ldr	r3, [r3]
2083:FreeRTOS/Src/tasks.c ****         {
 696              		.loc 1 2083 11 view .LVU204
 697 0088 7BB1     		cbz	r3, .L40
2087:FreeRTOS/Src/tasks.c ****         }
 698              		.loc 1 2087 13 is_stmt 1 view .LVU205
2087:FreeRTOS/Src/tasks.c ****         }
 699              		.loc 1 2087 13 view .LVU206
 700 008a 0B4B     		ldr	r3, .L47+4
 701 008c 1B68     		ldr	r3, [r3]
 702 008e DA6A     		ldr	r2, [r3, #44]
 703 0090 E36A     		ldr	r3, [r4, #44]
 704 0092 9A42     		cmp	r2, r3
 705 0094 09D2     		bcs	.L40
2087:FreeRTOS/Src/tasks.c ****         }
 706              		.loc 1 2087 13 discriminator 1 view .LVU207
 707 0096 4FF0E023 		mov	r3, #-536813568
 708 009a 4FF08052 		mov	r2, #268435456
 709 009e C3F8042D 		str	r2, [r3, #3332]
2087:FreeRTOS/Src/tasks.c ****         }
 710              		.loc 1 2087 13 view .LVU208
2087:FreeRTOS/Src/tasks.c ****         }
 711              		.loc 1 2087 13 is_stmt 0 discriminator 1 view .LVU209
 712              		.syntax unified
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 130


 713              	@ 2087 "FreeRTOS/Src/tasks.c" 1
 714 00a2 BFF34F8F 		dsb
 715              	@ 0 "" 2
2087:FreeRTOS/Src/tasks.c ****         }
 716              		.loc 1 2087 13 is_stmt 1 view .LVU210
2087:FreeRTOS/Src/tasks.c ****         }
 717              		.loc 1 2087 13 is_stmt 0 discriminator 1 view .LVU211
 718              	@ 2087 "FreeRTOS/Src/tasks.c" 1
 719 00a6 BFF36F8F 		isb
 720              	@ 0 "" 2
2087:FreeRTOS/Src/tasks.c ****         }
 721              		.loc 1 2087 13 is_stmt 1 view .LVU212
2091:FreeRTOS/Src/tasks.c ****         }
 722              		.loc 1 2091 37 view .LVU213
 723              		.thumb
 724              		.syntax unified
 725              	.L40:
2093:FreeRTOS/Src/tasks.c **** 
 726              		.loc 1 2093 5 is_stmt 0 view .LVU214
 727 00aa 10BD     		pop	{r4, pc}
 728              	.LVL58:
 729              	.L46:
2038:FreeRTOS/Src/tasks.c ****                 }
 730              		.loc 1 2038 21 is_stmt 1 view .LVU215
 731 00ac FFF7FEFF 		bl	prvInitialiseTaskLists
 732              	.LVL59:
 733 00b0 C2E7     		b	.L42
 734              	.L48:
 735 00b2 00BF     		.align	2
 736              	.L47:
 737 00b4 00000000 		.word	uxCurrentNumberOfTasks
 738 00b8 00000000 		.word	pxCurrentTCB
 739 00bc 00000000 		.word	xSchedulerRunning
 740 00c0 00000000 		.word	uxTaskNumber
 741 00c4 00000000 		.word	uxTopReadyPriority
 742 00c8 00000000 		.word	pxReadyTasksLists
 743              		.cfi_endproc
 744              	.LFE131:
 746              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 747              		.align	1
 748              		.syntax unified
 749              		.thumb
 750              		.thumb_func
 752              	prvCheckTasksWaitingTermination:
 753              	.LFB167:
6044:FreeRTOS/Src/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 754              		.loc 1 6044 1 view -0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              	.LBB46:
6049:FreeRTOS/Src/tasks.c **** 
 759              		.loc 1 6049 9 view .LVU217
6053:FreeRTOS/Src/tasks.c ****         {
 760              		.loc 1 6053 9 view .LVU218
6053:FreeRTOS/Src/tasks.c ****         {
 761              		.loc 1 6053 45 view .LVU219
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 131


 762 0000 0F4B     		ldr	r3, .L56
 763 0002 1B68     		ldr	r3, [r3]
 764 0004 D3B1     		cbz	r3, .L55
 765              	.LBE46:
6044:FreeRTOS/Src/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 766              		.loc 1 6044 1 is_stmt 0 view .LVU220
 767 0006 10B5     		push	{r4, lr}
 768              	.LCFI8:
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 4, -8
 771              		.cfi_offset 14, -4
 772              	.L51:
 773              	.LBB47:
6057:FreeRTOS/Src/tasks.c ****                 {
 774              		.loc 1 6057 17 is_stmt 1 view .LVU221
 775 0008 FFF7FEFF 		bl	vPortEnterCritical
 776              	.LVL60:
6063:FreeRTOS/Src/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 777              		.loc 1 6063 25 view .LVU222
6063:FreeRTOS/Src/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 778              		.loc 1 6063 33 is_stmt 0 view .LVU223
 779 000c 0D4B     		ldr	r3, .L56+4
 780 000e DB68     		ldr	r3, [r3, #12]
6063:FreeRTOS/Src/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 781              		.loc 1 6063 31 view .LVU224
 782 0010 DC68     		ldr	r4, [r3, #12]
 783              	.LVL61:
6064:FreeRTOS/Src/tasks.c ****                         --uxCurrentNumberOfTasks;
 784              		.loc 1 6064 25 is_stmt 1 view .LVU225
6064:FreeRTOS/Src/tasks.c ****                         --uxCurrentNumberOfTasks;
 785              		.loc 1 6064 34 is_stmt 0 view .LVU226
 786 0012 201D     		adds	r0, r4, #4
 787 0014 FFF7FEFF 		bl	uxListRemove
 788              	.LVL62:
6065:FreeRTOS/Src/tasks.c ****                         --uxDeletedTasksWaitingCleanUp;
 789              		.loc 1 6065 25 is_stmt 1 view .LVU227
 790 0018 0B4A     		ldr	r2, .L56+8
 791 001a 1368     		ldr	r3, [r2]
 792 001c 013B     		subs	r3, r3, #1
 793 001e 1360     		str	r3, [r2]
6066:FreeRTOS/Src/tasks.c ****                     }
 794              		.loc 1 6066 25 view .LVU228
 795 0020 074A     		ldr	r2, .L56
 796 0022 1368     		ldr	r3, [r2]
 797 0024 013B     		subs	r3, r3, #1
 798 0026 1360     		str	r3, [r2]
6069:FreeRTOS/Src/tasks.c **** 
 799              		.loc 1 6069 17 view .LVU229
 800 0028 FFF7FEFF 		bl	vPortExitCritical
 801              	.LVL63:
6071:FreeRTOS/Src/tasks.c ****             }
 802              		.loc 1 6071 17 view .LVU230
 803 002c 2046     		mov	r0, r4
 804 002e FFF7FEFF 		bl	prvDeleteTCB
 805              	.LVL64:
6053:FreeRTOS/Src/tasks.c ****         {
 806              		.loc 1 6053 45 view .LVU231
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 132


 807 0032 034B     		ldr	r3, .L56
 808 0034 1B68     		ldr	r3, [r3]
 809 0036 002B     		cmp	r3, #0
 810 0038 E6D1     		bne	.L51
 811              	.LBE47:
6116:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 812              		.loc 1 6116 1 is_stmt 0 view .LVU232
 813 003a 10BD     		pop	{r4, pc}
 814              	.LVL65:
 815              	.L55:
 816              	.LCFI9:
 817              		.cfi_def_cfa_offset 0
 818              		.cfi_restore 4
 819              		.cfi_restore 14
6116:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 820              		.loc 1 6116 1 view .LVU233
 821 003c 7047     		bx	lr
 822              	.L57:
 823 003e 00BF     		.align	2
 824              	.L56:
 825 0040 00000000 		.word	uxDeletedTasksWaitingCleanUp
 826 0044 00000000 		.word	xTasksWaitingTermination
 827 0048 00000000 		.word	uxCurrentNumberOfTasks
 828              		.cfi_endproc
 829              	.LFE167:
 831              		.section	.text.prvIdleTask,"ax",%progbits
 832              		.align	1
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 837              	prvIdleTask:
 838              	.LFB165:
5749:FreeRTOS/Src/tasks.c ****     /* Stop warnings. */
 839              		.loc 1 5749 1 is_stmt 1 view -0
 840              		.cfi_startproc
 841              		@ Volatile: function does not return.
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              	.LVL66:
5749:FreeRTOS/Src/tasks.c ****     /* Stop warnings. */
 845              		.loc 1 5749 1 is_stmt 0 view .LVU235
 846 0000 08B5     		push	{r3, lr}
 847              	.LCFI10:
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 3, -8
 850              		.cfi_offset 14, -4
 851              	.LVL67:
 852              	.L59:
5751:FreeRTOS/Src/tasks.c **** 
 853              		.loc 1 5751 5 is_stmt 1 view .LVU236
5759:FreeRTOS/Src/tasks.c **** 
 854              		.loc 1 5759 67 view .LVU237
5769:FreeRTOS/Src/tasks.c ****     {
 855              		.loc 1 5769 5 view .LVU238
5773:FreeRTOS/Src/tasks.c **** 
 856              		.loc 1 5773 9 view .LVU239
 857 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 133


 858              	.LVL68:
5797:FreeRTOS/Src/tasks.c ****             {
 859              		.loc 1 5797 13 view .LVU240
5797:FreeRTOS/Src/tasks.c ****             {
 860              		.loc 1 5797 17 is_stmt 0 view .LVU241
 861 0006 074B     		ldr	r3, .L62
 862 0008 1B68     		ldr	r3, [r3]
5797:FreeRTOS/Src/tasks.c ****             {
 863              		.loc 1 5797 15 view .LVU242
 864 000a 012B     		cmp	r3, #1
 865 000c F9D9     		bls	.L59
5799:FreeRTOS/Src/tasks.c ****             }
 866              		.loc 1 5799 17 is_stmt 1 view .LVU243
 867 000e 4FF0E023 		mov	r3, #-536813568
 868 0012 4FF08052 		mov	r2, #268435456
 869 0016 C3F8042D 		str	r2, [r3, #3332]
5799:FreeRTOS/Src/tasks.c ****             }
 870              		.loc 1 5799 17 view .LVU244
 871              		.syntax unified
 872              	@ 5799 "FreeRTOS/Src/tasks.c" 1
 873 001a BFF34F8F 		dsb
 874              	@ 0 "" 2
5799:FreeRTOS/Src/tasks.c ****             }
 875              		.loc 1 5799 17 view .LVU245
 876              	@ 5799 "FreeRTOS/Src/tasks.c" 1
 877 001e BFF36F8F 		isb
 878              	@ 0 "" 2
5799:FreeRTOS/Src/tasks.c ****             }
 879              		.loc 1 5799 28 view .LVU246
 880              		.thumb
 881              		.syntax unified
 882 0022 EEE7     		b	.L59
 883              	.L63:
 884              		.align	2
 885              	.L62:
 886 0024 00000000 		.word	pxReadyTasksLists
 887              		.cfi_endproc
 888              	.LFE165:
 890              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 891              		.align	1
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 896              	prvAddCurrentTaskToDelayedList:
 897              	.LVL69:
 898              	.LFB185:
6475:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6476:FreeRTOS/Src/tasks.c **** 
6477:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_
6478:FreeRTOS/Src/tasks.c **** 
6479:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
6480:FreeRTOS/Src/tasks.c ****         TaskHandle_t xTaskGetCurrentTaskHandle( void )
6481:FreeRTOS/Src/tasks.c ****         {
6482:FreeRTOS/Src/tasks.c ****             TaskHandle_t xReturn;
6483:FreeRTOS/Src/tasks.c **** 
6484:FreeRTOS/Src/tasks.c ****             traceENTER_xTaskGetCurrentTaskHandle();
6485:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 134


6486:FreeRTOS/Src/tasks.c ****             /* A critical section is not required as this is not called from
6487:FreeRTOS/Src/tasks.c ****              * an interrupt and the current TCB will always be the same for any
6488:FreeRTOS/Src/tasks.c ****              * individual execution thread. */
6489:FreeRTOS/Src/tasks.c ****             xReturn = pxCurrentTCB;
6490:FreeRTOS/Src/tasks.c **** 
6491:FreeRTOS/Src/tasks.c ****             traceRETURN_xTaskGetCurrentTaskHandle( xReturn );
6492:FreeRTOS/Src/tasks.c **** 
6493:FreeRTOS/Src/tasks.c ****             return xReturn;
6494:FreeRTOS/Src/tasks.c ****         }
6495:FreeRTOS/Src/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
6496:FreeRTOS/Src/tasks.c ****         TaskHandle_t xTaskGetCurrentTaskHandle( void )
6497:FreeRTOS/Src/tasks.c ****         {
6498:FreeRTOS/Src/tasks.c ****             TaskHandle_t xReturn;
6499:FreeRTOS/Src/tasks.c ****             UBaseType_t uxSavedInterruptStatus;
6500:FreeRTOS/Src/tasks.c **** 
6501:FreeRTOS/Src/tasks.c ****             traceENTER_xTaskGetCurrentTaskHandle();
6502:FreeRTOS/Src/tasks.c **** 
6503:FreeRTOS/Src/tasks.c ****             uxSavedInterruptStatus = portSET_INTERRUPT_MASK();
6504:FreeRTOS/Src/tasks.c ****             {
6505:FreeRTOS/Src/tasks.c ****                 xReturn = pxCurrentTCBs[ portGET_CORE_ID() ];
6506:FreeRTOS/Src/tasks.c ****             }
6507:FreeRTOS/Src/tasks.c ****             portCLEAR_INTERRUPT_MASK( uxSavedInterruptStatus );
6508:FreeRTOS/Src/tasks.c **** 
6509:FreeRTOS/Src/tasks.c ****             traceRETURN_xTaskGetCurrentTaskHandle( xReturn );
6510:FreeRTOS/Src/tasks.c **** 
6511:FreeRTOS/Src/tasks.c ****             return xReturn;
6512:FreeRTOS/Src/tasks.c ****         }
6513:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
6514:FreeRTOS/Src/tasks.c **** 
6515:FreeRTOS/Src/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandleForCore( BaseType_t xCoreID )
6516:FreeRTOS/Src/tasks.c ****     {
6517:FreeRTOS/Src/tasks.c ****         TaskHandle_t xReturn = NULL;
6518:FreeRTOS/Src/tasks.c **** 
6519:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGetCurrentTaskHandleForCore( xCoreID );
6520:FreeRTOS/Src/tasks.c **** 
6521:FreeRTOS/Src/tasks.c ****         if( taskVALID_CORE_ID( xCoreID ) != pdFALSE )
6522:FreeRTOS/Src/tasks.c ****         {
6523:FreeRTOS/Src/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
6524:FreeRTOS/Src/tasks.c ****                 xReturn = pxCurrentTCB;
6525:FreeRTOS/Src/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
6526:FreeRTOS/Src/tasks.c ****                 xReturn = pxCurrentTCBs[ xCoreID ];
6527:FreeRTOS/Src/tasks.c ****             #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
6528:FreeRTOS/Src/tasks.c ****         }
6529:FreeRTOS/Src/tasks.c **** 
6530:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGetCurrentTaskHandleForCore( xReturn );
6531:FreeRTOS/Src/tasks.c **** 
6532:FreeRTOS/Src/tasks.c ****         return xReturn;
6533:FreeRTOS/Src/tasks.c ****     }
6534:FreeRTOS/Src/tasks.c **** 
6535:FreeRTOS/Src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
6536:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6537:FreeRTOS/Src/tasks.c **** 
6538:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
6539:FreeRTOS/Src/tasks.c **** 
6540:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
6541:FreeRTOS/Src/tasks.c ****     {
6542:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 135


6543:FreeRTOS/Src/tasks.c **** 
6544:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGetSchedulerState();
6545:FreeRTOS/Src/tasks.c **** 
6546:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning == pdFALSE )
6547:FreeRTOS/Src/tasks.c ****         {
6548:FreeRTOS/Src/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
6549:FreeRTOS/Src/tasks.c ****         }
6550:FreeRTOS/Src/tasks.c ****         else
6551:FreeRTOS/Src/tasks.c ****         {
6552:FreeRTOS/Src/tasks.c ****             #if ( configNUMBER_OF_CORES > 1 )
6553:FreeRTOS/Src/tasks.c ****                 taskENTER_CRITICAL();
6554:FreeRTOS/Src/tasks.c ****             #endif
6555:FreeRTOS/Src/tasks.c ****             {
6556:FreeRTOS/Src/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
6557:FreeRTOS/Src/tasks.c ****                 {
6558:FreeRTOS/Src/tasks.c ****                     xReturn = taskSCHEDULER_RUNNING;
6559:FreeRTOS/Src/tasks.c ****                 }
6560:FreeRTOS/Src/tasks.c ****                 else
6561:FreeRTOS/Src/tasks.c ****                 {
6562:FreeRTOS/Src/tasks.c ****                     xReturn = taskSCHEDULER_SUSPENDED;
6563:FreeRTOS/Src/tasks.c ****                 }
6564:FreeRTOS/Src/tasks.c ****             }
6565:FreeRTOS/Src/tasks.c ****             #if ( configNUMBER_OF_CORES > 1 )
6566:FreeRTOS/Src/tasks.c ****                 taskEXIT_CRITICAL();
6567:FreeRTOS/Src/tasks.c ****             #endif
6568:FreeRTOS/Src/tasks.c ****         }
6569:FreeRTOS/Src/tasks.c **** 
6570:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGetSchedulerState( xReturn );
6571:FreeRTOS/Src/tasks.c **** 
6572:FreeRTOS/Src/tasks.c ****         return xReturn;
6573:FreeRTOS/Src/tasks.c ****     }
6574:FreeRTOS/Src/tasks.c **** 
6575:FreeRTOS/Src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
6576:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6577:FreeRTOS/Src/tasks.c **** 
6578:FreeRTOS/Src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
6579:FreeRTOS/Src/tasks.c **** 
6580:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
6581:FreeRTOS/Src/tasks.c ****     {
6582:FreeRTOS/Src/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
6583:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn = pdFALSE;
6584:FreeRTOS/Src/tasks.c **** 
6585:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskPriorityInherit( pxMutexHolder );
6586:FreeRTOS/Src/tasks.c **** 
6587:FreeRTOS/Src/tasks.c ****         /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
6588:FreeRTOS/Src/tasks.c ****          * inheritance is not applied in this scenario. */
6589:FreeRTOS/Src/tasks.c ****         if( pxMutexHolder != NULL )
6590:FreeRTOS/Src/tasks.c ****         {
6591:FreeRTOS/Src/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
6592:FreeRTOS/Src/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
6593:FreeRTOS/Src/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
6594:FreeRTOS/Src/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
6595:FreeRTOS/Src/tasks.c ****             {
6596:FreeRTOS/Src/tasks.c ****                 /* Adjust the mutex holder state to account for its new
6597:FreeRTOS/Src/tasks.c ****                  * priority.  Only reset the event list item value if the value is
6598:FreeRTOS/Src/tasks.c ****                  * not being used for anything else. */
6599:FreeRTOS/Src/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 136


6600:FreeRTOS/Src/tasks.c ****                 {
6601:FreeRTOS/Src/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
6602:FreeRTOS/Src/tasks.c ****                 }
6603:FreeRTOS/Src/tasks.c ****                 else
6604:FreeRTOS/Src/tasks.c ****                 {
6605:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
6606:FreeRTOS/Src/tasks.c ****                 }
6607:FreeRTOS/Src/tasks.c **** 
6608:FreeRTOS/Src/tasks.c ****                 /* If the task being modified is in the ready state it will need
6609:FreeRTOS/Src/tasks.c ****                  * to be moved into a new list. */
6610:FreeRTOS/Src/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
6611:FreeRTOS/Src/tasks.c ****                 {
6612:FreeRTOS/Src/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
6613:FreeRTOS/Src/tasks.c ****                     {
6614:FreeRTOS/Src/tasks.c ****                         /* It is known that the task is in its ready list so
6615:FreeRTOS/Src/tasks.c ****                          * there is no need to check again and the port level
6616:FreeRTOS/Src/tasks.c ****                          * reset macro can be called directly. */
6617:FreeRTOS/Src/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
6618:FreeRTOS/Src/tasks.c ****                     }
6619:FreeRTOS/Src/tasks.c ****                     else
6620:FreeRTOS/Src/tasks.c ****                     {
6621:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
6622:FreeRTOS/Src/tasks.c ****                     }
6623:FreeRTOS/Src/tasks.c **** 
6624:FreeRTOS/Src/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
6625:FreeRTOS/Src/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
6626:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
6627:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
6628:FreeRTOS/Src/tasks.c ****                     {
6629:FreeRTOS/Src/tasks.c ****                         /* The priority of the task is raised. Yield for this task
6630:FreeRTOS/Src/tasks.c ****                          * if it is not running. */
6631:FreeRTOS/Src/tasks.c ****                         if( taskTASK_IS_RUNNING( pxMutexHolderTCB ) != pdTRUE )
6632:FreeRTOS/Src/tasks.c ****                         {
6633:FreeRTOS/Src/tasks.c ****                             prvYieldForTask( pxMutexHolderTCB );
6634:FreeRTOS/Src/tasks.c ****                         }
6635:FreeRTOS/Src/tasks.c ****                     }
6636:FreeRTOS/Src/tasks.c ****                     #endif /* if ( configNUMBER_OF_CORES > 1 ) */
6637:FreeRTOS/Src/tasks.c ****                 }
6638:FreeRTOS/Src/tasks.c ****                 else
6639:FreeRTOS/Src/tasks.c ****                 {
6640:FreeRTOS/Src/tasks.c ****                     /* Just inherit the priority. */
6641:FreeRTOS/Src/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
6642:FreeRTOS/Src/tasks.c ****                 }
6643:FreeRTOS/Src/tasks.c **** 
6644:FreeRTOS/Src/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
6645:FreeRTOS/Src/tasks.c **** 
6646:FreeRTOS/Src/tasks.c ****                 /* Inheritance occurred. */
6647:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
6648:FreeRTOS/Src/tasks.c ****             }
6649:FreeRTOS/Src/tasks.c ****             else
6650:FreeRTOS/Src/tasks.c ****             {
6651:FreeRTOS/Src/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
6652:FreeRTOS/Src/tasks.c ****                 {
6653:FreeRTOS/Src/tasks.c ****                     /* The base priority of the mutex holder is lower than the
6654:FreeRTOS/Src/tasks.c ****                      * priority of the task attempting to take the mutex, but the
6655:FreeRTOS/Src/tasks.c ****                      * current priority of the mutex holder is not lower than the
6656:FreeRTOS/Src/tasks.c ****                      * priority of the task attempting to take the mutex.
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 137


6657:FreeRTOS/Src/tasks.c ****                      * Therefore the mutex holder must have already inherited a
6658:FreeRTOS/Src/tasks.c ****                      * priority, but inheritance would have occurred if that had
6659:FreeRTOS/Src/tasks.c ****                      * not been the case. */
6660:FreeRTOS/Src/tasks.c ****                     xReturn = pdTRUE;
6661:FreeRTOS/Src/tasks.c ****                 }
6662:FreeRTOS/Src/tasks.c ****                 else
6663:FreeRTOS/Src/tasks.c ****                 {
6664:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
6665:FreeRTOS/Src/tasks.c ****                 }
6666:FreeRTOS/Src/tasks.c ****             }
6667:FreeRTOS/Src/tasks.c ****         }
6668:FreeRTOS/Src/tasks.c ****         else
6669:FreeRTOS/Src/tasks.c ****         {
6670:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6671:FreeRTOS/Src/tasks.c ****         }
6672:FreeRTOS/Src/tasks.c **** 
6673:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskPriorityInherit( xReturn );
6674:FreeRTOS/Src/tasks.c **** 
6675:FreeRTOS/Src/tasks.c ****         return xReturn;
6676:FreeRTOS/Src/tasks.c ****     }
6677:FreeRTOS/Src/tasks.c **** 
6678:FreeRTOS/Src/tasks.c **** #endif /* configUSE_MUTEXES */
6679:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6680:FreeRTOS/Src/tasks.c **** 
6681:FreeRTOS/Src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
6682:FreeRTOS/Src/tasks.c **** 
6683:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
6684:FreeRTOS/Src/tasks.c ****     {
6685:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
6686:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn = pdFALSE;
6687:FreeRTOS/Src/tasks.c **** 
6688:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskPriorityDisinherit( pxMutexHolder );
6689:FreeRTOS/Src/tasks.c **** 
6690:FreeRTOS/Src/tasks.c ****         if( pxMutexHolder != NULL )
6691:FreeRTOS/Src/tasks.c ****         {
6692:FreeRTOS/Src/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
6693:FreeRTOS/Src/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
6694:FreeRTOS/Src/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
6695:FreeRTOS/Src/tasks.c ****              * be the running state task. */
6696:FreeRTOS/Src/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
6697:FreeRTOS/Src/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
6698:FreeRTOS/Src/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
6699:FreeRTOS/Src/tasks.c **** 
6700:FreeRTOS/Src/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
6701:FreeRTOS/Src/tasks.c ****              * task? */
6702:FreeRTOS/Src/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
6703:FreeRTOS/Src/tasks.c ****             {
6704:FreeRTOS/Src/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
6705:FreeRTOS/Src/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
6706:FreeRTOS/Src/tasks.c ****                 {
6707:FreeRTOS/Src/tasks.c ****                     /* A task can only have an inherited priority if it holds
6708:FreeRTOS/Src/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
6709:FreeRTOS/Src/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
6710:FreeRTOS/Src/tasks.c ****                      * holding task then it must be the running state task.  Remove
6711:FreeRTOS/Src/tasks.c ****                      * the holding task from the ready list. */
6712:FreeRTOS/Src/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
6713:FreeRTOS/Src/tasks.c ****                     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 138


6714:FreeRTOS/Src/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
6715:FreeRTOS/Src/tasks.c ****                     }
6716:FreeRTOS/Src/tasks.c ****                     else
6717:FreeRTOS/Src/tasks.c ****                     {
6718:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
6719:FreeRTOS/Src/tasks.c ****                     }
6720:FreeRTOS/Src/tasks.c **** 
6721:FreeRTOS/Src/tasks.c ****                     /* Disinherit the priority before adding the task into the
6722:FreeRTOS/Src/tasks.c ****                      * new  ready list. */
6723:FreeRTOS/Src/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
6724:FreeRTOS/Src/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
6725:FreeRTOS/Src/tasks.c **** 
6726:FreeRTOS/Src/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
6727:FreeRTOS/Src/tasks.c ****                      * any other purpose if this task is running, and it must be
6728:FreeRTOS/Src/tasks.c ****                      * running to give back the mutex. */
6729:FreeRTOS/Src/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
6730:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
6731:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
6732:FreeRTOS/Src/tasks.c ****                     {
6733:FreeRTOS/Src/tasks.c ****                         /* The priority of the task is dropped. Yield the core on
6734:FreeRTOS/Src/tasks.c ****                          * which the task is running. */
6735:FreeRTOS/Src/tasks.c ****                         if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
6736:FreeRTOS/Src/tasks.c ****                         {
6737:FreeRTOS/Src/tasks.c ****                             prvYieldCore( pxTCB->xTaskRunState );
6738:FreeRTOS/Src/tasks.c ****                         }
6739:FreeRTOS/Src/tasks.c ****                     }
6740:FreeRTOS/Src/tasks.c ****                     #endif /* if ( configNUMBER_OF_CORES > 1 ) */
6741:FreeRTOS/Src/tasks.c **** 
6742:FreeRTOS/Src/tasks.c ****                     /* Return true to indicate that a context switch is required.
6743:FreeRTOS/Src/tasks.c ****                      * This is only actually required in the corner case whereby
6744:FreeRTOS/Src/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
6745:FreeRTOS/Src/tasks.c ****                      * in an order different to that in which they were taken.
6746:FreeRTOS/Src/tasks.c ****                      * If a context switch did not occur when the first mutex was
6747:FreeRTOS/Src/tasks.c ****                      * returned, even if a task was waiting on it, then a context
6748:FreeRTOS/Src/tasks.c ****                      * switch should occur when the last mutex is returned whether
6749:FreeRTOS/Src/tasks.c ****                      * a task is waiting on it or not. */
6750:FreeRTOS/Src/tasks.c ****                     xReturn = pdTRUE;
6751:FreeRTOS/Src/tasks.c ****                 }
6752:FreeRTOS/Src/tasks.c ****                 else
6753:FreeRTOS/Src/tasks.c ****                 {
6754:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
6755:FreeRTOS/Src/tasks.c ****                 }
6756:FreeRTOS/Src/tasks.c ****             }
6757:FreeRTOS/Src/tasks.c ****             else
6758:FreeRTOS/Src/tasks.c ****             {
6759:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
6760:FreeRTOS/Src/tasks.c ****             }
6761:FreeRTOS/Src/tasks.c ****         }
6762:FreeRTOS/Src/tasks.c ****         else
6763:FreeRTOS/Src/tasks.c ****         {
6764:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6765:FreeRTOS/Src/tasks.c ****         }
6766:FreeRTOS/Src/tasks.c **** 
6767:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskPriorityDisinherit( xReturn );
6768:FreeRTOS/Src/tasks.c **** 
6769:FreeRTOS/Src/tasks.c ****         return xReturn;
6770:FreeRTOS/Src/tasks.c ****     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 139


6771:FreeRTOS/Src/tasks.c **** 
6772:FreeRTOS/Src/tasks.c **** #endif /* configUSE_MUTEXES */
6773:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6774:FreeRTOS/Src/tasks.c **** 
6775:FreeRTOS/Src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
6776:FreeRTOS/Src/tasks.c **** 
6777:FreeRTOS/Src/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
6778:FreeRTOS/Src/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
6779:FreeRTOS/Src/tasks.c ****     {
6780:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
6781:FreeRTOS/Src/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
6782:FreeRTOS/Src/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
6783:FreeRTOS/Src/tasks.c **** 
6784:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask
6785:FreeRTOS/Src/tasks.c **** 
6786:FreeRTOS/Src/tasks.c ****         if( pxMutexHolder != NULL )
6787:FreeRTOS/Src/tasks.c ****         {
6788:FreeRTOS/Src/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
6789:FreeRTOS/Src/tasks.c ****              * one mutex. */
6790:FreeRTOS/Src/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
6791:FreeRTOS/Src/tasks.c **** 
6792:FreeRTOS/Src/tasks.c ****             /* Determine the priority to which the priority of the task that
6793:FreeRTOS/Src/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
6794:FreeRTOS/Src/tasks.c ****              * holding task's base priority and the priority of the highest
6795:FreeRTOS/Src/tasks.c ****              * priority task that is waiting to obtain the mutex. */
6796:FreeRTOS/Src/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
6797:FreeRTOS/Src/tasks.c ****             {
6798:FreeRTOS/Src/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
6799:FreeRTOS/Src/tasks.c ****             }
6800:FreeRTOS/Src/tasks.c ****             else
6801:FreeRTOS/Src/tasks.c ****             {
6802:FreeRTOS/Src/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
6803:FreeRTOS/Src/tasks.c ****             }
6804:FreeRTOS/Src/tasks.c **** 
6805:FreeRTOS/Src/tasks.c ****             /* Does the priority need to change? */
6806:FreeRTOS/Src/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
6807:FreeRTOS/Src/tasks.c ****             {
6808:FreeRTOS/Src/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
6809:FreeRTOS/Src/tasks.c ****                  * simplification in the priority inheritance implementation.  If
6810:FreeRTOS/Src/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
6811:FreeRTOS/Src/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
6812:FreeRTOS/Src/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
6813:FreeRTOS/Src/tasks.c ****                 {
6814:FreeRTOS/Src/tasks.c ****                     /* If a task has timed out because it already holds the
6815:FreeRTOS/Src/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
6816:FreeRTOS/Src/tasks.c ****                      * its own priority. */
6817:FreeRTOS/Src/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
6818:FreeRTOS/Src/tasks.c **** 
6819:FreeRTOS/Src/tasks.c ****                     /* Disinherit the priority, remembering the previous
6820:FreeRTOS/Src/tasks.c ****                      * priority to facilitate determining the subject task's
6821:FreeRTOS/Src/tasks.c ****                      * state. */
6822:FreeRTOS/Src/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
6823:FreeRTOS/Src/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
6824:FreeRTOS/Src/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
6825:FreeRTOS/Src/tasks.c **** 
6826:FreeRTOS/Src/tasks.c ****                     /* Only reset the event list item value if the value is not
6827:FreeRTOS/Src/tasks.c ****                      * being used for anything else. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 140


6828:FreeRTOS/Src/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
6829:FreeRTOS/Src/tasks.c ****                     {
6830:FreeRTOS/Src/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
6831:FreeRTOS/Src/tasks.c ****                     }
6832:FreeRTOS/Src/tasks.c ****                     else
6833:FreeRTOS/Src/tasks.c ****                     {
6834:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
6835:FreeRTOS/Src/tasks.c ****                     }
6836:FreeRTOS/Src/tasks.c **** 
6837:FreeRTOS/Src/tasks.c ****                     /* If the running task is not the task that holds the mutex
6838:FreeRTOS/Src/tasks.c ****                      * then the task that holds the mutex could be in either the
6839:FreeRTOS/Src/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
6840:FreeRTOS/Src/tasks.c ****                      * from its current state list if it is in the Ready state as
6841:FreeRTOS/Src/tasks.c ****                      * the task's priority is going to change and there is one
6842:FreeRTOS/Src/tasks.c ****                      * Ready list per priority. */
6843:FreeRTOS/Src/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
6844:FreeRTOS/Src/tasks.c ****                     {
6845:FreeRTOS/Src/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
6846:FreeRTOS/Src/tasks.c ****                         {
6847:FreeRTOS/Src/tasks.c ****                             /* It is known that the task is in its ready list so
6848:FreeRTOS/Src/tasks.c ****                              * there is no need to check again and the port level
6849:FreeRTOS/Src/tasks.c ****                              * reset macro can be called directly. */
6850:FreeRTOS/Src/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
6851:FreeRTOS/Src/tasks.c ****                         }
6852:FreeRTOS/Src/tasks.c ****                         else
6853:FreeRTOS/Src/tasks.c ****                         {
6854:FreeRTOS/Src/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
6855:FreeRTOS/Src/tasks.c ****                         }
6856:FreeRTOS/Src/tasks.c **** 
6857:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
6858:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
6859:FreeRTOS/Src/tasks.c ****                         {
6860:FreeRTOS/Src/tasks.c ****                             /* The priority of the task is dropped. Yield the core on
6861:FreeRTOS/Src/tasks.c ****                              * which the task is running. */
6862:FreeRTOS/Src/tasks.c ****                             if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
6863:FreeRTOS/Src/tasks.c ****                             {
6864:FreeRTOS/Src/tasks.c ****                                 prvYieldCore( pxTCB->xTaskRunState );
6865:FreeRTOS/Src/tasks.c ****                             }
6866:FreeRTOS/Src/tasks.c ****                         }
6867:FreeRTOS/Src/tasks.c ****                         #endif /* if ( configNUMBER_OF_CORES > 1 ) */
6868:FreeRTOS/Src/tasks.c ****                     }
6869:FreeRTOS/Src/tasks.c ****                     else
6870:FreeRTOS/Src/tasks.c ****                     {
6871:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
6872:FreeRTOS/Src/tasks.c ****                     }
6873:FreeRTOS/Src/tasks.c ****                 }
6874:FreeRTOS/Src/tasks.c ****                 else
6875:FreeRTOS/Src/tasks.c ****                 {
6876:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
6877:FreeRTOS/Src/tasks.c ****                 }
6878:FreeRTOS/Src/tasks.c ****             }
6879:FreeRTOS/Src/tasks.c ****             else
6880:FreeRTOS/Src/tasks.c ****             {
6881:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
6882:FreeRTOS/Src/tasks.c ****             }
6883:FreeRTOS/Src/tasks.c ****         }
6884:FreeRTOS/Src/tasks.c ****         else
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 141


6885:FreeRTOS/Src/tasks.c ****         {
6886:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6887:FreeRTOS/Src/tasks.c ****         }
6888:FreeRTOS/Src/tasks.c **** 
6889:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskPriorityDisinheritAfterTimeout();
6890:FreeRTOS/Src/tasks.c ****     }
6891:FreeRTOS/Src/tasks.c **** 
6892:FreeRTOS/Src/tasks.c **** #endif /* configUSE_MUTEXES */
6893:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6894:FreeRTOS/Src/tasks.c **** 
6895:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
6896:FreeRTOS/Src/tasks.c **** 
6897:FreeRTOS/Src/tasks.c **** /* If not in a critical section then yield immediately.
6898:FreeRTOS/Src/tasks.c ****  * Otherwise set xYieldPendings to true to wait to
6899:FreeRTOS/Src/tasks.c ****  * yield until exiting the critical section.
6900:FreeRTOS/Src/tasks.c ****  */
6901:FreeRTOS/Src/tasks.c ****     void vTaskYieldWithinAPI( void )
6902:FreeRTOS/Src/tasks.c ****     {
6903:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskYieldWithinAPI();
6904:FreeRTOS/Src/tasks.c **** 
6905:FreeRTOS/Src/tasks.c ****         if( portGET_CRITICAL_NESTING_COUNT() == 0U )
6906:FreeRTOS/Src/tasks.c ****         {
6907:FreeRTOS/Src/tasks.c ****             portYIELD();
6908:FreeRTOS/Src/tasks.c ****         }
6909:FreeRTOS/Src/tasks.c ****         else
6910:FreeRTOS/Src/tasks.c ****         {
6911:FreeRTOS/Src/tasks.c ****             xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
6912:FreeRTOS/Src/tasks.c ****         }
6913:FreeRTOS/Src/tasks.c **** 
6914:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskYieldWithinAPI();
6915:FreeRTOS/Src/tasks.c ****     }
6916:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
6917:FreeRTOS/Src/tasks.c **** 
6918:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6919:FreeRTOS/Src/tasks.c **** 
6920:FreeRTOS/Src/tasks.c **** #if ( ( portCRITICAL_NESTING_IN_TCB == 1 ) && ( configNUMBER_OF_CORES == 1 ) )
6921:FreeRTOS/Src/tasks.c **** 
6922:FreeRTOS/Src/tasks.c ****     void vTaskEnterCritical( void )
6923:FreeRTOS/Src/tasks.c ****     {
6924:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskEnterCritical();
6925:FreeRTOS/Src/tasks.c **** 
6926:FreeRTOS/Src/tasks.c ****         portDISABLE_INTERRUPTS();
6927:FreeRTOS/Src/tasks.c **** 
6928:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning != pdFALSE )
6929:FreeRTOS/Src/tasks.c ****         {
6930:FreeRTOS/Src/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
6931:FreeRTOS/Src/tasks.c **** 
6932:FreeRTOS/Src/tasks.c ****             /* This is not the interrupt safe version of the enter critical
6933:FreeRTOS/Src/tasks.c ****              * function so  assert() if it is being called from an interrupt
6934:FreeRTOS/Src/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
6935:FreeRTOS/Src/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
6936:FreeRTOS/Src/tasks.c ****              * protect against recursive calls if the assert function also uses a
6937:FreeRTOS/Src/tasks.c ****              * critical section. */
6938:FreeRTOS/Src/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1U )
6939:FreeRTOS/Src/tasks.c ****             {
6940:FreeRTOS/Src/tasks.c ****                 portASSERT_IF_IN_ISR();
6941:FreeRTOS/Src/tasks.c ****             }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 142


6942:FreeRTOS/Src/tasks.c ****         }
6943:FreeRTOS/Src/tasks.c ****         else
6944:FreeRTOS/Src/tasks.c ****         {
6945:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6946:FreeRTOS/Src/tasks.c ****         }
6947:FreeRTOS/Src/tasks.c **** 
6948:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskEnterCritical();
6949:FreeRTOS/Src/tasks.c ****     }
6950:FreeRTOS/Src/tasks.c **** 
6951:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( portCRITICAL_NESTING_IN_TCB == 1 ) && ( configNUMBER_OF_CORES == 1 ) ) */
6952:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
6953:FreeRTOS/Src/tasks.c **** 
6954:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
6955:FreeRTOS/Src/tasks.c **** 
6956:FreeRTOS/Src/tasks.c ****     void vTaskEnterCritical( void )
6957:FreeRTOS/Src/tasks.c ****     {
6958:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskEnterCritical();
6959:FreeRTOS/Src/tasks.c **** 
6960:FreeRTOS/Src/tasks.c ****         portDISABLE_INTERRUPTS();
6961:FreeRTOS/Src/tasks.c **** 
6962:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning != pdFALSE )
6963:FreeRTOS/Src/tasks.c ****         {
6964:FreeRTOS/Src/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() == 0U )
6965:FreeRTOS/Src/tasks.c ****             {
6966:FreeRTOS/Src/tasks.c ****                 portGET_TASK_LOCK();
6967:FreeRTOS/Src/tasks.c ****                 portGET_ISR_LOCK();
6968:FreeRTOS/Src/tasks.c ****             }
6969:FreeRTOS/Src/tasks.c **** 
6970:FreeRTOS/Src/tasks.c ****             portINCREMENT_CRITICAL_NESTING_COUNT();
6971:FreeRTOS/Src/tasks.c **** 
6972:FreeRTOS/Src/tasks.c ****             /* This is not the interrupt safe version of the enter critical
6973:FreeRTOS/Src/tasks.c ****              * function so  assert() if it is being called from an interrupt
6974:FreeRTOS/Src/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
6975:FreeRTOS/Src/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
6976:FreeRTOS/Src/tasks.c ****              * protect against recursive calls if the assert function also uses a
6977:FreeRTOS/Src/tasks.c ****              * critical section. */
6978:FreeRTOS/Src/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() == 1U )
6979:FreeRTOS/Src/tasks.c ****             {
6980:FreeRTOS/Src/tasks.c ****                 portASSERT_IF_IN_ISR();
6981:FreeRTOS/Src/tasks.c **** 
6982:FreeRTOS/Src/tasks.c ****                 if( uxSchedulerSuspended == 0U )
6983:FreeRTOS/Src/tasks.c ****                 {
6984:FreeRTOS/Src/tasks.c ****                     /* The only time there would be a problem is if this is called
6985:FreeRTOS/Src/tasks.c ****                      * before a context switch and vTaskExitCritical() is called
6986:FreeRTOS/Src/tasks.c ****                      * after pxCurrentTCB changes. Therefore this should not be
6987:FreeRTOS/Src/tasks.c ****                      * used within vTaskSwitchContext(). */
6988:FreeRTOS/Src/tasks.c ****                     prvCheckForRunStateChange();
6989:FreeRTOS/Src/tasks.c ****                 }
6990:FreeRTOS/Src/tasks.c ****             }
6991:FreeRTOS/Src/tasks.c ****         }
6992:FreeRTOS/Src/tasks.c ****         else
6993:FreeRTOS/Src/tasks.c ****         {
6994:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6995:FreeRTOS/Src/tasks.c ****         }
6996:FreeRTOS/Src/tasks.c **** 
6997:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskEnterCritical();
6998:FreeRTOS/Src/tasks.c ****     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 143


6999:FreeRTOS/Src/tasks.c **** 
7000:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
7001:FreeRTOS/Src/tasks.c **** 
7002:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7003:FreeRTOS/Src/tasks.c **** 
7004:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
7005:FreeRTOS/Src/tasks.c **** 
7006:FreeRTOS/Src/tasks.c ****     UBaseType_t vTaskEnterCriticalFromISR( void )
7007:FreeRTOS/Src/tasks.c ****     {
7008:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus = 0;
7009:FreeRTOS/Src/tasks.c **** 
7010:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskEnterCriticalFromISR();
7011:FreeRTOS/Src/tasks.c **** 
7012:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning != pdFALSE )
7013:FreeRTOS/Src/tasks.c ****         {
7014:FreeRTOS/Src/tasks.c ****             uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
7015:FreeRTOS/Src/tasks.c **** 
7016:FreeRTOS/Src/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() == 0U )
7017:FreeRTOS/Src/tasks.c ****             {
7018:FreeRTOS/Src/tasks.c ****                 portGET_ISR_LOCK();
7019:FreeRTOS/Src/tasks.c ****             }
7020:FreeRTOS/Src/tasks.c **** 
7021:FreeRTOS/Src/tasks.c ****             portINCREMENT_CRITICAL_NESTING_COUNT();
7022:FreeRTOS/Src/tasks.c ****         }
7023:FreeRTOS/Src/tasks.c ****         else
7024:FreeRTOS/Src/tasks.c ****         {
7025:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7026:FreeRTOS/Src/tasks.c ****         }
7027:FreeRTOS/Src/tasks.c **** 
7028:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskEnterCriticalFromISR( uxSavedInterruptStatus );
7029:FreeRTOS/Src/tasks.c **** 
7030:FreeRTOS/Src/tasks.c ****         return uxSavedInterruptStatus;
7031:FreeRTOS/Src/tasks.c ****     }
7032:FreeRTOS/Src/tasks.c **** 
7033:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
7034:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7035:FreeRTOS/Src/tasks.c **** 
7036:FreeRTOS/Src/tasks.c **** #if ( ( portCRITICAL_NESTING_IN_TCB == 1 ) && ( configNUMBER_OF_CORES == 1 ) )
7037:FreeRTOS/Src/tasks.c **** 
7038:FreeRTOS/Src/tasks.c ****     void vTaskExitCritical( void )
7039:FreeRTOS/Src/tasks.c ****     {
7040:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskExitCritical();
7041:FreeRTOS/Src/tasks.c **** 
7042:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning != pdFALSE )
7043:FreeRTOS/Src/tasks.c ****         {
7044:FreeRTOS/Src/tasks.c ****             /* If pxCurrentTCB->uxCriticalNesting is zero then this function
7045:FreeRTOS/Src/tasks.c ****              * does not match a previous call to vTaskEnterCritical(). */
7046:FreeRTOS/Src/tasks.c ****             configASSERT( pxCurrentTCB->uxCriticalNesting > 0U );
7047:FreeRTOS/Src/tasks.c **** 
7048:FreeRTOS/Src/tasks.c ****             /* This function should not be called in ISR. Use vTaskExitCriticalFromISR
7049:FreeRTOS/Src/tasks.c ****              * to exit critical section from ISR. */
7050:FreeRTOS/Src/tasks.c ****             portASSERT_IF_IN_ISR();
7051:FreeRTOS/Src/tasks.c **** 
7052:FreeRTOS/Src/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
7053:FreeRTOS/Src/tasks.c ****             {
7054:FreeRTOS/Src/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
7055:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 144


7056:FreeRTOS/Src/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
7057:FreeRTOS/Src/tasks.c ****                 {
7058:FreeRTOS/Src/tasks.c ****                     portENABLE_INTERRUPTS();
7059:FreeRTOS/Src/tasks.c ****                 }
7060:FreeRTOS/Src/tasks.c ****                 else
7061:FreeRTOS/Src/tasks.c ****                 {
7062:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7063:FreeRTOS/Src/tasks.c ****                 }
7064:FreeRTOS/Src/tasks.c ****             }
7065:FreeRTOS/Src/tasks.c ****             else
7066:FreeRTOS/Src/tasks.c ****             {
7067:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7068:FreeRTOS/Src/tasks.c ****             }
7069:FreeRTOS/Src/tasks.c ****         }
7070:FreeRTOS/Src/tasks.c ****         else
7071:FreeRTOS/Src/tasks.c ****         {
7072:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7073:FreeRTOS/Src/tasks.c ****         }
7074:FreeRTOS/Src/tasks.c **** 
7075:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskExitCritical();
7076:FreeRTOS/Src/tasks.c ****     }
7077:FreeRTOS/Src/tasks.c **** 
7078:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( portCRITICAL_NESTING_IN_TCB == 1 ) && ( configNUMBER_OF_CORES == 1 ) ) */
7079:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7080:FreeRTOS/Src/tasks.c **** 
7081:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
7082:FreeRTOS/Src/tasks.c **** 
7083:FreeRTOS/Src/tasks.c ****     void vTaskExitCritical( void )
7084:FreeRTOS/Src/tasks.c ****     {
7085:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskExitCritical();
7086:FreeRTOS/Src/tasks.c **** 
7087:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning != pdFALSE )
7088:FreeRTOS/Src/tasks.c ****         {
7089:FreeRTOS/Src/tasks.c ****             /* If critical nesting count is zero then this function
7090:FreeRTOS/Src/tasks.c ****              * does not match a previous call to vTaskEnterCritical(). */
7091:FreeRTOS/Src/tasks.c ****             configASSERT( portGET_CRITICAL_NESTING_COUNT() > 0U );
7092:FreeRTOS/Src/tasks.c **** 
7093:FreeRTOS/Src/tasks.c ****             /* This function should not be called in ISR. Use vTaskExitCriticalFromISR
7094:FreeRTOS/Src/tasks.c ****              * to exit critical section from ISR. */
7095:FreeRTOS/Src/tasks.c ****             portASSERT_IF_IN_ISR();
7096:FreeRTOS/Src/tasks.c **** 
7097:FreeRTOS/Src/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() > 0U )
7098:FreeRTOS/Src/tasks.c ****             {
7099:FreeRTOS/Src/tasks.c ****                 portDECREMENT_CRITICAL_NESTING_COUNT();
7100:FreeRTOS/Src/tasks.c **** 
7101:FreeRTOS/Src/tasks.c ****                 if( portGET_CRITICAL_NESTING_COUNT() == 0U )
7102:FreeRTOS/Src/tasks.c ****                 {
7103:FreeRTOS/Src/tasks.c ****                     BaseType_t xYieldCurrentTask;
7104:FreeRTOS/Src/tasks.c **** 
7105:FreeRTOS/Src/tasks.c ****                     /* Get the xYieldPending stats inside the critical section. */
7106:FreeRTOS/Src/tasks.c ****                     xYieldCurrentTask = xYieldPendings[ portGET_CORE_ID() ];
7107:FreeRTOS/Src/tasks.c **** 
7108:FreeRTOS/Src/tasks.c ****                     portRELEASE_ISR_LOCK();
7109:FreeRTOS/Src/tasks.c ****                     portRELEASE_TASK_LOCK();
7110:FreeRTOS/Src/tasks.c ****                     portENABLE_INTERRUPTS();
7111:FreeRTOS/Src/tasks.c **** 
7112:FreeRTOS/Src/tasks.c ****                     /* When a task yields in a critical section it just sets
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 145


7113:FreeRTOS/Src/tasks.c ****                      * xYieldPending to true. So now that we have exited the
7114:FreeRTOS/Src/tasks.c ****                      * critical section check if xYieldPending is true, and
7115:FreeRTOS/Src/tasks.c ****                      * if so yield. */
7116:FreeRTOS/Src/tasks.c ****                     if( xYieldCurrentTask != pdFALSE )
7117:FreeRTOS/Src/tasks.c ****                     {
7118:FreeRTOS/Src/tasks.c ****                         portYIELD();
7119:FreeRTOS/Src/tasks.c ****                     }
7120:FreeRTOS/Src/tasks.c ****                 }
7121:FreeRTOS/Src/tasks.c ****                 else
7122:FreeRTOS/Src/tasks.c ****                 {
7123:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7124:FreeRTOS/Src/tasks.c ****                 }
7125:FreeRTOS/Src/tasks.c ****             }
7126:FreeRTOS/Src/tasks.c ****             else
7127:FreeRTOS/Src/tasks.c ****             {
7128:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7129:FreeRTOS/Src/tasks.c ****             }
7130:FreeRTOS/Src/tasks.c ****         }
7131:FreeRTOS/Src/tasks.c ****         else
7132:FreeRTOS/Src/tasks.c ****         {
7133:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7134:FreeRTOS/Src/tasks.c ****         }
7135:FreeRTOS/Src/tasks.c **** 
7136:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskExitCritical();
7137:FreeRTOS/Src/tasks.c ****     }
7138:FreeRTOS/Src/tasks.c **** 
7139:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
7140:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7141:FreeRTOS/Src/tasks.c **** 
7142:FreeRTOS/Src/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
7143:FreeRTOS/Src/tasks.c **** 
7144:FreeRTOS/Src/tasks.c ****     void vTaskExitCriticalFromISR( UBaseType_t uxSavedInterruptStatus )
7145:FreeRTOS/Src/tasks.c ****     {
7146:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskExitCriticalFromISR( uxSavedInterruptStatus );
7147:FreeRTOS/Src/tasks.c **** 
7148:FreeRTOS/Src/tasks.c ****         if( xSchedulerRunning != pdFALSE )
7149:FreeRTOS/Src/tasks.c ****         {
7150:FreeRTOS/Src/tasks.c ****             /* If critical nesting count is zero then this function
7151:FreeRTOS/Src/tasks.c ****              * does not match a previous call to vTaskEnterCritical(). */
7152:FreeRTOS/Src/tasks.c ****             configASSERT( portGET_CRITICAL_NESTING_COUNT() > 0U );
7153:FreeRTOS/Src/tasks.c **** 
7154:FreeRTOS/Src/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() > 0U )
7155:FreeRTOS/Src/tasks.c ****             {
7156:FreeRTOS/Src/tasks.c ****                 portDECREMENT_CRITICAL_NESTING_COUNT();
7157:FreeRTOS/Src/tasks.c **** 
7158:FreeRTOS/Src/tasks.c ****                 if( portGET_CRITICAL_NESTING_COUNT() == 0U )
7159:FreeRTOS/Src/tasks.c ****                 {
7160:FreeRTOS/Src/tasks.c ****                     portRELEASE_ISR_LOCK();
7161:FreeRTOS/Src/tasks.c ****                     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
7162:FreeRTOS/Src/tasks.c ****                 }
7163:FreeRTOS/Src/tasks.c ****                 else
7164:FreeRTOS/Src/tasks.c ****                 {
7165:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7166:FreeRTOS/Src/tasks.c ****                 }
7167:FreeRTOS/Src/tasks.c ****             }
7168:FreeRTOS/Src/tasks.c ****             else
7169:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 146


7170:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7171:FreeRTOS/Src/tasks.c ****             }
7172:FreeRTOS/Src/tasks.c ****         }
7173:FreeRTOS/Src/tasks.c ****         else
7174:FreeRTOS/Src/tasks.c ****         {
7175:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7176:FreeRTOS/Src/tasks.c ****         }
7177:FreeRTOS/Src/tasks.c **** 
7178:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskExitCriticalFromISR();
7179:FreeRTOS/Src/tasks.c ****     }
7180:FreeRTOS/Src/tasks.c **** 
7181:FreeRTOS/Src/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
7182:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7183:FreeRTOS/Src/tasks.c **** 
7184:FreeRTOS/Src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
7185:FreeRTOS/Src/tasks.c **** 
7186:FreeRTOS/Src/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
7187:FreeRTOS/Src/tasks.c ****                                         const char * pcTaskName )
7188:FreeRTOS/Src/tasks.c ****     {
7189:FreeRTOS/Src/tasks.c ****         size_t x;
7190:FreeRTOS/Src/tasks.c **** 
7191:FreeRTOS/Src/tasks.c ****         /* Start by copying the entire string. */
7192:FreeRTOS/Src/tasks.c ****         ( void ) strcpy( pcBuffer, pcTaskName );
7193:FreeRTOS/Src/tasks.c **** 
7194:FreeRTOS/Src/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
7195:FreeRTOS/Src/tasks.c ****          * printed out. */
7196:FreeRTOS/Src/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( ( size_t ) configMAX_TASK_NAME_LEN - 1U ); x+
7197:FreeRTOS/Src/tasks.c ****         {
7198:FreeRTOS/Src/tasks.c ****             pcBuffer[ x ] = ' ';
7199:FreeRTOS/Src/tasks.c ****         }
7200:FreeRTOS/Src/tasks.c **** 
7201:FreeRTOS/Src/tasks.c ****         /* Terminate. */
7202:FreeRTOS/Src/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
7203:FreeRTOS/Src/tasks.c **** 
7204:FreeRTOS/Src/tasks.c ****         /* Return the new end of string. */
7205:FreeRTOS/Src/tasks.c ****         return &( pcBuffer[ x ] );
7206:FreeRTOS/Src/tasks.c ****     }
7207:FreeRTOS/Src/tasks.c **** 
7208:FreeRTOS/Src/tasks.c **** #endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
7209:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7210:FreeRTOS/Src/tasks.c **** 
7211:FreeRTOS/Src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
7212:FreeRTOS/Src/tasks.c **** 
7213:FreeRTOS/Src/tasks.c ****     void vTaskListTasks( char * pcWriteBuffer,
7214:FreeRTOS/Src/tasks.c ****                          size_t uxBufferLength )
7215:FreeRTOS/Src/tasks.c ****     {
7216:FreeRTOS/Src/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
7217:FreeRTOS/Src/tasks.c ****         size_t uxConsumedBufferLength = 0;
7218:FreeRTOS/Src/tasks.c ****         size_t uxCharsWrittenBySnprintf;
7219:FreeRTOS/Src/tasks.c ****         int iSnprintfReturnValue;
7220:FreeRTOS/Src/tasks.c ****         BaseType_t xOutputBufferFull = pdFALSE;
7221:FreeRTOS/Src/tasks.c ****         UBaseType_t uxArraySize, x;
7222:FreeRTOS/Src/tasks.c ****         char cStatus;
7223:FreeRTOS/Src/tasks.c **** 
7224:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskListTasks( pcWriteBuffer, uxBufferLength );
7225:FreeRTOS/Src/tasks.c **** 
7226:FreeRTOS/Src/tasks.c ****         /*
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 147


7227:FreeRTOS/Src/tasks.c ****          * PLEASE NOTE:
7228:FreeRTOS/Src/tasks.c ****          *
7229:FreeRTOS/Src/tasks.c ****          * This function is provided for convenience only, and is used by many
7230:FreeRTOS/Src/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
7231:FreeRTOS/Src/tasks.c ****          * scheduler.
7232:FreeRTOS/Src/tasks.c ****          *
7233:FreeRTOS/Src/tasks.c ****          * vTaskListTasks() calls uxTaskGetSystemState(), then formats part of the
7234:FreeRTOS/Src/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
7235:FreeRTOS/Src/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
7236:FreeRTOS/Src/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
7237:FreeRTOS/Src/tasks.c ****          * on top of stack - not the number of bytes.
7238:FreeRTOS/Src/tasks.c ****          *
7239:FreeRTOS/Src/tasks.c ****          * vTaskListTasks() has a dependency on the snprintf() C library function that
7240:FreeRTOS/Src/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
7241:FreeRTOS/Src/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
7242:FreeRTOS/Src/tasks.c ****          * and limited functionality implementation of snprintf() is provided in
7243:FreeRTOS/Src/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
7244:FreeRTOS/Src/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
7245:FreeRTOS/Src/tasks.c ****          * snprintf() implementation!).
7246:FreeRTOS/Src/tasks.c ****          *
7247:FreeRTOS/Src/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
7248:FreeRTOS/Src/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
7249:FreeRTOS/Src/tasks.c ****          * through a call to vTaskListTasks().
7250:FreeRTOS/Src/tasks.c ****          */
7251:FreeRTOS/Src/tasks.c **** 
7252:FreeRTOS/Src/tasks.c **** 
7253:FreeRTOS/Src/tasks.c ****         /* Make sure the write buffer does not contain a string. */
7254:FreeRTOS/Src/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
7255:FreeRTOS/Src/tasks.c **** 
7256:FreeRTOS/Src/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
7257:FreeRTOS/Src/tasks.c ****          * function is executing. */
7258:FreeRTOS/Src/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
7259:FreeRTOS/Src/tasks.c **** 
7260:FreeRTOS/Src/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
7261:FreeRTOS/Src/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
7262:FreeRTOS/Src/tasks.c ****          * equate to NULL. */
7263:FreeRTOS/Src/tasks.c ****         /* MISRA Ref 11.5.1 [Malloc memory assignment] */
7264:FreeRTOS/Src/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115
7265:FreeRTOS/Src/tasks.c ****         /* coverity[misra_c_2012_rule_11_5_violation] */
7266:FreeRTOS/Src/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
7267:FreeRTOS/Src/tasks.c **** 
7268:FreeRTOS/Src/tasks.c ****         if( pxTaskStatusArray != NULL )
7269:FreeRTOS/Src/tasks.c ****         {
7270:FreeRTOS/Src/tasks.c ****             /* Generate the (binary) data. */
7271:FreeRTOS/Src/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
7272:FreeRTOS/Src/tasks.c **** 
7273:FreeRTOS/Src/tasks.c ****             /* Create a human readable table from the binary data. */
7274:FreeRTOS/Src/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
7275:FreeRTOS/Src/tasks.c ****             {
7276:FreeRTOS/Src/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
7277:FreeRTOS/Src/tasks.c ****                 {
7278:FreeRTOS/Src/tasks.c ****                     case eRunning:
7279:FreeRTOS/Src/tasks.c ****                         cStatus = tskRUNNING_CHAR;
7280:FreeRTOS/Src/tasks.c ****                         break;
7281:FreeRTOS/Src/tasks.c **** 
7282:FreeRTOS/Src/tasks.c ****                     case eReady:
7283:FreeRTOS/Src/tasks.c ****                         cStatus = tskREADY_CHAR;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 148


7284:FreeRTOS/Src/tasks.c ****                         break;
7285:FreeRTOS/Src/tasks.c **** 
7286:FreeRTOS/Src/tasks.c ****                     case eBlocked:
7287:FreeRTOS/Src/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
7288:FreeRTOS/Src/tasks.c ****                         break;
7289:FreeRTOS/Src/tasks.c **** 
7290:FreeRTOS/Src/tasks.c ****                     case eSuspended:
7291:FreeRTOS/Src/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
7292:FreeRTOS/Src/tasks.c ****                         break;
7293:FreeRTOS/Src/tasks.c **** 
7294:FreeRTOS/Src/tasks.c ****                     case eDeleted:
7295:FreeRTOS/Src/tasks.c ****                         cStatus = tskDELETED_CHAR;
7296:FreeRTOS/Src/tasks.c ****                         break;
7297:FreeRTOS/Src/tasks.c **** 
7298:FreeRTOS/Src/tasks.c ****                     case eInvalid: /* Fall through. */
7299:FreeRTOS/Src/tasks.c ****                     default:       /* Should not get here, but it is included
7300:FreeRTOS/Src/tasks.c ****                                     * to prevent static checking errors. */
7301:FreeRTOS/Src/tasks.c ****                         cStatus = ( char ) 0x00;
7302:FreeRTOS/Src/tasks.c ****                         break;
7303:FreeRTOS/Src/tasks.c ****                 }
7304:FreeRTOS/Src/tasks.c **** 
7305:FreeRTOS/Src/tasks.c ****                 /* Is there enough space in the buffer to hold task name? */
7306:FreeRTOS/Src/tasks.c ****                 if( ( uxConsumedBufferLength + configMAX_TASK_NAME_LEN ) <= uxBufferLength )
7307:FreeRTOS/Src/tasks.c ****                 {
7308:FreeRTOS/Src/tasks.c ****                     /* Write the task name to the string, padding with spaces so it
7309:FreeRTOS/Src/tasks.c ****                      * can be printed in tabular form more easily. */
7310:FreeRTOS/Src/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
7311:FreeRTOS/Src/tasks.c ****                     /* Do not count the terminating null character. */
7312:FreeRTOS/Src/tasks.c ****                     uxConsumedBufferLength = uxConsumedBufferLength + ( configMAX_TASK_NAME_LEN - 1
7313:FreeRTOS/Src/tasks.c **** 
7314:FreeRTOS/Src/tasks.c ****                     /* Is there space left in the buffer? -1 is done because snprintf
7315:FreeRTOS/Src/tasks.c ****                      * writes a terminating null character. So we are essentially
7316:FreeRTOS/Src/tasks.c ****                      * checking if the buffer has space to write at least one non-null
7317:FreeRTOS/Src/tasks.c ****                      * character. */
7318:FreeRTOS/Src/tasks.c ****                     if( uxConsumedBufferLength < ( uxBufferLength - 1U ) )
7319:FreeRTOS/Src/tasks.c ****                     {
7320:FreeRTOS/Src/tasks.c ****                         /* Write the rest of the string. */
7321:FreeRTOS/Src/tasks.c ****                         #if ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) )
7322:FreeRTOS/Src/tasks.c ****                             /* MISRA Ref 21.6.1 [snprintf for utility] */
7323:FreeRTOS/Src/tasks.c ****                             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/ma
7324:FreeRTOS/Src/tasks.c ****                             /* coverity[misra_c_2012_rule_21_6_violation] */
7325:FreeRTOS/Src/tasks.c ****                             iSnprintfReturnValue = snprintf( pcWriteBuffer,
7326:FreeRTOS/Src/tasks.c ****                                                              uxBufferLength - uxConsumedBufferLengt
7327:FreeRTOS/Src/tasks.c ****                                                              "\t%c\t%u\t%u\t%u\t0x%x\r\n",
7328:FreeRTOS/Src/tasks.c ****                                                              cStatus,
7329:FreeRTOS/Src/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7330:FreeRTOS/Src/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7331:FreeRTOS/Src/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7332:FreeRTOS/Src/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7333:FreeRTOS/Src/tasks.c ****                         #else /* ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 
7334:FreeRTOS/Src/tasks.c ****                             /* MISRA Ref 21.6.1 [snprintf for utility] */
7335:FreeRTOS/Src/tasks.c ****                             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/ma
7336:FreeRTOS/Src/tasks.c ****                             /* coverity[misra_c_2012_rule_21_6_violation] */
7337:FreeRTOS/Src/tasks.c ****                             iSnprintfReturnValue = snprintf( pcWriteBuffer,
7338:FreeRTOS/Src/tasks.c ****                                                              uxBufferLength - uxConsumedBufferLengt
7339:FreeRTOS/Src/tasks.c ****                                                              "\t%c\t%u\t%u\t%u\r\n",
7340:FreeRTOS/Src/tasks.c ****                                                              cStatus,
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 149


7341:FreeRTOS/Src/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7342:FreeRTOS/Src/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7343:FreeRTOS/Src/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7344:FreeRTOS/Src/tasks.c ****                         #endif /* ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1
7345:FreeRTOS/Src/tasks.c ****                         uxCharsWrittenBySnprintf = prvSnprintfReturnValueToCharsWritten( iSnprintfR
7346:FreeRTOS/Src/tasks.c **** 
7347:FreeRTOS/Src/tasks.c ****                         uxConsumedBufferLength += uxCharsWrittenBySnprintf;
7348:FreeRTOS/Src/tasks.c ****                         pcWriteBuffer += uxCharsWrittenBySnprintf;
7349:FreeRTOS/Src/tasks.c ****                     }
7350:FreeRTOS/Src/tasks.c ****                     else
7351:FreeRTOS/Src/tasks.c ****                     {
7352:FreeRTOS/Src/tasks.c ****                         xOutputBufferFull = pdTRUE;
7353:FreeRTOS/Src/tasks.c ****                     }
7354:FreeRTOS/Src/tasks.c ****                 }
7355:FreeRTOS/Src/tasks.c ****                 else
7356:FreeRTOS/Src/tasks.c ****                 {
7357:FreeRTOS/Src/tasks.c ****                     xOutputBufferFull = pdTRUE;
7358:FreeRTOS/Src/tasks.c ****                 }
7359:FreeRTOS/Src/tasks.c **** 
7360:FreeRTOS/Src/tasks.c ****                 if( xOutputBufferFull == pdTRUE )
7361:FreeRTOS/Src/tasks.c ****                 {
7362:FreeRTOS/Src/tasks.c ****                     break;
7363:FreeRTOS/Src/tasks.c ****                 }
7364:FreeRTOS/Src/tasks.c ****             }
7365:FreeRTOS/Src/tasks.c **** 
7366:FreeRTOS/Src/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
7367:FreeRTOS/Src/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
7368:FreeRTOS/Src/tasks.c ****             vPortFree( pxTaskStatusArray );
7369:FreeRTOS/Src/tasks.c ****         }
7370:FreeRTOS/Src/tasks.c ****         else
7371:FreeRTOS/Src/tasks.c ****         {
7372:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7373:FreeRTOS/Src/tasks.c ****         }
7374:FreeRTOS/Src/tasks.c **** 
7375:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskListTasks();
7376:FreeRTOS/Src/tasks.c ****     }
7377:FreeRTOS/Src/tasks.c **** 
7378:FreeRTOS/Src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
7379:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
7380:FreeRTOS/Src/tasks.c **** 
7381:FreeRTOS/Src/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
7382:FreeRTOS/Src/tasks.c **** 
7383:FreeRTOS/Src/tasks.c ****     void vTaskGetRunTimeStatistics( char * pcWriteBuffer,
7384:FreeRTOS/Src/tasks.c ****                                     size_t uxBufferLength )
7385:FreeRTOS/Src/tasks.c ****     {
7386:FreeRTOS/Src/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
7387:FreeRTOS/Src/tasks.c ****         size_t uxConsumedBufferLength = 0;
7388:FreeRTOS/Src/tasks.c ****         size_t uxCharsWrittenBySnprintf;
7389:FreeRTOS/Src/tasks.c ****         int iSnprintfReturnValue;
7390:FreeRTOS/Src/tasks.c ****         BaseType_t xOutputBufferFull = pdFALSE;
7391:FreeRTOS/Src/tasks.c ****         UBaseType_t uxArraySize, x;
7392:FreeRTOS/Src/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime = 0;
7393:FreeRTOS/Src/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulStatsAsPercentage;
7394:FreeRTOS/Src/tasks.c **** 
7395:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskGetRunTimeStatistics( pcWriteBuffer, uxBufferLength );
7396:FreeRTOS/Src/tasks.c **** 
7397:FreeRTOS/Src/tasks.c ****         /*
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 150


7398:FreeRTOS/Src/tasks.c ****          * PLEASE NOTE:
7399:FreeRTOS/Src/tasks.c ****          *
7400:FreeRTOS/Src/tasks.c ****          * This function is provided for convenience only, and is used by many
7401:FreeRTOS/Src/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
7402:FreeRTOS/Src/tasks.c ****          * scheduler.
7403:FreeRTOS/Src/tasks.c ****          *
7404:FreeRTOS/Src/tasks.c ****          * vTaskGetRunTimeStatistics() calls uxTaskGetSystemState(), then formats part
7405:FreeRTOS/Src/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
7406:FreeRTOS/Src/tasks.c ****          * displays the amount of time each task has spent in the Running state
7407:FreeRTOS/Src/tasks.c ****          * in both absolute and percentage terms.
7408:FreeRTOS/Src/tasks.c ****          *
7409:FreeRTOS/Src/tasks.c ****          * vTaskGetRunTimeStatistics() has a dependency on the snprintf() C library
7410:FreeRTOS/Src/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
7411:FreeRTOS/Src/tasks.c ****          * provide different results on different platforms.  An alternative,
7412:FreeRTOS/Src/tasks.c ****          * tiny, third party, and limited functionality implementation of
7413:FreeRTOS/Src/tasks.c ****          * snprintf() is provided in many of the FreeRTOS/Demo sub-directories in
7414:FreeRTOS/Src/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
7415:FreeRTOS/Src/tasks.c ****          * a full snprintf() implementation!).
7416:FreeRTOS/Src/tasks.c ****          *
7417:FreeRTOS/Src/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
7418:FreeRTOS/Src/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
7419:FreeRTOS/Src/tasks.c ****          * through a call to vTaskGetRunTimeStatistics().
7420:FreeRTOS/Src/tasks.c ****          */
7421:FreeRTOS/Src/tasks.c **** 
7422:FreeRTOS/Src/tasks.c ****         /* Make sure the write buffer does not contain a string. */
7423:FreeRTOS/Src/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
7424:FreeRTOS/Src/tasks.c **** 
7425:FreeRTOS/Src/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
7426:FreeRTOS/Src/tasks.c ****          * function is executing. */
7427:FreeRTOS/Src/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
7428:FreeRTOS/Src/tasks.c **** 
7429:FreeRTOS/Src/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
7430:FreeRTOS/Src/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
7431:FreeRTOS/Src/tasks.c ****          * equate to NULL. */
7432:FreeRTOS/Src/tasks.c ****         /* MISRA Ref 11.5.1 [Malloc memory assignment] */
7433:FreeRTOS/Src/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115
7434:FreeRTOS/Src/tasks.c ****         /* coverity[misra_c_2012_rule_11_5_violation] */
7435:FreeRTOS/Src/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
7436:FreeRTOS/Src/tasks.c **** 
7437:FreeRTOS/Src/tasks.c ****         if( pxTaskStatusArray != NULL )
7438:FreeRTOS/Src/tasks.c ****         {
7439:FreeRTOS/Src/tasks.c ****             /* Generate the (binary) data. */
7440:FreeRTOS/Src/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
7441:FreeRTOS/Src/tasks.c **** 
7442:FreeRTOS/Src/tasks.c ****             /* For percentage calculations. */
7443:FreeRTOS/Src/tasks.c ****             ulTotalTime /= ( ( configRUN_TIME_COUNTER_TYPE ) 100U );
7444:FreeRTOS/Src/tasks.c **** 
7445:FreeRTOS/Src/tasks.c ****             /* Avoid divide by zero errors. */
7446:FreeRTOS/Src/tasks.c ****             if( ulTotalTime > 0U )
7447:FreeRTOS/Src/tasks.c ****             {
7448:FreeRTOS/Src/tasks.c ****                 /* Create a human readable table from the binary data. */
7449:FreeRTOS/Src/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
7450:FreeRTOS/Src/tasks.c ****                 {
7451:FreeRTOS/Src/tasks.c ****                     /* What percentage of the total run time has the task used?
7452:FreeRTOS/Src/tasks.c ****                      * This will always be rounded down to the nearest integer.
7453:FreeRTOS/Src/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
7454:FreeRTOS/Src/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 151


7455:FreeRTOS/Src/tasks.c **** 
7456:FreeRTOS/Src/tasks.c ****                     /* Is there enough space in the buffer to hold task name? */
7457:FreeRTOS/Src/tasks.c ****                     if( ( uxConsumedBufferLength + configMAX_TASK_NAME_LEN ) <= uxBufferLength )
7458:FreeRTOS/Src/tasks.c ****                     {
7459:FreeRTOS/Src/tasks.c ****                         /* Write the task name to the string, padding with
7460:FreeRTOS/Src/tasks.c ****                          * spaces so it can be printed in tabular form more
7461:FreeRTOS/Src/tasks.c ****                          * easily. */
7462:FreeRTOS/Src/tasks.c ****                         pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ]
7463:FreeRTOS/Src/tasks.c ****                         /* Do not count the terminating null character. */
7464:FreeRTOS/Src/tasks.c ****                         uxConsumedBufferLength = uxConsumedBufferLength + ( configMAX_TASK_NAME_LEN
7465:FreeRTOS/Src/tasks.c **** 
7466:FreeRTOS/Src/tasks.c ****                         /* Is there space left in the buffer? -1 is done because snprintf
7467:FreeRTOS/Src/tasks.c ****                          * writes a terminating null character. So we are essentially
7468:FreeRTOS/Src/tasks.c ****                          * checking if the buffer has space to write at least one non-null
7469:FreeRTOS/Src/tasks.c ****                          * character. */
7470:FreeRTOS/Src/tasks.c ****                         if( uxConsumedBufferLength < ( uxBufferLength - 1U ) )
7471:FreeRTOS/Src/tasks.c ****                         {
7472:FreeRTOS/Src/tasks.c ****                             if( ulStatsAsPercentage > 0U )
7473:FreeRTOS/Src/tasks.c ****                             {
7474:FreeRTOS/Src/tasks.c ****                                 #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
7475:FreeRTOS/Src/tasks.c ****                                 {
7476:FreeRTOS/Src/tasks.c ****                                     /* MISRA Ref 21.6.1 [snprintf for utility] */
7477:FreeRTOS/Src/tasks.c ****                                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel
7478:FreeRTOS/Src/tasks.c ****                                     /* coverity[misra_c_2012_rule_21_6_violation] */
7479:FreeRTOS/Src/tasks.c ****                                     iSnprintfReturnValue = snprintf( pcWriteBuffer,
7480:FreeRTOS/Src/tasks.c ****                                                                      uxBufferLength - uxConsumedBuf
7481:FreeRTOS/Src/tasks.c ****                                                                      "\t%lu\t\t%lu%%\r\n",
7482:FreeRTOS/Src/tasks.c ****                                                                      pxTaskStatusArray[ x ].ulRunTi
7483:FreeRTOS/Src/tasks.c ****                                                                      ulStatsAsPercentage );
7484:FreeRTOS/Src/tasks.c ****                                 }
7485:FreeRTOS/Src/tasks.c ****                                 #else /* ifdef portLU_PRINTF_SPECIFIER_REQUIRED */
7486:FreeRTOS/Src/tasks.c ****                                 {
7487:FreeRTOS/Src/tasks.c ****                                     /* sizeof( int ) == sizeof( long ) so a smaller
7488:FreeRTOS/Src/tasks.c ****                                      * printf() library can be used. */
7489:FreeRTOS/Src/tasks.c ****                                     /* MISRA Ref 21.6.1 [snprintf for utility] */
7490:FreeRTOS/Src/tasks.c ****                                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel
7491:FreeRTOS/Src/tasks.c ****                                     /* coverity[misra_c_2012_rule_21_6_violation] */
7492:FreeRTOS/Src/tasks.c ****                                     iSnprintfReturnValue = snprintf( pcWriteBuffer,
7493:FreeRTOS/Src/tasks.c ****                                                                      uxBufferLength - uxConsumedBuf
7494:FreeRTOS/Src/tasks.c ****                                                                      "\t%u\t\t%u%%\r\n",
7495:FreeRTOS/Src/tasks.c ****                                                                      ( unsigned int ) pxTaskStatusA
7496:FreeRTOS/Src/tasks.c ****                                                                      ( unsigned int ) ulStatsAsPerc
7497:FreeRTOS/Src/tasks.c ****                                 }
7498:FreeRTOS/Src/tasks.c ****                                 #endif /* ifdef portLU_PRINTF_SPECIFIER_REQUIRED */
7499:FreeRTOS/Src/tasks.c ****                             }
7500:FreeRTOS/Src/tasks.c ****                             else
7501:FreeRTOS/Src/tasks.c ****                             {
7502:FreeRTOS/Src/tasks.c ****                                 /* If the percentage is zero here then the task has
7503:FreeRTOS/Src/tasks.c ****                                  * consumed less than 1% of the total run time. */
7504:FreeRTOS/Src/tasks.c ****                                 #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
7505:FreeRTOS/Src/tasks.c ****                                 {
7506:FreeRTOS/Src/tasks.c ****                                     /* MISRA Ref 21.6.1 [snprintf for utility] */
7507:FreeRTOS/Src/tasks.c ****                                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel
7508:FreeRTOS/Src/tasks.c ****                                     /* coverity[misra_c_2012_rule_21_6_violation] */
7509:FreeRTOS/Src/tasks.c ****                                     iSnprintfReturnValue = snprintf( pcWriteBuffer,
7510:FreeRTOS/Src/tasks.c ****                                                                      uxBufferLength - uxConsumedBuf
7511:FreeRTOS/Src/tasks.c ****                                                                      "\t%lu\t\t<1%%\r\n",
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 152


7512:FreeRTOS/Src/tasks.c ****                                                                      pxTaskStatusArray[ x ].ulRunTi
7513:FreeRTOS/Src/tasks.c ****                                 }
7514:FreeRTOS/Src/tasks.c ****                                 #else
7515:FreeRTOS/Src/tasks.c ****                                 {
7516:FreeRTOS/Src/tasks.c ****                                     /* sizeof( int ) == sizeof( long ) so a smaller
7517:FreeRTOS/Src/tasks.c ****                                      * printf() library can be used. */
7518:FreeRTOS/Src/tasks.c ****                                     /* MISRA Ref 21.6.1 [snprintf for utility] */
7519:FreeRTOS/Src/tasks.c ****                                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel
7520:FreeRTOS/Src/tasks.c ****                                     /* coverity[misra_c_2012_rule_21_6_violation] */
7521:FreeRTOS/Src/tasks.c ****                                     iSnprintfReturnValue = snprintf( pcWriteBuffer,
7522:FreeRTOS/Src/tasks.c ****                                                                      uxBufferLength - uxConsumedBuf
7523:FreeRTOS/Src/tasks.c ****                                                                      "\t%u\t\t<1%%\r\n",
7524:FreeRTOS/Src/tasks.c ****                                                                      ( unsigned int ) pxTaskStatusA
7525:FreeRTOS/Src/tasks.c ****                                 }
7526:FreeRTOS/Src/tasks.c ****                                 #endif /* ifdef portLU_PRINTF_SPECIFIER_REQUIRED */
7527:FreeRTOS/Src/tasks.c ****                             }
7528:FreeRTOS/Src/tasks.c **** 
7529:FreeRTOS/Src/tasks.c ****                             uxCharsWrittenBySnprintf = prvSnprintfReturnValueToCharsWritten( iSnpri
7530:FreeRTOS/Src/tasks.c ****                             uxConsumedBufferLength += uxCharsWrittenBySnprintf;
7531:FreeRTOS/Src/tasks.c ****                             pcWriteBuffer += uxCharsWrittenBySnprintf;
7532:FreeRTOS/Src/tasks.c ****                         }
7533:FreeRTOS/Src/tasks.c ****                         else
7534:FreeRTOS/Src/tasks.c ****                         {
7535:FreeRTOS/Src/tasks.c ****                             xOutputBufferFull = pdTRUE;
7536:FreeRTOS/Src/tasks.c ****                         }
7537:FreeRTOS/Src/tasks.c ****                     }
7538:FreeRTOS/Src/tasks.c ****                     else
7539:FreeRTOS/Src/tasks.c ****                     {
7540:FreeRTOS/Src/tasks.c ****                         xOutputBufferFull = pdTRUE;
7541:FreeRTOS/Src/tasks.c ****                     }
7542:FreeRTOS/Src/tasks.c **** 
7543:FreeRTOS/Src/tasks.c ****                     if( xOutputBufferFull == pdTRUE )
7544:FreeRTOS/Src/tasks.c ****                     {
7545:FreeRTOS/Src/tasks.c ****                         break;
7546:FreeRTOS/Src/tasks.c ****                     }
7547:FreeRTOS/Src/tasks.c ****                 }
7548:FreeRTOS/Src/tasks.c ****             }
7549:FreeRTOS/Src/tasks.c ****             else
7550:FreeRTOS/Src/tasks.c ****             {
7551:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7552:FreeRTOS/Src/tasks.c ****             }
7553:FreeRTOS/Src/tasks.c **** 
7554:FreeRTOS/Src/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
7555:FreeRTOS/Src/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
7556:FreeRTOS/Src/tasks.c ****             vPortFree( pxTaskStatusArray );
7557:FreeRTOS/Src/tasks.c ****         }
7558:FreeRTOS/Src/tasks.c ****         else
7559:FreeRTOS/Src/tasks.c ****         {
7560:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7561:FreeRTOS/Src/tasks.c ****         }
7562:FreeRTOS/Src/tasks.c **** 
7563:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskGetRunTimeStatistics();
7564:FreeRTOS/Src/tasks.c ****     }
7565:FreeRTOS/Src/tasks.c **** 
7566:FreeRTOS/Src/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
7567:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7568:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 153


7569:FreeRTOS/Src/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
7570:FreeRTOS/Src/tasks.c **** {
7571:FreeRTOS/Src/tasks.c ****     TickType_t uxReturn;
7572:FreeRTOS/Src/tasks.c **** 
7573:FreeRTOS/Src/tasks.c ****     traceENTER_uxTaskResetEventItemValue();
7574:FreeRTOS/Src/tasks.c **** 
7575:FreeRTOS/Src/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
7576:FreeRTOS/Src/tasks.c **** 
7577:FreeRTOS/Src/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
7578:FreeRTOS/Src/tasks.c ****      * queues and semaphores. */
7579:FreeRTOS/Src/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
7580:FreeRTOS/Src/tasks.c **** 
7581:FreeRTOS/Src/tasks.c ****     traceRETURN_uxTaskResetEventItemValue( uxReturn );
7582:FreeRTOS/Src/tasks.c **** 
7583:FreeRTOS/Src/tasks.c ****     return uxReturn;
7584:FreeRTOS/Src/tasks.c **** }
7585:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7586:FreeRTOS/Src/tasks.c **** 
7587:FreeRTOS/Src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
7588:FreeRTOS/Src/tasks.c **** 
7589:FreeRTOS/Src/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
7590:FreeRTOS/Src/tasks.c ****     {
7591:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
7592:FreeRTOS/Src/tasks.c **** 
7593:FreeRTOS/Src/tasks.c ****         traceENTER_pvTaskIncrementMutexHeldCount();
7594:FreeRTOS/Src/tasks.c **** 
7595:FreeRTOS/Src/tasks.c ****         pxTCB = pxCurrentTCB;
7596:FreeRTOS/Src/tasks.c **** 
7597:FreeRTOS/Src/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
7598:FreeRTOS/Src/tasks.c ****          * then pxCurrentTCB will be NULL. */
7599:FreeRTOS/Src/tasks.c ****         if( pxTCB != NULL )
7600:FreeRTOS/Src/tasks.c ****         {
7601:FreeRTOS/Src/tasks.c ****             ( pxTCB->uxMutexesHeld )++;
7602:FreeRTOS/Src/tasks.c ****         }
7603:FreeRTOS/Src/tasks.c **** 
7604:FreeRTOS/Src/tasks.c ****         traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );
7605:FreeRTOS/Src/tasks.c **** 
7606:FreeRTOS/Src/tasks.c ****         return pxTCB;
7607:FreeRTOS/Src/tasks.c ****     }
7608:FreeRTOS/Src/tasks.c **** 
7609:FreeRTOS/Src/tasks.c **** #endif /* configUSE_MUTEXES */
7610:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7611:FreeRTOS/Src/tasks.c **** 
7612:FreeRTOS/Src/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
7613:FreeRTOS/Src/tasks.c **** 
7614:FreeRTOS/Src/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
7615:FreeRTOS/Src/tasks.c ****                                       BaseType_t xClearCountOnExit,
7616:FreeRTOS/Src/tasks.c ****                                       TickType_t xTicksToWait )
7617:FreeRTOS/Src/tasks.c ****     {
7618:FreeRTOS/Src/tasks.c ****         uint32_t ulReturn;
7619:FreeRTOS/Src/tasks.c ****         BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
7620:FreeRTOS/Src/tasks.c **** 
7621:FreeRTOS/Src/tasks.c ****         traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
7622:FreeRTOS/Src/tasks.c **** 
7623:FreeRTOS/Src/tasks.c ****         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
7624:FreeRTOS/Src/tasks.c **** 
7625:FreeRTOS/Src/tasks.c ****         /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 154


7626:FreeRTOS/Src/tasks.c ****          * non-deterministic operation. */
7627:FreeRTOS/Src/tasks.c ****         vTaskSuspendAll();
7628:FreeRTOS/Src/tasks.c ****         {
7629:FreeRTOS/Src/tasks.c ****             /* We MUST enter a critical section to atomically check if a notification
7630:FreeRTOS/Src/tasks.c ****              * has occurred and set the flag to indicate that we are waiting for
7631:FreeRTOS/Src/tasks.c ****              * a notification. If we do not do so, a notification sent from an ISR
7632:FreeRTOS/Src/tasks.c ****              * will get lost. */
7633:FreeRTOS/Src/tasks.c ****             taskENTER_CRITICAL();
7634:FreeRTOS/Src/tasks.c ****             {
7635:FreeRTOS/Src/tasks.c ****                 /* Only block if the notification count is not already non-zero. */
7636:FreeRTOS/Src/tasks.c ****                 if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
7637:FreeRTOS/Src/tasks.c ****                 {
7638:FreeRTOS/Src/tasks.c ****                     /* Mark this task as waiting for a notification. */
7639:FreeRTOS/Src/tasks.c ****                     pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
7640:FreeRTOS/Src/tasks.c **** 
7641:FreeRTOS/Src/tasks.c ****                     if( xTicksToWait > ( TickType_t ) 0 )
7642:FreeRTOS/Src/tasks.c ****                     {
7643:FreeRTOS/Src/tasks.c ****                         xShouldBlock = pdTRUE;
7644:FreeRTOS/Src/tasks.c ****                     }
7645:FreeRTOS/Src/tasks.c ****                     else
7646:FreeRTOS/Src/tasks.c ****                     {
7647:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
7648:FreeRTOS/Src/tasks.c ****                     }
7649:FreeRTOS/Src/tasks.c ****                 }
7650:FreeRTOS/Src/tasks.c ****                 else
7651:FreeRTOS/Src/tasks.c ****                 {
7652:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7653:FreeRTOS/Src/tasks.c ****                 }
7654:FreeRTOS/Src/tasks.c ****             }
7655:FreeRTOS/Src/tasks.c ****             taskEXIT_CRITICAL();
7656:FreeRTOS/Src/tasks.c **** 
7657:FreeRTOS/Src/tasks.c ****             /* We are now out of the critical section but the scheduler is still
7658:FreeRTOS/Src/tasks.c ****              * suspended, so we are safe to do non-deterministic operations such
7659:FreeRTOS/Src/tasks.c ****              * as prvAddCurrentTaskToDelayedList. */
7660:FreeRTOS/Src/tasks.c ****             if( xShouldBlock == pdTRUE )
7661:FreeRTOS/Src/tasks.c ****             {
7662:FreeRTOS/Src/tasks.c ****                 traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
7663:FreeRTOS/Src/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
7664:FreeRTOS/Src/tasks.c ****             }
7665:FreeRTOS/Src/tasks.c ****             else
7666:FreeRTOS/Src/tasks.c ****             {
7667:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7668:FreeRTOS/Src/tasks.c ****             }
7669:FreeRTOS/Src/tasks.c ****         }
7670:FreeRTOS/Src/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
7671:FreeRTOS/Src/tasks.c **** 
7672:FreeRTOS/Src/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so. */
7673:FreeRTOS/Src/tasks.c ****         if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
7674:FreeRTOS/Src/tasks.c ****         {
7675:FreeRTOS/Src/tasks.c ****             taskYIELD_WITHIN_API();
7676:FreeRTOS/Src/tasks.c ****         }
7677:FreeRTOS/Src/tasks.c ****         else
7678:FreeRTOS/Src/tasks.c ****         {
7679:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7680:FreeRTOS/Src/tasks.c ****         }
7681:FreeRTOS/Src/tasks.c **** 
7682:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 155


7683:FreeRTOS/Src/tasks.c ****         {
7684:FreeRTOS/Src/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
7685:FreeRTOS/Src/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
7686:FreeRTOS/Src/tasks.c **** 
7687:FreeRTOS/Src/tasks.c ****             if( ulReturn != 0U )
7688:FreeRTOS/Src/tasks.c ****             {
7689:FreeRTOS/Src/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
7690:FreeRTOS/Src/tasks.c ****                 {
7691:FreeRTOS/Src/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
7692:FreeRTOS/Src/tasks.c ****                 }
7693:FreeRTOS/Src/tasks.c ****                 else
7694:FreeRTOS/Src/tasks.c ****                 {
7695:FreeRTOS/Src/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
7696:FreeRTOS/Src/tasks.c ****                 }
7697:FreeRTOS/Src/tasks.c ****             }
7698:FreeRTOS/Src/tasks.c ****             else
7699:FreeRTOS/Src/tasks.c ****             {
7700:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7701:FreeRTOS/Src/tasks.c ****             }
7702:FreeRTOS/Src/tasks.c **** 
7703:FreeRTOS/Src/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
7704:FreeRTOS/Src/tasks.c ****         }
7705:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
7706:FreeRTOS/Src/tasks.c **** 
7707:FreeRTOS/Src/tasks.c ****         traceRETURN_ulTaskGenericNotifyTake( ulReturn );
7708:FreeRTOS/Src/tasks.c **** 
7709:FreeRTOS/Src/tasks.c ****         return ulReturn;
7710:FreeRTOS/Src/tasks.c ****     }
7711:FreeRTOS/Src/tasks.c **** 
7712:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
7713:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7714:FreeRTOS/Src/tasks.c **** 
7715:FreeRTOS/Src/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
7716:FreeRTOS/Src/tasks.c **** 
7717:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
7718:FreeRTOS/Src/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
7719:FreeRTOS/Src/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
7720:FreeRTOS/Src/tasks.c ****                                        uint32_t * pulNotificationValue,
7721:FreeRTOS/Src/tasks.c ****                                        TickType_t xTicksToWait )
7722:FreeRTOS/Src/tasks.c ****     {
7723:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
7724:FreeRTOS/Src/tasks.c **** 
7725:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnEx
7726:FreeRTOS/Src/tasks.c **** 
7727:FreeRTOS/Src/tasks.c ****         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
7728:FreeRTOS/Src/tasks.c **** 
7729:FreeRTOS/Src/tasks.c ****         /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
7730:FreeRTOS/Src/tasks.c ****          * non-deterministic operation. */
7731:FreeRTOS/Src/tasks.c ****         vTaskSuspendAll();
7732:FreeRTOS/Src/tasks.c ****         {
7733:FreeRTOS/Src/tasks.c ****             /* We MUST enter a critical section to atomically check and update the
7734:FreeRTOS/Src/tasks.c ****              * task notification value. If we do not do so, a notification from
7735:FreeRTOS/Src/tasks.c ****              * an ISR will get lost. */
7736:FreeRTOS/Src/tasks.c ****             taskENTER_CRITICAL();
7737:FreeRTOS/Src/tasks.c ****             {
7738:FreeRTOS/Src/tasks.c ****                 /* Only block if a notification is not already pending. */
7739:FreeRTOS/Src/tasks.c ****                 if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 156


7740:FreeRTOS/Src/tasks.c ****                 {
7741:FreeRTOS/Src/tasks.c ****                     /* Clear bits in the task's notification value as bits may get
7742:FreeRTOS/Src/tasks.c ****                      * set by the notifying task or interrupt. This can be used
7743:FreeRTOS/Src/tasks.c ****                      * to clear the value to zero. */
7744:FreeRTOS/Src/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
7745:FreeRTOS/Src/tasks.c **** 
7746:FreeRTOS/Src/tasks.c ****                     /* Mark this task as waiting for a notification. */
7747:FreeRTOS/Src/tasks.c ****                     pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
7748:FreeRTOS/Src/tasks.c **** 
7749:FreeRTOS/Src/tasks.c ****                     if( xTicksToWait > ( TickType_t ) 0 )
7750:FreeRTOS/Src/tasks.c ****                     {
7751:FreeRTOS/Src/tasks.c ****                         xShouldBlock = pdTRUE;
7752:FreeRTOS/Src/tasks.c ****                     }
7753:FreeRTOS/Src/tasks.c ****                     else
7754:FreeRTOS/Src/tasks.c ****                     {
7755:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
7756:FreeRTOS/Src/tasks.c ****                     }
7757:FreeRTOS/Src/tasks.c ****                 }
7758:FreeRTOS/Src/tasks.c ****                 else
7759:FreeRTOS/Src/tasks.c ****                 {
7760:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7761:FreeRTOS/Src/tasks.c ****                 }
7762:FreeRTOS/Src/tasks.c ****             }
7763:FreeRTOS/Src/tasks.c ****             taskEXIT_CRITICAL();
7764:FreeRTOS/Src/tasks.c **** 
7765:FreeRTOS/Src/tasks.c ****             /* We are now out of the critical section but the scheduler is still
7766:FreeRTOS/Src/tasks.c ****              * suspended, so we are safe to do non-deterministic operations such
7767:FreeRTOS/Src/tasks.c ****              * as prvAddCurrentTaskToDelayedList. */
7768:FreeRTOS/Src/tasks.c ****             if( xShouldBlock == pdTRUE )
7769:FreeRTOS/Src/tasks.c ****             {
7770:FreeRTOS/Src/tasks.c ****                 traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
7771:FreeRTOS/Src/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
7772:FreeRTOS/Src/tasks.c ****             }
7773:FreeRTOS/Src/tasks.c ****             else
7774:FreeRTOS/Src/tasks.c ****             {
7775:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7776:FreeRTOS/Src/tasks.c ****             }
7777:FreeRTOS/Src/tasks.c ****         }
7778:FreeRTOS/Src/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
7779:FreeRTOS/Src/tasks.c **** 
7780:FreeRTOS/Src/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so. */
7781:FreeRTOS/Src/tasks.c ****         if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
7782:FreeRTOS/Src/tasks.c ****         {
7783:FreeRTOS/Src/tasks.c ****             taskYIELD_WITHIN_API();
7784:FreeRTOS/Src/tasks.c ****         }
7785:FreeRTOS/Src/tasks.c ****         else
7786:FreeRTOS/Src/tasks.c ****         {
7787:FreeRTOS/Src/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7788:FreeRTOS/Src/tasks.c ****         }
7789:FreeRTOS/Src/tasks.c **** 
7790:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
7791:FreeRTOS/Src/tasks.c ****         {
7792:FreeRTOS/Src/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );
7793:FreeRTOS/Src/tasks.c **** 
7794:FreeRTOS/Src/tasks.c ****             if( pulNotificationValue != NULL )
7795:FreeRTOS/Src/tasks.c ****             {
7796:FreeRTOS/Src/tasks.c ****                 /* Output the current notification value, which may or may not
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 157


7797:FreeRTOS/Src/tasks.c ****                  * have changed. */
7798:FreeRTOS/Src/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
7799:FreeRTOS/Src/tasks.c ****             }
7800:FreeRTOS/Src/tasks.c **** 
7801:FreeRTOS/Src/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
7802:FreeRTOS/Src/tasks.c ****              * blocked state (because a notification was already pending) or the
7803:FreeRTOS/Src/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
7804:FreeRTOS/Src/tasks.c ****              * unblocked because of a timeout. */
7805:FreeRTOS/Src/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
7806:FreeRTOS/Src/tasks.c ****             {
7807:FreeRTOS/Src/tasks.c ****                 /* A notification was not received. */
7808:FreeRTOS/Src/tasks.c ****                 xReturn = pdFALSE;
7809:FreeRTOS/Src/tasks.c ****             }
7810:FreeRTOS/Src/tasks.c ****             else
7811:FreeRTOS/Src/tasks.c ****             {
7812:FreeRTOS/Src/tasks.c ****                 /* A notification was already pending or a notification was
7813:FreeRTOS/Src/tasks.c ****                  * received while the task was waiting. */
7814:FreeRTOS/Src/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
7815:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
7816:FreeRTOS/Src/tasks.c ****             }
7817:FreeRTOS/Src/tasks.c **** 
7818:FreeRTOS/Src/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
7819:FreeRTOS/Src/tasks.c ****         }
7820:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
7821:FreeRTOS/Src/tasks.c **** 
7822:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGenericNotifyWait( xReturn );
7823:FreeRTOS/Src/tasks.c **** 
7824:FreeRTOS/Src/tasks.c ****         return xReturn;
7825:FreeRTOS/Src/tasks.c ****     }
7826:FreeRTOS/Src/tasks.c **** 
7827:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
7828:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7829:FreeRTOS/Src/tasks.c **** 
7830:FreeRTOS/Src/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
7831:FreeRTOS/Src/tasks.c **** 
7832:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
7833:FreeRTOS/Src/tasks.c ****                                    UBaseType_t uxIndexToNotify,
7834:FreeRTOS/Src/tasks.c ****                                    uint32_t ulValue,
7835:FreeRTOS/Src/tasks.c ****                                    eNotifyAction eAction,
7836:FreeRTOS/Src/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
7837:FreeRTOS/Src/tasks.c ****     {
7838:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
7839:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn = pdPASS;
7840:FreeRTOS/Src/tasks.c ****         uint8_t ucOriginalNotifyState;
7841:FreeRTOS/Src/tasks.c **** 
7842:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviou
7843:FreeRTOS/Src/tasks.c **** 
7844:FreeRTOS/Src/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
7845:FreeRTOS/Src/tasks.c ****         configASSERT( xTaskToNotify );
7846:FreeRTOS/Src/tasks.c ****         pxTCB = xTaskToNotify;
7847:FreeRTOS/Src/tasks.c **** 
7848:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
7849:FreeRTOS/Src/tasks.c ****         {
7850:FreeRTOS/Src/tasks.c ****             if( pulPreviousNotificationValue != NULL )
7851:FreeRTOS/Src/tasks.c ****             {
7852:FreeRTOS/Src/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
7853:FreeRTOS/Src/tasks.c ****             }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 158


7854:FreeRTOS/Src/tasks.c **** 
7855:FreeRTOS/Src/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
7856:FreeRTOS/Src/tasks.c **** 
7857:FreeRTOS/Src/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
7858:FreeRTOS/Src/tasks.c **** 
7859:FreeRTOS/Src/tasks.c ****             switch( eAction )
7860:FreeRTOS/Src/tasks.c ****             {
7861:FreeRTOS/Src/tasks.c ****                 case eSetBits:
7862:FreeRTOS/Src/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
7863:FreeRTOS/Src/tasks.c ****                     break;
7864:FreeRTOS/Src/tasks.c **** 
7865:FreeRTOS/Src/tasks.c ****                 case eIncrement:
7866:FreeRTOS/Src/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
7867:FreeRTOS/Src/tasks.c ****                     break;
7868:FreeRTOS/Src/tasks.c **** 
7869:FreeRTOS/Src/tasks.c ****                 case eSetValueWithOverwrite:
7870:FreeRTOS/Src/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
7871:FreeRTOS/Src/tasks.c ****                     break;
7872:FreeRTOS/Src/tasks.c **** 
7873:FreeRTOS/Src/tasks.c ****                 case eSetValueWithoutOverwrite:
7874:FreeRTOS/Src/tasks.c **** 
7875:FreeRTOS/Src/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
7876:FreeRTOS/Src/tasks.c ****                     {
7877:FreeRTOS/Src/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
7878:FreeRTOS/Src/tasks.c ****                     }
7879:FreeRTOS/Src/tasks.c ****                     else
7880:FreeRTOS/Src/tasks.c ****                     {
7881:FreeRTOS/Src/tasks.c ****                         /* The value could not be written to the task. */
7882:FreeRTOS/Src/tasks.c ****                         xReturn = pdFAIL;
7883:FreeRTOS/Src/tasks.c ****                     }
7884:FreeRTOS/Src/tasks.c **** 
7885:FreeRTOS/Src/tasks.c ****                     break;
7886:FreeRTOS/Src/tasks.c **** 
7887:FreeRTOS/Src/tasks.c ****                 case eNoAction:
7888:FreeRTOS/Src/tasks.c **** 
7889:FreeRTOS/Src/tasks.c ****                     /* The task is being notified without its notify value being
7890:FreeRTOS/Src/tasks.c ****                      * updated. */
7891:FreeRTOS/Src/tasks.c ****                     break;
7892:FreeRTOS/Src/tasks.c **** 
7893:FreeRTOS/Src/tasks.c ****                 default:
7894:FreeRTOS/Src/tasks.c **** 
7895:FreeRTOS/Src/tasks.c ****                     /* Should not get here if all enums are handled.
7896:FreeRTOS/Src/tasks.c ****                      * Artificially force an assert by testing a value the
7897:FreeRTOS/Src/tasks.c ****                      * compiler can't assume is const. */
7898:FreeRTOS/Src/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
7899:FreeRTOS/Src/tasks.c **** 
7900:FreeRTOS/Src/tasks.c ****                     break;
7901:FreeRTOS/Src/tasks.c ****             }
7902:FreeRTOS/Src/tasks.c **** 
7903:FreeRTOS/Src/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
7904:FreeRTOS/Src/tasks.c **** 
7905:FreeRTOS/Src/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
7906:FreeRTOS/Src/tasks.c ****              * notification then unblock it now. */
7907:FreeRTOS/Src/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
7908:FreeRTOS/Src/tasks.c ****             {
7909:FreeRTOS/Src/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
7910:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 159


7911:FreeRTOS/Src/tasks.c **** 
7912:FreeRTOS/Src/tasks.c ****                 /* The task should not have been on an event list. */
7913:FreeRTOS/Src/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
7914:FreeRTOS/Src/tasks.c **** 
7915:FreeRTOS/Src/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
7916:FreeRTOS/Src/tasks.c ****                 {
7917:FreeRTOS/Src/tasks.c ****                     /* If a task is blocked waiting for a notification then
7918:FreeRTOS/Src/tasks.c ****                      * xNextTaskUnblockTime might be set to the blocked task's time
7919:FreeRTOS/Src/tasks.c ****                      * out time.  If the task is unblocked for a reason other than
7920:FreeRTOS/Src/tasks.c ****                      * a timeout xNextTaskUnblockTime is normally left unchanged,
7921:FreeRTOS/Src/tasks.c ****                      * because it will automatically get reset to a new value when
7922:FreeRTOS/Src/tasks.c ****                      * the tick count equals xNextTaskUnblockTime.  However if
7923:FreeRTOS/Src/tasks.c ****                      * tickless idling is used it might be more important to enter
7924:FreeRTOS/Src/tasks.c ****                      * sleep mode at the earliest possible time - so reset
7925:FreeRTOS/Src/tasks.c ****                      * xNextTaskUnblockTime here to ensure it is updated at the
7926:FreeRTOS/Src/tasks.c ****                      * earliest possible time. */
7927:FreeRTOS/Src/tasks.c ****                     prvResetNextTaskUnblockTime();
7928:FreeRTOS/Src/tasks.c ****                 }
7929:FreeRTOS/Src/tasks.c ****                 #endif
7930:FreeRTOS/Src/tasks.c **** 
7931:FreeRTOS/Src/tasks.c ****                 /* Check if the notified task has a priority above the currently
7932:FreeRTOS/Src/tasks.c ****                  * executing task. */
7933:FreeRTOS/Src/tasks.c ****                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
7934:FreeRTOS/Src/tasks.c ****             }
7935:FreeRTOS/Src/tasks.c ****             else
7936:FreeRTOS/Src/tasks.c ****             {
7937:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7938:FreeRTOS/Src/tasks.c ****             }
7939:FreeRTOS/Src/tasks.c ****         }
7940:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
7941:FreeRTOS/Src/tasks.c **** 
7942:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGenericNotify( xReturn );
7943:FreeRTOS/Src/tasks.c **** 
7944:FreeRTOS/Src/tasks.c ****         return xReturn;
7945:FreeRTOS/Src/tasks.c ****     }
7946:FreeRTOS/Src/tasks.c **** 
7947:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
7948:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
7949:FreeRTOS/Src/tasks.c **** 
7950:FreeRTOS/Src/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
7951:FreeRTOS/Src/tasks.c **** 
7952:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
7953:FreeRTOS/Src/tasks.c ****                                           UBaseType_t uxIndexToNotify,
7954:FreeRTOS/Src/tasks.c ****                                           uint32_t ulValue,
7955:FreeRTOS/Src/tasks.c ****                                           eNotifyAction eAction,
7956:FreeRTOS/Src/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
7957:FreeRTOS/Src/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
7958:FreeRTOS/Src/tasks.c ****     {
7959:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
7960:FreeRTOS/Src/tasks.c ****         uint8_t ucOriginalNotifyState;
7961:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn = pdPASS;
7962:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
7963:FreeRTOS/Src/tasks.c **** 
7964:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pul
7965:FreeRTOS/Src/tasks.c **** 
7966:FreeRTOS/Src/tasks.c ****         configASSERT( xTaskToNotify );
7967:FreeRTOS/Src/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 160


7968:FreeRTOS/Src/tasks.c **** 
7969:FreeRTOS/Src/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
7970:FreeRTOS/Src/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
7971:FreeRTOS/Src/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
7972:FreeRTOS/Src/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
7973:FreeRTOS/Src/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
7974:FreeRTOS/Src/tasks.c ****          * is defined in FreeRTOSConfig.h then
7975:FreeRTOS/Src/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
7976:FreeRTOS/Src/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
7977:FreeRTOS/Src/tasks.c ****          * been assigned a priority above the configured maximum system call
7978:FreeRTOS/Src/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
7979:FreeRTOS/Src/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
7980:FreeRTOS/Src/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
7981:FreeRTOS/Src/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
7982:FreeRTOS/Src/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
7983:FreeRTOS/Src/tasks.c ****          * provided on the following link:
7984:FreeRTOS/Src/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
7985:FreeRTOS/Src/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
7986:FreeRTOS/Src/tasks.c **** 
7987:FreeRTOS/Src/tasks.c ****         pxTCB = xTaskToNotify;
7988:FreeRTOS/Src/tasks.c **** 
7989:FreeRTOS/Src/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
7990:FreeRTOS/Src/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
7991:FreeRTOS/Src/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
7992:FreeRTOS/Src/tasks.c ****         uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
7993:FreeRTOS/Src/tasks.c ****         {
7994:FreeRTOS/Src/tasks.c ****             if( pulPreviousNotificationValue != NULL )
7995:FreeRTOS/Src/tasks.c ****             {
7996:FreeRTOS/Src/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
7997:FreeRTOS/Src/tasks.c ****             }
7998:FreeRTOS/Src/tasks.c **** 
7999:FreeRTOS/Src/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
8000:FreeRTOS/Src/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
8001:FreeRTOS/Src/tasks.c **** 
8002:FreeRTOS/Src/tasks.c ****             switch( eAction )
8003:FreeRTOS/Src/tasks.c ****             {
8004:FreeRTOS/Src/tasks.c ****                 case eSetBits:
8005:FreeRTOS/Src/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
8006:FreeRTOS/Src/tasks.c ****                     break;
8007:FreeRTOS/Src/tasks.c **** 
8008:FreeRTOS/Src/tasks.c ****                 case eIncrement:
8009:FreeRTOS/Src/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
8010:FreeRTOS/Src/tasks.c ****                     break;
8011:FreeRTOS/Src/tasks.c **** 
8012:FreeRTOS/Src/tasks.c ****                 case eSetValueWithOverwrite:
8013:FreeRTOS/Src/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
8014:FreeRTOS/Src/tasks.c ****                     break;
8015:FreeRTOS/Src/tasks.c **** 
8016:FreeRTOS/Src/tasks.c ****                 case eSetValueWithoutOverwrite:
8017:FreeRTOS/Src/tasks.c **** 
8018:FreeRTOS/Src/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
8019:FreeRTOS/Src/tasks.c ****                     {
8020:FreeRTOS/Src/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
8021:FreeRTOS/Src/tasks.c ****                     }
8022:FreeRTOS/Src/tasks.c ****                     else
8023:FreeRTOS/Src/tasks.c ****                     {
8024:FreeRTOS/Src/tasks.c ****                         /* The value could not be written to the task. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 161


8025:FreeRTOS/Src/tasks.c ****                         xReturn = pdFAIL;
8026:FreeRTOS/Src/tasks.c ****                     }
8027:FreeRTOS/Src/tasks.c **** 
8028:FreeRTOS/Src/tasks.c ****                     break;
8029:FreeRTOS/Src/tasks.c **** 
8030:FreeRTOS/Src/tasks.c ****                 case eNoAction:
8031:FreeRTOS/Src/tasks.c **** 
8032:FreeRTOS/Src/tasks.c ****                     /* The task is being notified without its notify value being
8033:FreeRTOS/Src/tasks.c ****                      * updated. */
8034:FreeRTOS/Src/tasks.c ****                     break;
8035:FreeRTOS/Src/tasks.c **** 
8036:FreeRTOS/Src/tasks.c ****                 default:
8037:FreeRTOS/Src/tasks.c **** 
8038:FreeRTOS/Src/tasks.c ****                     /* Should not get here if all enums are handled.
8039:FreeRTOS/Src/tasks.c ****                      * Artificially force an assert by testing a value the
8040:FreeRTOS/Src/tasks.c ****                      * compiler can't assume is const. */
8041:FreeRTOS/Src/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
8042:FreeRTOS/Src/tasks.c ****                     break;
8043:FreeRTOS/Src/tasks.c ****             }
8044:FreeRTOS/Src/tasks.c **** 
8045:FreeRTOS/Src/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
8046:FreeRTOS/Src/tasks.c **** 
8047:FreeRTOS/Src/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
8048:FreeRTOS/Src/tasks.c ****              * notification then unblock it now. */
8049:FreeRTOS/Src/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
8050:FreeRTOS/Src/tasks.c ****             {
8051:FreeRTOS/Src/tasks.c ****                 /* The task should not have been on an event list. */
8052:FreeRTOS/Src/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
8053:FreeRTOS/Src/tasks.c **** 
8054:FreeRTOS/Src/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
8055:FreeRTOS/Src/tasks.c ****                 {
8056:FreeRTOS/Src/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
8057:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
8058:FreeRTOS/Src/tasks.c ****                 }
8059:FreeRTOS/Src/tasks.c ****                 else
8060:FreeRTOS/Src/tasks.c ****                 {
8061:FreeRTOS/Src/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
8062:FreeRTOS/Src/tasks.c ****                      * this task pending until the scheduler is resumed. */
8063:FreeRTOS/Src/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
8064:FreeRTOS/Src/tasks.c ****                 }
8065:FreeRTOS/Src/tasks.c **** 
8066:FreeRTOS/Src/tasks.c ****                 #if ( configNUMBER_OF_CORES == 1 )
8067:FreeRTOS/Src/tasks.c ****                 {
8068:FreeRTOS/Src/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
8069:FreeRTOS/Src/tasks.c ****                     {
8070:FreeRTOS/Src/tasks.c ****                         /* The notified task has a priority above the currently
8071:FreeRTOS/Src/tasks.c ****                          * executing task so a yield is required. */
8072:FreeRTOS/Src/tasks.c ****                         if( pxHigherPriorityTaskWoken != NULL )
8073:FreeRTOS/Src/tasks.c ****                         {
8074:FreeRTOS/Src/tasks.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
8075:FreeRTOS/Src/tasks.c ****                         }
8076:FreeRTOS/Src/tasks.c **** 
8077:FreeRTOS/Src/tasks.c ****                         /* Mark that a yield is pending in case the user is not
8078:FreeRTOS/Src/tasks.c ****                          * using the "xHigherPriorityTaskWoken" parameter to an ISR
8079:FreeRTOS/Src/tasks.c ****                          * safe FreeRTOS function. */
8080:FreeRTOS/Src/tasks.c ****                         xYieldPendings[ 0 ] = pdTRUE;
8081:FreeRTOS/Src/tasks.c ****                     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 162


8082:FreeRTOS/Src/tasks.c ****                     else
8083:FreeRTOS/Src/tasks.c ****                     {
8084:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
8085:FreeRTOS/Src/tasks.c ****                     }
8086:FreeRTOS/Src/tasks.c ****                 }
8087:FreeRTOS/Src/tasks.c ****                 #else /* #if ( configNUMBER_OF_CORES == 1 ) */
8088:FreeRTOS/Src/tasks.c ****                 {
8089:FreeRTOS/Src/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
8090:FreeRTOS/Src/tasks.c ****                     {
8091:FreeRTOS/Src/tasks.c ****                         prvYieldForTask( pxTCB );
8092:FreeRTOS/Src/tasks.c **** 
8093:FreeRTOS/Src/tasks.c ****                         if( xYieldPendings[ portGET_CORE_ID() ] == pdTRUE )
8094:FreeRTOS/Src/tasks.c ****                         {
8095:FreeRTOS/Src/tasks.c ****                             if( pxHigherPriorityTaskWoken != NULL )
8096:FreeRTOS/Src/tasks.c ****                             {
8097:FreeRTOS/Src/tasks.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
8098:FreeRTOS/Src/tasks.c ****                             }
8099:FreeRTOS/Src/tasks.c ****                         }
8100:FreeRTOS/Src/tasks.c ****                     }
8101:FreeRTOS/Src/tasks.c ****                     #endif /* if ( configUSE_PREEMPTION == 1 ) */
8102:FreeRTOS/Src/tasks.c ****                 }
8103:FreeRTOS/Src/tasks.c ****                 #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
8104:FreeRTOS/Src/tasks.c ****             }
8105:FreeRTOS/Src/tasks.c ****         }
8106:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
8107:FreeRTOS/Src/tasks.c **** 
8108:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGenericNotifyFromISR( xReturn );
8109:FreeRTOS/Src/tasks.c **** 
8110:FreeRTOS/Src/tasks.c ****         return xReturn;
8111:FreeRTOS/Src/tasks.c ****     }
8112:FreeRTOS/Src/tasks.c **** 
8113:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
8114:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8115:FreeRTOS/Src/tasks.c **** 
8116:FreeRTOS/Src/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
8117:FreeRTOS/Src/tasks.c **** 
8118:FreeRTOS/Src/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
8119:FreeRTOS/Src/tasks.c ****                                         UBaseType_t uxIndexToNotify,
8120:FreeRTOS/Src/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
8121:FreeRTOS/Src/tasks.c ****     {
8122:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
8123:FreeRTOS/Src/tasks.c ****         uint8_t ucOriginalNotifyState;
8124:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
8125:FreeRTOS/Src/tasks.c **** 
8126:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityT
8127:FreeRTOS/Src/tasks.c **** 
8128:FreeRTOS/Src/tasks.c ****         configASSERT( xTaskToNotify );
8129:FreeRTOS/Src/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
8130:FreeRTOS/Src/tasks.c **** 
8131:FreeRTOS/Src/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
8132:FreeRTOS/Src/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
8133:FreeRTOS/Src/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
8134:FreeRTOS/Src/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
8135:FreeRTOS/Src/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
8136:FreeRTOS/Src/tasks.c ****          * is defined in FreeRTOSConfig.h then
8137:FreeRTOS/Src/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
8138:FreeRTOS/Src/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 163


8139:FreeRTOS/Src/tasks.c ****          * been assigned a priority above the configured maximum system call
8140:FreeRTOS/Src/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
8141:FreeRTOS/Src/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
8142:FreeRTOS/Src/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
8143:FreeRTOS/Src/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
8144:FreeRTOS/Src/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
8145:FreeRTOS/Src/tasks.c ****          * provided on the following link:
8146:FreeRTOS/Src/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
8147:FreeRTOS/Src/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
8148:FreeRTOS/Src/tasks.c **** 
8149:FreeRTOS/Src/tasks.c ****         pxTCB = xTaskToNotify;
8150:FreeRTOS/Src/tasks.c **** 
8151:FreeRTOS/Src/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
8152:FreeRTOS/Src/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
8153:FreeRTOS/Src/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
8154:FreeRTOS/Src/tasks.c ****         uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
8155:FreeRTOS/Src/tasks.c ****         {
8156:FreeRTOS/Src/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
8157:FreeRTOS/Src/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
8158:FreeRTOS/Src/tasks.c **** 
8159:FreeRTOS/Src/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
8160:FreeRTOS/Src/tasks.c ****              * semaphore. */
8161:FreeRTOS/Src/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
8162:FreeRTOS/Src/tasks.c **** 
8163:FreeRTOS/Src/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
8164:FreeRTOS/Src/tasks.c **** 
8165:FreeRTOS/Src/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
8166:FreeRTOS/Src/tasks.c ****              * notification then unblock it now. */
8167:FreeRTOS/Src/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
8168:FreeRTOS/Src/tasks.c ****             {
8169:FreeRTOS/Src/tasks.c ****                 /* The task should not have been on an event list. */
8170:FreeRTOS/Src/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
8171:FreeRTOS/Src/tasks.c **** 
8172:FreeRTOS/Src/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
8173:FreeRTOS/Src/tasks.c ****                 {
8174:FreeRTOS/Src/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
8175:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
8176:FreeRTOS/Src/tasks.c ****                 }
8177:FreeRTOS/Src/tasks.c ****                 else
8178:FreeRTOS/Src/tasks.c ****                 {
8179:FreeRTOS/Src/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
8180:FreeRTOS/Src/tasks.c ****                      * this task pending until the scheduler is resumed. */
8181:FreeRTOS/Src/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
8182:FreeRTOS/Src/tasks.c ****                 }
8183:FreeRTOS/Src/tasks.c **** 
8184:FreeRTOS/Src/tasks.c ****                 #if ( configNUMBER_OF_CORES == 1 )
8185:FreeRTOS/Src/tasks.c ****                 {
8186:FreeRTOS/Src/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
8187:FreeRTOS/Src/tasks.c ****                     {
8188:FreeRTOS/Src/tasks.c ****                         /* The notified task has a priority above the currently
8189:FreeRTOS/Src/tasks.c ****                          * executing task so a yield is required. */
8190:FreeRTOS/Src/tasks.c ****                         if( pxHigherPriorityTaskWoken != NULL )
8191:FreeRTOS/Src/tasks.c ****                         {
8192:FreeRTOS/Src/tasks.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
8193:FreeRTOS/Src/tasks.c ****                         }
8194:FreeRTOS/Src/tasks.c **** 
8195:FreeRTOS/Src/tasks.c ****                         /* Mark that a yield is pending in case the user is not
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 164


8196:FreeRTOS/Src/tasks.c ****                          * using the "xHigherPriorityTaskWoken" parameter in an ISR
8197:FreeRTOS/Src/tasks.c ****                          * safe FreeRTOS function. */
8198:FreeRTOS/Src/tasks.c ****                         xYieldPendings[ 0 ] = pdTRUE;
8199:FreeRTOS/Src/tasks.c ****                     }
8200:FreeRTOS/Src/tasks.c ****                     else
8201:FreeRTOS/Src/tasks.c ****                     {
8202:FreeRTOS/Src/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
8203:FreeRTOS/Src/tasks.c ****                     }
8204:FreeRTOS/Src/tasks.c ****                 }
8205:FreeRTOS/Src/tasks.c ****                 #else /* #if ( configNUMBER_OF_CORES == 1 ) */
8206:FreeRTOS/Src/tasks.c ****                 {
8207:FreeRTOS/Src/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
8208:FreeRTOS/Src/tasks.c ****                     {
8209:FreeRTOS/Src/tasks.c ****                         prvYieldForTask( pxTCB );
8210:FreeRTOS/Src/tasks.c **** 
8211:FreeRTOS/Src/tasks.c ****                         if( xYieldPendings[ portGET_CORE_ID() ] == pdTRUE )
8212:FreeRTOS/Src/tasks.c ****                         {
8213:FreeRTOS/Src/tasks.c ****                             if( pxHigherPriorityTaskWoken != NULL )
8214:FreeRTOS/Src/tasks.c ****                             {
8215:FreeRTOS/Src/tasks.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
8216:FreeRTOS/Src/tasks.c ****                             }
8217:FreeRTOS/Src/tasks.c ****                         }
8218:FreeRTOS/Src/tasks.c ****                     }
8219:FreeRTOS/Src/tasks.c ****                     #endif /* #if ( configUSE_PREEMPTION == 1 ) */
8220:FreeRTOS/Src/tasks.c ****                 }
8221:FreeRTOS/Src/tasks.c ****                 #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
8222:FreeRTOS/Src/tasks.c ****             }
8223:FreeRTOS/Src/tasks.c ****         }
8224:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
8225:FreeRTOS/Src/tasks.c **** 
8226:FreeRTOS/Src/tasks.c ****         traceRETURN_vTaskGenericNotifyGiveFromISR();
8227:FreeRTOS/Src/tasks.c ****     }
8228:FreeRTOS/Src/tasks.c **** 
8229:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
8230:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8231:FreeRTOS/Src/tasks.c **** 
8232:FreeRTOS/Src/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
8233:FreeRTOS/Src/tasks.c **** 
8234:FreeRTOS/Src/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
8235:FreeRTOS/Src/tasks.c ****                                              UBaseType_t uxIndexToClear )
8236:FreeRTOS/Src/tasks.c ****     {
8237:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
8238:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
8239:FreeRTOS/Src/tasks.c **** 
8240:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
8241:FreeRTOS/Src/tasks.c **** 
8242:FreeRTOS/Src/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
8243:FreeRTOS/Src/tasks.c **** 
8244:FreeRTOS/Src/tasks.c ****         /* If null is passed in here then it is the calling task that is having
8245:FreeRTOS/Src/tasks.c ****          * its notification state cleared. */
8246:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
8247:FreeRTOS/Src/tasks.c **** 
8248:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
8249:FreeRTOS/Src/tasks.c ****         {
8250:FreeRTOS/Src/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
8251:FreeRTOS/Src/tasks.c ****             {
8252:FreeRTOS/Src/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 165


8253:FreeRTOS/Src/tasks.c ****                 xReturn = pdPASS;
8254:FreeRTOS/Src/tasks.c ****             }
8255:FreeRTOS/Src/tasks.c ****             else
8256:FreeRTOS/Src/tasks.c ****             {
8257:FreeRTOS/Src/tasks.c ****                 xReturn = pdFAIL;
8258:FreeRTOS/Src/tasks.c ****             }
8259:FreeRTOS/Src/tasks.c ****         }
8260:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
8261:FreeRTOS/Src/tasks.c **** 
8262:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGenericNotifyStateClear( xReturn );
8263:FreeRTOS/Src/tasks.c **** 
8264:FreeRTOS/Src/tasks.c ****         return xReturn;
8265:FreeRTOS/Src/tasks.c ****     }
8266:FreeRTOS/Src/tasks.c **** 
8267:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
8268:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8269:FreeRTOS/Src/tasks.c **** 
8270:FreeRTOS/Src/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
8271:FreeRTOS/Src/tasks.c **** 
8272:FreeRTOS/Src/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
8273:FreeRTOS/Src/tasks.c ****                                             UBaseType_t uxIndexToClear,
8274:FreeRTOS/Src/tasks.c ****                                             uint32_t ulBitsToClear )
8275:FreeRTOS/Src/tasks.c ****     {
8276:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
8277:FreeRTOS/Src/tasks.c ****         uint32_t ulReturn;
8278:FreeRTOS/Src/tasks.c **** 
8279:FreeRTOS/Src/tasks.c ****         traceENTER_ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
8280:FreeRTOS/Src/tasks.c **** 
8281:FreeRTOS/Src/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
8282:FreeRTOS/Src/tasks.c **** 
8283:FreeRTOS/Src/tasks.c ****         /* If null is passed in here then it is the calling task that is having
8284:FreeRTOS/Src/tasks.c ****          * its notification state cleared. */
8285:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
8286:FreeRTOS/Src/tasks.c **** 
8287:FreeRTOS/Src/tasks.c ****         taskENTER_CRITICAL();
8288:FreeRTOS/Src/tasks.c ****         {
8289:FreeRTOS/Src/tasks.c ****             /* Return the notification as it was before the bits were cleared,
8290:FreeRTOS/Src/tasks.c ****              * then clear the bit mask. */
8291:FreeRTOS/Src/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
8292:FreeRTOS/Src/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
8293:FreeRTOS/Src/tasks.c ****         }
8294:FreeRTOS/Src/tasks.c ****         taskEXIT_CRITICAL();
8295:FreeRTOS/Src/tasks.c **** 
8296:FreeRTOS/Src/tasks.c ****         traceRETURN_ulTaskGenericNotifyValueClear( ulReturn );
8297:FreeRTOS/Src/tasks.c **** 
8298:FreeRTOS/Src/tasks.c ****         return ulReturn;
8299:FreeRTOS/Src/tasks.c ****     }
8300:FreeRTOS/Src/tasks.c **** 
8301:FreeRTOS/Src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
8302:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8303:FreeRTOS/Src/tasks.c **** 
8304:FreeRTOS/Src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
8305:FreeRTOS/Src/tasks.c **** 
8306:FreeRTOS/Src/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetRunTimeCounter( const TaskHandle_t xTask )
8307:FreeRTOS/Src/tasks.c ****     {
8308:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
8309:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 166


8310:FreeRTOS/Src/tasks.c ****         traceENTER_ulTaskGetRunTimeCounter( xTask );
8311:FreeRTOS/Src/tasks.c **** 
8312:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
8313:FreeRTOS/Src/tasks.c **** 
8314:FreeRTOS/Src/tasks.c ****         traceRETURN_ulTaskGetRunTimeCounter( pxTCB->ulRunTimeCounter );
8315:FreeRTOS/Src/tasks.c **** 
8316:FreeRTOS/Src/tasks.c ****         return pxTCB->ulRunTimeCounter;
8317:FreeRTOS/Src/tasks.c ****     }
8318:FreeRTOS/Src/tasks.c **** 
8319:FreeRTOS/Src/tasks.c **** #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
8320:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8321:FreeRTOS/Src/tasks.c **** 
8322:FreeRTOS/Src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
8323:FreeRTOS/Src/tasks.c **** 
8324:FreeRTOS/Src/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetRunTimePercent( const TaskHandle_t xTask )
8325:FreeRTOS/Src/tasks.c ****     {
8326:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
8327:FreeRTOS/Src/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
8328:FreeRTOS/Src/tasks.c **** 
8329:FreeRTOS/Src/tasks.c ****         traceENTER_ulTaskGetRunTimePercent( xTask );
8330:FreeRTOS/Src/tasks.c **** 
8331:FreeRTOS/Src/tasks.c ****         ulTotalTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
8332:FreeRTOS/Src/tasks.c **** 
8333:FreeRTOS/Src/tasks.c ****         /* For percentage calculations. */
8334:FreeRTOS/Src/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
8335:FreeRTOS/Src/tasks.c **** 
8336:FreeRTOS/Src/tasks.c ****         /* Avoid divide by zero errors. */
8337:FreeRTOS/Src/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
8338:FreeRTOS/Src/tasks.c ****         {
8339:FreeRTOS/Src/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
8340:FreeRTOS/Src/tasks.c ****             ulReturn = pxTCB->ulRunTimeCounter / ulTotalTime;
8341:FreeRTOS/Src/tasks.c ****         }
8342:FreeRTOS/Src/tasks.c ****         else
8343:FreeRTOS/Src/tasks.c ****         {
8344:FreeRTOS/Src/tasks.c ****             ulReturn = 0;
8345:FreeRTOS/Src/tasks.c ****         }
8346:FreeRTOS/Src/tasks.c **** 
8347:FreeRTOS/Src/tasks.c ****         traceRETURN_ulTaskGetRunTimePercent( ulReturn );
8348:FreeRTOS/Src/tasks.c **** 
8349:FreeRTOS/Src/tasks.c ****         return ulReturn;
8350:FreeRTOS/Src/tasks.c ****     }
8351:FreeRTOS/Src/tasks.c **** 
8352:FreeRTOS/Src/tasks.c **** #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
8353:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8354:FreeRTOS/Src/tasks.c **** 
8355:FreeRTOS/Src/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
8356:FreeRTOS/Src/tasks.c **** 
8357:FreeRTOS/Src/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
8358:FreeRTOS/Src/tasks.c ****     {
8359:FreeRTOS/Src/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulReturn = 0;
8360:FreeRTOS/Src/tasks.c ****         BaseType_t i;
8361:FreeRTOS/Src/tasks.c **** 
8362:FreeRTOS/Src/tasks.c ****         traceENTER_ulTaskGetIdleRunTimeCounter();
8363:FreeRTOS/Src/tasks.c **** 
8364:FreeRTOS/Src/tasks.c ****         for( i = 0; i < ( BaseType_t ) configNUMBER_OF_CORES; i++ )
8365:FreeRTOS/Src/tasks.c ****         {
8366:FreeRTOS/Src/tasks.c ****             ulReturn += xIdleTaskHandles[ i ]->ulRunTimeCounter;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 167


8367:FreeRTOS/Src/tasks.c ****         }
8368:FreeRTOS/Src/tasks.c **** 
8369:FreeRTOS/Src/tasks.c ****         traceRETURN_ulTaskGetIdleRunTimeCounter( ulReturn );
8370:FreeRTOS/Src/tasks.c **** 
8371:FreeRTOS/Src/tasks.c ****         return ulReturn;
8372:FreeRTOS/Src/tasks.c ****     }
8373:FreeRTOS/Src/tasks.c **** 
8374:FreeRTOS/Src/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
8375:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8376:FreeRTOS/Src/tasks.c **** 
8377:FreeRTOS/Src/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
8378:FreeRTOS/Src/tasks.c **** 
8379:FreeRTOS/Src/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
8380:FreeRTOS/Src/tasks.c ****     {
8381:FreeRTOS/Src/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
8382:FreeRTOS/Src/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter = 0;
8383:FreeRTOS/Src/tasks.c ****         BaseType_t i;
8384:FreeRTOS/Src/tasks.c **** 
8385:FreeRTOS/Src/tasks.c ****         traceENTER_ulTaskGetIdleRunTimePercent();
8386:FreeRTOS/Src/tasks.c **** 
8387:FreeRTOS/Src/tasks.c ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE() * configNUMBER_OF_CORES;
8388:FreeRTOS/Src/tasks.c **** 
8389:FreeRTOS/Src/tasks.c ****         /* For percentage calculations. */
8390:FreeRTOS/Src/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
8391:FreeRTOS/Src/tasks.c **** 
8392:FreeRTOS/Src/tasks.c ****         /* Avoid divide by zero errors. */
8393:FreeRTOS/Src/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
8394:FreeRTOS/Src/tasks.c ****         {
8395:FreeRTOS/Src/tasks.c ****             for( i = 0; i < ( BaseType_t ) configNUMBER_OF_CORES; i++ )
8396:FreeRTOS/Src/tasks.c ****             {
8397:FreeRTOS/Src/tasks.c ****                 ulRunTimeCounter += xIdleTaskHandles[ i ]->ulRunTimeCounter;
8398:FreeRTOS/Src/tasks.c ****             }
8399:FreeRTOS/Src/tasks.c **** 
8400:FreeRTOS/Src/tasks.c ****             ulReturn = ulRunTimeCounter / ulTotalTime;
8401:FreeRTOS/Src/tasks.c ****         }
8402:FreeRTOS/Src/tasks.c ****         else
8403:FreeRTOS/Src/tasks.c ****         {
8404:FreeRTOS/Src/tasks.c ****             ulReturn = 0;
8405:FreeRTOS/Src/tasks.c ****         }
8406:FreeRTOS/Src/tasks.c **** 
8407:FreeRTOS/Src/tasks.c ****         traceRETURN_ulTaskGetIdleRunTimePercent( ulReturn );
8408:FreeRTOS/Src/tasks.c **** 
8409:FreeRTOS/Src/tasks.c ****         return ulReturn;
8410:FreeRTOS/Src/tasks.c ****     }
8411:FreeRTOS/Src/tasks.c **** 
8412:FreeRTOS/Src/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
8413:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8414:FreeRTOS/Src/tasks.c **** 
8415:FreeRTOS/Src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
8416:FreeRTOS/Src/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
8417:FreeRTOS/Src/tasks.c **** {
 899              		.loc 1 8417 1 view -0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              		.loc 1 8417 1 is_stmt 0 view .LVU248
 904 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 168


 905              	.LCFI11:
 906              		.cfi_def_cfa_offset 24
 907              		.cfi_offset 4, -24
 908              		.cfi_offset 5, -20
 909              		.cfi_offset 6, -16
 910              		.cfi_offset 7, -12
 911              		.cfi_offset 8, -8
 912              		.cfi_offset 14, -4
 913 0004 0446     		mov	r4, r0
 914 0006 0D46     		mov	r5, r1
8418:FreeRTOS/Src/tasks.c ****     TickType_t xTimeToWake;
 915              		.loc 1 8418 5 is_stmt 1 view .LVU249
8419:FreeRTOS/Src/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 916              		.loc 1 8419 5 view .LVU250
 917              		.loc 1 8419 22 is_stmt 0 view .LVU251
 918 0008 254B     		ldr	r3, .L71
 919 000a 1E68     		ldr	r6, [r3]
 920              	.LVL70:
8420:FreeRTOS/Src/tasks.c ****     List_t * const pxDelayedList = pxDelayedTaskList;
 921              		.loc 1 8420 5 is_stmt 1 view .LVU252
 922              		.loc 1 8420 20 is_stmt 0 view .LVU253
 923 000c 254B     		ldr	r3, .L71+4
 924 000e 1F68     		ldr	r7, [r3]
 925              	.LVL71:
8421:FreeRTOS/Src/tasks.c ****     List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 926              		.loc 1 8421 5 is_stmt 1 view .LVU254
 927              		.loc 1 8421 20 is_stmt 0 view .LVU255
 928 0010 254B     		ldr	r3, .L71+8
 929 0012 D3F80080 		ldr	r8, [r3]
 930              	.LVL72:
8422:FreeRTOS/Src/tasks.c **** 
8423:FreeRTOS/Src/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
8424:FreeRTOS/Src/tasks.c ****     {
8425:FreeRTOS/Src/tasks.c ****         /* About to enter a delayed list, so ensure the ucDelayAborted flag is
8426:FreeRTOS/Src/tasks.c ****          * reset to pdFALSE so it can be detected as having been set to pdTRUE
8427:FreeRTOS/Src/tasks.c ****          * when the task leaves the Blocked state. */
8428:FreeRTOS/Src/tasks.c ****         pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
8429:FreeRTOS/Src/tasks.c ****     }
8430:FreeRTOS/Src/tasks.c ****     #endif
8431:FreeRTOS/Src/tasks.c **** 
8432:FreeRTOS/Src/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
8433:FreeRTOS/Src/tasks.c ****      * as the same list item is used for both lists. */
8434:FreeRTOS/Src/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 931              		.loc 1 8434 5 is_stmt 1 view .LVU256
 932              		.loc 1 8434 38 is_stmt 0 view .LVU257
 933 0016 254B     		ldr	r3, .L71+12
 934 0018 1868     		ldr	r0, [r3]
 935              	.LVL73:
 936              		.loc 1 8434 9 view .LVU258
 937 001a 0430     		adds	r0, r0, #4
 938 001c FFF7FEFF 		bl	uxListRemove
 939              	.LVL74:
 940              		.loc 1 8434 7 discriminator 1 view .LVU259
 941 0020 48B9     		cbnz	r0, .L65
8435:FreeRTOS/Src/tasks.c ****     {
8436:FreeRTOS/Src/tasks.c ****         /* The current task must be in a ready list, so there is no need to
8437:FreeRTOS/Src/tasks.c ****          * check, and the port reset macro can be called directly. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 169


8438:FreeRTOS/Src/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 942              		.loc 1 8438 9 is_stmt 1 view .LVU260
 943 0022 224B     		ldr	r3, .L71+12
 944 0024 1B68     		ldr	r3, [r3]
 945 0026 DB6A     		ldr	r3, [r3, #44]
 946 0028 0122     		movs	r2, #1
 947 002a 9A40     		lsls	r2, r2, r3
 948 002c 2049     		ldr	r1, .L71+16
 949 002e 0B68     		ldr	r3, [r1]
 950 0030 23EA0203 		bic	r3, r3, r2
 951 0034 0B60     		str	r3, [r1]
 952              	.L65:
8439:FreeRTOS/Src/tasks.c ****     }
8440:FreeRTOS/Src/tasks.c ****     else
8441:FreeRTOS/Src/tasks.c ****     {
8442:FreeRTOS/Src/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 953              		.loc 1 8442 33 view .LVU261
8443:FreeRTOS/Src/tasks.c ****     }
8444:FreeRTOS/Src/tasks.c **** 
8445:FreeRTOS/Src/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
8446:FreeRTOS/Src/tasks.c ****     {
8447:FreeRTOS/Src/tasks.c ****         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 954              		.loc 1 8447 9 view .LVU262
 955              		.loc 1 8447 11 is_stmt 0 view .LVU263
 956 0036 B4F1FF3F 		cmp	r4, #-1
 957 003a 0DD0     		beq	.L70
 958              	.L66:
8448:FreeRTOS/Src/tasks.c ****         {
8449:FreeRTOS/Src/tasks.c ****             /* Add the task to the suspended task list instead of a delayed task
8450:FreeRTOS/Src/tasks.c ****              * list to ensure it is not woken by a timing event.  It will block
8451:FreeRTOS/Src/tasks.c ****              * indefinitely. */
8452:FreeRTOS/Src/tasks.c ****             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
8453:FreeRTOS/Src/tasks.c ****         }
8454:FreeRTOS/Src/tasks.c ****         else
8455:FreeRTOS/Src/tasks.c ****         {
8456:FreeRTOS/Src/tasks.c ****             /* Calculate the time at which the task should be woken if the event
8457:FreeRTOS/Src/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the
8458:FreeRTOS/Src/tasks.c ****              * kernel will manage it correctly. */
8459:FreeRTOS/Src/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
 959              		.loc 1 8459 13 is_stmt 1 view .LVU264
 960              		.loc 1 8459 25 is_stmt 0 view .LVU265
 961 003c 3444     		add	r4, r4, r6
 962              	.LVL75:
8460:FreeRTOS/Src/tasks.c **** 
8461:FreeRTOS/Src/tasks.c ****             /* The list item will be inserted in wake time order. */
8462:FreeRTOS/Src/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 963              		.loc 1 8462 13 is_stmt 1 view .LVU266
 964 003e 1B4B     		ldr	r3, .L71+12
 965 0040 1B68     		ldr	r3, [r3]
 966 0042 5C60     		str	r4, [r3, #4]
8463:FreeRTOS/Src/tasks.c **** 
8464:FreeRTOS/Src/tasks.c ****             if( xTimeToWake < xConstTickCount )
 967              		.loc 1 8464 13 view .LVU267
 968              		.loc 1 8464 15 is_stmt 0 view .LVU268
 969 0044 A642     		cmp	r6, r4
 970 0046 1DD9     		bls	.L68
8465:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 170


8466:FreeRTOS/Src/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow
8467:FreeRTOS/Src/tasks.c ****                  * list. */
8468:FreeRTOS/Src/tasks.c ****                 traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 971              		.loc 1 8468 59 is_stmt 1 view .LVU269
8469:FreeRTOS/Src/tasks.c ****                 vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 972              		.loc 1 8469 17 view .LVU270
 973              		.loc 1 8469 68 is_stmt 0 view .LVU271
 974 0048 184B     		ldr	r3, .L71+12
 975 004a 1968     		ldr	r1, [r3]
 976              		.loc 1 8469 17 view .LVU272
 977 004c 0431     		adds	r1, r1, #4
 978 004e 4046     		mov	r0, r8
 979 0050 FFF7FEFF 		bl	vListInsert
 980              	.LVL76:
 981              	.L64:
8470:FreeRTOS/Src/tasks.c ****             }
8471:FreeRTOS/Src/tasks.c ****             else
8472:FreeRTOS/Src/tasks.c ****             {
8473:FreeRTOS/Src/tasks.c ****                 /* The wake time has not overflowed, so the current block list
8474:FreeRTOS/Src/tasks.c ****                  * is used. */
8475:FreeRTOS/Src/tasks.c ****                 traceMOVED_TASK_TO_DELAYED_LIST();
8476:FreeRTOS/Src/tasks.c ****                 vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
8477:FreeRTOS/Src/tasks.c **** 
8478:FreeRTOS/Src/tasks.c ****                 /* If the task entering the blocked state was placed at the
8479:FreeRTOS/Src/tasks.c ****                  * head of the list of blocked tasks then xNextTaskUnblockTime
8480:FreeRTOS/Src/tasks.c ****                  * needs to be updated too. */
8481:FreeRTOS/Src/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
8482:FreeRTOS/Src/tasks.c ****                 {
8483:FreeRTOS/Src/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
8484:FreeRTOS/Src/tasks.c ****                 }
8485:FreeRTOS/Src/tasks.c ****                 else
8486:FreeRTOS/Src/tasks.c ****                 {
8487:FreeRTOS/Src/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
8488:FreeRTOS/Src/tasks.c ****                 }
8489:FreeRTOS/Src/tasks.c ****             }
8490:FreeRTOS/Src/tasks.c ****         }
8491:FreeRTOS/Src/tasks.c ****     }
8492:FreeRTOS/Src/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
8493:FreeRTOS/Src/tasks.c ****     {
8494:FreeRTOS/Src/tasks.c ****         /* Calculate the time at which the task should be woken if the event
8495:FreeRTOS/Src/tasks.c ****          * does not occur.  This may overflow but this doesn't matter, the kernel
8496:FreeRTOS/Src/tasks.c ****          * will manage it correctly. */
8497:FreeRTOS/Src/tasks.c ****         xTimeToWake = xConstTickCount + xTicksToWait;
8498:FreeRTOS/Src/tasks.c **** 
8499:FreeRTOS/Src/tasks.c ****         /* The list item will be inserted in wake time order. */
8500:FreeRTOS/Src/tasks.c ****         listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
8501:FreeRTOS/Src/tasks.c **** 
8502:FreeRTOS/Src/tasks.c ****         if( xTimeToWake < xConstTickCount )
8503:FreeRTOS/Src/tasks.c ****         {
8504:FreeRTOS/Src/tasks.c ****             traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
8505:FreeRTOS/Src/tasks.c ****             /* Wake time has overflowed.  Place this item in the overflow list. */
8506:FreeRTOS/Src/tasks.c ****             vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
8507:FreeRTOS/Src/tasks.c ****         }
8508:FreeRTOS/Src/tasks.c ****         else
8509:FreeRTOS/Src/tasks.c ****         {
8510:FreeRTOS/Src/tasks.c ****             traceMOVED_TASK_TO_DELAYED_LIST();
8511:FreeRTOS/Src/tasks.c ****             /* The wake time has not overflowed, so the current block list is used. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 171


8512:FreeRTOS/Src/tasks.c ****             vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
8513:FreeRTOS/Src/tasks.c **** 
8514:FreeRTOS/Src/tasks.c ****             /* If the task entering the blocked state was placed at the head of the
8515:FreeRTOS/Src/tasks.c ****              * list of blocked tasks then xNextTaskUnblockTime needs to be updated
8516:FreeRTOS/Src/tasks.c ****              * too. */
8517:FreeRTOS/Src/tasks.c ****             if( xTimeToWake < xNextTaskUnblockTime )
8518:FreeRTOS/Src/tasks.c ****             {
8519:FreeRTOS/Src/tasks.c ****                 xNextTaskUnblockTime = xTimeToWake;
8520:FreeRTOS/Src/tasks.c ****             }
8521:FreeRTOS/Src/tasks.c ****             else
8522:FreeRTOS/Src/tasks.c ****             {
8523:FreeRTOS/Src/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
8524:FreeRTOS/Src/tasks.c ****             }
8525:FreeRTOS/Src/tasks.c ****         }
8526:FreeRTOS/Src/tasks.c **** 
8527:FreeRTOS/Src/tasks.c ****         /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
8528:FreeRTOS/Src/tasks.c ****         ( void ) xCanBlockIndefinitely;
8529:FreeRTOS/Src/tasks.c ****     }
8530:FreeRTOS/Src/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
8531:FreeRTOS/Src/tasks.c **** }
 982              		.loc 1 8531 1 view .LVU273
 983 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 984              	.LVL77:
 985              	.L70:
8447:FreeRTOS/Src/tasks.c ****         {
 986              		.loc 1 8447 47 discriminator 1 view .LVU274
 987 0058 002D     		cmp	r5, #0
 988 005a EFD0     		beq	.L66
8452:FreeRTOS/Src/tasks.c ****         }
 989              		.loc 1 8452 13 is_stmt 1 view .LVU275
 990              	.LBB48:
8452:FreeRTOS/Src/tasks.c ****         }
 991              		.loc 1 8452 13 view .LVU276
 992 005c 154A     		ldr	r2, .L71+20
 993 005e 5168     		ldr	r1, [r2, #4]
 994              	.LVL78:
8452:FreeRTOS/Src/tasks.c ****         }
 995              		.loc 1 8452 13 view .LVU277
8452:FreeRTOS/Src/tasks.c ****         }
 996              		.loc 1 8452 13 view .LVU278
8452:FreeRTOS/Src/tasks.c ****         }
 997              		.loc 1 8452 13 view .LVU279
 998 0060 124B     		ldr	r3, .L71+12
 999 0062 1868     		ldr	r0, [r3]
 1000 0064 8160     		str	r1, [r0, #8]
8452:FreeRTOS/Src/tasks.c ****         }
 1001              		.loc 1 8452 13 view .LVU280
 1002 0066 1868     		ldr	r0, [r3]
 1003 0068 8C68     		ldr	r4, [r1, #8]
 1004              	.LVL79:
8452:FreeRTOS/Src/tasks.c ****         }
 1005              		.loc 1 8452 13 is_stmt 0 view .LVU281
 1006 006a C460     		str	r4, [r0, #12]
8452:FreeRTOS/Src/tasks.c ****         }
 1007              		.loc 1 8452 13 is_stmt 1 view .LVU282
 1008 006c 1868     		ldr	r0, [r3]
 1009 006e 0430     		adds	r0, r0, #4
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 172


 1010 0070 6060     		str	r0, [r4, #4]
8452:FreeRTOS/Src/tasks.c ****         }
 1011              		.loc 1 8452 13 view .LVU283
 1012 0072 1868     		ldr	r0, [r3]
 1013 0074 0430     		adds	r0, r0, #4
 1014 0076 8860     		str	r0, [r1, #8]
8452:FreeRTOS/Src/tasks.c ****         }
 1015              		.loc 1 8452 13 view .LVU284
 1016 0078 1B68     		ldr	r3, [r3]
 1017 007a 5A61     		str	r2, [r3, #20]
8452:FreeRTOS/Src/tasks.c ****         }
 1018              		.loc 1 8452 13 view .LVU285
 1019 007c 1368     		ldr	r3, [r2]
 1020 007e 0133     		adds	r3, r3, #1
 1021 0080 1360     		str	r3, [r2]
 1022              	.LBE48:
8452:FreeRTOS/Src/tasks.c ****         }
 1023              		.loc 1 8452 13 view .LVU286
 1024 0082 E7E7     		b	.L64
 1025              	.LVL80:
 1026              	.L68:
8475:FreeRTOS/Src/tasks.c ****                 vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 1027              		.loc 1 8475 50 view .LVU287
8476:FreeRTOS/Src/tasks.c **** 
 1028              		.loc 1 8476 17 view .LVU288
8476:FreeRTOS/Src/tasks.c **** 
 1029              		.loc 1 8476 60 is_stmt 0 view .LVU289
 1030 0084 094B     		ldr	r3, .L71+12
 1031 0086 1968     		ldr	r1, [r3]
8476:FreeRTOS/Src/tasks.c **** 
 1032              		.loc 1 8476 17 view .LVU290
 1033 0088 0431     		adds	r1, r1, #4
 1034 008a 3846     		mov	r0, r7
 1035 008c FFF7FEFF 		bl	vListInsert
 1036              	.LVL81:
8481:FreeRTOS/Src/tasks.c ****                 {
 1037              		.loc 1 8481 17 is_stmt 1 view .LVU291
8481:FreeRTOS/Src/tasks.c ****                 {
 1038              		.loc 1 8481 33 is_stmt 0 view .LVU292
 1039 0090 094B     		ldr	r3, .L71+24
 1040 0092 1B68     		ldr	r3, [r3]
8481:FreeRTOS/Src/tasks.c ****                 {
 1041              		.loc 1 8481 19 view .LVU293
 1042 0094 A342     		cmp	r3, r4
 1043 0096 DDD9     		bls	.L64
8483:FreeRTOS/Src/tasks.c ****                 }
 1044              		.loc 1 8483 21 is_stmt 1 view .LVU294
8483:FreeRTOS/Src/tasks.c ****                 }
 1045              		.loc 1 8483 42 is_stmt 0 view .LVU295
 1046 0098 074B     		ldr	r3, .L71+24
 1047 009a 1C60     		str	r4, [r3]
8487:FreeRTOS/Src/tasks.c ****                 }
 1048              		.loc 1 8487 45 is_stmt 1 view .LVU296
 1049              		.loc 1 8531 1 is_stmt 0 view .LVU297
 1050 009c DAE7     		b	.L64
 1051              	.L72:
 1052 009e 00BF     		.align	2
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 173


 1053              	.L71:
 1054 00a0 00000000 		.word	xTickCount
 1055 00a4 00000000 		.word	pxDelayedTaskList
 1056 00a8 00000000 		.word	pxOverflowDelayedTaskList
 1057 00ac 00000000 		.word	pxCurrentTCB
 1058 00b0 00000000 		.word	uxTopReadyPriority
 1059 00b4 00000000 		.word	xSuspendedTaskList
 1060 00b8 00000000 		.word	xNextTaskUnblockTime
 1061              		.cfi_endproc
 1062              	.LFE185:
 1064              		.section	.text.xTaskCreate,"ax",%progbits
 1065              		.align	1
 1066              		.global	xTaskCreate
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1071              	xTaskCreate:
 1072              	.LVL82:
 1073              	.LFB129:
1724:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
 1074              		.loc 1 1724 5 is_stmt 1 view -0
 1075              		.cfi_startproc
 1076              		@ args = 8, pretend = 0, frame = 0
 1077              		@ frame_needed = 0, uses_anonymous_args = 0
1724:FreeRTOS/Src/tasks.c ****         TCB_t * pxNewTCB;
 1078              		.loc 1 1724 5 is_stmt 0 view .LVU299
 1079 0000 10B5     		push	{r4, lr}
 1080              	.LCFI12:
 1081              		.cfi_def_cfa_offset 8
 1082              		.cfi_offset 4, -8
 1083              		.cfi_offset 14, -4
 1084 0002 82B0     		sub	sp, sp, #8
 1085              	.LCFI13:
 1086              		.cfi_def_cfa_offset 16
1725:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
 1087              		.loc 1 1725 9 is_stmt 1 view .LVU300
1726:FreeRTOS/Src/tasks.c **** 
 1088              		.loc 1 1726 9 view .LVU301
1728:FreeRTOS/Src/tasks.c **** 
 1089              		.loc 1 1728 108 view .LVU302
1730:FreeRTOS/Src/tasks.c **** 
 1090              		.loc 1 1730 9 view .LVU303
1730:FreeRTOS/Src/tasks.c **** 
 1091              		.loc 1 1730 20 is_stmt 0 view .LVU304
 1092 0004 059C     		ldr	r4, [sp, #20]
 1093 0006 0194     		str	r4, [sp, #4]
 1094 0008 049C     		ldr	r4, [sp, #16]
 1095 000a 0094     		str	r4, [sp]
 1096 000c FFF7FEFF 		bl	prvCreateTask
 1097              	.LVL83:
1732:FreeRTOS/Src/tasks.c ****         {
 1098              		.loc 1 1732 9 is_stmt 1 view .LVU305
1732:FreeRTOS/Src/tasks.c ****         {
 1099              		.loc 1 1732 11 is_stmt 0 view .LVU306
 1100 0010 20B1     		cbz	r0, .L75
1741:FreeRTOS/Src/tasks.c ****             xReturn = pdPASS;
 1101              		.loc 1 1741 13 is_stmt 1 view .LVU307
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 174


 1102 0012 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1103              	.LVL84:
1742:FreeRTOS/Src/tasks.c ****         }
 1104              		.loc 1 1742 13 view .LVU308
1742:FreeRTOS/Src/tasks.c ****         }
 1105              		.loc 1 1742 21 is_stmt 0 view .LVU309
 1106 0016 0120     		movs	r0, #1
 1107              	.LVL85:
 1108              	.L73:
1752:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 1109              		.loc 1 1752 5 view .LVU310
 1110 0018 02B0     		add	sp, sp, #8
 1111              	.LCFI14:
 1112              		.cfi_remember_state
 1113              		.cfi_def_cfa_offset 8
 1114              		@ sp needed
 1115 001a 10BD     		pop	{r4, pc}
 1116              	.LVL86:
 1117              	.L75:
 1118              	.LCFI15:
 1119              		.cfi_restore_state
1746:FreeRTOS/Src/tasks.c ****         }
 1120              		.loc 1 1746 21 view .LVU311
 1121 001c 4FF0FF30 		mov	r0, #-1
 1122              	.LVL87:
1749:FreeRTOS/Src/tasks.c **** 
 1123              		.loc 1 1749 43 is_stmt 1 view .LVU312
1751:FreeRTOS/Src/tasks.c ****     }
 1124              		.loc 1 1751 9 view .LVU313
1751:FreeRTOS/Src/tasks.c ****     }
 1125              		.loc 1 1751 16 is_stmt 0 view .LVU314
 1126 0020 FAE7     		b	.L73
 1127              		.cfi_endproc
 1128              	.LFE129:
 1130              		.section	.rodata.prvCreateIdleTasks.str1.4,"aMS",%progbits,1
 1131              		.align	2
 1132              	.LC0:
 1133 0000 49444C45 		.ascii	"IDLE\000"
 1133      00
 1134              		.section	.text.prvCreateIdleTasks,"ax",%progbits
 1135              		.align	1
 1136              		.syntax unified
 1137              		.thumb
 1138              		.thumb_func
 1140              	prvCreateIdleTasks:
 1141              	.LFB144:
3512:FreeRTOS/Src/tasks.c ****     BaseType_t xReturn = pdPASS;
 1142              		.loc 1 3512 1 is_stmt 1 view -0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 8
 1145              		@ frame_needed = 0, uses_anonymous_args = 0
 1146 0000 10B5     		push	{r4, lr}
 1147              	.LCFI16:
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 4, -8
 1150              		.cfi_offset 14, -4
 1151 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 175


 1152              	.LCFI17:
 1153              		.cfi_def_cfa_offset 24
3513:FreeRTOS/Src/tasks.c ****     BaseType_t xCoreID;
 1154              		.loc 1 3513 5 view .LVU316
 1155              	.LVL88:
3514:FreeRTOS/Src/tasks.c ****     char cIdleName[ configMAX_TASK_NAME_LEN ];
 1156              		.loc 1 3514 5 view .LVU317
3515:FreeRTOS/Src/tasks.c ****     TaskFunction_t pxIdleTaskFunction = NULL;
 1157              		.loc 1 3515 5 view .LVU318
3516:FreeRTOS/Src/tasks.c ****     BaseType_t xIdleTaskNameIndex;
 1158              		.loc 1 3516 5 view .LVU319
3517:FreeRTOS/Src/tasks.c **** 
 1159              		.loc 1 3517 5 view .LVU320
3519:FreeRTOS/Src/tasks.c ****     {
 1160              		.loc 1 3519 5 view .LVU321
3519:FreeRTOS/Src/tasks.c ****     {
 1161              		.loc 1 3519 29 is_stmt 0 view .LVU322
 1162 0004 0023     		movs	r3, #0
 1163              	.LVL89:
 1164              	.L78:
3519:FreeRTOS/Src/tasks.c ****     {
 1165              		.loc 1 3519 68 is_stmt 1 discriminator 1 view .LVU323
 1166 0006 072B     		cmp	r3, #7
 1167 0008 17DC     		bgt	.L79
3521:FreeRTOS/Src/tasks.c **** 
 1168              		.loc 1 3521 9 view .LVU324
3521:FreeRTOS/Src/tasks.c **** 
 1169              		.loc 1 3521 63 is_stmt 0 view .LVU325
 1170 000a 0F4A     		ldr	r2, .L85
 1171 000c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
3521:FreeRTOS/Src/tasks.c **** 
 1172              		.loc 1 3521 41 view .LVU326
 1173 000e 03F11001 		add	r1, r3, #16
 1174 0012 6944     		add	r1, sp, r1
 1175 0014 01F8082C 		strb	r2, [r1, #-8]
3526:FreeRTOS/Src/tasks.c ****         {
 1176              		.loc 1 3526 9 is_stmt 1 view .LVU327
3526:FreeRTOS/Src/tasks.c ****         {
 1177              		.loc 1 3526 11 is_stmt 0 view .LVU328
 1178 0018 7AB1     		cbz	r2, .L79
3532:FreeRTOS/Src/tasks.c ****         }
 1179              		.loc 1 3532 37 is_stmt 1 view .LVU329
3519:FreeRTOS/Src/tasks.c ****     {
 1180              		.loc 1 3519 128 discriminator 2 view .LVU330
 1181 001a 0133     		adds	r3, r3, #1
 1182              	.LVL90:
3519:FreeRTOS/Src/tasks.c ****     {
 1183              		.loc 1 3519 128 is_stmt 0 discriminator 2 view .LVU331
 1184 001c F3E7     		b	.L78
 1185              	.LVL91:
 1186              	.L83:
3541:FreeRTOS/Src/tasks.c ****         }
 1187              		.loc 1 3541 13 is_stmt 1 view .LVU332
3630:FreeRTOS/Src/tasks.c ****                                    cIdleName,
 1188              		.loc 1 3630 13 view .LVU333
3630:FreeRTOS/Src/tasks.c ****                                    cIdleName,
 1189              		.loc 1 3630 23 is_stmt 0 view .LVU334
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 176


 1190 001e 0B4B     		ldr	r3, .L85+4
 1191 0020 03EB8403 		add	r3, r3, r4, lsl #2
 1192 0024 0193     		str	r3, [sp, #4]
 1193 0026 0023     		movs	r3, #0
 1194 0028 0093     		str	r3, [sp]
 1195 002a 8022     		movs	r2, #128
 1196 002c 02A9     		add	r1, sp, #8
 1197 002e 0848     		ldr	r0, .L85+8
 1198              	.LVL92:
3630:FreeRTOS/Src/tasks.c ****                                    cIdleName,
 1199              		.loc 1 3630 23 view .LVU335
 1200 0030 FFF7FEFF 		bl	xTaskCreate
 1201              	.LVL93:
3640:FreeRTOS/Src/tasks.c ****         {
 1202              		.loc 1 3640 9 is_stmt 1 view .LVU336
3640:FreeRTOS/Src/tasks.c ****         {
 1203              		.loc 1 3640 11 is_stmt 0 view .LVU337
 1204 0034 28B1     		cbz	r0, .L77
3648:FreeRTOS/Src/tasks.c ****             }
 1205              		.loc 1 3648 41 is_stmt 1 view .LVU338
3537:FreeRTOS/Src/tasks.c ****     {
 1206              		.loc 1 3537 93 discriminator 2 view .LVU339
 1207 0036 0134     		adds	r4, r4, #1
 1208              	.LVL94:
3537:FreeRTOS/Src/tasks.c ****     {
 1209              		.loc 1 3537 93 is_stmt 0 discriminator 2 view .LVU340
 1210 0038 01E0     		b	.L82
 1211              	.LVL95:
 1212              	.L79:
3519:FreeRTOS/Src/tasks.c ****     {
 1213              		.loc 1 3519 29 view .LVU341
 1214 003a 0024     		movs	r4, #0
 1215 003c 0120     		movs	r0, #1
 1216              	.LVL96:
 1217              	.L82:
3537:FreeRTOS/Src/tasks.c ****     {
 1218              		.loc 1 3537 46 is_stmt 1 discriminator 1 view .LVU342
 1219 003e 002C     		cmp	r4, #0
 1220 0040 EDDD     		ble	.L83
 1221              	.L77:
3661:FreeRTOS/Src/tasks.c **** 
 1222              		.loc 1 3661 1 is_stmt 0 view .LVU343
 1223 0042 04B0     		add	sp, sp, #16
 1224              	.LCFI18:
 1225              		.cfi_def_cfa_offset 8
 1226              		@ sp needed
 1227 0044 10BD     		pop	{r4, pc}
 1228              	.LVL97:
 1229              	.L86:
3661:FreeRTOS/Src/tasks.c **** 
 1230              		.loc 1 3661 1 view .LVU344
 1231 0046 00BF     		.align	2
 1232              	.L85:
 1233 0048 00000000 		.word	.LC0
 1234 004c 00000000 		.word	xIdleTaskHandles
 1235 0050 00000000 		.word	prvIdleTask
 1236              		.cfi_endproc
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 177


 1237              	.LFE144:
 1239              		.section	.text.vTaskDelete,"ax",%progbits
 1240              		.align	1
 1241              		.global	vTaskDelete
 1242              		.syntax unified
 1243              		.thumb
 1244              		.thumb_func
 1246              	vTaskDelete:
 1247              	.LVL98:
 1248              	.LFB132:
2192:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 1249              		.loc 1 2192 5 is_stmt 1 view -0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
2192:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 1253              		.loc 1 2192 5 is_stmt 0 view .LVU346
 1254 0000 38B5     		push	{r3, r4, r5, lr}
 1255              	.LCFI19:
 1256              		.cfi_def_cfa_offset 16
 1257              		.cfi_offset 3, -16
 1258              		.cfi_offset 4, -12
 1259              		.cfi_offset 5, -8
 1260              		.cfi_offset 14, -4
 1261 0002 0446     		mov	r4, r0
2193:FreeRTOS/Src/tasks.c ****         BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 1262              		.loc 1 2193 9 is_stmt 1 view .LVU347
2194:FreeRTOS/Src/tasks.c ****         BaseType_t xTaskIsRunningOrYielding;
 1263              		.loc 1 2194 9 view .LVU348
 1264              	.LVL99:
2195:FreeRTOS/Src/tasks.c **** 
 1265              		.loc 1 2195 9 view .LVU349
2197:FreeRTOS/Src/tasks.c **** 
 1266              		.loc 1 2197 48 view .LVU350
2199:FreeRTOS/Src/tasks.c ****         {
 1267              		.loc 1 2199 9 view .LVU351
 1268 0004 FFF7FEFF 		bl	vPortEnterCritical
 1269              	.LVL100:
2203:FreeRTOS/Src/tasks.c **** 
 1270              		.loc 1 2203 13 view .LVU352
2203:FreeRTOS/Src/tasks.c **** 
 1271              		.loc 1 2203 21 is_stmt 0 view .LVU353
 1272 0008 002C     		cmp	r4, #0
 1273 000a 38D0     		beq	.L97
 1274              	.LVL101:
 1275              	.L88:
2206:FreeRTOS/Src/tasks.c ****             {
 1276              		.loc 1 2206 13 is_stmt 1 view .LVU354
2206:FreeRTOS/Src/tasks.c ****             {
 1277              		.loc 1 2206 17 is_stmt 0 view .LVU355
 1278 000c 251D     		adds	r5, r4, #4
 1279 000e 2846     		mov	r0, r5
 1280 0010 FFF7FEFF 		bl	uxListRemove
 1281              	.LVL102:
2206:FreeRTOS/Src/tasks.c ****             {
 1282              		.loc 1 2206 15 discriminator 1 view .LVU356
 1283 0014 68B9     		cbnz	r0, .L89
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 178


2208:FreeRTOS/Src/tasks.c ****             }
 1284              		.loc 1 2208 17 is_stmt 1 view .LVU357
2208:FreeRTOS/Src/tasks.c ****             }
 1285              		.loc 1 2208 17 view .LVU358
 1286 0016 E36A     		ldr	r3, [r4, #44]
 1287 0018 03EB8301 		add	r1, r3, r3, lsl #2
 1288 001c 254A     		ldr	r2, .L101
 1289 001e 52F82120 		ldr	r2, [r2, r1, lsl #2]
 1290 0022 32B9     		cbnz	r2, .L89
2208:FreeRTOS/Src/tasks.c ****             }
 1291              		.loc 1 2208 17 discriminator 1 view .LVU359
 1292 0024 0122     		movs	r2, #1
 1293 0026 9A40     		lsls	r2, r2, r3
 1294 0028 2349     		ldr	r1, .L101+4
 1295 002a 0B68     		ldr	r3, [r1]
 1296 002c 23EA0203 		bic	r3, r3, r2
 1297 0030 0B60     		str	r3, [r1]
 1298              	.L89:
2212:FreeRTOS/Src/tasks.c ****             }
 1299              		.loc 1 2212 41 view .LVU360
2216:FreeRTOS/Src/tasks.c ****             {
 1300              		.loc 1 2216 13 view .LVU361
2216:FreeRTOS/Src/tasks.c ****             {
 1301              		.loc 1 2216 17 is_stmt 0 view .LVU362
 1302 0032 A36A     		ldr	r3, [r4, #40]
2216:FreeRTOS/Src/tasks.c ****             {
 1303              		.loc 1 2216 15 view .LVU363
 1304 0034 1BB1     		cbz	r3, .L90
2218:FreeRTOS/Src/tasks.c ****             }
 1305              		.loc 1 2218 17 is_stmt 1 view .LVU364
2218:FreeRTOS/Src/tasks.c ****             }
 1306              		.loc 1 2218 26 is_stmt 0 view .LVU365
 1307 0036 04F11800 		add	r0, r4, #24
 1308 003a FFF7FEFF 		bl	uxListRemove
 1309              	.LVL103:
 1310              	.L90:
2222:FreeRTOS/Src/tasks.c ****             }
 1311              		.loc 1 2222 41 is_stmt 1 view .LVU366
2229:FreeRTOS/Src/tasks.c **** 
 1312              		.loc 1 2229 13 view .LVU367
2229:FreeRTOS/Src/tasks.c **** 
 1313              		.loc 1 2229 25 is_stmt 0 view .LVU368
 1314 003e 1F4A     		ldr	r2, .L101+8
 1315 0040 1368     		ldr	r3, [r2]
 1316 0042 0133     		adds	r3, r3, #1
 1317 0044 1360     		str	r3, [r2]
2234:FreeRTOS/Src/tasks.c **** 
 1318              		.loc 1 2234 13 is_stmt 1 view .LVU369
2234:FreeRTOS/Src/tasks.c **** 
 1319              		.loc 1 2234 40 is_stmt 0 view .LVU370
 1320 0046 1E4B     		ldr	r3, .L101+12
 1321 0048 1B68     		ldr	r3, [r3]
 1322 004a A342     		cmp	r3, r4
 1323 004c 1AD0     		beq	.L98
2234:FreeRTOS/Src/tasks.c **** 
 1324              		.loc 1 2234 40 discriminator 2 view .LVU371
 1325 004e 0022     		movs	r2, #0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 179


 1326              	.L91:
 1327              	.LVL104:
2239:FreeRTOS/Src/tasks.c ****             {
 1328              		.loc 1 2239 13 is_stmt 1 view .LVU372
2239:FreeRTOS/Src/tasks.c ****             {
 1329              		.loc 1 2239 37 is_stmt 0 view .LVU373
 1330 0050 1C4B     		ldr	r3, .L101+16
 1331 0052 1B68     		ldr	r3, [r3]
2239:FreeRTOS/Src/tasks.c ****             {
 1332              		.loc 1 2239 15 view .LVU374
 1333 0054 03B1     		cbz	r3, .L92
2239:FreeRTOS/Src/tasks.c ****             {
 1334              		.loc 1 2239 50 discriminator 1 view .LVU375
 1335 0056 BAB9     		cbnz	r2, .L99
 1336              	.L92:
2298:FreeRTOS/Src/tasks.c ****                 traceTASK_DELETE( pxTCB );
 1337              		.loc 1 2298 17 is_stmt 1 view .LVU376
 1338 0058 1B4A     		ldr	r2, .L101+20
 1339              	.LVL105:
2298:FreeRTOS/Src/tasks.c ****                 traceTASK_DELETE( pxTCB );
 1340              		.loc 1 2298 17 is_stmt 0 view .LVU377
 1341 005a 1368     		ldr	r3, [r2]
 1342 005c 013B     		subs	r3, r3, #1
 1343 005e 1360     		str	r3, [r2]
2299:FreeRTOS/Src/tasks.c **** 
 1344              		.loc 1 2299 42 is_stmt 1 view .LVU378
2303:FreeRTOS/Src/tasks.c ****             }
 1345              		.loc 1 2303 17 view .LVU379
 1346 0060 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1347              	.LVL106:
2306:FreeRTOS/Src/tasks.c **** 
 1348              		.loc 1 2306 9 view .LVU380
 1349 0064 FFF7FEFF 		bl	vPortExitCritical
 1350              	.LVL107:
2311:FreeRTOS/Src/tasks.c ****         {
 1351              		.loc 1 2311 9 view .LVU381
2313:FreeRTOS/Src/tasks.c ****         }
 1352              		.loc 1 2313 13 view .LVU382
 1353 0068 2046     		mov	r0, r4
 1354 006a FFF7FEFF 		bl	prvDeleteTCB
 1355              	.LVL108:
 1356              	.L93:
2320:FreeRTOS/Src/tasks.c ****             {
 1357              		.loc 1 2320 13 view .LVU383
2320:FreeRTOS/Src/tasks.c ****             {
 1358              		.loc 1 2320 35 is_stmt 0 view .LVU384
 1359 006e 154B     		ldr	r3, .L101+16
 1360 0070 1B68     		ldr	r3, [r3]
2320:FreeRTOS/Src/tasks.c ****             {
 1361              		.loc 1 2320 15 view .LVU385
 1362 0072 1BB1     		cbz	r3, .L87
2322:FreeRTOS/Src/tasks.c ****                 {
 1363              		.loc 1 2322 17 is_stmt 1 view .LVU386
2322:FreeRTOS/Src/tasks.c ****                 {
 1364              		.loc 1 2322 27 is_stmt 0 view .LVU387
 1365 0074 124B     		ldr	r3, .L101+12
 1366 0076 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 180


2322:FreeRTOS/Src/tasks.c ****                 {
 1367              		.loc 1 2322 19 view .LVU388
 1368 0078 A342     		cmp	r3, r4
 1369 007a 10D0     		beq	.L100
 1370              	.L87:
2336:FreeRTOS/Src/tasks.c **** 
 1371              		.loc 1 2336 5 view .LVU389
 1372 007c 38BD     		pop	{r3, r4, r5, pc}
 1373              	.LVL109:
 1374              	.L97:
2203:FreeRTOS/Src/tasks.c **** 
 1375              		.loc 1 2203 21 discriminator 1 view .LVU390
 1376 007e 104B     		ldr	r3, .L101+12
 1377 0080 1C68     		ldr	r4, [r3]
 1378              	.LVL110:
2203:FreeRTOS/Src/tasks.c **** 
 1379              		.loc 1 2203 21 discriminator 1 view .LVU391
 1380 0082 C3E7     		b	.L88
 1381              	.LVL111:
 1382              	.L98:
2234:FreeRTOS/Src/tasks.c **** 
 1383              		.loc 1 2234 40 discriminator 1 view .LVU392
 1384 0084 0122     		movs	r2, #1
 1385 0086 E3E7     		b	.L91
 1386              	.LVL112:
 1387              	.L99:
2247:FreeRTOS/Src/tasks.c **** 
 1388              		.loc 1 2247 17 is_stmt 1 view .LVU393
 1389 0088 2946     		mov	r1, r5
 1390 008a 1048     		ldr	r0, .L101+24
 1391 008c FFF7FEFF 		bl	vListInsertEnd
 1392              	.LVL113:
2252:FreeRTOS/Src/tasks.c **** 
 1393              		.loc 1 2252 17 view .LVU394
 1394 0090 0F4A     		ldr	r2, .L101+28
 1395 0092 1368     		ldr	r3, [r2]
 1396 0094 0133     		adds	r3, r3, #1
 1397 0096 1360     		str	r3, [r2]
2256:FreeRTOS/Src/tasks.c **** 
 1398              		.loc 1 2256 42 view .LVU395
2259:FreeRTOS/Src/tasks.c **** 
 1399              		.loc 1 2259 17 view .LVU396
 1400              	.LVL114:
2267:FreeRTOS/Src/tasks.c ****                 #else
 1401              		.loc 1 2267 80 view .LVU397
2306:FreeRTOS/Src/tasks.c **** 
 1402              		.loc 1 2306 9 view .LVU398
 1403 0098 FFF7FEFF 		bl	vPortExitCritical
 1404              	.LVL115:
2311:FreeRTOS/Src/tasks.c ****         {
 1405              		.loc 1 2311 9 view .LVU399
 1406 009c E7E7     		b	.L93
 1407              	.LVL116:
 1408              	.L100:
2324:FreeRTOS/Src/tasks.c ****                     taskYIELD_WITHIN_API();
 1409              		.loc 1 2324 62 view .LVU400
2325:FreeRTOS/Src/tasks.c ****                 }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 181


 1410              		.loc 1 2325 21 view .LVU401
 1411 009e 4FF0E023 		mov	r3, #-536813568
 1412 00a2 4FF08052 		mov	r2, #268435456
 1413 00a6 C3F8042D 		str	r2, [r3, #3332]
2325:FreeRTOS/Src/tasks.c ****                 }
 1414              		.loc 1 2325 21 view .LVU402
 1415              		.syntax unified
 1416              	@ 2325 "FreeRTOS/Src/tasks.c" 1
 1417 00aa BFF34F8F 		dsb
 1418              	@ 0 "" 2
2325:FreeRTOS/Src/tasks.c ****                 }
 1419              		.loc 1 2325 21 view .LVU403
 1420              	@ 2325 "FreeRTOS/Src/tasks.c" 1
 1421 00ae BFF36F8F 		isb
 1422              	@ 0 "" 2
2325:FreeRTOS/Src/tasks.c ****                 }
 1423              		.loc 1 2325 43 view .LVU404
2329:FreeRTOS/Src/tasks.c ****                 }
 1424              		.loc 1 2329 45 view .LVU405
2335:FreeRTOS/Src/tasks.c ****     }
 1425              		.loc 1 2335 34 view .LVU406
2336:FreeRTOS/Src/tasks.c **** 
 1426              		.loc 1 2336 5 is_stmt 0 view .LVU407
 1427              		.thumb
 1428              		.syntax unified
 1429 00b2 E3E7     		b	.L87
 1430              	.L102:
 1431              		.align	2
 1432              	.L101:
 1433 00b4 00000000 		.word	pxReadyTasksLists
 1434 00b8 00000000 		.word	uxTopReadyPriority
 1435 00bc 00000000 		.word	uxTaskNumber
 1436 00c0 00000000 		.word	pxCurrentTCB
 1437 00c4 00000000 		.word	xSchedulerRunning
 1438 00c8 00000000 		.word	uxCurrentNumberOfTasks
 1439 00cc 00000000 		.word	xTasksWaitingTermination
 1440 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1441              		.cfi_endproc
 1442              	.LFE132:
 1444              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1445              		.align	1
 1446              		.global	uxTaskPriorityGet
 1447              		.syntax unified
 1448              		.thumb
 1449              		.thumb_func
 1451              	uxTaskPriorityGet:
 1452              	.LVL117:
 1453              	.LFB135:
2618:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
 1454              		.loc 1 2618 5 is_stmt 1 view -0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
2618:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
 1458              		.loc 1 2618 5 is_stmt 0 view .LVU409
 1459 0000 10B5     		push	{r4, lr}
 1460              	.LCFI20:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 182


 1461              		.cfi_def_cfa_offset 8
 1462              		.cfi_offset 4, -8
 1463              		.cfi_offset 14, -4
 1464 0002 0446     		mov	r4, r0
2619:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
 1465              		.loc 1 2619 9 is_stmt 1 view .LVU410
2620:FreeRTOS/Src/tasks.c **** 
 1466              		.loc 1 2620 9 view .LVU411
2622:FreeRTOS/Src/tasks.c **** 
 1467              		.loc 1 2622 46 view .LVU412
2624:FreeRTOS/Src/tasks.c ****         {
 1468              		.loc 1 2624 9 view .LVU413
 1469 0004 FFF7FEFF 		bl	vPortEnterCritical
 1470              	.LVL118:
2628:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1471              		.loc 1 2628 13 view .LVU414
2628:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1472              		.loc 1 2628 21 is_stmt 0 view .LVU415
 1473 0008 24B1     		cbz	r4, .L106
 1474              	.LVL119:
 1475              	.L104:
2629:FreeRTOS/Src/tasks.c ****         }
 1476              		.loc 1 2629 13 is_stmt 1 view .LVU416
2629:FreeRTOS/Src/tasks.c ****         }
 1477              		.loc 1 2629 22 is_stmt 0 view .LVU417
 1478 000a E46A     		ldr	r4, [r4, #44]
 1479              	.LVL120:
2631:FreeRTOS/Src/tasks.c **** 
 1480              		.loc 1 2631 9 is_stmt 1 view .LVU418
 1481 000c FFF7FEFF 		bl	vPortExitCritical
 1482              	.LVL121:
2633:FreeRTOS/Src/tasks.c **** 
 1483              		.loc 1 2633 50 view .LVU419
2635:FreeRTOS/Src/tasks.c ****     }
 1484              		.loc 1 2635 9 view .LVU420
2636:FreeRTOS/Src/tasks.c **** 
 1485              		.loc 1 2636 5 is_stmt 0 view .LVU421
 1486 0010 2046     		mov	r0, r4
 1487 0012 10BD     		pop	{r4, pc}
 1488              	.LVL122:
 1489              	.L106:
2628:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1490              		.loc 1 2628 21 discriminator 1 view .LVU422
 1491 0014 014B     		ldr	r3, .L107
 1492 0016 1C68     		ldr	r4, [r3]
 1493              	.LVL123:
2628:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1494              		.loc 1 2628 21 discriminator 1 view .LVU423
 1495 0018 F7E7     		b	.L104
 1496              	.L108:
 1497 001a 00BF     		.align	2
 1498              	.L107:
 1499 001c 00000000 		.word	pxCurrentTCB
 1500              		.cfi_endproc
 1501              	.LFE135:
 1503              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1504              		.align	1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 183


 1505              		.global	uxTaskPriorityGetFromISR
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1510              	uxTaskPriorityGetFromISR:
 1511              	.LVL124:
 1512              	.LFB136:
2644:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
 1513              		.loc 1 2644 5 is_stmt 1 view -0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 0
 1516              		@ frame_needed = 0, uses_anonymous_args = 0
 1517              		@ link register save eliminated.
2645:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
 1518              		.loc 1 2645 9 view .LVU425
2646:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 1519              		.loc 1 2646 9 view .LVU426
2647:FreeRTOS/Src/tasks.c **** 
 1520              		.loc 1 2647 9 view .LVU427
2649:FreeRTOS/Src/tasks.c **** 
 1521              		.loc 1 2649 53 view .LVU428
2667:FreeRTOS/Src/tasks.c **** 
 1522              		.loc 1 2667 51 view .LVU429
2672:FreeRTOS/Src/tasks.c ****         {
 1523              		.loc 1 2672 9 view .LVU430
 1524              	.LBB49:
 1525              	.LBI49:
 1526              		.file 2 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 184


  30:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  32:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-OFF* */
  34:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  35:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern "C" {
  36:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  37:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-ON* */
  38:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  40:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  41:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  44:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  45:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  46:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  47:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  48:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  49:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  50:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR          char
  51:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT         float
  52:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE        double
  53:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG          long
  54:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT         short
  55:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE    uint32_t
  56:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE     long
  57:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  58:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE   StackType_t;
  59:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef long             BaseType_t;
  60:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long    UBaseType_t;
  61:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  62:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint16_t     TickType_t;
  64:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint32_t     TickType_t;
  67:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  69:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  71:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_TYPE_IS_ATOMIC    1
  72:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
  73:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint64_t TickType_t;
  74:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffffffffffULL
  75:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #else /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  76:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  77:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  78:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  81:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH      ( -1 )
  82:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  83:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT    8
  84:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDONT_DISCARD      __attribute__( ( used ) )
  85:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  86:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 185


  87:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  88:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD()                                     \
  89:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  90:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  91:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  92:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  93:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  94:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  95:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  96:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  97:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  98:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  99:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
 100:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
 101:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) \
 102:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     do                                           \
 103:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                            \
 104:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( xSwitchRequired != pdFALSE )         \
 105:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 106:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT_TO_SCHEDULER();        \
 107:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             portYIELD();                         \
 108:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 109:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else                                     \
 110:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 111:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT();                     \
 112:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 113:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     } while( 0 )
 114:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x )    portEND_SWITCHING_ISR( x )
 115:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 118:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 119:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 120:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 121:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 122:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 123:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 124:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()                      vPortEnterCritical()
 125:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()                       vPortExitCritical()
 126:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 128:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 130:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 131:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 132:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParameters )
 133:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParameters )
 134:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 138:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 139:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xExpec
 140:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 141:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 142:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 186


 144:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 145:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 146:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 147:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 149:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 151:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBi
 152:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 153:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint8_t ucReturn;
 154:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 156:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ucReturn;
 158:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 159:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 161:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configMAX_PRIORITIES > 32 )
 162:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITI
 163:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 164:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 166:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities ) |= 
 167:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities ) &= 
 168:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 31UL 
 172:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 174:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 175:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 176:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 178:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     void vPortValidateInterruptPriority( void );
 179:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 180:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 181:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 182:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 183:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 184:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE              __inline
 186:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 187:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 188:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 189:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 190:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 192:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulCurrentInterrupt;
 194:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     BaseType_t xReturn;
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 196:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     /* Obtain the number of the currently executing interrupt. */
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 198:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 199:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     if( ulCurrentInterrupt == 0 )
 200:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 187


 201:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdFALSE;
 202:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 203:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     else
 204:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 205:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdTRUE;
 206:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 207:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     return xReturn;
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 210:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 212:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 214:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulNewBASEPRI;
 216:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 217:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 218:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 219:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %0, %1                                              \n" \
 220:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %0                                         \n" \
 221:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 222:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 223:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 224:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     );
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 226:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1527              		.loc 2 229 34 view .LVU431
 1528              	.LBB50:
 230:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1529              		.loc 2 231 5 view .LVU432
 232:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 1530              		.loc 2 233 5 view .LVU433
 1531              		.syntax unified
 1532              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1533 0000 EFF31183 		   mrs r3, basepri                                         
 1534 0004 4FF05002 	   mov r2, #80                                              
 1535 0008 82F31188 	   msr basepri, r2                                         
 1536 000c BFF36F8F 	   isb                                                     
 1537 0010 BFF34F8F 	   dsb                                                     
 1538              	
 1539              	@ 0 "" 2
 1540              	.LVL125:
 234:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 235:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mrs %0, basepri                                         \n" \
 236:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %1, %2                                              \n" \
 237:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %1                                         \n" \
 238:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 239:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 240:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRI
 241:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     );
 242:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 243:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     /* This return will not be reached but is necessary to prevent compiler
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 188


 244:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      * warnings. */
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     return ulOriginalBASEPRI;
 1541              		.loc 2 245 5 view .LVU434
 1542              		.loc 2 245 5 is_stmt 0 view .LVU435
 1543              		.thumb
 1544              		.syntax unified
 1545              	.LBE50:
 1546              	.LBE49:
2676:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1547              		.loc 1 2676 13 is_stmt 1 view .LVU436
2676:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1548              		.loc 1 2676 21 is_stmt 0 view .LVU437
 1549 0014 18B1     		cbz	r0, .L111
 1550              	.LVL126:
 1551              	.L110:
2677:FreeRTOS/Src/tasks.c ****         }
 1552              		.loc 1 2677 13 is_stmt 1 view .LVU438
2677:FreeRTOS/Src/tasks.c ****         }
 1553              		.loc 1 2677 22 is_stmt 0 view .LVU439
 1554 0016 C06A     		ldr	r0, [r0, #44]
 1555              	.LVL127:
2679:FreeRTOS/Src/tasks.c **** 
 1556              		.loc 1 2679 9 is_stmt 1 view .LVU440
 1557              	.LBB51:
 1558              	.LBI51:
 246:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 247:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1559              		.loc 2 249 30 view .LVU441
 1560              	.LBB52:
 250:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 1561              		.loc 2 251 5 view .LVU442
 1562              		.syntax unified
 1563              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1564 0018 83F31188 		   msr basepri, r3 
 1565              	@ 0 "" 2
 1566              		.thumb
 1567              		.syntax unified
 1568              	.LBE52:
 1569              	.LBE51:
2681:FreeRTOS/Src/tasks.c **** 
 1570              		.loc 1 2681 57 view .LVU443
2683:FreeRTOS/Src/tasks.c ****     }
 1571              		.loc 1 2683 9 view .LVU444
2684:FreeRTOS/Src/tasks.c **** 
 1572              		.loc 1 2684 5 is_stmt 0 view .LVU445
 1573 001c 7047     		bx	lr
 1574              	.LVL128:
 1575              	.L111:
2676:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1576              		.loc 1 2676 21 discriminator 1 view .LVU446
 1577 001e 014A     		ldr	r2, .L112
 1578 0020 1068     		ldr	r0, [r2]
 1579              	.LVL129:
2676:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxPriority;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 189


 1580              		.loc 1 2676 21 discriminator 1 view .LVU447
 1581 0022 F8E7     		b	.L110
 1582              	.L113:
 1583              		.align	2
 1584              	.L112:
 1585 0024 00000000 		.word	pxCurrentTCB
 1586              		.cfi_endproc
 1587              	.LFE136:
 1589              		.section	.text.uxTaskBasePriorityGet,"ax",%progbits
 1590              		.align	1
 1591              		.global	uxTaskBasePriorityGet
 1592              		.syntax unified
 1593              		.thumb
 1594              		.thumb_func
 1596              	uxTaskBasePriorityGet:
 1597              	.LVL130:
 1598              	.LFB137:
2692:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
 1599              		.loc 1 2692 5 is_stmt 1 view -0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
2692:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
 1603              		.loc 1 2692 5 is_stmt 0 view .LVU449
 1604 0000 10B5     		push	{r4, lr}
 1605              	.LCFI21:
 1606              		.cfi_def_cfa_offset 8
 1607              		.cfi_offset 4, -8
 1608              		.cfi_offset 14, -4
 1609 0002 0446     		mov	r4, r0
2693:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
 1610              		.loc 1 2693 9 is_stmt 1 view .LVU450
2694:FreeRTOS/Src/tasks.c **** 
 1611              		.loc 1 2694 9 view .LVU451
2696:FreeRTOS/Src/tasks.c **** 
 1612              		.loc 1 2696 50 view .LVU452
2698:FreeRTOS/Src/tasks.c ****         {
 1613              		.loc 1 2698 9 view .LVU453
 1614 0004 FFF7FEFF 		bl	vPortEnterCritical
 1615              	.LVL131:
2702:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1616              		.loc 1 2702 13 view .LVU454
2702:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1617              		.loc 1 2702 21 is_stmt 0 view .LVU455
 1618 0008 24B1     		cbz	r4, .L117
 1619              	.LVL132:
 1620              	.L115:
2703:FreeRTOS/Src/tasks.c ****         }
 1621              		.loc 1 2703 13 is_stmt 1 view .LVU456
2703:FreeRTOS/Src/tasks.c ****         }
 1622              		.loc 1 2703 22 is_stmt 0 view .LVU457
 1623 000a E46B     		ldr	r4, [r4, #60]
 1624              	.LVL133:
2705:FreeRTOS/Src/tasks.c **** 
 1625              		.loc 1 2705 9 is_stmt 1 view .LVU458
 1626 000c FFF7FEFF 		bl	vPortExitCritical
 1627              	.LVL134:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 190


2707:FreeRTOS/Src/tasks.c **** 
 1628              		.loc 1 2707 54 view .LVU459
2709:FreeRTOS/Src/tasks.c ****     }
 1629              		.loc 1 2709 9 view .LVU460
2710:FreeRTOS/Src/tasks.c **** 
 1630              		.loc 1 2710 5 is_stmt 0 view .LVU461
 1631 0010 2046     		mov	r0, r4
 1632 0012 10BD     		pop	{r4, pc}
 1633              	.LVL135:
 1634              	.L117:
2702:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1635              		.loc 1 2702 21 discriminator 1 view .LVU462
 1636 0014 014B     		ldr	r3, .L118
 1637 0016 1C68     		ldr	r4, [r3]
 1638              	.LVL136:
2702:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1639              		.loc 1 2702 21 discriminator 1 view .LVU463
 1640 0018 F7E7     		b	.L115
 1641              	.L119:
 1642 001a 00BF     		.align	2
 1643              	.L118:
 1644 001c 00000000 		.word	pxCurrentTCB
 1645              		.cfi_endproc
 1646              	.LFE137:
 1648              		.section	.text.uxTaskBasePriorityGetFromISR,"ax",%progbits
 1649              		.align	1
 1650              		.global	uxTaskBasePriorityGetFromISR
 1651              		.syntax unified
 1652              		.thumb
 1653              		.thumb_func
 1655              	uxTaskBasePriorityGetFromISR:
 1656              	.LVL137:
 1657              	.LFB138:
2718:FreeRTOS/Src/tasks.c ****         TCB_t const * pxTCB;
 1658              		.loc 1 2718 5 is_stmt 1 view -0
 1659              		.cfi_startproc
 1660              		@ args = 0, pretend = 0, frame = 0
 1661              		@ frame_needed = 0, uses_anonymous_args = 0
 1662              		@ link register save eliminated.
2719:FreeRTOS/Src/tasks.c ****         UBaseType_t uxReturn;
 1663              		.loc 1 2719 9 view .LVU465
2720:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 1664              		.loc 1 2720 9 view .LVU466
2721:FreeRTOS/Src/tasks.c **** 
 1665              		.loc 1 2721 9 view .LVU467
2723:FreeRTOS/Src/tasks.c **** 
 1666              		.loc 1 2723 57 view .LVU468
2741:FreeRTOS/Src/tasks.c **** 
 1667              		.loc 1 2741 51 view .LVU469
2746:FreeRTOS/Src/tasks.c ****         {
 1668              		.loc 1 2746 9 view .LVU470
 1669              	.LBB53:
 1670              	.LBI53:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 1671              		.loc 2 229 34 view .LVU471
 1672              	.LBB54:
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 191


 1673              		.loc 2 231 5 view .LVU472
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1674              		.loc 2 233 5 view .LVU473
 1675              		.syntax unified
 1676              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1677 0000 EFF31183 		   mrs r3, basepri                                         
 1678 0004 4FF05002 	   mov r2, #80                                              
 1679 0008 82F31188 	   msr basepri, r2                                         
 1680 000c BFF36F8F 	   isb                                                     
 1681 0010 BFF34F8F 	   dsb                                                     
 1682              	
 1683              	@ 0 "" 2
 1684              	.LVL138:
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 1685              		.loc 2 245 5 view .LVU474
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 1686              		.loc 2 245 5 is_stmt 0 view .LVU475
 1687              		.thumb
 1688              		.syntax unified
 1689              	.LBE54:
 1690              	.LBE53:
2750:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1691              		.loc 1 2750 13 is_stmt 1 view .LVU476
2750:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1692              		.loc 1 2750 21 is_stmt 0 view .LVU477
 1693 0014 18B1     		cbz	r0, .L122
 1694              	.LVL139:
 1695              	.L121:
2751:FreeRTOS/Src/tasks.c ****         }
 1696              		.loc 1 2751 13 is_stmt 1 view .LVU478
2751:FreeRTOS/Src/tasks.c ****         }
 1697              		.loc 1 2751 22 is_stmt 0 view .LVU479
 1698 0016 C06B     		ldr	r0, [r0, #60]
 1699              	.LVL140:
2753:FreeRTOS/Src/tasks.c **** 
 1700              		.loc 1 2753 9 is_stmt 1 view .LVU480
 1701              	.LBB55:
 1702              	.LBI55:
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 1703              		.loc 2 249 30 view .LVU481
 1704              	.LBB56:
 1705              		.loc 2 251 5 view .LVU482
 1706              		.syntax unified
 1707              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1708 0018 83F31188 		   msr basepri, r3 
 1709              	@ 0 "" 2
 1710              		.thumb
 1711              		.syntax unified
 1712              	.LBE56:
 1713              	.LBE55:
2755:FreeRTOS/Src/tasks.c **** 
 1714              		.loc 1 2755 61 view .LVU483
2757:FreeRTOS/Src/tasks.c ****     }
 1715              		.loc 1 2757 9 view .LVU484
2758:FreeRTOS/Src/tasks.c **** 
 1716              		.loc 1 2758 5 is_stmt 0 view .LVU485
 1717 001c 7047     		bx	lr
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 192


 1718              	.LVL141:
 1719              	.L122:
2750:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1720              		.loc 1 2750 21 discriminator 1 view .LVU486
 1721 001e 014A     		ldr	r2, .L123
 1722 0020 1068     		ldr	r0, [r2]
 1723              	.LVL142:
2750:FreeRTOS/Src/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1724              		.loc 1 2750 21 discriminator 1 view .LVU487
 1725 0022 F8E7     		b	.L121
 1726              	.L124:
 1727              		.align	2
 1728              	.L123:
 1729 0024 00000000 		.word	pxCurrentTCB
 1730              		.cfi_endproc
 1731              	.LFE138:
 1733              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1734              		.align	1
 1735              		.global	vTaskPrioritySet
 1736              		.syntax unified
 1737              		.thumb
 1738              		.thumb_func
 1740              	vTaskPrioritySet:
 1741              	.LVL143:
 1742              	.LFB139:
2767:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 1743              		.loc 1 2767 5 is_stmt 1 view -0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
2767:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 1747              		.loc 1 2767 5 is_stmt 0 view .LVU489
 1748 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1749              	.LCFI22:
 1750              		.cfi_def_cfa_offset 24
 1751              		.cfi_offset 3, -24
 1752              		.cfi_offset 4, -20
 1753              		.cfi_offset 5, -16
 1754              		.cfi_offset 6, -12
 1755              		.cfi_offset 7, -8
 1756              		.cfi_offset 14, -4
 1757 0002 0446     		mov	r4, r0
 1758 0004 0D46     		mov	r5, r1
2768:FreeRTOS/Src/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1759              		.loc 1 2768 9 is_stmt 1 view .LVU490
2769:FreeRTOS/Src/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1760              		.loc 1 2769 9 view .LVU491
2770:FreeRTOS/Src/tasks.c **** 
 1761              		.loc 1 2770 9 view .LVU492
 1762              	.LVL144:
2776:FreeRTOS/Src/tasks.c **** 
 1763              		.loc 1 2776 60 view .LVU493
2778:FreeRTOS/Src/tasks.c **** 
 1764              		.loc 1 2778 61 view .LVU494
2781:FreeRTOS/Src/tasks.c ****         {
 1765              		.loc 1 2781 9 view .LVU495
2781:FreeRTOS/Src/tasks.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 193


 1766              		.loc 1 2781 11 is_stmt 0 view .LVU496
 1767 0006 0429     		cmp	r1, #4
 1768 0008 00D9     		bls	.L126
2783:FreeRTOS/Src/tasks.c ****         }
 1769              		.loc 1 2783 27 view .LVU497
 1770 000a 0425     		movs	r5, #4
 1771              	.L126:
 1772              	.LVL145:
2787:FreeRTOS/Src/tasks.c ****         }
 1773              		.loc 1 2787 37 is_stmt 1 view .LVU498
2790:FreeRTOS/Src/tasks.c ****         {
 1774              		.loc 1 2790 9 view .LVU499
 1775 000c FFF7FEFF 		bl	vPortEnterCritical
 1776              	.LVL146:
2794:FreeRTOS/Src/tasks.c **** 
 1777              		.loc 1 2794 13 view .LVU500
2794:FreeRTOS/Src/tasks.c **** 
 1778              		.loc 1 2794 21 is_stmt 0 view .LVU501
 1779 0010 74B1     		cbz	r4, .L141
 1780              	.LVL147:
 1781              	.L127:
2796:FreeRTOS/Src/tasks.c **** 
 1782              		.loc 1 2796 59 is_stmt 1 view .LVU502
2800:FreeRTOS/Src/tasks.c ****             }
 1783              		.loc 1 2800 17 view .LVU503
2800:FreeRTOS/Src/tasks.c ****             }
 1784              		.loc 1 2800 39 is_stmt 0 view .LVU504
 1785 0012 E36B     		ldr	r3, [r4, #60]
 1786              	.LVL148:
2808:FreeRTOS/Src/tasks.c ****             {
 1787              		.loc 1 2808 13 is_stmt 1 view .LVU505
2808:FreeRTOS/Src/tasks.c ****             {
 1788              		.loc 1 2808 15 is_stmt 0 view .LVU506
 1789 0014 9D42     		cmp	r5, r3
 1790 0016 33D0     		beq	.L128
2812:FreeRTOS/Src/tasks.c ****                 {
 1791              		.loc 1 2812 17 is_stmt 1 view .LVU507
2812:FreeRTOS/Src/tasks.c ****                 {
 1792              		.loc 1 2812 19 is_stmt 0 view .LVU508
 1793 0018 0DD9     		bls	.L129
2816:FreeRTOS/Src/tasks.c ****                         {
 1794              		.loc 1 2816 25 is_stmt 1 view .LVU509
2816:FreeRTOS/Src/tasks.c ****                         {
 1795              		.loc 1 2816 35 is_stmt 0 view .LVU510
 1796 001a 344A     		ldr	r2, .L143
 1797 001c 1268     		ldr	r2, [r2]
2816:FreeRTOS/Src/tasks.c ****                         {
 1798              		.loc 1 2816 27 view .LVU511
 1799 001e A242     		cmp	r2, r4
 1800 0020 31D0     		beq	.L137
2821:FreeRTOS/Src/tasks.c ****                             {
 1801              		.loc 1 2821 29 is_stmt 1 view .LVU512
2821:FreeRTOS/Src/tasks.c ****                             {
 1802              		.loc 1 2821 61 is_stmt 0 view .LVU513
 1803 0022 324A     		ldr	r2, .L143
 1804 0024 1268     		ldr	r2, [r2]
 1805 0026 D26A     		ldr	r2, [r2, #44]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 194


2821:FreeRTOS/Src/tasks.c ****                             {
 1806              		.loc 1 2821 31 view .LVU514
 1807 0028 AA42     		cmp	r2, r5
 1808 002a 2ED3     		bcc	.L138
2770:FreeRTOS/Src/tasks.c **** 
 1809              		.loc 1 2770 20 view .LVU515
 1810 002c 0027     		movs	r7, #0
 1811 002e 07E0     		b	.L130
 1812              	.LVL149:
 1813              	.L141:
2794:FreeRTOS/Src/tasks.c **** 
 1814              		.loc 1 2794 21 discriminator 1 view .LVU516
 1815 0030 2E4B     		ldr	r3, .L143
 1816 0032 1C68     		ldr	r4, [r3]
 1817              	.LVL150:
2794:FreeRTOS/Src/tasks.c **** 
 1818              		.loc 1 2794 21 discriminator 1 view .LVU517
 1819 0034 EDE7     		b	.L127
 1820              	.LVL151:
 1821              	.L129:
2845:FreeRTOS/Src/tasks.c ****                 {
 1822              		.loc 1 2845 22 is_stmt 1 view .LVU518
2845:FreeRTOS/Src/tasks.c ****                 {
 1823              		.loc 1 2845 55 is_stmt 0 view .LVU519
 1824 0036 2D4A     		ldr	r2, .L143
 1825 0038 1268     		ldr	r2, [r2]
2845:FreeRTOS/Src/tasks.c ****                 {
 1826              		.loc 1 2845 24 view .LVU520
 1827 003a A242     		cmp	r2, r4
 1828 003c 27D0     		beq	.L139
2770:FreeRTOS/Src/tasks.c **** 
 1829              		.loc 1 2770 20 view .LVU521
 1830 003e 0027     		movs	r7, #0
 1831              	.L130:
 1832              	.LVL152:
2862:FreeRTOS/Src/tasks.c **** 
 1833              		.loc 1 2862 17 is_stmt 1 view .LVU522
2867:FreeRTOS/Src/tasks.c **** 
 1834              		.loc 1 2867 17 view .LVU523
2867:FreeRTOS/Src/tasks.c **** 
 1835              		.loc 1 2867 39 is_stmt 0 view .LVU524
 1836 0040 E66A     		ldr	r6, [r4, #44]
 1837              	.LVL153:
2874:FreeRTOS/Src/tasks.c ****                     {
 1838              		.loc 1 2874 21 is_stmt 1 view .LVU525
2874:FreeRTOS/Src/tasks.c ****                     {
 1839              		.loc 1 2874 23 is_stmt 0 view .LVU526
 1840 0042 B342     		cmp	r3, r6
 1841 0044 01D0     		beq	.L131
2874:FreeRTOS/Src/tasks.c ****                     {
 1842              		.loc 1 2874 72 discriminator 1 view .LVU527
 1843 0046 B542     		cmp	r5, r6
 1844 0048 00D9     		bls	.L132
 1845              	.L131:
2876:FreeRTOS/Src/tasks.c ****                     }
 1846              		.loc 1 2876 25 is_stmt 1 view .LVU528
2876:FreeRTOS/Src/tasks.c ****                     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 195


 1847              		.loc 1 2876 43 is_stmt 0 view .LVU529
 1848 004a E562     		str	r5, [r4, #44]
 1849              	.L132:
2884:FreeRTOS/Src/tasks.c ****                 }
 1850              		.loc 1 2884 21 is_stmt 1 view .LVU530
2884:FreeRTOS/Src/tasks.c ****                 }
 1851              		.loc 1 2884 43 is_stmt 0 view .LVU531
 1852 004c E563     		str	r5, [r4, #60]
2894:FreeRTOS/Src/tasks.c ****                 {
 1853              		.loc 1 2894 17 is_stmt 1 view .LVU532
2894:FreeRTOS/Src/tasks.c ****                 {
 1854              		.loc 1 2894 23 is_stmt 0 view .LVU533
 1855 004e A369     		ldr	r3, [r4, #24]
 1856              	.LVL154:
2894:FreeRTOS/Src/tasks.c ****                 {
 1857              		.loc 1 2894 19 view .LVU534
 1858 0050 002B     		cmp	r3, #0
 1859 0052 02DB     		blt	.L133
2896:FreeRTOS/Src/tasks.c ****                 }
 1860              		.loc 1 2896 21 is_stmt 1 view .LVU535
 1861 0054 C5F10505 		rsb	r5, r5, #5
 1862              	.LVL155:
2896:FreeRTOS/Src/tasks.c ****                 }
 1863              		.loc 1 2896 21 is_stmt 0 view .LVU536
 1864 0058 A561     		str	r5, [r4, #24]
 1865              	.L133:
2900:FreeRTOS/Src/tasks.c ****                 }
 1866              		.loc 1 2900 45 is_stmt 1 view .LVU537
2907:FreeRTOS/Src/tasks.c ****                 {
 1867              		.loc 1 2907 17 view .LVU538
2907:FreeRTOS/Src/tasks.c ****                 {
 1868              		.loc 1 2907 21 is_stmt 0 view .LVU539
 1869 005a 6169     		ldr	r1, [r4, #20]
 1870 005c 06EB8602 		add	r2, r6, r6, lsl #2
 1871 0060 234B     		ldr	r3, .L143+4
 1872 0062 03EB8203 		add	r3, r3, r2, lsl #2
2907:FreeRTOS/Src/tasks.c ****                 {
 1873              		.loc 1 2907 19 view .LVU540
 1874 0066 9942     		cmp	r1, r3
 1875 0068 13D0     		beq	.L142
 1876              	.LVL156:
 1877              	.L134:
2930:FreeRTOS/Src/tasks.c ****                     }
 1878              		.loc 1 2930 49 is_stmt 1 view .LVU541
2942:FreeRTOS/Src/tasks.c ****                 {
 1879              		.loc 1 2942 17 view .LVU542
2942:FreeRTOS/Src/tasks.c ****                 {
 1880              		.loc 1 2942 19 is_stmt 0 view .LVU543
 1881 006a 4FB1     		cbz	r7, .L128
2945:FreeRTOS/Src/tasks.c ****                 }
 1882              		.loc 1 2945 21 is_stmt 1 view .LVU544
2945:FreeRTOS/Src/tasks.c ****                 }
 1883              		.loc 1 2945 21 view .LVU545
2945:FreeRTOS/Src/tasks.c ****                 }
 1884              		.loc 1 2945 21 view .LVU546
 1885 006c 4FF0E023 		mov	r3, #-536813568
 1886 0070 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 196


 1887 0074 C3F8042D 		str	r2, [r3, #3332]
2945:FreeRTOS/Src/tasks.c ****                 }
 1888              		.loc 1 2945 21 view .LVU547
 1889              		.syntax unified
 1890              	@ 2945 "FreeRTOS/Src/tasks.c" 1
 1891 0078 BFF34F8F 		dsb
 1892              	@ 0 "" 2
2945:FreeRTOS/Src/tasks.c ****                 }
 1893              		.loc 1 2945 21 view .LVU548
 1894              	@ 2945 "FreeRTOS/Src/tasks.c" 1
 1895 007c BFF36F8F 		isb
 1896              	@ 0 "" 2
2945:FreeRTOS/Src/tasks.c ****                 }
 1897              		.loc 1 2945 21 view .LVU549
2945:FreeRTOS/Src/tasks.c ****                 }
 1898              		.loc 1 2945 21 view .LVU550
 1899              	.LVL157:
 1900              		.thumb
 1901              		.syntax unified
 1902              	.L128:
2960:FreeRTOS/Src/tasks.c ****                     }
 1903              		.loc 1 2960 49 view .LVU551
2966:FreeRTOS/Src/tasks.c ****             }
 1904              		.loc 1 2966 17 view .LVU552
2969:FreeRTOS/Src/tasks.c **** 
 1905              		.loc 1 2969 9 view .LVU553
 1906 0080 FFF7FEFF 		bl	vPortExitCritical
 1907              	.LVL158:
2971:FreeRTOS/Src/tasks.c ****     }
 1908              		.loc 1 2971 39 view .LVU554
2972:FreeRTOS/Src/tasks.c **** 
 1909              		.loc 1 2972 5 is_stmt 0 view .LVU555
 1910 0084 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1911              	.LVL159:
 1912              	.L137:
2770:FreeRTOS/Src/tasks.c **** 
 1913              		.loc 1 2770 20 view .LVU556
 1914 0086 0027     		movs	r7, #0
 1915 0088 DAE7     		b	.L130
 1916              	.L138:
2823:FreeRTOS/Src/tasks.c ****                             }
 1917              		.loc 1 2823 48 view .LVU557
 1918 008a 0127     		movs	r7, #1
 1919 008c D8E7     		b	.L130
 1920              	.L139:
2854:FreeRTOS/Src/tasks.c ****                     }
 1921              		.loc 1 2854 40 view .LVU558
 1922 008e 0127     		movs	r7, #1
 1923 0090 D6E7     		b	.L130
 1924              	.LVL160:
 1925              	.L142:
2912:FreeRTOS/Src/tasks.c ****                     {
 1926              		.loc 1 2912 21 is_stmt 1 view .LVU559
2912:FreeRTOS/Src/tasks.c ****                     {
 1927              		.loc 1 2912 25 is_stmt 0 view .LVU560
 1928 0092 251D     		adds	r5, r4, #4
 1929 0094 2846     		mov	r0, r5
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 197


 1930 0096 FFF7FEFF 		bl	uxListRemove
 1931              	.LVL161:
2912:FreeRTOS/Src/tasks.c ****                     {
 1932              		.loc 1 2912 23 discriminator 1 view .LVU561
 1933 009a 30B9     		cbnz	r0, .L135
2917:FreeRTOS/Src/tasks.c ****                     }
 1934              		.loc 1 2917 25 is_stmt 1 view .LVU562
 1935 009c 0122     		movs	r2, #1
 1936 009e B240     		lsls	r2, r2, r6
 1937 00a0 1449     		ldr	r1, .L143+8
 1938 00a2 0B68     		ldr	r3, [r1]
 1939 00a4 23EA0203 		bic	r3, r3, r2
 1940 00a8 0B60     		str	r3, [r1]
 1941              	.L135:
2921:FreeRTOS/Src/tasks.c ****                     }
 1942              		.loc 1 2921 49 view .LVU563
2924:FreeRTOS/Src/tasks.c ****                 }
 1943              		.loc 1 2924 21 view .LVU564
2924:FreeRTOS/Src/tasks.c ****                 }
 1944              		.loc 1 2924 21 view .LVU565
2924:FreeRTOS/Src/tasks.c ****                 }
 1945              		.loc 1 2924 21 view .LVU566
 1946 00aa E36A     		ldr	r3, [r4, #44]
 1947 00ac 0122     		movs	r2, #1
 1948 00ae 9A40     		lsls	r2, r2, r3
 1949 00b0 1049     		ldr	r1, .L143+8
 1950 00b2 0868     		ldr	r0, [r1]
 1951 00b4 0243     		orrs	r2, r2, r0
 1952 00b6 0A60     		str	r2, [r1]
2924:FreeRTOS/Src/tasks.c ****                 }
 1953              		.loc 1 2924 21 view .LVU567
 1954              	.LBB57:
2924:FreeRTOS/Src/tasks.c ****                 }
 1955              		.loc 1 2924 21 view .LVU568
 1956 00b8 0D4A     		ldr	r2, .L143+4
 1957 00ba 03EB8303 		add	r3, r3, r3, lsl #2
 1958 00be 02EB8303 		add	r3, r2, r3, lsl #2
 1959 00c2 5B68     		ldr	r3, [r3, #4]
 1960              	.LVL162:
2924:FreeRTOS/Src/tasks.c ****                 }
 1961              		.loc 1 2924 21 view .LVU569
2924:FreeRTOS/Src/tasks.c ****                 }
 1962              		.loc 1 2924 21 view .LVU570
2924:FreeRTOS/Src/tasks.c ****                 }
 1963              		.loc 1 2924 21 view .LVU571
 1964 00c4 A360     		str	r3, [r4, #8]
2924:FreeRTOS/Src/tasks.c ****                 }
 1965              		.loc 1 2924 21 view .LVU572
 1966 00c6 9968     		ldr	r1, [r3, #8]
 1967 00c8 E160     		str	r1, [r4, #12]
2924:FreeRTOS/Src/tasks.c ****                 }
 1968              		.loc 1 2924 21 view .LVU573
 1969 00ca 4D60     		str	r5, [r1, #4]
2924:FreeRTOS/Src/tasks.c ****                 }
 1970              		.loc 1 2924 21 view .LVU574
 1971 00cc 9D60     		str	r5, [r3, #8]
2924:FreeRTOS/Src/tasks.c ****                 }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 198


 1972              		.loc 1 2924 21 view .LVU575
 1973 00ce E36A     		ldr	r3, [r4, #44]
 1974              	.LVL163:
2924:FreeRTOS/Src/tasks.c ****                 }
 1975              		.loc 1 2924 21 is_stmt 0 view .LVU576
 1976 00d0 03EB8301 		add	r1, r3, r3, lsl #2
 1977 00d4 02EB8100 		add	r0, r2, r1, lsl #2
 1978 00d8 6061     		str	r0, [r4, #20]
2924:FreeRTOS/Src/tasks.c ****                 }
 1979              		.loc 1 2924 21 is_stmt 1 view .LVU577
 1980 00da 52F82110 		ldr	r1, [r2, r1, lsl #2]
 1981 00de 0131     		adds	r1, r1, #1
 1982 00e0 03EB8303 		add	r3, r3, r3, lsl #2
 1983 00e4 42F82310 		str	r1, [r2, r3, lsl #2]
 1984              	.LBE57:
2924:FreeRTOS/Src/tasks.c ****                 }
 1985              		.loc 1 2924 21 view .LVU578
2924:FreeRTOS/Src/tasks.c ****                 }
 1986              		.loc 1 2924 21 view .LVU579
2924:FreeRTOS/Src/tasks.c ****                 }
 1987              		.loc 1 2924 21 view .LVU580
 1988 00e8 BFE7     		b	.L134
 1989              	.L144:
 1990 00ea 00BF     		.align	2
 1991              	.L143:
 1992 00ec 00000000 		.word	pxCurrentTCB
 1993 00f0 00000000 		.word	pxReadyTasksLists
 1994 00f4 00000000 		.word	uxTopReadyPriority
 1995              		.cfi_endproc
 1996              	.LFE139:
 1998              		.section	.text.vTaskResume,"ax",%progbits
 1999              		.align	1
 2000              		.global	vTaskResume
 2001              		.syntax unified
 2002              		.thumb
 2003              		.thumb_func
 2005              	vTaskResume:
 2006              	.LVL164:
 2007              	.LFB142:
3354:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2008              		.loc 1 3354 5 view -0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 0
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
3354:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2012              		.loc 1 3354 5 is_stmt 0 view .LVU582
 2013 0000 38B5     		push	{r3, r4, r5, lr}
 2014              	.LCFI23:
 2015              		.cfi_def_cfa_offset 16
 2016              		.cfi_offset 3, -16
 2017              		.cfi_offset 4, -12
 2018              		.cfi_offset 5, -8
 2019              		.cfi_offset 14, -4
3355:FreeRTOS/Src/tasks.c **** 
 2020              		.loc 1 3355 9 is_stmt 1 view .LVU583
 2021              	.LVL165:
3357:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 199


 2022              		.loc 1 3357 48 view .LVU584
3360:FreeRTOS/Src/tasks.c **** 
 2023              		.loc 1 3360 38 view .LVU585
3366:FreeRTOS/Src/tasks.c ****         #else
 2024              		.loc 1 3366 13 view .LVU586
3366:FreeRTOS/Src/tasks.c ****         #else
 2025              		.loc 1 3366 25 is_stmt 0 view .LVU587
 2026 0002 214B     		ldr	r3, .L150
 2027 0004 1B68     		ldr	r3, [r3]
3366:FreeRTOS/Src/tasks.c ****         #else
 2028              		.loc 1 3366 15 view .LVU588
 2029 0006 8342     		cmp	r3, r0
 2030 0008 09D0     		beq	.L145
 2031 000a 0446     		mov	r4, r0
3366:FreeRTOS/Src/tasks.c ****         #else
 2032              		.loc 1 3366 43 discriminator 1 view .LVU589
 2033 000c 38B1     		cbz	r0, .L145
3377:FreeRTOS/Src/tasks.c ****             {
 2034              		.loc 1 3377 13 is_stmt 1 view .LVU590
 2035 000e FFF7FEFF 		bl	vPortEnterCritical
 2036              	.LVL166:
3379:FreeRTOS/Src/tasks.c ****                 {
 2037              		.loc 1 3379 17 view .LVU591
3379:FreeRTOS/Src/tasks.c ****                 {
 2038              		.loc 1 3379 21 is_stmt 0 view .LVU592
 2039 0012 2046     		mov	r0, r4
 2040 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2041              	.LVL167:
3379:FreeRTOS/Src/tasks.c ****                 {
 2042              		.loc 1 3379 19 discriminator 1 view .LVU593
 2043 0018 10B9     		cbnz	r0, .L149
 2044              	.L147:
3395:FreeRTOS/Src/tasks.c ****                 }
 2045              		.loc 1 3395 45 is_stmt 1 view .LVU594
3398:FreeRTOS/Src/tasks.c ****         }
 2046              		.loc 1 3398 13 view .LVU595
 2047 001a FFF7FEFF 		bl	vPortExitCritical
 2048              	.LVL168:
3402:FreeRTOS/Src/tasks.c ****         }
 2049              		.loc 1 3402 37 view .LVU596
3405:FreeRTOS/Src/tasks.c ****     }
 2050              		.loc 1 3405 34 view .LVU597
 2051              	.L145:
3406:FreeRTOS/Src/tasks.c **** 
 2052              		.loc 1 3406 5 is_stmt 0 view .LVU598
 2053 001e 38BD     		pop	{r3, r4, r5, pc}
 2054              	.LVL169:
 2055              	.L149:
3381:FreeRTOS/Src/tasks.c **** 
 2056              		.loc 1 3381 46 is_stmt 1 view .LVU599
3385:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2057              		.loc 1 3385 21 view .LVU600
3385:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2058              		.loc 1 3385 30 is_stmt 0 view .LVU601
 2059 0020 251D     		adds	r5, r4, #4
 2060 0022 2846     		mov	r0, r5
 2061 0024 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 200


 2062              	.LVL170:
3386:FreeRTOS/Src/tasks.c **** 
 2063              		.loc 1 3386 21 is_stmt 1 view .LVU602
3386:FreeRTOS/Src/tasks.c **** 
 2064              		.loc 1 3386 21 view .LVU603
3386:FreeRTOS/Src/tasks.c **** 
 2065              		.loc 1 3386 21 view .LVU604
 2066 0028 E36A     		ldr	r3, [r4, #44]
 2067 002a 0122     		movs	r2, #1
 2068 002c 9A40     		lsls	r2, r2, r3
 2069 002e 1749     		ldr	r1, .L150+4
 2070 0030 0868     		ldr	r0, [r1]
 2071 0032 0243     		orrs	r2, r2, r0
 2072 0034 0A60     		str	r2, [r1]
3386:FreeRTOS/Src/tasks.c **** 
 2073              		.loc 1 3386 21 view .LVU605
 2074              	.LBB58:
3386:FreeRTOS/Src/tasks.c **** 
 2075              		.loc 1 3386 21 view .LVU606
 2076 0036 164A     		ldr	r2, .L150+8
 2077 0038 03EB8303 		add	r3, r3, r3, lsl #2
 2078 003c 02EB8303 		add	r3, r2, r3, lsl #2
 2079 0040 5B68     		ldr	r3, [r3, #4]
 2080              	.LVL171:
3386:FreeRTOS/Src/tasks.c **** 
 2081              		.loc 1 3386 21 view .LVU607
3386:FreeRTOS/Src/tasks.c **** 
 2082              		.loc 1 3386 21 view .LVU608
3386:FreeRTOS/Src/tasks.c **** 
 2083              		.loc 1 3386 21 view .LVU609
 2084 0042 A360     		str	r3, [r4, #8]
3386:FreeRTOS/Src/tasks.c **** 
 2085              		.loc 1 3386 21 view .LVU610
 2086 0044 9968     		ldr	r1, [r3, #8]
 2087 0046 E160     		str	r1, [r4, #12]
3386:FreeRTOS/Src/tasks.c **** 
 2088              		.loc 1 3386 21 view .LVU611
 2089 0048 4D60     		str	r5, [r1, #4]
3386:FreeRTOS/Src/tasks.c **** 
 2090              		.loc 1 3386 21 view .LVU612
 2091 004a 9D60     		str	r5, [r3, #8]
3386:FreeRTOS/Src/tasks.c **** 
 2092              		.loc 1 3386 21 view .LVU613
 2093 004c E36A     		ldr	r3, [r4, #44]
 2094              	.LVL172:
3386:FreeRTOS/Src/tasks.c **** 
 2095              		.loc 1 3386 21 is_stmt 0 view .LVU614
 2096 004e 03EB8301 		add	r1, r3, r3, lsl #2
 2097 0052 02EB8100 		add	r0, r2, r1, lsl #2
 2098 0056 6061     		str	r0, [r4, #20]
3386:FreeRTOS/Src/tasks.c **** 
 2099              		.loc 1 3386 21 is_stmt 1 view .LVU615
 2100 0058 52F82110 		ldr	r1, [r2, r1, lsl #2]
 2101 005c 0131     		adds	r1, r1, #1
 2102 005e 03EB8303 		add	r3, r3, r3, lsl #2
 2103 0062 42F82310 		str	r1, [r2, r3, lsl #2]
 2104              	.LBE58:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 201


3386:FreeRTOS/Src/tasks.c **** 
 2105              		.loc 1 3386 21 view .LVU616
3386:FreeRTOS/Src/tasks.c **** 
 2106              		.loc 1 3386 21 view .LVU617
3386:FreeRTOS/Src/tasks.c **** 
 2107              		.loc 1 3386 21 view .LVU618
3391:FreeRTOS/Src/tasks.c ****                 }
 2108              		.loc 1 3391 21 view .LVU619
3391:FreeRTOS/Src/tasks.c ****                 }
 2109              		.loc 1 3391 21 view .LVU620
 2110 0066 084B     		ldr	r3, .L150
 2111 0068 1B68     		ldr	r3, [r3]
 2112 006a DA6A     		ldr	r2, [r3, #44]
 2113 006c E36A     		ldr	r3, [r4, #44]
 2114 006e 9A42     		cmp	r2, r3
 2115 0070 D3D2     		bcs	.L147
3391:FreeRTOS/Src/tasks.c ****                 }
 2116              		.loc 1 3391 21 discriminator 1 view .LVU621
 2117 0072 4FF0E023 		mov	r3, #-536813568
 2118 0076 4FF08052 		mov	r2, #268435456
 2119 007a C3F8042D 		str	r2, [r3, #3332]
3391:FreeRTOS/Src/tasks.c ****                 }
 2120              		.loc 1 3391 21 view .LVU622
3391:FreeRTOS/Src/tasks.c ****                 }
 2121              		.loc 1 3391 21 is_stmt 0 discriminator 1 view .LVU623
 2122              		.syntax unified
 2123              	@ 3391 "FreeRTOS/Src/tasks.c" 1
 2124 007e BFF34F8F 		dsb
 2125              	@ 0 "" 2
3391:FreeRTOS/Src/tasks.c ****                 }
 2126              		.loc 1 3391 21 is_stmt 1 view .LVU624
3391:FreeRTOS/Src/tasks.c ****                 }
 2127              		.loc 1 3391 21 is_stmt 0 discriminator 1 view .LVU625
 2128              	@ 3391 "FreeRTOS/Src/tasks.c" 1
 2129 0082 BFF36F8F 		isb
 2130              	@ 0 "" 2
3391:FreeRTOS/Src/tasks.c ****                 }
 2131              		.loc 1 3391 21 is_stmt 1 view .LVU626
 2132              		.thumb
 2133              		.syntax unified
 2134 0086 C8E7     		b	.L147
 2135              	.L151:
 2136              		.align	2
 2137              	.L150:
 2138 0088 00000000 		.word	pxCurrentTCB
 2139 008c 00000000 		.word	uxTopReadyPriority
 2140 0090 00000000 		.word	pxReadyTasksLists
 2141              		.cfi_endproc
 2142              	.LFE142:
 2144              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2145              		.align	1
 2146              		.global	xTaskResumeFromISR
 2147              		.syntax unified
 2148              		.thumb
 2149              		.thumb_func
 2151              	xTaskResumeFromISR:
 2152              	.LVL173:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 202


 2153              	.LFB143:
3415:FreeRTOS/Src/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2154              		.loc 1 3415 5 view -0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
3415:FreeRTOS/Src/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2158              		.loc 1 3415 5 is_stmt 0 view .LVU628
 2159 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2160              	.LCFI24:
 2161              		.cfi_def_cfa_offset 24
 2162              		.cfi_offset 3, -24
 2163              		.cfi_offset 4, -20
 2164              		.cfi_offset 5, -16
 2165              		.cfi_offset 6, -12
 2166              		.cfi_offset 7, -8
 2167              		.cfi_offset 14, -4
 2168 0002 0446     		mov	r4, r0
3416:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2169              		.loc 1 3416 9 is_stmt 1 view .LVU629
 2170              	.LVL174:
3417:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 2171              		.loc 1 3417 9 view .LVU630
3418:FreeRTOS/Src/tasks.c **** 
 2172              		.loc 1 3418 9 view .LVU631
3420:FreeRTOS/Src/tasks.c **** 
 2173              		.loc 1 3420 55 view .LVU632
3422:FreeRTOS/Src/tasks.c **** 
 2174              		.loc 1 3422 38 view .LVU633
3440:FreeRTOS/Src/tasks.c **** 
 2175              		.loc 1 3440 51 view .LVU634
3445:FreeRTOS/Src/tasks.c ****         {
 2176              		.loc 1 3445 9 view .LVU635
 2177              	.LBB59:
 2178              	.LBI59:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2179              		.loc 2 229 34 view .LVU636
 2180              	.LBB60:
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2181              		.loc 2 231 5 view .LVU637
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2182              		.loc 2 233 5 view .LVU638
 2183              		.syntax unified
 2184              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2185 0004 EFF31185 		   mrs r5, basepri                                         
 2186 0008 4FF05003 	   mov r3, #80                                              
 2187 000c 83F31188 	   msr basepri, r3                                         
 2188 0010 BFF36F8F 	   isb                                                     
 2189 0014 BFF34F8F 	   dsb                                                     
 2190              	
 2191              	@ 0 "" 2
 2192              	.LVL175:
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 2193              		.loc 2 245 5 view .LVU639
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 2194              		.loc 2 245 5 is_stmt 0 view .LVU640
 2195              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 203


 2196              		.syntax unified
 2197              	.LBE60:
 2198              	.LBE59:
3447:FreeRTOS/Src/tasks.c ****             {
 2199              		.loc 1 3447 13 is_stmt 1 view .LVU641
3447:FreeRTOS/Src/tasks.c ****             {
 2200              		.loc 1 3447 17 is_stmt 0 view .LVU642
 2201 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2202              	.LVL176:
3447:FreeRTOS/Src/tasks.c ****             {
 2203              		.loc 1 3447 15 discriminator 1 view .LVU643
 2204 001c 0646     		mov	r6, r0
 2205 001e 0028     		cmp	r0, #0
 2206 0020 2FD0     		beq	.L153
3449:FreeRTOS/Src/tasks.c **** 
 2207              		.loc 1 3449 51 is_stmt 1 view .LVU644
3452:FreeRTOS/Src/tasks.c ****                 {
 2208              		.loc 1 3452 17 view .LVU645
3452:FreeRTOS/Src/tasks.c ****                 {
 2209              		.loc 1 3452 42 is_stmt 0 view .LVU646
 2210 0022 1E4B     		ldr	r3, .L158
 2211 0024 1B68     		ldr	r3, [r3]
3452:FreeRTOS/Src/tasks.c ****                 {
 2212              		.loc 1 3452 19 view .LVU647
 2213 0026 002B     		cmp	r3, #0
 2214 0028 31D1     		bne	.L154
3458:FreeRTOS/Src/tasks.c ****                         {
 2215              		.loc 1 3458 25 is_stmt 1 view .LVU648
3458:FreeRTOS/Src/tasks.c ****                         {
 2216              		.loc 1 3458 34 is_stmt 0 view .LVU649
 2217 002a E26A     		ldr	r2, [r4, #44]
3458:FreeRTOS/Src/tasks.c ****                         {
 2218              		.loc 1 3458 61 view .LVU650
 2219 002c 1C4B     		ldr	r3, .L158+4
 2220 002e 1B68     		ldr	r3, [r3]
 2221 0030 DB6A     		ldr	r3, [r3, #44]
3458:FreeRTOS/Src/tasks.c ****                         {
 2222              		.loc 1 3458 27 view .LVU651
 2223 0032 9A42     		cmp	r2, r3
 2224 0034 29D9     		bls	.L156
3460:FreeRTOS/Src/tasks.c **** 
 2225              		.loc 1 3460 29 is_stmt 1 view .LVU652
 2226              	.LVL177:
3465:FreeRTOS/Src/tasks.c ****                         }
 2227              		.loc 1 3465 29 view .LVU653
3465:FreeRTOS/Src/tasks.c ****                         }
 2228              		.loc 1 3465 49 is_stmt 0 view .LVU654
 2229 0036 0126     		movs	r6, #1
 2230 0038 1A4B     		ldr	r3, .L158+8
 2231 003a 1E60     		str	r6, [r3]
 2232              	.LVL178:
 2233              	.L155:
3469:FreeRTOS/Src/tasks.c ****                         }
 2234              		.loc 1 3469 53 is_stmt 1 view .LVU655
3474:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2235              		.loc 1 3474 21 view .LVU656
3474:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 204


 2236              		.loc 1 3474 30 is_stmt 0 view .LVU657
 2237 003c 271D     		adds	r7, r4, #4
 2238 003e 3846     		mov	r0, r7
 2239 0040 FFF7FEFF 		bl	uxListRemove
 2240              	.LVL179:
3475:FreeRTOS/Src/tasks.c ****                 }
 2241              		.loc 1 3475 21 is_stmt 1 view .LVU658
3475:FreeRTOS/Src/tasks.c ****                 }
 2242              		.loc 1 3475 21 view .LVU659
3475:FreeRTOS/Src/tasks.c ****                 }
 2243              		.loc 1 3475 21 view .LVU660
 2244 0044 E36A     		ldr	r3, [r4, #44]
 2245 0046 0122     		movs	r2, #1
 2246 0048 9A40     		lsls	r2, r2, r3
 2247 004a 1749     		ldr	r1, .L158+12
 2248 004c 0868     		ldr	r0, [r1]
 2249 004e 0243     		orrs	r2, r2, r0
 2250 0050 0A60     		str	r2, [r1]
3475:FreeRTOS/Src/tasks.c ****                 }
 2251              		.loc 1 3475 21 view .LVU661
 2252              	.LBB61:
3475:FreeRTOS/Src/tasks.c ****                 }
 2253              		.loc 1 3475 21 view .LVU662
 2254 0052 164A     		ldr	r2, .L158+16
 2255 0054 03EB8303 		add	r3, r3, r3, lsl #2
 2256 0058 02EB8303 		add	r3, r2, r3, lsl #2
 2257 005c 5B68     		ldr	r3, [r3, #4]
 2258              	.LVL180:
3475:FreeRTOS/Src/tasks.c ****                 }
 2259              		.loc 1 3475 21 view .LVU663
3475:FreeRTOS/Src/tasks.c ****                 }
 2260              		.loc 1 3475 21 view .LVU664
3475:FreeRTOS/Src/tasks.c ****                 }
 2261              		.loc 1 3475 21 view .LVU665
 2262 005e A360     		str	r3, [r4, #8]
3475:FreeRTOS/Src/tasks.c ****                 }
 2263              		.loc 1 3475 21 view .LVU666
 2264 0060 9968     		ldr	r1, [r3, #8]
 2265 0062 E160     		str	r1, [r4, #12]
3475:FreeRTOS/Src/tasks.c ****                 }
 2266              		.loc 1 3475 21 view .LVU667
 2267 0064 4F60     		str	r7, [r1, #4]
3475:FreeRTOS/Src/tasks.c ****                 }
 2268              		.loc 1 3475 21 view .LVU668
 2269 0066 9F60     		str	r7, [r3, #8]
3475:FreeRTOS/Src/tasks.c ****                 }
 2270              		.loc 1 3475 21 view .LVU669
 2271 0068 E36A     		ldr	r3, [r4, #44]
 2272              	.LVL181:
3475:FreeRTOS/Src/tasks.c ****                 }
 2273              		.loc 1 3475 21 is_stmt 0 view .LVU670
 2274 006a 03EB8301 		add	r1, r3, r3, lsl #2
 2275 006e 02EB8100 		add	r0, r2, r1, lsl #2
 2276 0072 6061     		str	r0, [r4, #20]
3475:FreeRTOS/Src/tasks.c ****                 }
 2277              		.loc 1 3475 21 is_stmt 1 view .LVU671
 2278 0074 52F82110 		ldr	r1, [r2, r1, lsl #2]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 205


 2279 0078 0131     		adds	r1, r1, #1
 2280 007a 03EB8303 		add	r3, r3, r3, lsl #2
 2281 007e 42F82310 		str	r1, [r2, r3, lsl #2]
 2282              	.LBE61:
3475:FreeRTOS/Src/tasks.c ****                 }
 2283              		.loc 1 3475 21 view .LVU672
3475:FreeRTOS/Src/tasks.c ****                 }
 2284              		.loc 1 3475 21 view .LVU673
3475:FreeRTOS/Src/tasks.c ****                 }
 2285              		.loc 1 3475 21 view .LVU674
 2286              	.LVL182:
 2287              	.L153:
3498:FreeRTOS/Src/tasks.c ****             }
 2288              		.loc 1 3498 41 view .LVU675
3501:FreeRTOS/Src/tasks.c **** 
 2289              		.loc 1 3501 9 view .LVU676
 2290              	.LBB62:
 2291              	.LBI62:
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2292              		.loc 2 249 30 view .LVU677
 2293              	.LBB63:
 2294              		.loc 2 251 5 view .LVU678
 2295              		.syntax unified
 2296              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2297 0082 85F31188 		   msr basepri, r5 
 2298              	@ 0 "" 2
 2299              		.thumb
 2300              		.syntax unified
 2301              	.LBE63:
 2302              	.LBE62:
3503:FreeRTOS/Src/tasks.c **** 
 2303              		.loc 1 3503 57 view .LVU679
3505:FreeRTOS/Src/tasks.c ****     }
 2304              		.loc 1 3505 9 view .LVU680
3506:FreeRTOS/Src/tasks.c **** 
 2305              		.loc 1 3506 5 is_stmt 0 view .LVU681
 2306 0086 3046     		mov	r0, r6
 2307 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2308              	.LVL183:
 2309              	.L156:
3416:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2310              		.loc 1 3416 20 view .LVU682
 2311 008a 0026     		movs	r6, #0
 2312 008c D6E7     		b	.L155
 2313              	.L154:
3482:FreeRTOS/Src/tasks.c ****                 }
 2314              		.loc 1 3482 21 is_stmt 1 view .LVU683
 2315 008e 04F11801 		add	r1, r4, #24
 2316 0092 0748     		ldr	r0, .L158+20
 2317 0094 FFF7FEFF 		bl	vListInsertEnd
 2318              	.LVL184:
3416:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2319              		.loc 1 3416 20 is_stmt 0 view .LVU684
 2320 0098 0026     		movs	r6, #0
 2321 009a F2E7     		b	.L153
 2322              	.L159:
 2323              		.align	2
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 206


 2324              	.L158:
 2325 009c 00000000 		.word	uxSchedulerSuspended
 2326 00a0 00000000 		.word	pxCurrentTCB
 2327 00a4 00000000 		.word	xYieldPendings
 2328 00a8 00000000 		.word	uxTopReadyPriority
 2329 00ac 00000000 		.word	pxReadyTasksLists
 2330 00b0 00000000 		.word	xPendingReadyList
 2331              		.cfi_endproc
 2332              	.LFE143:
 2334              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2335              		.align	1
 2336              		.global	vTaskStartScheduler
 2337              		.syntax unified
 2338              		.thumb
 2339              		.thumb_func
 2341              	vTaskStartScheduler:
 2342              	.LFB145:
3666:FreeRTOS/Src/tasks.c ****     BaseType_t xReturn;
 2343              		.loc 1 3666 1 is_stmt 1 view -0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 0
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
 2347 0000 08B5     		push	{r3, lr}
 2348              	.LCFI25:
 2349              		.cfi_def_cfa_offset 8
 2350              		.cfi_offset 3, -8
 2351              		.cfi_offset 14, -4
3667:FreeRTOS/Src/tasks.c **** 
 2352              		.loc 1 3667 5 view .LVU686
3669:FreeRTOS/Src/tasks.c **** 
 2353              		.loc 1 3669 37 view .LVU687
3679:FreeRTOS/Src/tasks.c **** 
 2354              		.loc 1 3679 5 view .LVU688
3679:FreeRTOS/Src/tasks.c **** 
 2355              		.loc 1 3679 15 is_stmt 0 view .LVU689
 2356 0002 FFF7FEFF 		bl	prvCreateIdleTasks
 2357              	.LVL185:
3683:FreeRTOS/Src/tasks.c ****         {
 2358              		.loc 1 3683 9 is_stmt 1 view .LVU690
3683:FreeRTOS/Src/tasks.c ****         {
 2359              		.loc 1 3683 11 is_stmt 0 view .LVU691
 2360 0006 0128     		cmp	r0, #1
 2361 0008 02D0     		beq	.L163
 2362              	.LVL186:
 2363              	.L161:
3753:FreeRTOS/Src/tasks.c ****     }
 2364              		.loc 1 3753 73 is_stmt 1 view .LVU692
3758:FreeRTOS/Src/tasks.c **** 
 2365              		.loc 1 3758 5 view .LVU693
3762:FreeRTOS/Src/tasks.c **** 
 2366              		.loc 1 3762 5 view .LVU694
 2367 000a 0E4B     		ldr	r3, .L164
 2368 000c 1B68     		ldr	r3, [r3]
3764:FreeRTOS/Src/tasks.c **** }
 2369              		.loc 1 3764 38 view .LVU695
3765:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 2370              		.loc 1 3765 1 is_stmt 0 view .LVU696
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 207


 2371 000e 08BD     		pop	{r3, pc}
 2372              	.LVL187:
 2373              	.L163:
3685:FreeRTOS/Src/tasks.c ****         }
 2374              		.loc 1 3685 13 is_stmt 1 view .LVU697
3685:FreeRTOS/Src/tasks.c ****         }
 2375              		.loc 1 3685 23 is_stmt 0 view .LVU698
 2376 0010 FFF7FEFF 		bl	xTimerCreateTimerTask
 2377              	.LVL188:
3689:FreeRTOS/Src/tasks.c ****         }
 2378              		.loc 1 3689 37 is_stmt 1 view .LVU699
3694:FreeRTOS/Src/tasks.c ****     {
 2379              		.loc 1 3694 5 view .LVU700
3694:FreeRTOS/Src/tasks.c ****     {
 2380              		.loc 1 3694 7 is_stmt 0 view .LVU701
 2381 0014 0128     		cmp	r0, #1
 2382 0016 F8D1     		bne	.L161
3710:FreeRTOS/Src/tasks.c **** 
 2383              		.loc 1 3710 9 is_stmt 1 view .LVU702
 2384              	.LBB64:
 2385              	.LBI64:
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2386              		.loc 2 213 30 view .LVU703
 2387              	.LBB65:
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2388              		.loc 2 215 5 view .LVU704
 217:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2389              		.loc 2 217 5 view .LVU705
 2390              		.syntax unified
 2391              	@ 217 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2392 0018 4FF05003 		   mov r3, #80                                              
 2393 001c 83F31188 	   msr basepri, r3                                         
 2394 0020 BFF36F8F 	   isb                                                     
 2395 0024 BFF34F8F 	   dsb                                                     
 2396              	
 2397              	@ 0 "" 2
 2398              		.thumb
 2399              		.syntax unified
 2400              	.LBE65:
 2401              	.LBE64:
3720:FreeRTOS/Src/tasks.c ****         xSchedulerRunning = pdTRUE;
 2402              		.loc 1 3720 9 view .LVU706
3720:FreeRTOS/Src/tasks.c ****         xSchedulerRunning = pdTRUE;
 2403              		.loc 1 3720 30 is_stmt 0 view .LVU707
 2404 0028 074B     		ldr	r3, .L164+4
 2405 002a 4FF0FF32 		mov	r2, #-1
 2406 002e 1A60     		str	r2, [r3]
3721:FreeRTOS/Src/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2407              		.loc 1 3721 9 is_stmt 1 view .LVU708
3721:FreeRTOS/Src/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2408              		.loc 1 3721 27 is_stmt 0 view .LVU709
 2409 0030 064B     		ldr	r3, .L164+8
 2410 0032 0122     		movs	r2, #1
 2411 0034 1A60     		str	r2, [r3]
3722:FreeRTOS/Src/tasks.c **** 
 2412              		.loc 1 3722 9 is_stmt 1 view .LVU710
3722:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 208


 2413              		.loc 1 3722 20 is_stmt 0 view .LVU711
 2414 0036 064B     		ldr	r3, .L164+12
 2415 0038 0022     		movs	r2, #0
 2416 003a 1A60     		str	r2, [r3]
3730:FreeRTOS/Src/tasks.c **** 
 2417              		.loc 1 3730 49 is_stmt 1 view .LVU712
3732:FreeRTOS/Src/tasks.c **** 
 2418              		.loc 1 3732 32 view .LVU713
3739:FreeRTOS/Src/tasks.c **** 
 2419              		.loc 1 3739 9 view .LVU714
3739:FreeRTOS/Src/tasks.c **** 
 2420              		.loc 1 3739 18 is_stmt 0 view .LVU715
 2421 003c FFF7FEFF 		bl	xPortStartScheduler
 2422              	.LVL189:
3739:FreeRTOS/Src/tasks.c **** 
 2423              		.loc 1 3739 18 view .LVU716
 2424 0040 E3E7     		b	.L161
 2425              	.L165:
 2426 0042 00BF     		.align	2
 2427              	.L164:
 2428 0044 00000000 		.word	uxTopUsedPriority
 2429 0048 00000000 		.word	xNextTaskUnblockTime
 2430 004c 00000000 		.word	xSchedulerRunning
 2431 0050 00000000 		.word	xTickCount
 2432              		.cfi_endproc
 2433              	.LFE145:
 2435              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2436              		.align	1
 2437              		.global	vTaskEndScheduler
 2438              		.syntax unified
 2439              		.thumb
 2440              		.thumb_func
 2442              	vTaskEndScheduler:
 2443              	.LFB146:
3769:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskEndScheduler();
 2444              		.loc 1 3769 1 is_stmt 1 view -0
 2445              		.cfi_startproc
 2446              		@ args = 0, pretend = 0, frame = 0
 2447              		@ frame_needed = 0, uses_anonymous_args = 0
 2448 0000 10B5     		push	{r4, lr}
 2449              	.LCFI26:
 2450              		.cfi_def_cfa_offset 8
 2451              		.cfi_offset 4, -8
 2452              		.cfi_offset 14, -4
3770:FreeRTOS/Src/tasks.c **** 
 2453              		.loc 1 3770 35 view .LVU718
 2454              	.LBB66:
3774:FreeRTOS/Src/tasks.c **** 
 2455              		.loc 1 3774 9 view .LVU719
3779:FreeRTOS/Src/tasks.c ****         }
 2456              		.loc 1 3779 13 view .LVU720
 2457 0002 FFF7FEFF 		bl	xTimerGetTimerDaemonTaskHandle
 2458              	.LVL190:
3779:FreeRTOS/Src/tasks.c ****         }
 2459              		.loc 1 3779 13 is_stmt 0 discriminator 1 view .LVU721
 2460 0006 FFF7FEFF 		bl	vTaskDelete
 2461              	.LVL191:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 209


3784:FreeRTOS/Src/tasks.c ****         {
 2462              		.loc 1 3784 9 is_stmt 1 view .LVU722
3784:FreeRTOS/Src/tasks.c ****         {
 2463              		.loc 1 3784 22 is_stmt 0 view .LVU723
 2464 000a 0024     		movs	r4, #0
 2465              	.LVL192:
 2466              	.L167:
3784:FreeRTOS/Src/tasks.c ****         {
 2467              		.loc 1 3784 35 is_stmt 1 discriminator 1 view .LVU724
 2468 000c 002C     		cmp	r4, #0
 2469 000e 0FDD     		ble	.L168
3793:FreeRTOS/Src/tasks.c ****     }
 2470              		.loc 1 3793 9 view .LVU725
 2471 0010 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2472              	.LVL193:
 2473              	.LBE66:
3800:FreeRTOS/Src/tasks.c ****     xSchedulerRunning = pdFALSE;
 2474              		.loc 1 3800 5 view .LVU726
 2475              	.LBB67:
 2476              	.LBI67:
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2477              		.loc 2 213 30 view .LVU727
 2478              	.LBB68:
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2479              		.loc 2 215 5 view .LVU728
 217:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2480              		.loc 2 217 5 view .LVU729
 2481              		.syntax unified
 2482              	@ 217 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2483 0014 4FF05003 		   mov r3, #80                                              
 2484 0018 83F31188 	   msr basepri, r3                                         
 2485 001c BFF36F8F 	   isb                                                     
 2486 0020 BFF34F8F 	   dsb                                                     
 2487              	
 2488              	@ 0 "" 2
 2489              		.thumb
 2490              		.syntax unified
 2491              	.LBE68:
 2492              	.LBE67:
3801:FreeRTOS/Src/tasks.c **** 
 2493              		.loc 1 3801 5 view .LVU730
3801:FreeRTOS/Src/tasks.c **** 
 2494              		.loc 1 3801 23 is_stmt 0 view .LVU731
 2495 0024 064B     		ldr	r3, .L170
 2496 0026 0022     		movs	r2, #0
 2497 0028 1A60     		str	r2, [r3]
3805:FreeRTOS/Src/tasks.c **** 
 2498              		.loc 1 3805 5 is_stmt 1 view .LVU732
 2499 002a FFF7FEFF 		bl	vPortEndScheduler
 2500              	.LVL194:
3807:FreeRTOS/Src/tasks.c **** }
 2501              		.loc 1 3807 36 view .LVU733
3808:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
 2502              		.loc 1 3808 1 is_stmt 0 view .LVU734
 2503 002e 10BD     		pop	{r4, pc}
 2504              	.LVL195:
 2505              	.L168:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 210


 2506              	.LBB69:
3786:FreeRTOS/Src/tasks.c ****         }
 2507              		.loc 1 3786 13 is_stmt 1 view .LVU735
 2508 0030 044B     		ldr	r3, .L170+4
 2509 0032 53F82400 		ldr	r0, [r3, r4, lsl #2]
 2510 0036 FFF7FEFF 		bl	vTaskDelete
 2511              	.LVL196:
3784:FreeRTOS/Src/tasks.c ****         {
 2512              		.loc 1 3784 82 discriminator 3 view .LVU736
 2513 003a 0134     		adds	r4, r4, #1
 2514              	.LVL197:
3784:FreeRTOS/Src/tasks.c ****         {
 2515              		.loc 1 3784 82 is_stmt 0 discriminator 3 view .LVU737
 2516 003c E6E7     		b	.L167
 2517              	.L171:
 2518 003e 00BF     		.align	2
 2519              	.L170:
 2520 0040 00000000 		.word	xSchedulerRunning
 2521 0044 00000000 		.word	xIdleTaskHandles
 2522              	.LBE69:
 2523              		.cfi_endproc
 2524              	.LFE146:
 2526              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2527              		.align	1
 2528              		.global	vTaskSuspendAll
 2529              		.syntax unified
 2530              		.thumb
 2531              		.thumb_func
 2533              	vTaskSuspendAll:
 2534              	.LFB147:
3812:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskSuspendAll();
 2535              		.loc 1 3812 1 is_stmt 1 view -0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 0
 2538              		@ frame_needed = 0, uses_anonymous_args = 0
 2539              		@ link register save eliminated.
3813:FreeRTOS/Src/tasks.c **** 
 2540              		.loc 1 3813 33 view .LVU739
3824:FreeRTOS/Src/tasks.c **** 
 2541              		.loc 1 3824 31 view .LVU740
3828:FreeRTOS/Src/tasks.c **** 
 2542              		.loc 1 3828 9 view .LVU741
3828:FreeRTOS/Src/tasks.c **** 
 2543              		.loc 1 3828 32 is_stmt 0 view .LVU742
 2544 0000 024A     		ldr	r2, .L173
 2545 0002 1368     		ldr	r3, [r2]
 2546 0004 0133     		adds	r3, r3, #1
3828:FreeRTOS/Src/tasks.c **** 
 2547              		.loc 1 3828 30 view .LVU743
 2548 0006 1360     		str	r3, [r2]
3832:FreeRTOS/Src/tasks.c ****     }
 2549              		.loc 1 3832 9 is_stmt 1 view .LVU744
3887:FreeRTOS/Src/tasks.c **** }
 2550              		.loc 1 3887 34 view .LVU745
3888:FreeRTOS/Src/tasks.c **** 
 2551              		.loc 1 3888 1 is_stmt 0 view .LVU746
 2552 0008 7047     		bx	lr
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 211


 2553              	.L174:
 2554 000a 00BF     		.align	2
 2555              	.L173:
 2556 000c 00000000 		.word	uxSchedulerSuspended
 2557              		.cfi_endproc
 2558              	.LFE147:
 2560              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2561              		.align	1
 2562              		.global	xTaskGetTickCount
 2563              		.syntax unified
 2564              		.thumb
 2565              		.thumb_func
 2567              	xTaskGetTickCount:
 2568              	.LFB149:
4107:FreeRTOS/Src/tasks.c ****     TickType_t xTicks;
 2569              		.loc 1 4107 1 is_stmt 1 view -0
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 0
 2572              		@ frame_needed = 0, uses_anonymous_args = 0
 2573              		@ link register save eliminated.
4108:FreeRTOS/Src/tasks.c **** 
 2574              		.loc 1 4108 5 view .LVU748
4110:FreeRTOS/Src/tasks.c **** 
 2575              		.loc 1 4110 35 view .LVU749
4113:FreeRTOS/Src/tasks.c ****     {
 2576              		.loc 1 4113 35 view .LVU750
4115:FreeRTOS/Src/tasks.c ****     }
 2577              		.loc 1 4115 9 view .LVU751
4115:FreeRTOS/Src/tasks.c ****     }
 2578              		.loc 1 4115 16 is_stmt 0 view .LVU752
 2579 0000 014B     		ldr	r3, .L176
 2580 0002 1868     		ldr	r0, [r3]
 2581              	.LVL198:
4117:FreeRTOS/Src/tasks.c **** 
 2582              		.loc 1 4117 34 is_stmt 1 view .LVU753
4119:FreeRTOS/Src/tasks.c **** 
 2583              		.loc 1 4119 44 view .LVU754
4121:FreeRTOS/Src/tasks.c **** }
 2584              		.loc 1 4121 5 view .LVU755
4122:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 2585              		.loc 1 4122 1 is_stmt 0 view .LVU756
 2586 0004 7047     		bx	lr
 2587              	.L177:
 2588 0006 00BF     		.align	2
 2589              	.L176:
 2590 0008 00000000 		.word	xTickCount
 2591              		.cfi_endproc
 2592              	.LFE149:
 2594              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2595              		.align	1
 2596              		.global	xTaskGetTickCountFromISR
 2597              		.syntax unified
 2598              		.thumb
 2599              		.thumb_func
 2601              	xTaskGetTickCountFromISR:
 2602              	.LFB150:
4126:FreeRTOS/Src/tasks.c ****     TickType_t xReturn;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 212


 2603              		.loc 1 4126 1 is_stmt 1 view -0
 2604              		.cfi_startproc
 2605              		@ args = 0, pretend = 0, frame = 0
 2606              		@ frame_needed = 0, uses_anonymous_args = 0
 2607              		@ link register save eliminated.
4127:FreeRTOS/Src/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
 2608              		.loc 1 4127 5 view .LVU758
4128:FreeRTOS/Src/tasks.c **** 
 2609              		.loc 1 4128 5 view .LVU759
4130:FreeRTOS/Src/tasks.c **** 
 2610              		.loc 1 4130 42 view .LVU760
4146:FreeRTOS/Src/tasks.c **** 
 2611              		.loc 1 4146 47 view .LVU761
4148:FreeRTOS/Src/tasks.c ****     {
 2612              		.loc 1 4148 5 view .LVU762
 2613              	.LVL199:
4150:FreeRTOS/Src/tasks.c ****     }
 2614              		.loc 1 4150 9 view .LVU763
4150:FreeRTOS/Src/tasks.c ****     }
 2615              		.loc 1 4150 17 is_stmt 0 view .LVU764
 2616 0000 014B     		ldr	r3, .L179
 2617 0002 1868     		ldr	r0, [r3]
 2618              	.LVL200:
4152:FreeRTOS/Src/tasks.c **** 
 2619              		.loc 1 4152 5 is_stmt 1 view .LVU765
4154:FreeRTOS/Src/tasks.c **** 
 2620              		.loc 1 4154 52 view .LVU766
4156:FreeRTOS/Src/tasks.c **** }
 2621              		.loc 1 4156 5 view .LVU767
4157:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 2622              		.loc 1 4157 1 is_stmt 0 view .LVU768
 2623 0004 7047     		bx	lr
 2624              	.L180:
 2625 0006 00BF     		.align	2
 2626              	.L179:
 2627 0008 00000000 		.word	xTickCount
 2628              		.cfi_endproc
 2629              	.LFE150:
 2631              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2632              		.align	1
 2633              		.global	uxTaskGetNumberOfTasks
 2634              		.syntax unified
 2635              		.thumb
 2636              		.thumb_func
 2638              	uxTaskGetNumberOfTasks:
 2639              	.LFB151:
4161:FreeRTOS/Src/tasks.c ****     traceENTER_uxTaskGetNumberOfTasks();
 2640              		.loc 1 4161 1 is_stmt 1 view -0
 2641              		.cfi_startproc
 2642              		@ args = 0, pretend = 0, frame = 0
 2643              		@ frame_needed = 0, uses_anonymous_args = 0
 2644              		@ link register save eliminated.
4162:FreeRTOS/Src/tasks.c **** 
 2645              		.loc 1 4162 40 view .LVU770
4166:FreeRTOS/Src/tasks.c **** 
 2646              		.loc 1 4166 65 view .LVU771
4168:FreeRTOS/Src/tasks.c **** }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 213


 2647              		.loc 1 4168 5 view .LVU772
4168:FreeRTOS/Src/tasks.c **** }
 2648              		.loc 1 4168 12 is_stmt 0 view .LVU773
 2649 0000 014B     		ldr	r3, .L182
 2650 0002 1868     		ldr	r0, [r3]
4169:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 2651              		.loc 1 4169 1 view .LVU774
 2652 0004 7047     		bx	lr
 2653              	.L183:
 2654 0006 00BF     		.align	2
 2655              	.L182:
 2656 0008 00000000 		.word	uxCurrentNumberOfTasks
 2657              		.cfi_endproc
 2658              	.LFE151:
 2660              		.section	.text.pcTaskGetName,"ax",%progbits
 2661              		.align	1
 2662              		.global	pcTaskGetName
 2663              		.syntax unified
 2664              		.thumb
 2665              		.thumb_func
 2667              	pcTaskGetName:
 2668              	.LVL201:
 2669              	.LFB152:
4173:FreeRTOS/Src/tasks.c ****     TCB_t * pxTCB;
 2670              		.loc 1 4173 1 is_stmt 1 view -0
 2671              		.cfi_startproc
 2672              		@ args = 0, pretend = 0, frame = 0
 2673              		@ frame_needed = 0, uses_anonymous_args = 0
 2674              		@ link register save eliminated.
4174:FreeRTOS/Src/tasks.c **** 
 2675              		.loc 1 4174 5 view .LVU776
4176:FreeRTOS/Src/tasks.c **** 
 2676              		.loc 1 4176 45 view .LVU777
4180:FreeRTOS/Src/tasks.c ****     configASSERT( pxTCB );
 2677              		.loc 1 4180 5 view .LVU778
4180:FreeRTOS/Src/tasks.c ****     configASSERT( pxTCB );
 2678              		.loc 1 4180 13 is_stmt 0 view .LVU779
 2679 0000 0346     		mov	r3, r0
 2680 0002 10B1     		cbz	r0, .L186
 2681              	.LVL202:
 2682              	.L185:
4181:FreeRTOS/Src/tasks.c **** 
 2683              		.loc 1 4181 26 is_stmt 1 view .LVU780
4183:FreeRTOS/Src/tasks.c **** 
 2684              		.loc 1 4183 61 view .LVU781
4185:FreeRTOS/Src/tasks.c **** }
 2685              		.loc 1 4185 5 view .LVU782
4186:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 2686              		.loc 1 4186 1 is_stmt 0 view .LVU783
 2687 0004 03F13400 		add	r0, r3, #52
 2688 0008 7047     		bx	lr
 2689              	.LVL203:
 2690              	.L186:
4180:FreeRTOS/Src/tasks.c ****     configASSERT( pxTCB );
 2691              		.loc 1 4180 13 discriminator 1 view .LVU784
 2692 000a 014B     		ldr	r3, .L187
 2693 000c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 214


 2694              	.LVL204:
4180:FreeRTOS/Src/tasks.c ****     configASSERT( pxTCB );
 2695              		.loc 1 4180 13 discriminator 1 view .LVU785
 2696 000e F9E7     		b	.L185
 2697              	.L188:
 2698              		.align	2
 2699              	.L187:
 2700 0010 00000000 		.word	pxCurrentTCB
 2701              		.cfi_endproc
 2702              	.LFE152:
 2704              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2705              		.align	1
 2706              		.global	xTaskIncrementTick
 2707              		.syntax unified
 2708              		.thumb
 2709              		.thumb_func
 2711              	xTaskIncrementTick:
 2712              	.LFB154:
4671:FreeRTOS/Src/tasks.c ****     TCB_t * pxTCB;
 2713              		.loc 1 4671 1 is_stmt 1 view -0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 0
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 2717 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2718              	.LCFI27:
 2719              		.cfi_def_cfa_offset 24
 2720              		.cfi_offset 3, -24
 2721              		.cfi_offset 4, -20
 2722              		.cfi_offset 5, -16
 2723              		.cfi_offset 6, -12
 2724              		.cfi_offset 7, -8
 2725              		.cfi_offset 14, -4
4672:FreeRTOS/Src/tasks.c ****     TickType_t xItemValue;
 2726              		.loc 1 4672 5 view .LVU787
4673:FreeRTOS/Src/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 2727              		.loc 1 4673 5 view .LVU788
4674:FreeRTOS/Src/tasks.c **** 
 2728              		.loc 1 4674 5 view .LVU789
 2729              	.LVL205:
4680:FreeRTOS/Src/tasks.c **** 
 2730              		.loc 1 4680 36 view .LVU790
4685:FreeRTOS/Src/tasks.c **** 
 2731              		.loc 1 4685 43 view .LVU791
4691:FreeRTOS/Src/tasks.c ****     {
 2732              		.loc 1 4691 5 view .LVU792
4691:FreeRTOS/Src/tasks.c ****     {
 2733              		.loc 1 4691 30 is_stmt 0 view .LVU793
 2734 0002 4C4B     		ldr	r3, .L212
 2735 0004 1B68     		ldr	r3, [r3]
4691:FreeRTOS/Src/tasks.c ****     {
 2736              		.loc 1 4691 7 view .LVU794
 2737 0006 002B     		cmp	r3, #0
 2738 0008 40F08D80 		bne	.L190
 2739              	.LBB70:
4695:FreeRTOS/Src/tasks.c **** 
 2740              		.loc 1 4695 9 is_stmt 1 view .LVU795
4695:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 215


 2741              		.loc 1 4695 55 is_stmt 0 view .LVU796
 2742 000c 4A4B     		ldr	r3, .L212+4
 2743 000e 1C68     		ldr	r4, [r3]
4695:FreeRTOS/Src/tasks.c **** 
 2744              		.loc 1 4695 26 view .LVU797
 2745 0010 0134     		adds	r4, r4, #1
 2746              	.LVL206:
4699:FreeRTOS/Src/tasks.c **** 
 2747              		.loc 1 4699 9 is_stmt 1 view .LVU798
4699:FreeRTOS/Src/tasks.c **** 
 2748              		.loc 1 4699 20 is_stmt 0 view .LVU799
 2749 0012 1C60     		str	r4, [r3]
4701:FreeRTOS/Src/tasks.c ****         {
 2750              		.loc 1 4701 9 is_stmt 1 view .LVU800
4701:FreeRTOS/Src/tasks.c ****         {
 2751              		.loc 1 4701 11 is_stmt 0 view .LVU801
 2752 0014 ACB1     		cbz	r4, .L208
 2753              	.L191:
4707:FreeRTOS/Src/tasks.c ****         }
 2754              		.loc 1 4707 37 is_stmt 1 view .LVU802
4714:FreeRTOS/Src/tasks.c ****         {
 2755              		.loc 1 4714 9 view .LVU803
4714:FreeRTOS/Src/tasks.c ****         {
 2756              		.loc 1 4714 29 is_stmt 0 view .LVU804
 2757 0016 494B     		ldr	r3, .L212+8
 2758 0018 1B68     		ldr	r3, [r3]
4714:FreeRTOS/Src/tasks.c ****         {
 2759              		.loc 1 4714 11 view .LVU805
 2760 001a A342     		cmp	r3, r4
 2761 001c 1ED9     		bls	.L203
 2762              	.LBE70:
4674:FreeRTOS/Src/tasks.c **** 
 2763              		.loc 1 4674 16 view .LVU806
 2764 001e 0020     		movs	r0, #0
 2765              	.LVL207:
 2766              	.L193:
 2767              	.LBB77:
4814:FreeRTOS/Src/tasks.c ****                 {
 2768              		.loc 1 4814 17 is_stmt 1 view .LVU807
4814:FreeRTOS/Src/tasks.c ****                 {
 2769              		.loc 1 4814 21 is_stmt 0 view .LVU808
 2770 0020 474B     		ldr	r3, .L212+12
 2771 0022 1B68     		ldr	r3, [r3]
 2772 0024 DB6A     		ldr	r3, [r3, #44]
 2773 0026 03EB8303 		add	r3, r3, r3, lsl #2
 2774 002a 9A00     		lsls	r2, r3, #2
 2775 002c 454B     		ldr	r3, .L212+16
 2776 002e 9B58     		ldr	r3, [r3, r2]
4814:FreeRTOS/Src/tasks.c ****                 {
 2777              		.loc 1 4814 19 view .LVU809
 2778 0030 012B     		cmp	r3, #1
 2779 0032 00D9     		bls	.L201
4816:FreeRTOS/Src/tasks.c ****                 }
 2780              		.loc 1 4816 37 view .LVU810
 2781 0034 0120     		movs	r0, #1
 2782              	.LVL208:
 2783              	.L201:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 216


4820:FreeRTOS/Src/tasks.c ****                 }
 2784              		.loc 1 4820 45 is_stmt 1 view .LVU811
4863:FreeRTOS/Src/tasks.c ****                 {
 2785              		.loc 1 4863 17 view .LVU812
4863:FreeRTOS/Src/tasks.c ****                 {
 2786              		.loc 1 4863 35 is_stmt 0 view .LVU813
 2787 0036 444B     		ldr	r3, .L212+20
 2788 0038 1B68     		ldr	r3, [r3]
4863:FreeRTOS/Src/tasks.c ****                 {
 2789              		.loc 1 4863 19 view .LVU814
 2790 003a 002B     		cmp	r3, #0
 2791 003c 78D0     		beq	.L189
4865:FreeRTOS/Src/tasks.c ****                 }
 2792              		.loc 1 4865 37 view .LVU815
 2793 003e 0120     		movs	r0, #1
 2794              	.LVL209:
4865:FreeRTOS/Src/tasks.c ****                 }
 2795              		.loc 1 4865 37 view .LVU816
 2796              	.LBE77:
4918:FreeRTOS/Src/tasks.c **** 
 2797              		.loc 1 4918 54 is_stmt 1 view .LVU817
4920:FreeRTOS/Src/tasks.c **** }
 2798              		.loc 1 4920 5 view .LVU818
4920:FreeRTOS/Src/tasks.c **** }
 2799              		.loc 1 4920 12 is_stmt 0 view .LVU819
 2800 0040 76E0     		b	.L189
 2801              	.LVL210:
 2802              	.L208:
 2803              	.LBB78:
4703:FreeRTOS/Src/tasks.c ****         }
 2804              		.loc 1 4703 13 is_stmt 1 view .LVU820
 2805              	.LBB71:
4703:FreeRTOS/Src/tasks.c ****         }
 2806              		.loc 1 4703 13 view .LVU821
4703:FreeRTOS/Src/tasks.c ****         }
 2807              		.loc 1 4703 13 view .LVU822
4703:FreeRTOS/Src/tasks.c ****         }
 2808              		.loc 1 4703 13 view .LVU823
 2809 0042 424A     		ldr	r2, .L212+24
 2810 0044 1168     		ldr	r1, [r2]
 2811              	.LVL211:
4703:FreeRTOS/Src/tasks.c ****         }
 2812              		.loc 1 4703 13 view .LVU824
 2813 0046 424B     		ldr	r3, .L212+28
 2814 0048 1868     		ldr	r0, [r3]
 2815 004a 1060     		str	r0, [r2]
4703:FreeRTOS/Src/tasks.c ****         }
 2816              		.loc 1 4703 13 view .LVU825
 2817 004c 1960     		str	r1, [r3]
4703:FreeRTOS/Src/tasks.c ****         }
 2818              		.loc 1 4703 13 view .LVU826
 2819 004e 414A     		ldr	r2, .L212+32
 2820 0050 1368     		ldr	r3, [r2]
 2821 0052 0133     		adds	r3, r3, #1
 2822 0054 1360     		str	r3, [r2]
4703:FreeRTOS/Src/tasks.c ****         }
 2823              		.loc 1 4703 13 view .LVU827
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 217


 2824 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2825              	.LVL212:
4703:FreeRTOS/Src/tasks.c ****         }
 2826              		.loc 1 4703 13 is_stmt 0 view .LVU828
 2827              	.LBE71:
4703:FreeRTOS/Src/tasks.c ****         }
 2828              		.loc 1 4703 13 is_stmt 1 discriminator 1 view .LVU829
 2829 005a DCE7     		b	.L191
 2830              	.LVL213:
 2831              	.L203:
4703:FreeRTOS/Src/tasks.c ****         }
 2832              		.loc 1 4703 13 is_stmt 0 discriminator 1 view .LVU830
 2833              	.LBE78:
4674:FreeRTOS/Src/tasks.c **** 
 2834              		.loc 1 4674 16 view .LVU831
 2835 005c 0020     		movs	r0, #0
 2836 005e 37E0     		b	.L192
 2837              	.LVL214:
 2838              	.L209:
 2839              	.LBB79:
4725:FreeRTOS/Src/tasks.c ****                     break;
 2840              		.loc 1 4725 21 is_stmt 1 view .LVU832
4725:FreeRTOS/Src/tasks.c ****                     break;
 2841              		.loc 1 4725 42 is_stmt 0 view .LVU833
 2842 0060 364B     		ldr	r3, .L212+8
 2843 0062 4FF0FF32 		mov	r2, #-1
 2844 0066 1A60     		str	r2, [r3]
4726:FreeRTOS/Src/tasks.c ****                 }
 2845              		.loc 1 4726 21 is_stmt 1 view .LVU834
 2846 0068 DAE7     		b	.L193
 2847              	.LVL215:
 2848              	.L210:
4747:FreeRTOS/Src/tasks.c ****                         break;
 2849              		.loc 1 4747 25 view .LVU835
4747:FreeRTOS/Src/tasks.c ****                         break;
 2850              		.loc 1 4747 46 is_stmt 0 view .LVU836
 2851 006a 344B     		ldr	r3, .L212+8
 2852              	.LVL216:
4747:FreeRTOS/Src/tasks.c ****                         break;
 2853              		.loc 1 4747 46 view .LVU837
 2854 006c 1A60     		str	r2, [r3]
4748:FreeRTOS/Src/tasks.c ****                     }
 2855              		.loc 1 4748 25 is_stmt 1 view .LVU838
 2856 006e D7E7     		b	.L193
 2857              	.LVL217:
 2858              	.L211:
 2859              	.LBB72:
4756:FreeRTOS/Src/tasks.c **** 
 2860              		.loc 1 4756 21 discriminator 1 view .LVU839
 2861 0070 D968     		ldr	r1, [r3, #12]
 2862 0072 5160     		str	r1, [r2, #4]
 2863 0074 42E0     		b	.L196
 2864              	.LVL218:
 2865              	.L198:
4756:FreeRTOS/Src/tasks.c **** 
 2866              		.loc 1 4756 21 is_stmt 0 discriminator 1 view .LVU840
 2867              	.LBE72:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 218


 2868              	.LBB73:
4762:FreeRTOS/Src/tasks.c ****                     }
 2869              		.loc 1 4762 25 is_stmt 1 discriminator 3 view .LVU841
 2870 0076 0021     		movs	r1, #0
 2871 0078 9962     		str	r1, [r3, #40]
4762:FreeRTOS/Src/tasks.c ****                     }
 2872              		.loc 1 4762 25 view .LVU842
4762:FreeRTOS/Src/tasks.c ****                     }
 2873              		.loc 1 4762 25 is_stmt 0 discriminator 3 view .LVU843
 2874 007a 1168     		ldr	r1, [r2]
 2875 007c 0139     		subs	r1, r1, #1
 2876 007e 1160     		str	r1, [r2]
 2877              	.LBE73:
4762:FreeRTOS/Src/tasks.c ****                     }
 2878              		.loc 1 4762 25 is_stmt 1 view .LVU844
 2879              	.LVL219:
 2880              	.L197:
4766:FreeRTOS/Src/tasks.c ****                     }
 2881              		.loc 1 4766 49 view .LVU845
4771:FreeRTOS/Src/tasks.c **** 
 2882              		.loc 1 4771 21 view .LVU846
4771:FreeRTOS/Src/tasks.c **** 
 2883              		.loc 1 4771 21 view .LVU847
4771:FreeRTOS/Src/tasks.c **** 
 2884              		.loc 1 4771 21 view .LVU848
 2885 0080 DA6A     		ldr	r2, [r3, #44]
 2886 0082 0121     		movs	r1, #1
 2887 0084 9140     		lsls	r1, r1, r2
 2888 0086 344E     		ldr	r6, .L212+36
 2889 0088 3768     		ldr	r7, [r6]
 2890 008a 3943     		orrs	r1, r1, r7
 2891 008c 3160     		str	r1, [r6]
4771:FreeRTOS/Src/tasks.c **** 
 2892              		.loc 1 4771 21 view .LVU849
 2893              	.LBB74:
4771:FreeRTOS/Src/tasks.c **** 
 2894              		.loc 1 4771 21 view .LVU850
 2895 008e 2D49     		ldr	r1, .L212+16
 2896 0090 02EB8202 		add	r2, r2, r2, lsl #2
 2897 0094 4FEA820C 		lsl	ip, r2, #2
 2898 0098 8C44     		add	ip, ip, r1
 2899 009a DCF80420 		ldr	r2, [ip, #4]
 2900              	.LVL220:
4771:FreeRTOS/Src/tasks.c **** 
 2901              		.loc 1 4771 21 view .LVU851
4771:FreeRTOS/Src/tasks.c **** 
 2902              		.loc 1 4771 21 view .LVU852
4771:FreeRTOS/Src/tasks.c **** 
 2903              		.loc 1 4771 21 view .LVU853
 2904 009e 9A60     		str	r2, [r3, #8]
4771:FreeRTOS/Src/tasks.c **** 
 2905              		.loc 1 4771 21 view .LVU854
 2906 00a0 9668     		ldr	r6, [r2, #8]
 2907 00a2 DE60     		str	r6, [r3, #12]
4771:FreeRTOS/Src/tasks.c **** 
 2908              		.loc 1 4771 21 view .LVU855
 2909 00a4 7560     		str	r5, [r6, #4]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 219


4771:FreeRTOS/Src/tasks.c **** 
 2910              		.loc 1 4771 21 view .LVU856
 2911 00a6 9560     		str	r5, [r2, #8]
4771:FreeRTOS/Src/tasks.c **** 
 2912              		.loc 1 4771 21 view .LVU857
 2913 00a8 DA6A     		ldr	r2, [r3, #44]
 2914              	.LVL221:
4771:FreeRTOS/Src/tasks.c **** 
 2915              		.loc 1 4771 21 is_stmt 0 view .LVU858
 2916 00aa 02EB820C 		add	ip, r2, r2, lsl #2
 2917 00ae 4FEA8C05 		lsl	r5, ip, #2
 2918 00b2 6E18     		adds	r6, r5, r1
 2919 00b4 5E61     		str	r6, [r3, #20]
4771:FreeRTOS/Src/tasks.c **** 
 2920              		.loc 1 4771 21 is_stmt 1 view .LVU859
 2921 00b6 4D59     		ldr	r5, [r1, r5]
 2922 00b8 0135     		adds	r5, r5, #1
 2923 00ba 4FEA8C0C 		lsl	ip, ip, #2
 2924 00be 41F80C50 		str	r5, [r1, ip]
 2925              	.LBE74:
4771:FreeRTOS/Src/tasks.c **** 
 2926              		.loc 1 4771 21 view .LVU860
4771:FreeRTOS/Src/tasks.c **** 
 2927              		.loc 1 4771 21 view .LVU861
4771:FreeRTOS/Src/tasks.c **** 
 2928              		.loc 1 4771 21 view .LVU862
4787:FreeRTOS/Src/tasks.c ****                             {
 2929              		.loc 1 4787 29 view .LVU863
4787:FreeRTOS/Src/tasks.c ****                             {
 2930              		.loc 1 4787 38 is_stmt 0 view .LVU864
 2931 00c2 DA6A     		ldr	r2, [r3, #44]
4787:FreeRTOS/Src/tasks.c ****                             {
 2932              		.loc 1 4787 65 view .LVU865
 2933 00c4 1E4B     		ldr	r3, .L212+12
 2934              	.LVL222:
4787:FreeRTOS/Src/tasks.c ****                             {
 2935              		.loc 1 4787 65 view .LVU866
 2936 00c6 1B68     		ldr	r3, [r3]
 2937 00c8 DB6A     		ldr	r3, [r3, #44]
4787:FreeRTOS/Src/tasks.c ****                             {
 2938              		.loc 1 4787 31 view .LVU867
 2939 00ca 9A42     		cmp	r2, r3
 2940 00cc 00D9     		bls	.L192
4789:FreeRTOS/Src/tasks.c ****                             }
 2941              		.loc 1 4789 49 view .LVU868
 2942 00ce 0120     		movs	r0, #1
 2943              	.LVL223:
 2944              	.L192:
4716:FreeRTOS/Src/tasks.c ****             {
 2945              		.loc 1 4716 13 is_stmt 1 view .LVU869
4718:FreeRTOS/Src/tasks.c ****                 {
 2946              		.loc 1 4718 17 view .LVU870
4718:FreeRTOS/Src/tasks.c ****                 {
 2947              		.loc 1 4718 21 is_stmt 0 view .LVU871
 2948 00d0 1E4B     		ldr	r3, .L212+24
 2949 00d2 1B68     		ldr	r3, [r3]
 2950 00d4 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 220


4718:FreeRTOS/Src/tasks.c ****                 {
 2951              		.loc 1 4718 19 view .LVU872
 2952 00d6 002B     		cmp	r3, #0
 2953 00d8 C2D0     		beq	.L209
4737:FreeRTOS/Src/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2954              		.loc 1 4737 21 is_stmt 1 view .LVU873
4737:FreeRTOS/Src/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2955              		.loc 1 4737 29 is_stmt 0 view .LVU874
 2956 00da 1C4B     		ldr	r3, .L212+24
 2957 00dc 1B68     		ldr	r3, [r3]
 2958 00de DB68     		ldr	r3, [r3, #12]
4737:FreeRTOS/Src/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2959              		.loc 1 4737 27 view .LVU875
 2960 00e0 DB68     		ldr	r3, [r3, #12]
 2961              	.LVL224:
4738:FreeRTOS/Src/tasks.c **** 
 2962              		.loc 1 4738 21 is_stmt 1 view .LVU876
4738:FreeRTOS/Src/tasks.c **** 
 2963              		.loc 1 4738 32 is_stmt 0 view .LVU877
 2964 00e2 5A68     		ldr	r2, [r3, #4]
 2965              	.LVL225:
4740:FreeRTOS/Src/tasks.c ****                     {
 2966              		.loc 1 4740 21 is_stmt 1 view .LVU878
4740:FreeRTOS/Src/tasks.c ****                     {
 2967              		.loc 1 4740 23 is_stmt 0 view .LVU879
 2968 00e4 9442     		cmp	r4, r2
 2969 00e6 C0D3     		bcc	.L210
4752:FreeRTOS/Src/tasks.c ****                     }
 2970              		.loc 1 4752 49 is_stmt 1 view .LVU880
4756:FreeRTOS/Src/tasks.c **** 
 2971              		.loc 1 4756 21 view .LVU881
 2972              	.LBB75:
4756:FreeRTOS/Src/tasks.c **** 
 2973              		.loc 1 4756 21 view .LVU882
 2974 00e8 5A69     		ldr	r2, [r3, #20]
 2975              	.LVL226:
4756:FreeRTOS/Src/tasks.c **** 
 2976              		.loc 1 4756 21 view .LVU883
 2977 00ea 9D68     		ldr	r5, [r3, #8]
 2978 00ec D968     		ldr	r1, [r3, #12]
 2979 00ee A960     		str	r1, [r5, #8]
 2980              	.LVL227:
4756:FreeRTOS/Src/tasks.c **** 
 2981              		.loc 1 4756 21 view .LVU884
 2982 00f0 9D68     		ldr	r5, [r3, #8]
 2983 00f2 4D60     		str	r5, [r1, #4]
4756:FreeRTOS/Src/tasks.c **** 
 2984              		.loc 1 4756 21 view .LVU885
 2985 00f4 5168     		ldr	r1, [r2, #4]
 2986 00f6 1D1D     		adds	r5, r3, #4
 2987 00f8 A942     		cmp	r1, r5
 2988 00fa B9D0     		beq	.L211
 2989              	.L196:
4756:FreeRTOS/Src/tasks.c **** 
 2990              		.loc 1 4756 21 discriminator 3 view .LVU886
 2991 00fc 0021     		movs	r1, #0
 2992 00fe 5961     		str	r1, [r3, #20]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 221


4756:FreeRTOS/Src/tasks.c **** 
 2993              		.loc 1 4756 21 view .LVU887
4756:FreeRTOS/Src/tasks.c **** 
 2994              		.loc 1 4756 21 is_stmt 0 discriminator 3 view .LVU888
 2995 0100 1168     		ldr	r1, [r2]
 2996 0102 0139     		subs	r1, r1, #1
 2997 0104 1160     		str	r1, [r2]
 2998              	.LBE75:
4756:FreeRTOS/Src/tasks.c **** 
 2999              		.loc 1 4756 21 is_stmt 1 view .LVU889
4760:FreeRTOS/Src/tasks.c ****                     {
 3000              		.loc 1 4760 21 view .LVU890
4760:FreeRTOS/Src/tasks.c ****                     {
 3001              		.loc 1 4760 25 is_stmt 0 view .LVU891
 3002 0106 9A6A     		ldr	r2, [r3, #40]
 3003              	.LVL228:
4760:FreeRTOS/Src/tasks.c ****                     {
 3004              		.loc 1 4760 23 view .LVU892
 3005 0108 002A     		cmp	r2, #0
 3006 010a B9D0     		beq	.L197
4762:FreeRTOS/Src/tasks.c ****                     }
 3007              		.loc 1 4762 25 is_stmt 1 view .LVU893
 3008              	.LBB76:
4762:FreeRTOS/Src/tasks.c ****                     }
 3009              		.loc 1 4762 25 view .LVU894
 3010              	.LVL229:
4762:FreeRTOS/Src/tasks.c ****                     }
 3011              		.loc 1 4762 25 view .LVU895
 3012 010c DE69     		ldr	r6, [r3, #28]
 3013 010e 196A     		ldr	r1, [r3, #32]
 3014 0110 B160     		str	r1, [r6, #8]
4762:FreeRTOS/Src/tasks.c ****                     }
 3015              		.loc 1 4762 25 view .LVU896
 3016 0112 DE69     		ldr	r6, [r3, #28]
 3017 0114 4E60     		str	r6, [r1, #4]
4762:FreeRTOS/Src/tasks.c ****                     }
 3018              		.loc 1 4762 25 view .LVU897
 3019 0116 5668     		ldr	r6, [r2, #4]
 3020 0118 03F11801 		add	r1, r3, #24
 3021 011c 8E42     		cmp	r6, r1
 3022 011e AAD1     		bne	.L198
4762:FreeRTOS/Src/tasks.c ****                     }
 3023              		.loc 1 4762 25 discriminator 1 view .LVU898
 3024 0120 196A     		ldr	r1, [r3, #32]
 3025 0122 5160     		str	r1, [r2, #4]
 3026 0124 A7E7     		b	.L198
 3027              	.LVL230:
 3028              	.L190:
4762:FreeRTOS/Src/tasks.c ****                     }
 3029              		.loc 1 4762 25 is_stmt 0 discriminator 1 view .LVU899
 3030              	.LBE76:
 3031              	.LBE79:
4907:FreeRTOS/Src/tasks.c **** 
 3032              		.loc 1 4907 9 is_stmt 1 view .LVU900
4907:FreeRTOS/Src/tasks.c **** 
 3033              		.loc 1 4907 22 is_stmt 0 view .LVU901
 3034 0126 0D4A     		ldr	r2, .L212+40
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 222


 3035 0128 1368     		ldr	r3, [r2]
 3036 012a 0133     		adds	r3, r3, #1
 3037 012c 1360     		str	r3, [r2]
4674:FreeRTOS/Src/tasks.c **** 
 3038              		.loc 1 4674 16 view .LVU902
 3039 012e 0020     		movs	r0, #0
 3040              	.LVL231:
 3041              	.L189:
4921:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 3042              		.loc 1 4921 1 view .LVU903
 3043 0130 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3044              	.L213:
 3045 0132 00BF     		.align	2
 3046              	.L212:
 3047 0134 00000000 		.word	uxSchedulerSuspended
 3048 0138 00000000 		.word	xTickCount
 3049 013c 00000000 		.word	xNextTaskUnblockTime
 3050 0140 00000000 		.word	pxCurrentTCB
 3051 0144 00000000 		.word	pxReadyTasksLists
 3052 0148 00000000 		.word	xYieldPendings
 3053 014c 00000000 		.word	pxDelayedTaskList
 3054 0150 00000000 		.word	pxOverflowDelayedTaskList
 3055 0154 00000000 		.word	xNumOfOverflows
 3056 0158 00000000 		.word	uxTopReadyPriority
 3057 015c 00000000 		.word	xPendedTicks
 3058              		.cfi_endproc
 3059              	.LFE154:
 3061              		.section	.text.xTaskResumeAll,"ax",%progbits
 3062              		.align	1
 3063              		.global	xTaskResumeAll
 3064              		.syntax unified
 3065              		.thumb
 3066              		.thumb_func
 3068              	xTaskResumeAll:
 3069              	.LFB148:
3957:FreeRTOS/Src/tasks.c ****     TCB_t * pxTCB = NULL;
 3070              		.loc 1 3957 1 is_stmt 1 view -0
 3071              		.cfi_startproc
 3072              		@ args = 0, pretend = 0, frame = 0
 3073              		@ frame_needed = 0, uses_anonymous_args = 0
 3074 0000 38B5     		push	{r3, r4, r5, lr}
 3075              	.LCFI28:
 3076              		.cfi_def_cfa_offset 16
 3077              		.cfi_offset 3, -16
 3078              		.cfi_offset 4, -12
 3079              		.cfi_offset 5, -8
 3080              		.cfi_offset 14, -4
3958:FreeRTOS/Src/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 3081              		.loc 1 3958 5 view .LVU905
 3082              	.LVL232:
3959:FreeRTOS/Src/tasks.c **** 
 3083              		.loc 1 3959 5 view .LVU906
3961:FreeRTOS/Src/tasks.c **** 
 3084              		.loc 1 3961 32 view .LVU907
3972:FreeRTOS/Src/tasks.c ****         {
 3085              		.loc 1 3972 9 view .LVU908
 3086 0002 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 223


 3087              	.LVL233:
 3088              	.LBB80:
3974:FreeRTOS/Src/tasks.c ****             xCoreID = ( BaseType_t ) portGET_CORE_ID();
 3089              		.loc 1 3974 13 view .LVU909
3975:FreeRTOS/Src/tasks.c **** 
 3090              		.loc 1 3975 13 view .LVU910
3979:FreeRTOS/Src/tasks.c **** 
 3091              		.loc 1 3979 55 view .LVU911
3981:FreeRTOS/Src/tasks.c ****             portRELEASE_TASK_LOCK();
 3092              		.loc 1 3981 13 view .LVU912
3981:FreeRTOS/Src/tasks.c ****             portRELEASE_TASK_LOCK();
 3093              		.loc 1 3981 36 is_stmt 0 view .LVU913
 3094 0006 464B     		ldr	r3, .L232
 3095 0008 1A68     		ldr	r2, [r3]
 3096 000a 013A     		subs	r2, r2, #1
3981:FreeRTOS/Src/tasks.c ****             portRELEASE_TASK_LOCK();
 3097              		.loc 1 3981 34 view .LVU914
 3098 000c 1A60     		str	r2, [r3]
3982:FreeRTOS/Src/tasks.c **** 
 3099              		.loc 1 3982 36 is_stmt 1 view .LVU915
3984:FreeRTOS/Src/tasks.c ****             {
 3100              		.loc 1 3984 13 view .LVU916
3984:FreeRTOS/Src/tasks.c ****             {
 3101              		.loc 1 3984 38 is_stmt 0 view .LVU917
 3102 000e 1B68     		ldr	r3, [r3]
3984:FreeRTOS/Src/tasks.c ****             {
 3103              		.loc 1 3984 15 view .LVU918
 3104 0010 002B     		cmp	r3, #0
 3105 0012 7FD1     		bne	.L225
3986:FreeRTOS/Src/tasks.c ****                 {
 3106              		.loc 1 3986 17 is_stmt 1 view .LVU919
3986:FreeRTOS/Src/tasks.c ****                 {
 3107              		.loc 1 3986 44 is_stmt 0 view .LVU920
 3108 0014 434B     		ldr	r3, .L232+4
 3109 0016 1B68     		ldr	r3, [r3]
3986:FreeRTOS/Src/tasks.c ****                 {
 3110              		.loc 1 3986 19 view .LVU921
 3111 0018 3BB9     		cbnz	r3, .L226
 3112              	.LBE80:
3959:FreeRTOS/Src/tasks.c **** 
 3113              		.loc 1 3959 16 view .LVU922
 3114 001a 0024     		movs	r4, #0
 3115 001c 7BE0     		b	.L215
 3116              	.LVL234:
 3117              	.L229:
 3118              	.LBB88:
 3119              	.LBB81:
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3120              		.loc 1 3996 25 is_stmt 1 discriminator 1 view .LVU923
 3121 001e 196A     		ldr	r1, [r3, #32]
 3122 0020 5160     		str	r1, [r2, #4]
 3123 0022 15E0     		b	.L217
 3124              	.LVL235:
 3125              	.L230:
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3126              		.loc 1 3996 25 is_stmt 0 discriminator 1 view .LVU924
 3127              	.LBE81:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 224


 3128              	.LBB82:
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3129              		.loc 1 3998 25 is_stmt 1 discriminator 1 view .LVU925
 3130 0024 D968     		ldr	r1, [r3, #12]
 3131 0026 5160     		str	r1, [r2, #4]
 3132 0028 21E0     		b	.L218
 3133              	.LVL236:
 3134              	.L226:
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3135              		.loc 1 3998 25 is_stmt 0 discriminator 1 view .LVU926
 3136              	.LBE82:
 3137              	.LBE88:
3958:FreeRTOS/Src/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 3138              		.loc 1 3958 13 view .LVU927
 3139 002a 0023     		movs	r3, #0
 3140              	.LVL237:
 3141              	.L216:
 3142              	.LBB89:
4011:FreeRTOS/Src/tasks.c ****                             }
 3143              		.loc 1 4011 57 is_stmt 1 view .LVU928
3990:FreeRTOS/Src/tasks.c ****                     {
 3144              		.loc 1 3990 68 view .LVU929
3990:FreeRTOS/Src/tasks.c ****                     {
 3145              		.loc 1 3990 28 is_stmt 0 view .LVU930
 3146 002c 3E4A     		ldr	r2, .L232+8
 3147 002e 1268     		ldr	r2, [r2]
3990:FreeRTOS/Src/tasks.c ****                     {
 3148              		.loc 1 3990 68 view .LVU931
 3149 0030 002A     		cmp	r2, #0
 3150 0032 4AD0     		beq	.L228
3995:FreeRTOS/Src/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3151              		.loc 1 3995 25 is_stmt 1 view .LVU932
3995:FreeRTOS/Src/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3152              		.loc 1 3995 33 is_stmt 0 view .LVU933
 3153 0034 3C4B     		ldr	r3, .L232+8
 3154              	.LVL238:
3995:FreeRTOS/Src/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3155              		.loc 1 3995 33 view .LVU934
 3156 0036 DB68     		ldr	r3, [r3, #12]
3995:FreeRTOS/Src/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3157              		.loc 1 3995 31 view .LVU935
 3158 0038 DB68     		ldr	r3, [r3, #12]
 3159              	.LVL239:
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3160              		.loc 1 3996 25 is_stmt 1 view .LVU936
 3161              	.LBB83:
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3162              		.loc 1 3996 25 view .LVU937
 3163 003a 9A6A     		ldr	r2, [r3, #40]
 3164              	.LVL240:
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3165              		.loc 1 3996 25 view .LVU938
 3166 003c D869     		ldr	r0, [r3, #28]
 3167 003e 196A     		ldr	r1, [r3, #32]
 3168 0040 8160     		str	r1, [r0, #8]
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3169              		.loc 1 3996 25 view .LVU939
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 225


 3170 0042 D869     		ldr	r0, [r3, #28]
 3171 0044 4860     		str	r0, [r1, #4]
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3172              		.loc 1 3996 25 view .LVU940
 3173 0046 5068     		ldr	r0, [r2, #4]
 3174 0048 03F11801 		add	r1, r3, #24
 3175 004c 8842     		cmp	r0, r1
 3176 004e E6D0     		beq	.L229
 3177              	.L217:
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3178              		.loc 1 3996 25 discriminator 3 view .LVU941
 3179 0050 0021     		movs	r1, #0
 3180 0052 9962     		str	r1, [r3, #40]
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3181              		.loc 1 3996 25 view .LVU942
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3182              		.loc 1 3996 25 is_stmt 0 discriminator 3 view .LVU943
 3183 0054 1168     		ldr	r1, [r2]
 3184 0056 0139     		subs	r1, r1, #1
 3185 0058 1160     		str	r1, [r2]
 3186              	.LBE83:
3996:FreeRTOS/Src/tasks.c ****                         portMEMORY_BARRIER();
 3187              		.loc 1 3996 25 is_stmt 1 view .LVU944
3997:FreeRTOS/Src/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 3188              		.loc 1 3997 25 view .LVU945
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3189              		.loc 1 3998 25 view .LVU946
 3190              	.LBB84:
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3191              		.loc 1 3998 25 view .LVU947
 3192 005a 5A69     		ldr	r2, [r3, #20]
 3193              	.LVL241:
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3194              		.loc 1 3998 25 view .LVU948
 3195 005c 9868     		ldr	r0, [r3, #8]
 3196 005e D968     		ldr	r1, [r3, #12]
 3197 0060 8160     		str	r1, [r0, #8]
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3198              		.loc 1 3998 25 view .LVU949
 3199 0062 9868     		ldr	r0, [r3, #8]
 3200 0064 4860     		str	r0, [r1, #4]
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3201              		.loc 1 3998 25 view .LVU950
 3202 0066 5168     		ldr	r1, [r2, #4]
 3203 0068 181D     		adds	r0, r3, #4
 3204 006a 8142     		cmp	r1, r0
 3205 006c DAD0     		beq	.L230
 3206              	.L218:
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3207              		.loc 1 3998 25 discriminator 3 view .LVU951
 3208 006e 0021     		movs	r1, #0
 3209 0070 5961     		str	r1, [r3, #20]
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3210              		.loc 1 3998 25 view .LVU952
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3211              		.loc 1 3998 25 is_stmt 0 discriminator 3 view .LVU953
 3212 0072 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 226


 3213 0074 0139     		subs	r1, r1, #1
 3214 0076 1160     		str	r1, [r2]
 3215              	.LBE84:
3998:FreeRTOS/Src/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3216              		.loc 1 3998 25 is_stmt 1 view .LVU954
3999:FreeRTOS/Src/tasks.c **** 
 3217              		.loc 1 3999 25 view .LVU955
3999:FreeRTOS/Src/tasks.c **** 
 3218              		.loc 1 3999 25 view .LVU956
3999:FreeRTOS/Src/tasks.c **** 
 3219              		.loc 1 3999 25 view .LVU957
 3220 0078 DA6A     		ldr	r2, [r3, #44]
 3221              	.LVL242:
3999:FreeRTOS/Src/tasks.c **** 
 3222              		.loc 1 3999 25 is_stmt 0 view .LVU958
 3223 007a 0121     		movs	r1, #1
 3224 007c 9140     		lsls	r1, r1, r2
 3225 007e 2B4C     		ldr	r4, .L232+12
 3226 0080 2568     		ldr	r5, [r4]
 3227 0082 2943     		orrs	r1, r1, r5
 3228 0084 2160     		str	r1, [r4]
3999:FreeRTOS/Src/tasks.c **** 
 3229              		.loc 1 3999 25 is_stmt 1 view .LVU959
 3230              	.LBB85:
3999:FreeRTOS/Src/tasks.c **** 
 3231              		.loc 1 3999 25 view .LVU960
 3232 0086 2A49     		ldr	r1, .L232+16
 3233 0088 02EB8202 		add	r2, r2, r2, lsl #2
 3234 008c 01EB8202 		add	r2, r1, r2, lsl #2
 3235 0090 5268     		ldr	r2, [r2, #4]
 3236              	.LVL243:
3999:FreeRTOS/Src/tasks.c **** 
 3237              		.loc 1 3999 25 view .LVU961
3999:FreeRTOS/Src/tasks.c **** 
 3238              		.loc 1 3999 25 view .LVU962
3999:FreeRTOS/Src/tasks.c **** 
 3239              		.loc 1 3999 25 view .LVU963
 3240 0092 9A60     		str	r2, [r3, #8]
3999:FreeRTOS/Src/tasks.c **** 
 3241              		.loc 1 3999 25 view .LVU964
 3242 0094 9468     		ldr	r4, [r2, #8]
 3243 0096 DC60     		str	r4, [r3, #12]
3999:FreeRTOS/Src/tasks.c **** 
 3244              		.loc 1 3999 25 view .LVU965
 3245 0098 6060     		str	r0, [r4, #4]
3999:FreeRTOS/Src/tasks.c **** 
 3246              		.loc 1 3999 25 view .LVU966
 3247 009a 9060     		str	r0, [r2, #8]
3999:FreeRTOS/Src/tasks.c **** 
 3248              		.loc 1 3999 25 view .LVU967
 3249 009c DA6A     		ldr	r2, [r3, #44]
 3250              	.LVL244:
3999:FreeRTOS/Src/tasks.c **** 
 3251              		.loc 1 3999 25 is_stmt 0 view .LVU968
 3252 009e 02EB8200 		add	r0, r2, r2, lsl #2
 3253 00a2 01EB8004 		add	r4, r1, r0, lsl #2
 3254 00a6 5C61     		str	r4, [r3, #20]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 227


3999:FreeRTOS/Src/tasks.c **** 
 3255              		.loc 1 3999 25 is_stmt 1 view .LVU969
 3256 00a8 51F82000 		ldr	r0, [r1, r0, lsl #2]
 3257 00ac 0130     		adds	r0, r0, #1
 3258 00ae 02EB8202 		add	r2, r2, r2, lsl #2
 3259 00b2 41F82200 		str	r0, [r1, r2, lsl #2]
 3260              	.LBE85:
3999:FreeRTOS/Src/tasks.c **** 
 3261              		.loc 1 3999 25 view .LVU970
3999:FreeRTOS/Src/tasks.c **** 
 3262              		.loc 1 3999 25 view .LVU971
3999:FreeRTOS/Src/tasks.c **** 
 3263              		.loc 1 3999 25 view .LVU972
4005:FreeRTOS/Src/tasks.c ****                             {
 3264              		.loc 1 4005 29 view .LVU973
4005:FreeRTOS/Src/tasks.c ****                             {
 3265              		.loc 1 4005 38 is_stmt 0 view .LVU974
 3266 00b6 D96A     		ldr	r1, [r3, #44]
4005:FreeRTOS/Src/tasks.c ****                             {
 3267              		.loc 1 4005 65 view .LVU975
 3268 00b8 1E4A     		ldr	r2, .L232+20
 3269 00ba 1268     		ldr	r2, [r2]
 3270 00bc D26A     		ldr	r2, [r2, #44]
4005:FreeRTOS/Src/tasks.c ****                             {
 3271              		.loc 1 4005 31 view .LVU976
 3272 00be 9142     		cmp	r1, r2
 3273 00c0 B4D9     		bls	.L216
4007:FreeRTOS/Src/tasks.c ****                             }
 3274              		.loc 1 4007 33 is_stmt 1 view .LVU977
4007:FreeRTOS/Src/tasks.c ****                             }
 3275              		.loc 1 4007 59 is_stmt 0 view .LVU978
 3276 00c2 1D4A     		ldr	r2, .L232+24
 3277 00c4 0121     		movs	r1, #1
 3278 00c6 1160     		str	r1, [r2]
 3279 00c8 B0E7     		b	.L216
 3280              	.LVL245:
 3281              	.L228:
4023:FreeRTOS/Src/tasks.c ****                     {
 3282              		.loc 1 4023 21 is_stmt 1 view .LVU979
4023:FreeRTOS/Src/tasks.c ****                     {
 3283              		.loc 1 4023 23 is_stmt 0 view .LVU980
 3284 00ca 0BB1     		cbz	r3, .L221
4031:FreeRTOS/Src/tasks.c ****                     }
 3285              		.loc 1 4031 25 is_stmt 1 view .LVU981
 3286 00cc FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3287              	.LVL246:
 3288              	.L221:
 3289              	.LBB86:
4044:FreeRTOS/Src/tasks.c **** 
 3290              		.loc 1 4044 25 view .LVU982
4044:FreeRTOS/Src/tasks.c **** 
 3291              		.loc 1 4044 36 is_stmt 0 view .LVU983
 3292 00d0 1A4B     		ldr	r3, .L232+28
 3293 00d2 1C68     		ldr	r4, [r3]
 3294              	.LVL247:
4046:FreeRTOS/Src/tasks.c ****                         {
 3295              		.loc 1 4046 25 is_stmt 1 view .LVU984
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 228


4046:FreeRTOS/Src/tasks.c ****                         {
 3296              		.loc 1 4046 27 is_stmt 0 view .LVU985
 3297 00d4 94B9     		cbnz	r4, .L224
 3298              	.L222:
4068:FreeRTOS/Src/tasks.c ****                         }
 3299              		.loc 1 4068 53 is_stmt 1 view .LVU986
 3300              	.LBE86:
4072:FreeRTOS/Src/tasks.c ****                     {
 3301              		.loc 1 4072 21 view .LVU987
4072:FreeRTOS/Src/tasks.c ****                     {
 3302              		.loc 1 4072 39 is_stmt 0 view .LVU988
 3303 00d6 184B     		ldr	r3, .L232+24
 3304 00d8 1C68     		ldr	r4, [r3]
 3305              	.LVL248:
4072:FreeRTOS/Src/tasks.c ****                     {
 3306              		.loc 1 4072 23 view .LVU989
 3307 00da E4B1     		cbz	r4, .L215
4076:FreeRTOS/Src/tasks.c ****                         }
 3308              		.loc 1 4076 29 is_stmt 1 view .LVU990
 3309              	.LVL249:
4082:FreeRTOS/Src/tasks.c ****                         }
 3310              		.loc 1 4082 29 view .LVU991
4082:FreeRTOS/Src/tasks.c ****                         }
 3311              		.loc 1 4082 29 view .LVU992
 3312 00dc 154B     		ldr	r3, .L232+20
 3313 00de 1B68     		ldr	r3, [r3]
4082:FreeRTOS/Src/tasks.c ****                         }
 3314              		.loc 1 4082 29 view .LVU993
 3315 00e0 4FF0E023 		mov	r3, #-536813568
 3316 00e4 4FF08052 		mov	r2, #268435456
 3317 00e8 C3F8042D 		str	r2, [r3, #3332]
4082:FreeRTOS/Src/tasks.c ****                         }
 3318              		.loc 1 4082 29 view .LVU994
 3319              		.syntax unified
 3320              	@ 4082 "FreeRTOS/Src/tasks.c" 1
 3321 00ec BFF34F8F 		dsb
 3322              	@ 0 "" 2
4082:FreeRTOS/Src/tasks.c ****                         }
 3323              		.loc 1 4082 29 view .LVU995
 3324              	@ 4082 "FreeRTOS/Src/tasks.c" 1
 3325 00f0 BFF36F8F 		isb
 3326              	@ 0 "" 2
4082:FreeRTOS/Src/tasks.c ****                         }
 3327              		.loc 1 4082 29 view .LVU996
4082:FreeRTOS/Src/tasks.c ****                         }
 3328              		.loc 1 4082 29 view .LVU997
4076:FreeRTOS/Src/tasks.c ****                         }
 3329              		.loc 1 4076 45 is_stmt 0 view .LVU998
 3330              		.thumb
 3331              		.syntax unified
 3332 00f4 0124     		movs	r4, #1
 3333 00f6 0EE0     		b	.L215
 3334              	.LVL250:
 3335              	.L223:
 3336              	.LBB87:
4058:FreeRTOS/Src/tasks.c ****                                 }
 3337              		.loc 1 4058 61 is_stmt 1 view .LVU999
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 229


4061:FreeRTOS/Src/tasks.c ****                             } while( xPendedCounts > ( TickType_t ) 0U );
 3338              		.loc 1 4061 33 view .LVU1000
4062:FreeRTOS/Src/tasks.c **** 
 3339              		.loc 1 4062 52 view .LVU1001
 3340 00f8 013C     		subs	r4, r4, #1
 3341              	.LVL251:
4062:FreeRTOS/Src/tasks.c **** 
 3342              		.loc 1 4062 52 is_stmt 0 view .LVU1002
 3343 00fa 07D0     		beq	.L231
 3344              	.L224:
4048:FreeRTOS/Src/tasks.c ****                             {
 3345              		.loc 1 4048 29 is_stmt 1 view .LVU1003
4050:FreeRTOS/Src/tasks.c ****                                 {
 3346              		.loc 1 4050 33 view .LVU1004
4050:FreeRTOS/Src/tasks.c ****                                 {
 3347              		.loc 1 4050 37 is_stmt 0 view .LVU1005
 3348 00fc FFF7FEFF 		bl	xTaskIncrementTick
 3349              	.LVL252:
4050:FreeRTOS/Src/tasks.c ****                                 {
 3350              		.loc 1 4050 35 discriminator 1 view .LVU1006
 3351 0100 0028     		cmp	r0, #0
 3352 0102 F9D0     		beq	.L223
4054:FreeRTOS/Src/tasks.c ****                                 }
 3353              		.loc 1 4054 37 is_stmt 1 view .LVU1007
4054:FreeRTOS/Src/tasks.c ****                                 }
 3354              		.loc 1 4054 63 is_stmt 0 view .LVU1008
 3355 0104 0C4B     		ldr	r3, .L232+24
 3356 0106 0122     		movs	r2, #1
 3357 0108 1A60     		str	r2, [r3]
 3358 010a F5E7     		b	.L223
 3359              	.L231:
4064:FreeRTOS/Src/tasks.c ****                         }
 3360              		.loc 1 4064 29 is_stmt 1 view .LVU1009
4064:FreeRTOS/Src/tasks.c ****                         }
 3361              		.loc 1 4064 42 is_stmt 0 view .LVU1010
 3362 010c 0B4B     		ldr	r3, .L232+28
 3363 010e 0022     		movs	r2, #0
 3364 0110 1A60     		str	r2, [r3]
 3365 0112 E0E7     		b	.L222
 3366              	.LVL253:
 3367              	.L225:
4064:FreeRTOS/Src/tasks.c ****                         }
 3368              		.loc 1 4064 42 view .LVU1011
 3369              	.LBE87:
 3370              	.LBE89:
3959:FreeRTOS/Src/tasks.c **** 
 3371              		.loc 1 3959 16 view .LVU1012
 3372 0114 0024     		movs	r4, #0
 3373              	.LVL254:
 3374              	.L215:
 3375              	.LBB90:
4094:FreeRTOS/Src/tasks.c ****             }
 3376              		.loc 1 4094 41 is_stmt 1 view .LVU1013
 3377              	.LBE90:
4097:FreeRTOS/Src/tasks.c ****     }
 3378              		.loc 1 4097 9 view .LVU1014
 3379 0116 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 230


 3380              	.LVL255:
4100:FreeRTOS/Src/tasks.c **** 
 3381              		.loc 1 4100 50 view .LVU1015
4102:FreeRTOS/Src/tasks.c **** }
 3382              		.loc 1 4102 5 view .LVU1016
4103:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 3383              		.loc 1 4103 1 is_stmt 0 view .LVU1017
 3384 011a 2046     		mov	r0, r4
 3385 011c 38BD     		pop	{r3, r4, r5, pc}
 3386              	.LVL256:
 3387              	.L233:
4103:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 3388              		.loc 1 4103 1 view .LVU1018
 3389 011e 00BF     		.align	2
 3390              	.L232:
 3391 0120 00000000 		.word	uxSchedulerSuspended
 3392 0124 00000000 		.word	uxCurrentNumberOfTasks
 3393 0128 00000000 		.word	xPendingReadyList
 3394 012c 00000000 		.word	uxTopReadyPriority
 3395 0130 00000000 		.word	pxReadyTasksLists
 3396 0134 00000000 		.word	pxCurrentTCB
 3397 0138 00000000 		.word	xYieldPendings
 3398 013c 00000000 		.word	xPendedTicks
 3399              		.cfi_endproc
 3400              	.LFE148:
 3402              		.section	.text.xTaskDelayUntil,"ax",%progbits
 3403              		.align	1
 3404              		.global	xTaskDelayUntil
 3405              		.syntax unified
 3406              		.thumb
 3407              		.thumb_func
 3409              	xTaskDelayUntil:
 3410              	.LVL257:
 3411              	.LFB133:
2345:FreeRTOS/Src/tasks.c ****         TickType_t xTimeToWake;
 3412              		.loc 1 2345 5 is_stmt 1 view -0
 3413              		.cfi_startproc
 3414              		@ args = 0, pretend = 0, frame = 0
 3415              		@ frame_needed = 0, uses_anonymous_args = 0
2345:FreeRTOS/Src/tasks.c ****         TickType_t xTimeToWake;
 3416              		.loc 1 2345 5 is_stmt 0 view .LVU1020
 3417 0000 38B5     		push	{r3, r4, r5, lr}
 3418              	.LCFI29:
 3419              		.cfi_def_cfa_offset 16
 3420              		.cfi_offset 3, -16
 3421              		.cfi_offset 4, -12
 3422              		.cfi_offset 5, -8
 3423              		.cfi_offset 14, -4
 3424 0002 0546     		mov	r5, r0
 3425 0004 0C46     		mov	r4, r1
2346:FreeRTOS/Src/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 3426              		.loc 1 2346 9 is_stmt 1 view .LVU1021
2347:FreeRTOS/Src/tasks.c **** 
 3427              		.loc 1 2347 9 view .LVU1022
 3428              	.LVL258:
2349:FreeRTOS/Src/tasks.c **** 
 3429              		.loc 1 2349 73 view .LVU1023
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 231


2351:FreeRTOS/Src/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3430              		.loc 1 2351 43 view .LVU1024
2352:FreeRTOS/Src/tasks.c **** 
 3431              		.loc 1 2352 48 view .LVU1025
2354:FreeRTOS/Src/tasks.c ****         {
 3432              		.loc 1 2354 9 view .LVU1026
 3433 0006 FFF7FEFF 		bl	vTaskSuspendAll
 3434              	.LVL259:
 3435              	.LBB91:
2358:FreeRTOS/Src/tasks.c **** 
 3436              		.loc 1 2358 13 view .LVU1027
2358:FreeRTOS/Src/tasks.c **** 
 3437              		.loc 1 2358 30 is_stmt 0 view .LVU1028
 3438 000a 174B     		ldr	r3, .L244
 3439 000c 1868     		ldr	r0, [r3]
 3440              	.LVL260:
2360:FreeRTOS/Src/tasks.c **** 
 3441              		.loc 1 2360 55 is_stmt 1 view .LVU1029
2363:FreeRTOS/Src/tasks.c **** 
 3442              		.loc 1 2363 13 view .LVU1030
2363:FreeRTOS/Src/tasks.c **** 
 3443              		.loc 1 2363 27 is_stmt 0 view .LVU1031
 3444 000e 2A68     		ldr	r2, [r5]
2363:FreeRTOS/Src/tasks.c **** 
 3445              		.loc 1 2363 25 view .LVU1032
 3446 0010 1444     		add	r4, r4, r2
 3447              	.LVL261:
2365:FreeRTOS/Src/tasks.c ****             {
 3448              		.loc 1 2365 13 is_stmt 1 view .LVU1033
2365:FreeRTOS/Src/tasks.c ****             {
 3449              		.loc 1 2365 15 is_stmt 0 view .LVU1034
 3450 0012 8242     		cmp	r2, r0
 3451 0014 0BD9     		bls	.L235
2372:FreeRTOS/Src/tasks.c ****                 {
 3452              		.loc 1 2372 17 is_stmt 1 view .LVU1035
2372:FreeRTOS/Src/tasks.c ****                 {
 3453              		.loc 1 2372 19 is_stmt 0 view .LVU1036
 3454 0016 A242     		cmp	r2, r4
 3455 0018 02D8     		bhi	.L236
2397:FreeRTOS/Src/tasks.c **** 
 3456              		.loc 1 2397 13 is_stmt 1 view .LVU1037
2397:FreeRTOS/Src/tasks.c **** 
 3457              		.loc 1 2397 33 is_stmt 0 view .LVU1038
 3458 001a 2C60     		str	r4, [r5]
2399:FreeRTOS/Src/tasks.c ****             {
 3459              		.loc 1 2399 13 is_stmt 1 view .LVU1039
 3460              	.LBE91:
2347:FreeRTOS/Src/tasks.c **** 
 3461              		.loc 1 2347 37 is_stmt 0 view .LVU1040
 3462 001c 0024     		movs	r4, #0
 3463              	.LVL262:
2347:FreeRTOS/Src/tasks.c **** 
 3464              		.loc 1 2347 37 view .LVU1041
 3465 001e 10E0     		b	.L237
 3466              	.LVL263:
 3467              	.L236:
 3468              	.LBB92:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 232


2372:FreeRTOS/Src/tasks.c ****                 {
 3469              		.loc 1 2372 59 discriminator 1 view .LVU1042
 3470 0020 A042     		cmp	r0, r4
 3471 0022 02D3     		bcc	.L238
2397:FreeRTOS/Src/tasks.c **** 
 3472              		.loc 1 2397 13 is_stmt 1 view .LVU1043
2397:FreeRTOS/Src/tasks.c **** 
 3473              		.loc 1 2397 33 is_stmt 0 view .LVU1044
 3474 0024 2C60     		str	r4, [r5]
2399:FreeRTOS/Src/tasks.c ****             {
 3475              		.loc 1 2399 13 is_stmt 1 view .LVU1045
 3476              	.LBE92:
2347:FreeRTOS/Src/tasks.c **** 
 3477              		.loc 1 2347 37 is_stmt 0 view .LVU1046
 3478 0026 0024     		movs	r4, #0
 3479              	.LVL264:
2347:FreeRTOS/Src/tasks.c **** 
 3480              		.loc 1 2347 37 view .LVU1047
 3481 0028 0BE0     		b	.L237
 3482              	.LVL265:
 3483              	.L238:
 3484              	.LBB93:
2374:FreeRTOS/Src/tasks.c ****                 }
 3485              		.loc 1 2374 21 is_stmt 1 view .LVU1048
2397:FreeRTOS/Src/tasks.c **** 
 3486              		.loc 1 2397 13 view .LVU1049
2397:FreeRTOS/Src/tasks.c **** 
 3487              		.loc 1 2397 33 is_stmt 0 view .LVU1050
 3488 002a 2C60     		str	r4, [r5]
2399:FreeRTOS/Src/tasks.c ****             {
 3489              		.loc 1 2399 13 is_stmt 1 view .LVU1051
 3490 002c 04E0     		b	.L239
 3491              	.LVL266:
 3492              	.L235:
2386:FreeRTOS/Src/tasks.c ****                 {
 3493              		.loc 1 2386 17 view .LVU1052
2386:FreeRTOS/Src/tasks.c ****                 {
 3494              		.loc 1 2386 19 is_stmt 0 view .LVU1053
 3495 002e A242     		cmp	r2, r4
 3496 0030 01D8     		bhi	.L240
2386:FreeRTOS/Src/tasks.c ****                 {
 3497              		.loc 1 2386 59 discriminator 1 view .LVU1054
 3498 0032 A042     		cmp	r0, r4
 3499 0034 14D2     		bcs	.L241
 3500              	.L240:
2388:FreeRTOS/Src/tasks.c ****                 }
 3501              		.loc 1 2388 21 is_stmt 1 view .LVU1055
 3502              	.LVL267:
2397:FreeRTOS/Src/tasks.c **** 
 3503              		.loc 1 2397 13 view .LVU1056
2397:FreeRTOS/Src/tasks.c **** 
 3504              		.loc 1 2397 33 is_stmt 0 view .LVU1057
 3505 0036 2C60     		str	r4, [r5]
2399:FreeRTOS/Src/tasks.c ****             {
 3506              		.loc 1 2399 13 is_stmt 1 view .LVU1058
 3507              	.L239:
2401:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 233


 3508              		.loc 1 2401 53 view .LVU1059
2405:FreeRTOS/Src/tasks.c ****             }
 3509              		.loc 1 2405 17 view .LVU1060
 3510 0038 0021     		movs	r1, #0
 3511 003a 201A     		subs	r0, r4, r0
 3512              	.LVL268:
2405:FreeRTOS/Src/tasks.c ****             }
 3513              		.loc 1 2405 17 is_stmt 0 view .LVU1061
 3514 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3515              	.LVL269:
 3516 0040 0124     		movs	r4, #1
 3517              	.LVL270:
 3518              	.L237:
2409:FreeRTOS/Src/tasks.c ****             }
 3519              		.loc 1 2409 41 is_stmt 1 view .LVU1062
 3520              	.LBE93:
2412:FreeRTOS/Src/tasks.c **** 
 3521              		.loc 1 2412 9 view .LVU1063
2412:FreeRTOS/Src/tasks.c **** 
 3522              		.loc 1 2412 27 is_stmt 0 view .LVU1064
 3523 0042 FFF7FEFF 		bl	xTaskResumeAll
 3524              	.LVL271:
2416:FreeRTOS/Src/tasks.c ****         {
 3525              		.loc 1 2416 9 is_stmt 1 view .LVU1065
2416:FreeRTOS/Src/tasks.c ****         {
 3526              		.loc 1 2416 11 is_stmt 0 view .LVU1066
 3527 0046 48B9     		cbnz	r0, .L234
2418:FreeRTOS/Src/tasks.c ****         }
 3528              		.loc 1 2418 13 is_stmt 1 view .LVU1067
 3529 0048 4FF0E023 		mov	r3, #-536813568
 3530 004c 4FF08052 		mov	r2, #268435456
 3531 0050 C3F8042D 		str	r2, [r3, #3332]
2418:FreeRTOS/Src/tasks.c ****         }
 3532              		.loc 1 2418 13 view .LVU1068
 3533              		.syntax unified
 3534              	@ 2418 "FreeRTOS/Src/tasks.c" 1
 3535 0054 BFF34F8F 		dsb
 3536              	@ 0 "" 2
2418:FreeRTOS/Src/tasks.c ****         }
 3537              		.loc 1 2418 13 view .LVU1069
 3538              	@ 2418 "FreeRTOS/Src/tasks.c" 1
 3539 0058 BFF36F8F 		isb
 3540              	@ 0 "" 2
2418:FreeRTOS/Src/tasks.c ****         }
 3541              		.loc 1 2418 35 view .LVU1070
2422:FreeRTOS/Src/tasks.c ****         }
 3542              		.loc 1 2422 37 view .LVU1071
2425:FreeRTOS/Src/tasks.c **** 
 3543              		.loc 1 2425 52 view .LVU1072
2427:FreeRTOS/Src/tasks.c ****     }
 3544              		.loc 1 2427 9 view .LVU1073
 3545              		.thumb
 3546              		.syntax unified
 3547              	.L234:
2428:FreeRTOS/Src/tasks.c **** 
 3548              		.loc 1 2428 5 is_stmt 0 view .LVU1074
 3549 005c 2046     		mov	r0, r4
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 234


 3550              	.LVL272:
2428:FreeRTOS/Src/tasks.c **** 
 3551              		.loc 1 2428 5 view .LVU1075
 3552 005e 38BD     		pop	{r3, r4, r5, pc}
 3553              	.LVL273:
 3554              	.L241:
 3555              	.LBB94:
2397:FreeRTOS/Src/tasks.c **** 
 3556              		.loc 1 2397 13 is_stmt 1 view .LVU1076
2397:FreeRTOS/Src/tasks.c **** 
 3557              		.loc 1 2397 33 is_stmt 0 view .LVU1077
 3558 0060 2C60     		str	r4, [r5]
2399:FreeRTOS/Src/tasks.c ****             {
 3559              		.loc 1 2399 13 is_stmt 1 view .LVU1078
 3560              	.LBE94:
2347:FreeRTOS/Src/tasks.c **** 
 3561              		.loc 1 2347 37 is_stmt 0 view .LVU1079
 3562 0062 0024     		movs	r4, #0
 3563              	.LVL274:
2347:FreeRTOS/Src/tasks.c **** 
 3564              		.loc 1 2347 37 view .LVU1080
 3565 0064 EDE7     		b	.L237
 3566              	.L245:
 3567 0066 00BF     		.align	2
 3568              	.L244:
 3569 0068 00000000 		.word	xTickCount
 3570              		.cfi_endproc
 3571              	.LFE133:
 3573              		.section	.text.vTaskDelay,"ax",%progbits
 3574              		.align	1
 3575              		.global	vTaskDelay
 3576              		.syntax unified
 3577              		.thumb
 3578              		.thumb_func
 3580              	vTaskDelay:
 3581              	.LVL275:
 3582              	.LFB134:
2436:FreeRTOS/Src/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3583              		.loc 1 2436 5 is_stmt 1 view -0
 3584              		.cfi_startproc
 3585              		@ args = 0, pretend = 0, frame = 0
 3586              		@ frame_needed = 0, uses_anonymous_args = 0
2436:FreeRTOS/Src/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3587              		.loc 1 2436 5 is_stmt 0 view .LVU1082
 3588 0000 10B5     		push	{r4, lr}
 3589              	.LCFI30:
 3590              		.cfi_def_cfa_offset 8
 3591              		.cfi_offset 4, -8
 3592              		.cfi_offset 14, -4
2437:FreeRTOS/Src/tasks.c **** 
 3593              		.loc 1 2437 9 is_stmt 1 view .LVU1083
 3594              	.LVL276:
2439:FreeRTOS/Src/tasks.c **** 
 3595              		.loc 1 2439 47 view .LVU1084
2442:FreeRTOS/Src/tasks.c ****         {
 3596              		.loc 1 2442 9 view .LVU1085
2442:FreeRTOS/Src/tasks.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 235


 3597              		.loc 1 2442 11 is_stmt 0 view .LVU1086
 3598 0002 50B9     		cbnz	r0, .L250
 3599              	.LVL277:
 3600              	.L247:
2470:FreeRTOS/Src/tasks.c ****         }
 3601              		.loc 1 2470 13 is_stmt 1 view .LVU1087
 3602 0004 4FF0E023 		mov	r3, #-536813568
 3603 0008 4FF08052 		mov	r2, #268435456
 3604 000c C3F8042D 		str	r2, [r3, #3332]
2470:FreeRTOS/Src/tasks.c ****         }
 3605              		.loc 1 2470 13 view .LVU1088
 3606              		.syntax unified
 3607              	@ 2470 "FreeRTOS/Src/tasks.c" 1
 3608 0010 BFF34F8F 		dsb
 3609              	@ 0 "" 2
2470:FreeRTOS/Src/tasks.c ****         }
 3610              		.loc 1 2470 13 view .LVU1089
 3611              	@ 2470 "FreeRTOS/Src/tasks.c" 1
 3612 0014 BFF36F8F 		isb
 3613              	@ 0 "" 2
2470:FreeRTOS/Src/tasks.c ****         }
 3614              		.loc 1 2470 35 view .LVU1090
2474:FreeRTOS/Src/tasks.c ****         }
 3615              		.loc 1 2474 37 view .LVU1091
2477:FreeRTOS/Src/tasks.c ****     }
 3616              		.loc 1 2477 33 view .LVU1092
 3617              		.thumb
 3618              		.syntax unified
 3619              	.L246:
2478:FreeRTOS/Src/tasks.c **** 
 3620              		.loc 1 2478 5 is_stmt 0 view .LVU1093
 3621 0018 10BD     		pop	{r4, pc}
 3622              	.LVL278:
 3623              	.L250:
2478:FreeRTOS/Src/tasks.c **** 
 3624              		.loc 1 2478 5 view .LVU1094
 3625 001a 0446     		mov	r4, r0
2444:FreeRTOS/Src/tasks.c ****             {
 3626              		.loc 1 2444 13 is_stmt 1 view .LVU1095
 3627 001c FFF7FEFF 		bl	vTaskSuspendAll
 3628              	.LVL279:
2446:FreeRTOS/Src/tasks.c **** 
 3629              		.loc 1 2446 59 view .LVU1096
2448:FreeRTOS/Src/tasks.c **** 
 3630              		.loc 1 2448 34 view .LVU1097
2457:FreeRTOS/Src/tasks.c ****             }
 3631              		.loc 1 2457 17 view .LVU1098
 3632 0020 0021     		movs	r1, #0
 3633 0022 2046     		mov	r0, r4
 3634 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3635              	.LVL280:
2459:FreeRTOS/Src/tasks.c ****         }
 3636              		.loc 1 2459 13 view .LVU1099
2459:FreeRTOS/Src/tasks.c ****         }
 3637              		.loc 1 2459 31 is_stmt 0 view .LVU1100
 3638 0028 FFF7FEFF 		bl	xTaskResumeAll
 3639              	.LVL281:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 236


2463:FreeRTOS/Src/tasks.c ****         }
 3640              		.loc 1 2463 37 is_stmt 1 view .LVU1101
2468:FreeRTOS/Src/tasks.c ****         {
 3641              		.loc 1 2468 9 view .LVU1102
2468:FreeRTOS/Src/tasks.c ****         {
 3642              		.loc 1 2468 11 is_stmt 0 view .LVU1103
 3643 002c 0028     		cmp	r0, #0
 3644 002e F3D1     		bne	.L246
2468:FreeRTOS/Src/tasks.c ****         {
 3645              		.loc 1 2468 11 view .LVU1104
 3646 0030 E8E7     		b	.L247
 3647              		.cfi_endproc
 3648              	.LFE134:
 3650              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3651              		.align	1
 3652              		.global	xTaskCatchUpTicks
 3653              		.syntax unified
 3654              		.thumb
 3655              		.thumb_func
 3657              	xTaskCatchUpTicks:
 3658              	.LVL282:
 3659              	.LFB153:
4547:FreeRTOS/Src/tasks.c ****     BaseType_t xYieldOccurred;
 3660              		.loc 1 4547 1 is_stmt 1 view -0
 3661              		.cfi_startproc
 3662              		@ args = 0, pretend = 0, frame = 0
 3663              		@ frame_needed = 0, uses_anonymous_args = 0
4547:FreeRTOS/Src/tasks.c ****     BaseType_t xYieldOccurred;
 3664              		.loc 1 4547 1 is_stmt 0 view .LVU1106
 3665 0000 10B5     		push	{r4, lr}
 3666              	.LCFI31:
 3667              		.cfi_def_cfa_offset 8
 3668              		.cfi_offset 4, -8
 3669              		.cfi_offset 14, -4
 3670 0002 0446     		mov	r4, r0
4548:FreeRTOS/Src/tasks.c **** 
 3671              		.loc 1 4548 5 is_stmt 1 view .LVU1107
4550:FreeRTOS/Src/tasks.c **** 
 3672              		.loc 1 4550 52 view .LVU1108
4554:FreeRTOS/Src/tasks.c **** 
 3673              		.loc 1 4554 63 view .LVU1109
4558:FreeRTOS/Src/tasks.c **** 
 3674              		.loc 1 4558 5 view .LVU1110
 3675 0004 FFF7FEFF 		bl	vTaskSuspendAll
 3676              	.LVL283:
4561:FreeRTOS/Src/tasks.c ****     {
 3677              		.loc 1 4561 5 view .LVU1111
 3678 0008 FFF7FEFF 		bl	vPortEnterCritical
 3679              	.LVL284:
4563:FreeRTOS/Src/tasks.c ****     }
 3680              		.loc 1 4563 9 view .LVU1112
4563:FreeRTOS/Src/tasks.c ****     }
 3681              		.loc 1 4563 22 is_stmt 0 view .LVU1113
 3682 000c 044A     		ldr	r2, .L253
 3683 000e 1368     		ldr	r3, [r2]
 3684 0010 2344     		add	r3, r3, r4
 3685 0012 1360     		str	r3, [r2]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 237


4565:FreeRTOS/Src/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3686              		.loc 1 4565 5 is_stmt 1 view .LVU1114
 3687 0014 FFF7FEFF 		bl	vPortExitCritical
 3688              	.LVL285:
4566:FreeRTOS/Src/tasks.c **** 
 3689              		.loc 1 4566 5 view .LVU1115
4566:FreeRTOS/Src/tasks.c **** 
 3690              		.loc 1 4566 22 is_stmt 0 view .LVU1116
 3691 0018 FFF7FEFF 		bl	xTaskResumeAll
 3692              	.LVL286:
4568:FreeRTOS/Src/tasks.c **** 
 3693              		.loc 1 4568 52 is_stmt 1 view .LVU1117
4570:FreeRTOS/Src/tasks.c **** }
 3694              		.loc 1 4570 5 view .LVU1118
4571:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
 3695              		.loc 1 4571 1 is_stmt 0 view .LVU1119
 3696 001c 10BD     		pop	{r4, pc}
 3697              	.LVL287:
 3698              	.L254:
4571:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
 3699              		.loc 1 4571 1 view .LVU1120
 3700 001e 00BF     		.align	2
 3701              	.L253:
 3702 0020 00000000 		.word	xPendedTicks
 3703              		.cfi_endproc
 3704              	.LFE153:
 3706              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3707              		.align	1
 3708              		.global	vTaskSwitchContext
 3709              		.syntax unified
 3710              		.thumb
 3711              		.thumb_func
 3713              	vTaskSwitchContext:
 3714              	.LFB155:
5057:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskSwitchContext();
 3715              		.loc 1 5057 5 is_stmt 1 view -0
 3716              		.cfi_startproc
 3717              		@ args = 0, pretend = 0, frame = 0
 3718              		@ frame_needed = 0, uses_anonymous_args = 0
 3719 0000 08B5     		push	{r3, lr}
 3720              	.LCFI32:
 3721              		.cfi_def_cfa_offset 8
 3722              		.cfi_offset 3, -8
 3723              		.cfi_offset 14, -4
5058:FreeRTOS/Src/tasks.c **** 
 3724              		.loc 1 5058 40 view .LVU1122
5060:FreeRTOS/Src/tasks.c ****         {
 3725              		.loc 1 5060 9 view .LVU1123
5060:FreeRTOS/Src/tasks.c ****         {
 3726              		.loc 1 5060 34 is_stmt 0 view .LVU1124
 3727 0002 264B     		ldr	r3, .L264
 3728 0004 1B68     		ldr	r3, [r3]
5060:FreeRTOS/Src/tasks.c ****         {
 3729              		.loc 1 5060 11 view .LVU1125
 3730 0006 1BB1     		cbz	r3, .L256
5064:FreeRTOS/Src/tasks.c ****         }
 3731              		.loc 1 5064 13 is_stmt 1 view .LVU1126
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 238


5064:FreeRTOS/Src/tasks.c ****         }
 3732              		.loc 1 5064 33 is_stmt 0 view .LVU1127
 3733 0008 254B     		ldr	r3, .L264+4
 3734 000a 0122     		movs	r2, #1
 3735 000c 1A60     		str	r2, [r3]
 3736              	.L255:
5139:FreeRTOS/Src/tasks.c **** #else /* if ( configNUMBER_OF_CORES == 1 ) */
 3737              		.loc 1 5139 5 view .LVU1128
 3738 000e 08BD     		pop	{r3, pc}
 3739              	.L256:
5068:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_OUT();
 3740              		.loc 1 5068 13 is_stmt 1 view .LVU1129
5068:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_OUT();
 3741              		.loc 1 5068 33 is_stmt 0 view .LVU1130
 3742 0010 234B     		ldr	r3, .L264+4
 3743 0012 0022     		movs	r2, #0
 3744 0014 1A60     		str	r2, [r3]
5069:FreeRTOS/Src/tasks.c **** 
 3745              		.loc 1 5069 37 is_stmt 1 view .LVU1131
5100:FreeRTOS/Src/tasks.c **** 
 3746              		.loc 1 5100 13 view .LVU1132
 3747              	.LBB95:
5100:FreeRTOS/Src/tasks.c **** 
 3748              		.loc 1 5100 13 view .LVU1133
 3749 0016 234B     		ldr	r3, .L264+8
 3750 0018 1B68     		ldr	r3, [r3]
 3751 001a 1B6B     		ldr	r3, [r3, #48]
 3752              	.LVL288:
5100:FreeRTOS/Src/tasks.c **** 
 3753              		.loc 1 5100 13 view .LVU1134
5100:FreeRTOS/Src/tasks.c **** 
 3754              		.loc 1 5100 13 view .LVU1135
 3755 001c 1A68     		ldr	r2, [r3]
 3756 001e B2F1A53F 		cmp	r2, #-1515870811
 3757 0022 03D1     		bne	.L258
5100:FreeRTOS/Src/tasks.c **** 
 3758              		.loc 1 5100 13 is_stmt 0 discriminator 2 view .LVU1136
 3759 0024 5A68     		ldr	r2, [r3, #4]
 3760 0026 B2F1A53F 		cmp	r2, #-1515870811
 3761 002a 27D0     		beq	.L262
 3762              	.LVL289:
 3763              	.L258:
 3764              	.LBB96:
5100:FreeRTOS/Src/tasks.c **** 
 3765              		.loc 1 5100 13 is_stmt 1 discriminator 7 view .LVU1137
 3766 002c 1D4B     		ldr	r3, .L264+8
 3767 002e 1968     		ldr	r1, [r3]
 3768              	.LVL290:
5100:FreeRTOS/Src/tasks.c **** 
 3769              		.loc 1 5100 13 view .LVU1138
5100:FreeRTOS/Src/tasks.c **** 
 3770              		.loc 1 5100 13 is_stmt 0 discriminator 7 view .LVU1139
 3771 0030 1868     		ldr	r0, [r3]
 3772 0032 3431     		adds	r1, r1, #52
 3773              	.LVL291:
5100:FreeRTOS/Src/tasks.c **** 
 3774              		.loc 1 5100 13 discriminator 7 view .LVU1140
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 239


 3775 0034 FFF7FEFF 		bl	vApplicationStackOverflowHook
 3776              	.LVL292:
 3777              	.L259:
5100:FreeRTOS/Src/tasks.c **** 
 3778              		.loc 1 5100 13 discriminator 7 view .LVU1141
 3779              	.LBE96:
 3780              	.LBE95:
5100:FreeRTOS/Src/tasks.c **** 
 3781              		.loc 1 5100 13 is_stmt 1 discriminator 9 view .LVU1142
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3782              		.loc 1 5114 13 view .LVU1143
 3783              	.LBB97:
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3784              		.loc 1 5114 13 view .LVU1144
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3785              		.loc 1 5114 13 view .LVU1145
 3786 0038 1B4B     		ldr	r3, .L264+12
 3787 003a 1B68     		ldr	r3, [r3]
 3788              	.LVL293:
 3789              	.LBB98:
 3790              	.LBI98:
 151:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3791              		.loc 2 151 62 view .LVU1146
 3792              	.LBB99:
 153:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3793              		.loc 2 153 9 view .LVU1147
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3794              		.loc 2 155 9 view .LVU1148
 3795              		.syntax unified
 3796              	@ 155 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3797 003c B3FA83F3 		clz r3, r3
 3798              	@ 0 "" 2
 3799              	.LVL294:
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3800              		.loc 2 155 9 is_stmt 0 view .LVU1149
 3801              		.thumb
 3802              		.syntax unified
 3803 0040 DBB2     		uxtb	r3, r3
 3804              	.LVL295:
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 3805              		.loc 2 157 9 is_stmt 1 view .LVU1150
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 3806              		.loc 2 157 9 is_stmt 0 view .LVU1151
 3807              	.LBE99:
 3808              	.LBE98:
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3809              		.loc 1 5114 13 discriminator 1 view .LVU1152
 3810 0042 C3F11F03 		rsb	r3, r3, #31
 3811              	.LVL296:
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3812              		.loc 1 5114 13 is_stmt 1 discriminator 1 view .LVU1153
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3813              		.loc 1 5114 13 discriminator 1 view .LVU1154
 3814              	.LBB100:
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3815              		.loc 1 5114 13 discriminator 1 view .LVU1155
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 240


 3816              		.loc 1 5114 13 discriminator 1 view .LVU1156
 3817 0046 1948     		ldr	r0, .L264+16
 3818 0048 03EB8301 		add	r1, r3, r3, lsl #2
 3819 004c 8A00     		lsls	r2, r1, #2
 3820 004e 0244     		add	r2, r2, r0
 3821 0050 5168     		ldr	r1, [r2, #4]
 3822 0052 4968     		ldr	r1, [r1, #4]
 3823 0054 5160     		str	r1, [r2, #4]
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3824              		.loc 1 5114 13 discriminator 1 view .LVU1157
 3825 0056 03EB830C 		add	ip, r3, r3, lsl #2
 3826 005a 4FEA8C02 		lsl	r2, ip, #2
 3827 005e 0832     		adds	r2, r2, #8
 3828 0060 0244     		add	r2, r2, r0
 3829 0062 9142     		cmp	r1, r2
 3830 0064 13D0     		beq	.L263
 3831              	.L260:
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3832              		.loc 1 5114 13 discriminator 3 view .LVU1158
 3833 0066 03EB8303 		add	r3, r3, r3, lsl #2
 3834              	.LVL297:
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3835              		.loc 1 5114 13 is_stmt 0 discriminator 3 view .LVU1159
 3836 006a 9A00     		lsls	r2, r3, #2
 3837 006c 0F4B     		ldr	r3, .L264+16
 3838 006e 1344     		add	r3, r3, r2
 3839 0070 5B68     		ldr	r3, [r3, #4]
 3840 0072 DA68     		ldr	r2, [r3, #12]
 3841 0074 0B4B     		ldr	r3, .L264+8
 3842 0076 1A60     		str	r2, [r3]
 3843              	.LBE100:
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3844              		.loc 1 5114 13 is_stmt 1 view .LVU1160
 3845              	.LBE97:
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3846              		.loc 1 5114 13 view .LVU1161
5115:FreeRTOS/Src/tasks.c **** 
 3847              		.loc 1 5115 36 view .LVU1162
5120:FreeRTOS/Src/tasks.c **** 
 3848              		.loc 1 5120 13 view .LVU1163
 3849 0078 1B68     		ldr	r3, [r3]
5138:FreeRTOS/Src/tasks.c ****     }
 3850              		.loc 1 5138 41 view .LVU1164
5139:FreeRTOS/Src/tasks.c **** #else /* if ( configNUMBER_OF_CORES == 1 ) */
 3851              		.loc 1 5139 5 is_stmt 0 view .LVU1165
 3852 007a C8E7     		b	.L255
 3853              	.LVL298:
 3854              	.L262:
 3855              	.LBB102:
5100:FreeRTOS/Src/tasks.c **** 
 3856              		.loc 1 5100 13 discriminator 4 view .LVU1166
 3857 007c 9A68     		ldr	r2, [r3, #8]
 3858 007e B2F1A53F 		cmp	r2, #-1515870811
 3859 0082 D3D1     		bne	.L258
5100:FreeRTOS/Src/tasks.c **** 
 3860              		.loc 1 5100 13 discriminator 6 view .LVU1167
 3861 0084 DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 241


 3862              	.LVL299:
5100:FreeRTOS/Src/tasks.c **** 
 3863              		.loc 1 5100 13 discriminator 6 view .LVU1168
 3864 0086 B3F1A53F 		cmp	r3, #-1515870811
 3865 008a CFD1     		bne	.L258
 3866 008c D4E7     		b	.L259
 3867              	.LVL300:
 3868              	.L263:
5100:FreeRTOS/Src/tasks.c **** 
 3869              		.loc 1 5100 13 discriminator 6 view .LVU1169
 3870              	.LBE102:
 3871              	.LBB103:
 3872              	.LBB101:
5114:FreeRTOS/Src/tasks.c ****             traceTASK_SWITCHED_IN();
 3873              		.loc 1 5114 13 is_stmt 1 discriminator 1 view .LVU1170
 3874 008e 6246     		mov	r2, ip
 3875 0090 9100     		lsls	r1, r2, #2
 3876 0092 0246     		mov	r2, r0
 3877 0094 0A44     		add	r2, r2, r1
 3878 0096 D168     		ldr	r1, [r2, #12]
 3879 0098 5160     		str	r1, [r2, #4]
 3880 009a E4E7     		b	.L260
 3881              	.L265:
 3882              		.align	2
 3883              	.L264:
 3884 009c 00000000 		.word	uxSchedulerSuspended
 3885 00a0 00000000 		.word	xYieldPendings
 3886 00a4 00000000 		.word	pxCurrentTCB
 3887 00a8 00000000 		.word	uxTopReadyPriority
 3888 00ac 00000000 		.word	pxReadyTasksLists
 3889              	.LBE101:
 3890              	.LBE103:
 3891              		.cfi_endproc
 3892              	.LFE155:
 3894              		.section	.text.vTaskSuspend,"ax",%progbits
 3895              		.align	1
 3896              		.global	vTaskSuspend
 3897              		.syntax unified
 3898              		.thumb
 3899              		.thumb_func
 3901              	vTaskSuspend:
 3902              	.LVL301:
 3903              	.LFB140:
3122:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 3904              		.loc 1 3122 5 view -0
 3905              		.cfi_startproc
 3906              		@ args = 0, pretend = 0, frame = 0
 3907              		@ frame_needed = 0, uses_anonymous_args = 0
3122:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 3908              		.loc 1 3122 5 is_stmt 0 view .LVU1172
 3909 0000 38B5     		push	{r3, r4, r5, lr}
 3910              	.LCFI33:
 3911              		.cfi_def_cfa_offset 16
 3912              		.cfi_offset 3, -16
 3913              		.cfi_offset 4, -12
 3914              		.cfi_offset 5, -8
 3915              		.cfi_offset 14, -4
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 242


 3916 0002 0446     		mov	r4, r0
3123:FreeRTOS/Src/tasks.c **** 
 3917              		.loc 1 3123 9 is_stmt 1 view .LVU1173
3125:FreeRTOS/Src/tasks.c **** 
 3918              		.loc 1 3125 50 view .LVU1174
3127:FreeRTOS/Src/tasks.c ****         {
 3919              		.loc 1 3127 9 view .LVU1175
 3920 0004 FFF7FEFF 		bl	vPortEnterCritical
 3921              	.LVL302:
3131:FreeRTOS/Src/tasks.c **** 
 3922              		.loc 1 3131 13 view .LVU1176
3131:FreeRTOS/Src/tasks.c **** 
 3923              		.loc 1 3131 21 is_stmt 0 view .LVU1177
 3924 0008 4CB3     		cbz	r4, .L278
 3925              	.LVL303:
 3926              	.L267:
3133:FreeRTOS/Src/tasks.c **** 
 3927              		.loc 1 3133 39 is_stmt 1 view .LVU1178
3137:FreeRTOS/Src/tasks.c ****             {
 3928              		.loc 1 3137 13 view .LVU1179
3137:FreeRTOS/Src/tasks.c ****             {
 3929              		.loc 1 3137 17 is_stmt 0 view .LVU1180
 3930 000a 251D     		adds	r5, r4, #4
 3931 000c 2846     		mov	r0, r5
 3932 000e FFF7FEFF 		bl	uxListRemove
 3933              	.LVL304:
3137:FreeRTOS/Src/tasks.c ****             {
 3934              		.loc 1 3137 15 discriminator 1 view .LVU1181
 3935 0012 68B9     		cbnz	r0, .L268
3139:FreeRTOS/Src/tasks.c ****             }
 3936              		.loc 1 3139 17 is_stmt 1 view .LVU1182
3139:FreeRTOS/Src/tasks.c ****             }
 3937              		.loc 1 3139 17 view .LVU1183
 3938 0014 E36A     		ldr	r3, [r4, #44]
 3939 0016 03EB8301 		add	r1, r3, r3, lsl #2
 3940 001a 294A     		ldr	r2, .L282
 3941 001c 52F82120 		ldr	r2, [r2, r1, lsl #2]
 3942 0020 32B9     		cbnz	r2, .L268
3139:FreeRTOS/Src/tasks.c ****             }
 3943              		.loc 1 3139 17 discriminator 1 view .LVU1184
 3944 0022 0122     		movs	r2, #1
 3945 0024 9A40     		lsls	r2, r2, r3
 3946 0026 2749     		ldr	r1, .L282+4
 3947 0028 0B68     		ldr	r3, [r1]
 3948 002a 23EA0203 		bic	r3, r3, r2
 3949 002e 0B60     		str	r3, [r1]
 3950              	.L268:
3143:FreeRTOS/Src/tasks.c ****             }
 3951              		.loc 1 3143 41 view .LVU1185
3147:FreeRTOS/Src/tasks.c ****             {
 3952              		.loc 1 3147 13 view .LVU1186
3147:FreeRTOS/Src/tasks.c ****             {
 3953              		.loc 1 3147 17 is_stmt 0 view .LVU1187
 3954 0030 A36A     		ldr	r3, [r4, #40]
3147:FreeRTOS/Src/tasks.c ****             {
 3955              		.loc 1 3147 15 view .LVU1188
 3956 0032 1BB1     		cbz	r3, .L269
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 243


3149:FreeRTOS/Src/tasks.c ****             }
 3957              		.loc 1 3149 17 is_stmt 1 view .LVU1189
3149:FreeRTOS/Src/tasks.c ****             }
 3958              		.loc 1 3149 26 is_stmt 0 view .LVU1190
 3959 0034 04F11800 		add	r0, r4, #24
 3960 0038 FFF7FEFF 		bl	uxListRemove
 3961              	.LVL305:
 3962              	.L269:
3153:FreeRTOS/Src/tasks.c ****             }
 3963              		.loc 1 3153 41 is_stmt 1 view .LVU1191
3156:FreeRTOS/Src/tasks.c **** 
 3964              		.loc 1 3156 13 view .LVU1192
 3965 003c 2946     		mov	r1, r5
 3966 003e 2248     		ldr	r0, .L282+8
 3967 0040 FFF7FEFF 		bl	vListInsertEnd
 3968              	.LVL306:
 3969              	.LBB104:
3160:FreeRTOS/Src/tasks.c **** 
 3970              		.loc 1 3160 17 view .LVU1193
3162:FreeRTOS/Src/tasks.c ****                 {
 3971              		.loc 1 3162 17 view .LVU1194
3162:FreeRTOS/Src/tasks.c ****                 {
 3972              		.loc 1 3162 24 is_stmt 0 view .LVU1195
 3973 0044 0023     		movs	r3, #0
 3974              	.LVL307:
 3975              	.L270:
3162:FreeRTOS/Src/tasks.c ****                 {
 3976              		.loc 1 3162 46 is_stmt 1 discriminator 1 view .LVU1196
 3977 0046 002B     		cmp	r3, #0
 3978 0048 0CDD     		ble	.L272
 3979              	.LBE104:
3214:FreeRTOS/Src/tasks.c **** 
 3980              		.loc 1 3214 9 view .LVU1197
 3981 004a FFF7FEFF 		bl	vPortExitCritical
 3982              	.LVL308:
 3983              	.LBB105:
3218:FreeRTOS/Src/tasks.c **** 
 3984              		.loc 1 3218 13 view .LVU1198
3220:FreeRTOS/Src/tasks.c ****             {
 3985              		.loc 1 3220 13 view .LVU1199
3220:FreeRTOS/Src/tasks.c ****             {
 3986              		.loc 1 3220 35 is_stmt 0 view .LVU1200
 3987 004e 1F4B     		ldr	r3, .L282+12
 3988 0050 1B68     		ldr	r3, [r3]
3220:FreeRTOS/Src/tasks.c ****             {
 3989              		.loc 1 3220 15 view .LVU1201
 3990 0052 9BB9     		cbnz	r3, .L279
 3991              	.L273:
3232:FreeRTOS/Src/tasks.c ****             }
 3992              		.loc 1 3232 41 is_stmt 1 view .LVU1202
3235:FreeRTOS/Src/tasks.c ****             {
 3993              		.loc 1 3235 13 view .LVU1203
3235:FreeRTOS/Src/tasks.c ****             {
 3994              		.loc 1 3235 23 is_stmt 0 view .LVU1204
 3995 0054 1E4B     		ldr	r3, .L282+16
 3996 0056 1B68     		ldr	r3, [r3]
3235:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 244


 3997              		.loc 1 3235 15 view .LVU1205
 3998 0058 A342     		cmp	r3, r4
 3999 005a 16D0     		beq	.L280
 4000              	.L266:
 4001              	.LBE105:
3276:FreeRTOS/Src/tasks.c **** 
 4002              		.loc 1 3276 5 view .LVU1206
 4003 005c 38BD     		pop	{r3, r4, r5, pc}
 4004              	.LVL309:
 4005              	.L278:
3131:FreeRTOS/Src/tasks.c **** 
 4006              		.loc 1 3131 21 discriminator 1 view .LVU1207
 4007 005e 1C4B     		ldr	r3, .L282+16
 4008 0060 1C68     		ldr	r4, [r3]
 4009              	.LVL310:
3131:FreeRTOS/Src/tasks.c **** 
 4010              		.loc 1 3131 21 discriminator 1 view .LVU1208
 4011 0062 D2E7     		b	.L267
 4012              	.LVL311:
 4013              	.L272:
 4014              	.LBB106:
3164:FreeRTOS/Src/tasks.c ****                     {
 4015              		.loc 1 3164 21 is_stmt 1 view .LVU1209
3164:FreeRTOS/Src/tasks.c ****                     {
 4016              		.loc 1 3164 45 is_stmt 0 view .LVU1210
 4017 0064 E218     		adds	r2, r4, r3
 4018 0066 92F84820 		ldrb	r2, [r2, #72]	@ zero_extendqisi2
3164:FreeRTOS/Src/tasks.c ****                     {
 4019              		.loc 1 3164 23 view .LVU1211
 4020 006a 012A     		cmp	r2, #1
 4021 006c 01D0     		beq	.L281
 4022              	.L271:
3162:FreeRTOS/Src/tasks.c ****                 {
 4023              		.loc 1 3162 103 is_stmt 1 discriminator 2 view .LVU1212
 4024 006e 0133     		adds	r3, r3, #1
 4025              	.LVL312:
3162:FreeRTOS/Src/tasks.c ****                 {
 4026              		.loc 1 3162 103 is_stmt 0 discriminator 2 view .LVU1213
 4027 0070 E9E7     		b	.L270
 4028              	.LVL313:
 4029              	.L281:
3168:FreeRTOS/Src/tasks.c ****                     }
 4030              		.loc 1 3168 25 is_stmt 1 view .LVU1214
3168:FreeRTOS/Src/tasks.c ****                     }
 4031              		.loc 1 3168 51 is_stmt 0 view .LVU1215
 4032 0072 E218     		adds	r2, r4, r3
 4033 0074 0021     		movs	r1, #0
 4034 0076 82F84810 		strb	r1, [r2, #72]
 4035 007a F8E7     		b	.L271
 4036              	.LVL314:
 4037              	.L279:
3168:FreeRTOS/Src/tasks.c ****                     }
 4038              		.loc 1 3168 51 view .LVU1216
 4039              	.LBE106:
 4040              	.LBB107:
3224:FreeRTOS/Src/tasks.c ****                 {
 4041              		.loc 1 3224 17 is_stmt 1 view .LVU1217
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 245


 4042 007c FFF7FEFF 		bl	vPortEnterCritical
 4043              	.LVL315:
3226:FreeRTOS/Src/tasks.c ****                 }
 4044              		.loc 1 3226 21 view .LVU1218
 4045 0080 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 4046              	.LVL316:
3228:FreeRTOS/Src/tasks.c ****             }
 4047              		.loc 1 3228 17 view .LVU1219
 4048 0084 FFF7FEFF 		bl	vPortExitCritical
 4049              	.LVL317:
 4050 0088 E4E7     		b	.L273
 4051              	.L280:
3237:FreeRTOS/Src/tasks.c ****                 {
 4052              		.loc 1 3237 17 view .LVU1220
3237:FreeRTOS/Src/tasks.c ****                 {
 4053              		.loc 1 3237 39 is_stmt 0 view .LVU1221
 4054 008a 104B     		ldr	r3, .L282+12
 4055 008c 1B68     		ldr	r3, [r3]
3237:FreeRTOS/Src/tasks.c ****                 {
 4056              		.loc 1 3237 19 view .LVU1222
 4057 008e 53B1     		cbz	r3, .L275
3240:FreeRTOS/Src/tasks.c ****                     portYIELD_WITHIN_API();
 4058              		.loc 1 3240 62 is_stmt 1 view .LVU1223
3241:FreeRTOS/Src/tasks.c ****                 }
 4059              		.loc 1 3241 21 view .LVU1224
 4060 0090 4FF0E023 		mov	r3, #-536813568
 4061 0094 4FF08052 		mov	r2, #268435456
 4062 0098 C3F8042D 		str	r2, [r3, #3332]
3241:FreeRTOS/Src/tasks.c ****                 }
 4063              		.loc 1 3241 21 view .LVU1225
 4064              		.syntax unified
 4065              	@ 3241 "FreeRTOS/Src/tasks.c" 1
 4066 009c BFF34F8F 		dsb
 4067              	@ 0 "" 2
3241:FreeRTOS/Src/tasks.c ****                 }
 4068              		.loc 1 3241 21 view .LVU1226
 4069              	@ 3241 "FreeRTOS/Src/tasks.c" 1
 4070 00a0 BFF36F8F 		isb
 4071              	@ 0 "" 2
3241:FreeRTOS/Src/tasks.c ****                 }
 4072              		.loc 1 3241 43 view .LVU1227
 4073              		.thumb
 4074              		.syntax unified
 4075 00a4 DAE7     		b	.L266
 4076              	.L275:
3252:FreeRTOS/Src/tasks.c **** 
 4077              		.loc 1 3252 21 view .LVU1228
3252:FreeRTOS/Src/tasks.c **** 
 4078              		.loc 1 3252 41 is_stmt 0 view .LVU1229
 4079 00a6 084B     		ldr	r3, .L282+8
 4080 00a8 1B68     		ldr	r3, [r3]
 4081              	.LVL318:
3254:FreeRTOS/Src/tasks.c ****                     {
 4082              		.loc 1 3254 21 is_stmt 1 view .LVU1230
3254:FreeRTOS/Src/tasks.c ****                     {
 4083              		.loc 1 3254 45 is_stmt 0 view .LVU1231
 4084 00aa 0A4A     		ldr	r2, .L282+20
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 246


 4085 00ac 1268     		ldr	r2, [r2]
3254:FreeRTOS/Src/tasks.c ****                     {
 4086              		.loc 1 3254 23 view .LVU1232
 4087 00ae 9A42     		cmp	r2, r3
 4088 00b0 03D1     		bne	.L276
3260:FreeRTOS/Src/tasks.c ****                     }
 4089              		.loc 1 3260 25 is_stmt 1 view .LVU1233
3260:FreeRTOS/Src/tasks.c ****                     }
 4090              		.loc 1 3260 38 is_stmt 0 view .LVU1234
 4091 00b2 074B     		ldr	r3, .L282+16
 4092              	.LVL319:
3260:FreeRTOS/Src/tasks.c ****                     }
 4093              		.loc 1 3260 38 view .LVU1235
 4094 00b4 0022     		movs	r2, #0
 4095 00b6 1A60     		str	r2, [r3]
 4096 00b8 D0E7     		b	.L266
 4097              	.LVL320:
 4098              	.L276:
3264:FreeRTOS/Src/tasks.c ****                     }
 4099              		.loc 1 3264 25 is_stmt 1 view .LVU1236
 4100 00ba FFF7FEFF 		bl	vTaskSwitchContext
 4101              	.LVL321:
3270:FreeRTOS/Src/tasks.c ****             }
 4102              		.loc 1 3270 41 view .LVU1237
 4103              	.LBE107:
3275:FreeRTOS/Src/tasks.c ****     }
 4104              		.loc 1 3275 35 view .LVU1238
3276:FreeRTOS/Src/tasks.c **** 
 4105              		.loc 1 3276 5 is_stmt 0 view .LVU1239
 4106 00be CDE7     		b	.L266
 4107              	.L283:
 4108              		.align	2
 4109              	.L282:
 4110 00c0 00000000 		.word	pxReadyTasksLists
 4111 00c4 00000000 		.word	uxTopReadyPriority
 4112 00c8 00000000 		.word	xSuspendedTaskList
 4113 00cc 00000000 		.word	xSchedulerRunning
 4114 00d0 00000000 		.word	pxCurrentTCB
 4115 00d4 00000000 		.word	uxCurrentNumberOfTasks
 4116              		.cfi_endproc
 4117              	.LFE140:
 4119              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4120              		.align	1
 4121              		.global	vTaskPlaceOnEventList
 4122              		.syntax unified
 4123              		.thumb
 4124              		.thumb_func
 4126              	vTaskPlaceOnEventList:
 4127              	.LVL322:
 4128              	.LFB156:
5245:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );
 4129              		.loc 1 5245 1 is_stmt 1 view -0
 4130              		.cfi_startproc
 4131              		@ args = 0, pretend = 0, frame = 0
 4132              		@ frame_needed = 0, uses_anonymous_args = 0
5245:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );
 4133              		.loc 1 5245 1 is_stmt 0 view .LVU1241
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 247


 4134 0000 10B5     		push	{r4, lr}
 4135              	.LCFI34:
 4136              		.cfi_def_cfa_offset 8
 4137              		.cfi_offset 4, -8
 4138              		.cfi_offset 14, -4
 4139 0002 0C46     		mov	r4, r1
5246:FreeRTOS/Src/tasks.c **** 
 4140              		.loc 1 5246 66 is_stmt 1 view .LVU1242
5248:FreeRTOS/Src/tasks.c **** 
 4141              		.loc 1 5248 32 view .LVU1243
5264:FreeRTOS/Src/tasks.c **** 
 4142              		.loc 1 5264 5 view .LVU1244
5264:FreeRTOS/Src/tasks.c **** 
 4143              		.loc 1 5264 46 is_stmt 0 view .LVU1245
 4144 0004 044B     		ldr	r3, .L286
 4145 0006 1968     		ldr	r1, [r3]
 4146              	.LVL323:
5264:FreeRTOS/Src/tasks.c **** 
 4147              		.loc 1 5264 5 view .LVU1246
 4148 0008 1831     		adds	r1, r1, #24
 4149 000a FFF7FEFF 		bl	vListInsert
 4150              	.LVL324:
5266:FreeRTOS/Src/tasks.c **** 
 4151              		.loc 1 5266 5 is_stmt 1 view .LVU1247
 4152 000e 0121     		movs	r1, #1
 4153 0010 2046     		mov	r0, r4
 4154 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4155              	.LVL325:
5268:FreeRTOS/Src/tasks.c **** }
 4156              		.loc 1 5268 40 view .LVU1248
5269:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4157              		.loc 1 5269 1 is_stmt 0 view .LVU1249
 4158 0016 10BD     		pop	{r4, pc}
 4159              	.LVL326:
 4160              	.L287:
5269:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4161              		.loc 1 5269 1 view .LVU1250
 4162              		.align	2
 4163              	.L286:
 4164 0018 00000000 		.word	pxCurrentTCB
 4165              		.cfi_endproc
 4166              	.LFE156:
 4168              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4169              		.align	1
 4170              		.global	vTaskPlaceOnUnorderedEventList
 4171              		.syntax unified
 4172              		.thumb
 4173              		.thumb_func
 4175              	vTaskPlaceOnUnorderedEventList:
 4176              	.LVL327:
 4177              	.LFB157:
5275:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );
 4178              		.loc 1 5275 1 is_stmt 1 view -0
 4179              		.cfi_startproc
 4180              		@ args = 0, pretend = 0, frame = 0
 4181              		@ frame_needed = 0, uses_anonymous_args = 0
5275:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 248


 4182              		.loc 1 5275 1 is_stmt 0 view .LVU1252
 4183 0000 70B5     		push	{r4, r5, r6, lr}
 4184              	.LCFI35:
 4185              		.cfi_def_cfa_offset 16
 4186              		.cfi_offset 4, -16
 4187              		.cfi_offset 5, -12
 4188              		.cfi_offset 6, -8
 4189              		.cfi_offset 14, -4
 4190 0002 0346     		mov	r3, r0
5276:FreeRTOS/Src/tasks.c **** 
 4191              		.loc 1 5276 87 is_stmt 1 view .LVU1253
5278:FreeRTOS/Src/tasks.c **** 
 4192              		.loc 1 5278 32 view .LVU1254
5282:FreeRTOS/Src/tasks.c **** 
 4193              		.loc 1 5282 63 view .LVU1255
5287:FreeRTOS/Src/tasks.c **** 
 4194              		.loc 1 5287 5 view .LVU1256
 4195 0004 0D4C     		ldr	r4, .L290
 4196 0006 2068     		ldr	r0, [r4]
 4197              	.LVL328:
5287:FreeRTOS/Src/tasks.c **** 
 4198              		.loc 1 5287 5 is_stmt 0 view .LVU1257
 4199 0008 41F00041 		orr	r1, r1, #-2147483648
 4200              	.LVL329:
5287:FreeRTOS/Src/tasks.c **** 
 4201              		.loc 1 5287 5 view .LVU1258
 4202 000c 8161     		str	r1, [r0, #24]
5294:FreeRTOS/Src/tasks.c **** 
 4203              		.loc 1 5294 5 is_stmt 1 view .LVU1259
 4204              	.LBB108:
5294:FreeRTOS/Src/tasks.c **** 
 4205              		.loc 1 5294 5 view .LVU1260
 4206 000e 5968     		ldr	r1, [r3, #4]
 4207              	.LVL330:
5294:FreeRTOS/Src/tasks.c **** 
 4208              		.loc 1 5294 5 view .LVU1261
5294:FreeRTOS/Src/tasks.c **** 
 4209              		.loc 1 5294 5 view .LVU1262
5294:FreeRTOS/Src/tasks.c **** 
 4210              		.loc 1 5294 5 view .LVU1263
 4211 0010 2068     		ldr	r0, [r4]
 4212 0012 C161     		str	r1, [r0, #28]
5294:FreeRTOS/Src/tasks.c **** 
 4213              		.loc 1 5294 5 view .LVU1264
 4214 0014 2068     		ldr	r0, [r4]
 4215 0016 8E68     		ldr	r6, [r1, #8]
 4216 0018 0662     		str	r6, [r0, #32]
5294:FreeRTOS/Src/tasks.c **** 
 4217              		.loc 1 5294 5 view .LVU1265
 4218 001a 2568     		ldr	r5, [r4]
 4219 001c 1835     		adds	r5, r5, #24
 4220 001e 7560     		str	r5, [r6, #4]
5294:FreeRTOS/Src/tasks.c **** 
 4221              		.loc 1 5294 5 view .LVU1266
 4222 0020 2568     		ldr	r5, [r4]
 4223 0022 1835     		adds	r5, r5, #24
 4224 0024 8D60     		str	r5, [r1, #8]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 249


5294:FreeRTOS/Src/tasks.c **** 
 4225              		.loc 1 5294 5 view .LVU1267
 4226 0026 2168     		ldr	r1, [r4]
 4227              	.LVL331:
5294:FreeRTOS/Src/tasks.c **** 
 4228              		.loc 1 5294 5 is_stmt 0 view .LVU1268
 4229 0028 8B62     		str	r3, [r1, #40]
5294:FreeRTOS/Src/tasks.c **** 
 4230              		.loc 1 5294 5 is_stmt 1 view .LVU1269
 4231 002a 1968     		ldr	r1, [r3]
 4232 002c 0131     		adds	r1, r1, #1
 4233 002e 1960     		str	r1, [r3]
 4234              	.LBE108:
5294:FreeRTOS/Src/tasks.c **** 
 4235              		.loc 1 5294 5 view .LVU1270
5296:FreeRTOS/Src/tasks.c **** 
 4236              		.loc 1 5296 5 view .LVU1271
 4237 0030 0121     		movs	r1, #1
 4238 0032 1046     		mov	r0, r2
 4239 0034 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4240              	.LVL332:
5298:FreeRTOS/Src/tasks.c **** }
 4241              		.loc 1 5298 49 view .LVU1272
5299:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4242              		.loc 1 5299 1 is_stmt 0 view .LVU1273
 4243 0038 70BD     		pop	{r4, r5, r6, pc}
 4244              	.L291:
 4245 003a 00BF     		.align	2
 4246              	.L290:
 4247 003c 00000000 		.word	pxCurrentTCB
 4248              		.cfi_endproc
 4249              	.LFE157:
 4251              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4252              		.align	1
 4253              		.global	vTaskPlaceOnEventListRestricted
 4254              		.syntax unified
 4255              		.thumb
 4256              		.thumb_func
 4258              	vTaskPlaceOnEventListRestricted:
 4259              	.LVL333:
 4260              	.LFB158:
5307:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );
 4261              		.loc 1 5307 5 is_stmt 1 view -0
 4262              		.cfi_startproc
 4263              		@ args = 0, pretend = 0, frame = 0
 4264              		@ frame_needed = 0, uses_anonymous_args = 0
5307:FreeRTOS/Src/tasks.c ****         traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );
 4265              		.loc 1 5307 5 is_stmt 0 view .LVU1275
 4266 0000 70B5     		push	{r4, r5, r6, lr}
 4267              	.LCFI36:
 4268              		.cfi_def_cfa_offset 16
 4269              		.cfi_offset 4, -16
 4270              		.cfi_offset 5, -12
 4271              		.cfi_offset 6, -8
 4272              		.cfi_offset 14, -4
 4273 0002 0346     		mov	r3, r0
 4274 0004 0846     		mov	r0, r1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 250


 4275              	.LVL334:
5308:FreeRTOS/Src/tasks.c **** 
 4276              		.loc 1 5308 99 is_stmt 1 view .LVU1276
5310:FreeRTOS/Src/tasks.c **** 
 4277              		.loc 1 5310 36 view .LVU1277
5322:FreeRTOS/Src/tasks.c **** 
 4278              		.loc 1 5322 9 view .LVU1278
 4279              	.LBB109:
5322:FreeRTOS/Src/tasks.c **** 
 4280              		.loc 1 5322 9 view .LVU1279
 4281 0006 5968     		ldr	r1, [r3, #4]
 4282              	.LVL335:
5322:FreeRTOS/Src/tasks.c **** 
 4283              		.loc 1 5322 9 view .LVU1280
5322:FreeRTOS/Src/tasks.c **** 
 4284              		.loc 1 5322 9 view .LVU1281
5322:FreeRTOS/Src/tasks.c **** 
 4285              		.loc 1 5322 9 view .LVU1282
 4286 0008 0B4C     		ldr	r4, .L296
 4287 000a 2568     		ldr	r5, [r4]
 4288 000c E961     		str	r1, [r5, #28]
5322:FreeRTOS/Src/tasks.c **** 
 4289              		.loc 1 5322 9 view .LVU1283
 4290 000e 2568     		ldr	r5, [r4]
 4291 0010 8E68     		ldr	r6, [r1, #8]
 4292 0012 2E62     		str	r6, [r5, #32]
5322:FreeRTOS/Src/tasks.c **** 
 4293              		.loc 1 5322 9 view .LVU1284
 4294 0014 2568     		ldr	r5, [r4]
 4295 0016 1835     		adds	r5, r5, #24
 4296 0018 7560     		str	r5, [r6, #4]
5322:FreeRTOS/Src/tasks.c **** 
 4297              		.loc 1 5322 9 view .LVU1285
 4298 001a 2568     		ldr	r5, [r4]
 4299 001c 1835     		adds	r5, r5, #24
 4300 001e 8D60     		str	r5, [r1, #8]
5322:FreeRTOS/Src/tasks.c **** 
 4301              		.loc 1 5322 9 view .LVU1286
 4302 0020 2168     		ldr	r1, [r4]
 4303              	.LVL336:
5322:FreeRTOS/Src/tasks.c **** 
 4304              		.loc 1 5322 9 is_stmt 0 view .LVU1287
 4305 0022 8B62     		str	r3, [r1, #40]
5322:FreeRTOS/Src/tasks.c **** 
 4306              		.loc 1 5322 9 is_stmt 1 view .LVU1288
 4307 0024 1968     		ldr	r1, [r3]
 4308 0026 0131     		adds	r1, r1, #1
 4309 0028 1960     		str	r1, [r3]
 4310              	.LBE109:
5322:FreeRTOS/Src/tasks.c **** 
 4311              		.loc 1 5322 9 view .LVU1289
5327:FreeRTOS/Src/tasks.c ****         {
 4312              		.loc 1 5327 9 view .LVU1290
5327:FreeRTOS/Src/tasks.c ****         {
 4313              		.loc 1 5327 11 is_stmt 0 view .LVU1291
 4314 002a 1146     		mov	r1, r2
 4315 002c 0AB1     		cbz	r2, .L293
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 251


5329:FreeRTOS/Src/tasks.c ****         }
 4316              		.loc 1 5329 26 view .LVU1292
 4317 002e 4FF0FF30 		mov	r0, #-1
 4318              	.LVL337:
 4319              	.L293:
5332:FreeRTOS/Src/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4320              		.loc 1 5332 63 is_stmt 1 view .LVU1293
5333:FreeRTOS/Src/tasks.c **** 
 4321              		.loc 1 5333 9 view .LVU1294
 4322 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4323              	.LVL338:
5335:FreeRTOS/Src/tasks.c ****     }
 4324              		.loc 1 5335 54 view .LVU1295
5336:FreeRTOS/Src/tasks.c **** 
 4325              		.loc 1 5336 5 is_stmt 0 view .LVU1296
 4326 0036 70BD     		pop	{r4, r5, r6, pc}
 4327              	.L297:
 4328              		.align	2
 4329              	.L296:
 4330 0038 00000000 		.word	pxCurrentTCB
 4331              		.cfi_endproc
 4332              	.LFE158:
 4334              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4335              		.align	1
 4336              		.global	xTaskRemoveFromEventList
 4337              		.syntax unified
 4338              		.thumb
 4339              		.thumb_func
 4341              	xTaskRemoveFromEventList:
 4342              	.LVL339:
 4343              	.LFB159:
5342:FreeRTOS/Src/tasks.c ****     TCB_t * pxUnblockedTCB;
 4344              		.loc 1 5342 1 is_stmt 1 view -0
 4345              		.cfi_startproc
 4346              		@ args = 0, pretend = 0, frame = 0
 4347              		@ frame_needed = 0, uses_anonymous_args = 0
 4348              		@ link register save eliminated.
5342:FreeRTOS/Src/tasks.c ****     TCB_t * pxUnblockedTCB;
 4349              		.loc 1 5342 1 is_stmt 0 view .LVU1298
 4350 0000 30B4     		push	{r4, r5}
 4351              	.LCFI37:
 4352              		.cfi_def_cfa_offset 8
 4353              		.cfi_offset 4, -8
 4354              		.cfi_offset 5, -4
5343:FreeRTOS/Src/tasks.c ****     BaseType_t xReturn;
 4355              		.loc 1 5343 5 is_stmt 1 view .LVU1299
5344:FreeRTOS/Src/tasks.c **** 
 4356              		.loc 1 5344 5 view .LVU1300
5346:FreeRTOS/Src/tasks.c **** 
 4357              		.loc 1 5346 55 view .LVU1301
5364:FreeRTOS/Src/tasks.c ****     configASSERT( pxUnblockedTCB );
 4358              		.loc 1 5364 5 view .LVU1302
5364:FreeRTOS/Src/tasks.c ****     configASSERT( pxUnblockedTCB );
 4359              		.loc 1 5364 22 is_stmt 0 view .LVU1303
 4360 0002 C368     		ldr	r3, [r0, #12]
5364:FreeRTOS/Src/tasks.c ****     configASSERT( pxUnblockedTCB );
 4361              		.loc 1 5364 20 view .LVU1304
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 252


 4362 0004 DB68     		ldr	r3, [r3, #12]
 4363              	.LVL340:
5365:FreeRTOS/Src/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4364              		.loc 1 5365 35 is_stmt 1 view .LVU1305
5366:FreeRTOS/Src/tasks.c **** 
 4365              		.loc 1 5366 5 view .LVU1306
 4366              	.LBB110:
5366:FreeRTOS/Src/tasks.c **** 
 4367              		.loc 1 5366 5 view .LVU1307
 4368 0006 9A6A     		ldr	r2, [r3, #40]
 4369              	.LVL341:
5366:FreeRTOS/Src/tasks.c **** 
 4370              		.loc 1 5366 5 view .LVU1308
 4371 0008 D869     		ldr	r0, [r3, #28]
 4372              	.LVL342:
5366:FreeRTOS/Src/tasks.c **** 
 4373              		.loc 1 5366 5 is_stmt 0 view .LVU1309
 4374 000a 196A     		ldr	r1, [r3, #32]
 4375 000c 8160     		str	r1, [r0, #8]
5366:FreeRTOS/Src/tasks.c **** 
 4376              		.loc 1 5366 5 is_stmt 1 view .LVU1310
 4377 000e D869     		ldr	r0, [r3, #28]
 4378 0010 4860     		str	r0, [r1, #4]
5366:FreeRTOS/Src/tasks.c **** 
 4379              		.loc 1 5366 5 view .LVU1311
 4380 0012 5168     		ldr	r1, [r2, #4]
 4381 0014 03F11800 		add	r0, r3, #24
 4382 0018 8142     		cmp	r1, r0
 4383 001a 41D0     		beq	.L306
 4384              	.L299:
5366:FreeRTOS/Src/tasks.c **** 
 4385              		.loc 1 5366 5 discriminator 3 view .LVU1312
 4386 001c 0021     		movs	r1, #0
 4387 001e 9962     		str	r1, [r3, #40]
5366:FreeRTOS/Src/tasks.c **** 
 4388              		.loc 1 5366 5 view .LVU1313
5366:FreeRTOS/Src/tasks.c **** 
 4389              		.loc 1 5366 5 is_stmt 0 discriminator 3 view .LVU1314
 4390 0020 1168     		ldr	r1, [r2]
 4391 0022 0139     		subs	r1, r1, #1
 4392 0024 1160     		str	r1, [r2]
 4393              	.LBE110:
5366:FreeRTOS/Src/tasks.c **** 
 4394              		.loc 1 5366 5 is_stmt 1 view .LVU1315
5368:FreeRTOS/Src/tasks.c ****     {
 4395              		.loc 1 5368 5 view .LVU1316
5368:FreeRTOS/Src/tasks.c ****     {
 4396              		.loc 1 5368 30 is_stmt 0 view .LVU1317
 4397 0026 284A     		ldr	r2, .L308
 4398              	.LVL343:
5368:FreeRTOS/Src/tasks.c ****     {
 4399              		.loc 1 5368 30 view .LVU1318
 4400 0028 1268     		ldr	r2, [r2]
5368:FreeRTOS/Src/tasks.c ****     {
 4401              		.loc 1 5368 7 view .LVU1319
 4402 002a 002A     		cmp	r2, #0
 4403 002c 3ED1     		bne	.L300
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 253


5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4404              		.loc 1 5370 9 is_stmt 1 view .LVU1320
 4405              	.LBB111:
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4406              		.loc 1 5370 9 view .LVU1321
 4407 002e 5A69     		ldr	r2, [r3, #20]
 4408              	.LVL344:
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4409              		.loc 1 5370 9 view .LVU1322
 4410 0030 9868     		ldr	r0, [r3, #8]
 4411 0032 D968     		ldr	r1, [r3, #12]
 4412 0034 8160     		str	r1, [r0, #8]
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4413              		.loc 1 5370 9 view .LVU1323
 4414 0036 9868     		ldr	r0, [r3, #8]
 4415 0038 4860     		str	r0, [r1, #4]
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4416              		.loc 1 5370 9 view .LVU1324
 4417 003a 5168     		ldr	r1, [r2, #4]
 4418 003c 181D     		adds	r0, r3, #4
 4419 003e 8142     		cmp	r1, r0
 4420 0040 31D0     		beq	.L307
 4421              	.L301:
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4422              		.loc 1 5370 9 discriminator 3 view .LVU1325
 4423 0042 0021     		movs	r1, #0
 4424 0044 5961     		str	r1, [r3, #20]
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4425              		.loc 1 5370 9 view .LVU1326
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4426              		.loc 1 5370 9 is_stmt 0 discriminator 3 view .LVU1327
 4427 0046 1168     		ldr	r1, [r2]
 4428 0048 0139     		subs	r1, r1, #1
 4429 004a 1160     		str	r1, [r2]
 4430              	.LBE111:
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4431              		.loc 1 5370 9 is_stmt 1 view .LVU1328
5371:FreeRTOS/Src/tasks.c **** 
 4432              		.loc 1 5371 9 view .LVU1329
5371:FreeRTOS/Src/tasks.c **** 
 4433              		.loc 1 5371 9 view .LVU1330
5371:FreeRTOS/Src/tasks.c **** 
 4434              		.loc 1 5371 9 view .LVU1331
 4435 004c DA6A     		ldr	r2, [r3, #44]
 4436              	.LVL345:
5371:FreeRTOS/Src/tasks.c **** 
 4437              		.loc 1 5371 9 is_stmt 0 view .LVU1332
 4438 004e 0121     		movs	r1, #1
 4439 0050 9140     		lsls	r1, r1, r2
 4440 0052 1E4C     		ldr	r4, .L308+4
 4441 0054 2568     		ldr	r5, [r4]
 4442 0056 2943     		orrs	r1, r1, r5
 4443 0058 2160     		str	r1, [r4]
5371:FreeRTOS/Src/tasks.c **** 
 4444              		.loc 1 5371 9 is_stmt 1 view .LVU1333
 4445              	.LBB112:
5371:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 254


 4446              		.loc 1 5371 9 view .LVU1334
 4447 005a 1D49     		ldr	r1, .L308+8
 4448 005c 02EB8202 		add	r2, r2, r2, lsl #2
 4449 0060 01EB8202 		add	r2, r1, r2, lsl #2
 4450 0064 5268     		ldr	r2, [r2, #4]
 4451              	.LVL346:
5371:FreeRTOS/Src/tasks.c **** 
 4452              		.loc 1 5371 9 view .LVU1335
5371:FreeRTOS/Src/tasks.c **** 
 4453              		.loc 1 5371 9 view .LVU1336
5371:FreeRTOS/Src/tasks.c **** 
 4454              		.loc 1 5371 9 view .LVU1337
 4455 0066 9A60     		str	r2, [r3, #8]
5371:FreeRTOS/Src/tasks.c **** 
 4456              		.loc 1 5371 9 view .LVU1338
 4457 0068 9468     		ldr	r4, [r2, #8]
 4458 006a DC60     		str	r4, [r3, #12]
5371:FreeRTOS/Src/tasks.c **** 
 4459              		.loc 1 5371 9 view .LVU1339
 4460 006c 6060     		str	r0, [r4, #4]
5371:FreeRTOS/Src/tasks.c **** 
 4461              		.loc 1 5371 9 view .LVU1340
 4462 006e 9060     		str	r0, [r2, #8]
5371:FreeRTOS/Src/tasks.c **** 
 4463              		.loc 1 5371 9 view .LVU1341
 4464 0070 DA6A     		ldr	r2, [r3, #44]
 4465              	.LVL347:
5371:FreeRTOS/Src/tasks.c **** 
 4466              		.loc 1 5371 9 is_stmt 0 view .LVU1342
 4467 0072 02EB8200 		add	r0, r2, r2, lsl #2
 4468 0076 01EB8004 		add	r4, r1, r0, lsl #2
 4469 007a 5C61     		str	r4, [r3, #20]
5371:FreeRTOS/Src/tasks.c **** 
 4470              		.loc 1 5371 9 is_stmt 1 view .LVU1343
 4471 007c 51F82000 		ldr	r0, [r1, r0, lsl #2]
 4472 0080 0130     		adds	r0, r0, #1
 4473 0082 02EB8202 		add	r2, r2, r2, lsl #2
 4474 0086 41F82200 		str	r0, [r1, r2, lsl #2]
 4475              	.LBE112:
5371:FreeRTOS/Src/tasks.c **** 
 4476              		.loc 1 5371 9 view .LVU1344
5371:FreeRTOS/Src/tasks.c **** 
 4477              		.loc 1 5371 9 view .LVU1345
5371:FreeRTOS/Src/tasks.c **** 
 4478              		.loc 1 5371 9 view .LVU1346
 4479              	.LVL348:
 4480              	.L302:
5391:FreeRTOS/Src/tasks.c ****     }
 4481              		.loc 1 5391 9 discriminator 1 view .LVU1347
5396:FreeRTOS/Src/tasks.c ****         {
 4482              		.loc 1 5396 9 view .LVU1348
5396:FreeRTOS/Src/tasks.c ****         {
 4483              		.loc 1 5396 27 is_stmt 0 view .LVU1349
 4484 008a DA6A     		ldr	r2, [r3, #44]
5396:FreeRTOS/Src/tasks.c ****         {
 4485              		.loc 1 5396 54 view .LVU1350
 4486 008c 114B     		ldr	r3, .L308+12
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 255


 4487              	.LVL349:
5396:FreeRTOS/Src/tasks.c ****         {
 4488              		.loc 1 5396 54 view .LVU1351
 4489 008e 1B68     		ldr	r3, [r3]
 4490 0090 DB6A     		ldr	r3, [r3, #44]
5396:FreeRTOS/Src/tasks.c ****         {
 4491              		.loc 1 5396 11 view .LVU1352
 4492 0092 9A42     		cmp	r2, r3
 4493 0094 16D9     		bls	.L304
5401:FreeRTOS/Src/tasks.c **** 
 4494              		.loc 1 5401 13 is_stmt 1 view .LVU1353
 4495              	.LVL350:
5405:FreeRTOS/Src/tasks.c ****         }
 4496              		.loc 1 5405 13 view .LVU1354
5405:FreeRTOS/Src/tasks.c ****         }
 4497              		.loc 1 5405 33 is_stmt 0 view .LVU1355
 4498 0096 0120     		movs	r0, #1
 4499 0098 0F4B     		ldr	r3, .L308+16
 4500 009a 1860     		str	r0, [r3]
 4501              	.LVL351:
 4502              	.L298:
5431:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4503              		.loc 1 5431 1 view .LVU1356
 4504 009c 30BC     		pop	{r4, r5}
 4505              	.LCFI38:
 4506              		.cfi_remember_state
 4507              		.cfi_restore 5
 4508              		.cfi_restore 4
 4509              		.cfi_def_cfa_offset 0
 4510 009e 7047     		bx	lr
 4511              	.LVL352:
 4512              	.L306:
 4513              	.LCFI39:
 4514              		.cfi_restore_state
 4515              	.LBB113:
5366:FreeRTOS/Src/tasks.c **** 
 4516              		.loc 1 5366 5 is_stmt 1 discriminator 1 view .LVU1357
 4517 00a0 196A     		ldr	r1, [r3, #32]
 4518 00a2 5160     		str	r1, [r2, #4]
 4519 00a4 BAE7     		b	.L299
 4520              	.LVL353:
 4521              	.L307:
5366:FreeRTOS/Src/tasks.c **** 
 4522              		.loc 1 5366 5 is_stmt 0 discriminator 1 view .LVU1358
 4523              	.LBE113:
 4524              	.LBB114:
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4525              		.loc 1 5370 9 is_stmt 1 discriminator 1 view .LVU1359
 4526 00a6 D968     		ldr	r1, [r3, #12]
 4527 00a8 5160     		str	r1, [r2, #4]
 4528 00aa CAE7     		b	.L301
 4529              	.LVL354:
 4530              	.L300:
5370:FreeRTOS/Src/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4531              		.loc 1 5370 9 is_stmt 0 discriminator 1 view .LVU1360
 4532              	.LBE114:
5391:FreeRTOS/Src/tasks.c ****     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 256


 4533              		.loc 1 5391 9 is_stmt 1 view .LVU1361
 4534              	.LBB115:
5391:FreeRTOS/Src/tasks.c ****     }
 4535              		.loc 1 5391 9 view .LVU1362
 4536 00ac 0B4A     		ldr	r2, .L308+20
 4537 00ae 5168     		ldr	r1, [r2, #4]
 4538              	.LVL355:
5391:FreeRTOS/Src/tasks.c ****     }
 4539              		.loc 1 5391 9 view .LVU1363
5391:FreeRTOS/Src/tasks.c ****     }
 4540              		.loc 1 5391 9 view .LVU1364
5391:FreeRTOS/Src/tasks.c ****     }
 4541              		.loc 1 5391 9 view .LVU1365
 4542 00b0 D961     		str	r1, [r3, #28]
5391:FreeRTOS/Src/tasks.c ****     }
 4543              		.loc 1 5391 9 view .LVU1366
 4544 00b2 8C68     		ldr	r4, [r1, #8]
 4545 00b4 1C62     		str	r4, [r3, #32]
5391:FreeRTOS/Src/tasks.c ****     }
 4546              		.loc 1 5391 9 view .LVU1367
 4547 00b6 6060     		str	r0, [r4, #4]
5391:FreeRTOS/Src/tasks.c ****     }
 4548              		.loc 1 5391 9 view .LVU1368
 4549 00b8 8860     		str	r0, [r1, #8]
5391:FreeRTOS/Src/tasks.c ****     }
 4550              		.loc 1 5391 9 view .LVU1369
 4551 00ba 9A62     		str	r2, [r3, #40]
5391:FreeRTOS/Src/tasks.c ****     }
 4552              		.loc 1 5391 9 view .LVU1370
 4553 00bc 1168     		ldr	r1, [r2]
 4554              	.LVL356:
5391:FreeRTOS/Src/tasks.c ****     }
 4555              		.loc 1 5391 9 is_stmt 0 view .LVU1371
 4556 00be 0131     		adds	r1, r1, #1
 4557 00c0 1160     		str	r1, [r2]
 4558 00c2 E2E7     		b	.L302
 4559              	.LVL357:
 4560              	.L304:
5391:FreeRTOS/Src/tasks.c ****     }
 4561              		.loc 1 5391 9 view .LVU1372
 4562              	.LBE115:
5409:FreeRTOS/Src/tasks.c ****         }
 4563              		.loc 1 5409 21 view .LVU1373
 4564 00c4 0020     		movs	r0, #0
 4565              	.LVL358:
5429:FreeRTOS/Src/tasks.c ****     return xReturn;
 4566              		.loc 1 5429 52 is_stmt 1 view .LVU1374
5430:FreeRTOS/Src/tasks.c **** }
 4567              		.loc 1 5430 5 view .LVU1375
5430:FreeRTOS/Src/tasks.c **** }
 4568              		.loc 1 5430 12 is_stmt 0 view .LVU1376
 4569 00c6 E9E7     		b	.L298
 4570              	.L309:
 4571              		.align	2
 4572              	.L308:
 4573 00c8 00000000 		.word	uxSchedulerSuspended
 4574 00cc 00000000 		.word	uxTopReadyPriority
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 257


 4575 00d0 00000000 		.word	pxReadyTasksLists
 4576 00d4 00000000 		.word	pxCurrentTCB
 4577 00d8 00000000 		.word	xYieldPendings
 4578 00dc 00000000 		.word	xPendingReadyList
 4579              		.cfi_endproc
 4580              	.LFE159:
 4582              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4583              		.align	1
 4584              		.global	vTaskRemoveFromUnorderedEventList
 4585              		.syntax unified
 4586              		.thumb
 4587              		.thumb_func
 4589              	vTaskRemoveFromUnorderedEventList:
 4590              	.LVL359:
 4591              	.LFB160:
5436:FreeRTOS/Src/tasks.c ****     TCB_t * pxUnblockedTCB;
 4592              		.loc 1 5436 1 is_stmt 1 view -0
 4593              		.cfi_startproc
 4594              		@ args = 0, pretend = 0, frame = 0
 4595              		@ frame_needed = 0, uses_anonymous_args = 0
 4596              		@ link register save eliminated.
5436:FreeRTOS/Src/tasks.c ****     TCB_t * pxUnblockedTCB;
 4597              		.loc 1 5436 1 is_stmt 0 view .LVU1378
 4598 0000 30B4     		push	{r4, r5}
 4599              	.LCFI40:
 4600              		.cfi_def_cfa_offset 8
 4601              		.cfi_offset 4, -8
 4602              		.cfi_offset 5, -4
5437:FreeRTOS/Src/tasks.c **** 
 4603              		.loc 1 5437 5 is_stmt 1 view .LVU1379
5439:FreeRTOS/Src/tasks.c **** 
 4604              		.loc 1 5439 80 view .LVU1380
5443:FreeRTOS/Src/tasks.c **** 
 4605              		.loc 1 5443 63 view .LVU1381
5446:FreeRTOS/Src/tasks.c **** 
 4606              		.loc 1 5446 5 view .LVU1382
 4607 0002 41F00041 		orr	r1, r1, #-2147483648
 4608              	.LVL360:
5446:FreeRTOS/Src/tasks.c **** 
 4609              		.loc 1 5446 5 is_stmt 0 view .LVU1383
 4610 0006 0160     		str	r1, [r0]
5453:FreeRTOS/Src/tasks.c ****     configASSERT( pxUnblockedTCB );
 4611              		.loc 1 5453 5 is_stmt 1 view .LVU1384
5453:FreeRTOS/Src/tasks.c ****     configASSERT( pxUnblockedTCB );
 4612              		.loc 1 5453 20 is_stmt 0 view .LVU1385
 4613 0008 C368     		ldr	r3, [r0, #12]
 4614              	.LVL361:
5454:FreeRTOS/Src/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4615              		.loc 1 5454 35 is_stmt 1 view .LVU1386
5455:FreeRTOS/Src/tasks.c **** 
 4616              		.loc 1 5455 5 view .LVU1387
 4617              	.LBB116:
5455:FreeRTOS/Src/tasks.c **** 
 4618              		.loc 1 5455 5 view .LVU1388
 4619 000a 0269     		ldr	r2, [r0, #16]
 4620              	.LVL362:
5455:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 258


 4621              		.loc 1 5455 5 view .LVU1389
 4622 000c 4468     		ldr	r4, [r0, #4]
 4623 000e 8168     		ldr	r1, [r0, #8]
 4624 0010 A160     		str	r1, [r4, #8]
5455:FreeRTOS/Src/tasks.c **** 
 4625              		.loc 1 5455 5 view .LVU1390
 4626 0012 4468     		ldr	r4, [r0, #4]
 4627 0014 4C60     		str	r4, [r1, #4]
5455:FreeRTOS/Src/tasks.c **** 
 4628              		.loc 1 5455 5 view .LVU1391
 4629 0016 5168     		ldr	r1, [r2, #4]
 4630 0018 8142     		cmp	r1, r0
 4631 001a 3DD0     		beq	.L315
 4632              	.L311:
5455:FreeRTOS/Src/tasks.c **** 
 4633              		.loc 1 5455 5 discriminator 3 view .LVU1392
 4634 001c 0021     		movs	r1, #0
 4635 001e 0161     		str	r1, [r0, #16]
5455:FreeRTOS/Src/tasks.c **** 
 4636              		.loc 1 5455 5 view .LVU1393
5455:FreeRTOS/Src/tasks.c **** 
 4637              		.loc 1 5455 5 is_stmt 0 discriminator 3 view .LVU1394
 4638 0020 1168     		ldr	r1, [r2]
 4639 0022 0139     		subs	r1, r1, #1
 4640 0024 1160     		str	r1, [r2]
 4641              	.LBE116:
5455:FreeRTOS/Src/tasks.c **** 
 4642              		.loc 1 5455 5 is_stmt 1 view .LVU1395
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4643              		.loc 1 5474 5 view .LVU1396
 4644              	.LBB117:
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4645              		.loc 1 5474 5 view .LVU1397
 4646 0026 5A69     		ldr	r2, [r3, #20]
 4647              	.LVL363:
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4648              		.loc 1 5474 5 view .LVU1398
 4649 0028 9868     		ldr	r0, [r3, #8]
 4650              	.LVL364:
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4651              		.loc 1 5474 5 is_stmt 0 view .LVU1399
 4652 002a D968     		ldr	r1, [r3, #12]
 4653 002c 8160     		str	r1, [r0, #8]
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4654              		.loc 1 5474 5 is_stmt 1 view .LVU1400
 4655 002e 9868     		ldr	r0, [r3, #8]
 4656 0030 4860     		str	r0, [r1, #4]
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4657              		.loc 1 5474 5 view .LVU1401
 4658 0032 5168     		ldr	r1, [r2, #4]
 4659 0034 181D     		adds	r0, r3, #4
 4660 0036 8142     		cmp	r1, r0
 4661 0038 31D0     		beq	.L316
 4662              	.L312:
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4663              		.loc 1 5474 5 discriminator 3 view .LVU1402
 4664 003a 0021     		movs	r1, #0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 259


 4665 003c 5961     		str	r1, [r3, #20]
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4666              		.loc 1 5474 5 view .LVU1403
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4667              		.loc 1 5474 5 is_stmt 0 discriminator 3 view .LVU1404
 4668 003e 1168     		ldr	r1, [r2]
 4669 0040 0139     		subs	r1, r1, #1
 4670 0042 1160     		str	r1, [r2]
 4671              	.LBE117:
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4672              		.loc 1 5474 5 is_stmt 1 view .LVU1405
5475:FreeRTOS/Src/tasks.c **** 
 4673              		.loc 1 5475 5 view .LVU1406
5475:FreeRTOS/Src/tasks.c **** 
 4674              		.loc 1 5475 5 view .LVU1407
5475:FreeRTOS/Src/tasks.c **** 
 4675              		.loc 1 5475 5 view .LVU1408
 4676 0044 DA6A     		ldr	r2, [r3, #44]
 4677              	.LVL365:
5475:FreeRTOS/Src/tasks.c **** 
 4678              		.loc 1 5475 5 is_stmt 0 view .LVU1409
 4679 0046 0121     		movs	r1, #1
 4680 0048 9140     		lsls	r1, r1, r2
 4681 004a 164C     		ldr	r4, .L317
 4682 004c 2568     		ldr	r5, [r4]
 4683 004e 2943     		orrs	r1, r1, r5
 4684 0050 2160     		str	r1, [r4]
5475:FreeRTOS/Src/tasks.c **** 
 4685              		.loc 1 5475 5 is_stmt 1 view .LVU1410
 4686              	.LBB118:
5475:FreeRTOS/Src/tasks.c **** 
 4687              		.loc 1 5475 5 view .LVU1411
 4688 0052 1549     		ldr	r1, .L317+4
 4689 0054 02EB8202 		add	r2, r2, r2, lsl #2
 4690 0058 01EB8202 		add	r2, r1, r2, lsl #2
 4691 005c 5268     		ldr	r2, [r2, #4]
 4692              	.LVL366:
5475:FreeRTOS/Src/tasks.c **** 
 4693              		.loc 1 5475 5 view .LVU1412
5475:FreeRTOS/Src/tasks.c **** 
 4694              		.loc 1 5475 5 view .LVU1413
5475:FreeRTOS/Src/tasks.c **** 
 4695              		.loc 1 5475 5 view .LVU1414
 4696 005e 9A60     		str	r2, [r3, #8]
5475:FreeRTOS/Src/tasks.c **** 
 4697              		.loc 1 5475 5 view .LVU1415
 4698 0060 9468     		ldr	r4, [r2, #8]
 4699 0062 DC60     		str	r4, [r3, #12]
5475:FreeRTOS/Src/tasks.c **** 
 4700              		.loc 1 5475 5 view .LVU1416
 4701 0064 6060     		str	r0, [r4, #4]
5475:FreeRTOS/Src/tasks.c **** 
 4702              		.loc 1 5475 5 view .LVU1417
 4703 0066 9060     		str	r0, [r2, #8]
5475:FreeRTOS/Src/tasks.c **** 
 4704              		.loc 1 5475 5 view .LVU1418
 4705 0068 DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 260


 4706              	.LVL367:
5475:FreeRTOS/Src/tasks.c **** 
 4707              		.loc 1 5475 5 is_stmt 0 view .LVU1419
 4708 006a 02EB8200 		add	r0, r2, r2, lsl #2
 4709 006e 01EB8004 		add	r4, r1, r0, lsl #2
 4710 0072 5C61     		str	r4, [r3, #20]
5475:FreeRTOS/Src/tasks.c **** 
 4711              		.loc 1 5475 5 is_stmt 1 view .LVU1420
 4712 0074 51F82000 		ldr	r0, [r1, r0, lsl #2]
 4713 0078 0130     		adds	r0, r0, #1
 4714 007a 02EB8202 		add	r2, r2, r2, lsl #2
 4715 007e 41F82200 		str	r0, [r1, r2, lsl #2]
 4716              	.LBE118:
5475:FreeRTOS/Src/tasks.c **** 
 4717              		.loc 1 5475 5 view .LVU1421
5475:FreeRTOS/Src/tasks.c **** 
 4718              		.loc 1 5475 5 view .LVU1422
5475:FreeRTOS/Src/tasks.c **** 
 4719              		.loc 1 5475 5 view .LVU1423
5479:FreeRTOS/Src/tasks.c ****         {
 4720              		.loc 1 5479 9 view .LVU1424
5479:FreeRTOS/Src/tasks.c ****         {
 4721              		.loc 1 5479 27 is_stmt 0 view .LVU1425
 4722 0082 DA6A     		ldr	r2, [r3, #44]
5479:FreeRTOS/Src/tasks.c ****         {
 4723              		.loc 1 5479 54 view .LVU1426
 4724 0084 094B     		ldr	r3, .L317+8
 4725              	.LVL368:
5479:FreeRTOS/Src/tasks.c ****         {
 4726              		.loc 1 5479 54 view .LVU1427
 4727 0086 1B68     		ldr	r3, [r3]
 4728 0088 DB6A     		ldr	r3, [r3, #44]
5479:FreeRTOS/Src/tasks.c ****         {
 4729              		.loc 1 5479 11 view .LVU1428
 4730 008a 9A42     		cmp	r2, r3
 4731 008c 02D9     		bls	.L310
5485:FreeRTOS/Src/tasks.c ****         }
 4732              		.loc 1 5485 13 is_stmt 1 view .LVU1429
5485:FreeRTOS/Src/tasks.c ****         }
 4733              		.loc 1 5485 33 is_stmt 0 view .LVU1430
 4734 008e 084B     		ldr	r3, .L317+12
 4735 0090 0122     		movs	r2, #1
 4736 0092 1A60     		str	r2, [r3]
5502:FreeRTOS/Src/tasks.c **** }
 4737              		.loc 1 5502 52 is_stmt 1 view .LVU1431
 4738              	.L310:
5503:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4739              		.loc 1 5503 1 is_stmt 0 view .LVU1432
 4740 0094 30BC     		pop	{r4, r5}
 4741              	.LCFI41:
 4742              		.cfi_remember_state
 4743              		.cfi_restore 5
 4744              		.cfi_restore 4
 4745              		.cfi_def_cfa_offset 0
 4746 0096 7047     		bx	lr
 4747              	.LVL369:
 4748              	.L315:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 261


 4749              	.LCFI42:
 4750              		.cfi_restore_state
 4751              	.LBB119:
5455:FreeRTOS/Src/tasks.c **** 
 4752              		.loc 1 5455 5 is_stmt 1 discriminator 1 view .LVU1433
 4753 0098 8168     		ldr	r1, [r0, #8]
 4754 009a 5160     		str	r1, [r2, #4]
 4755 009c BEE7     		b	.L311
 4756              	.LVL370:
 4757              	.L316:
5455:FreeRTOS/Src/tasks.c **** 
 4758              		.loc 1 5455 5 is_stmt 0 discriminator 1 view .LVU1434
 4759              	.LBE119:
 4760              	.LBB120:
5474:FreeRTOS/Src/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4761              		.loc 1 5474 5 is_stmt 1 discriminator 1 view .LVU1435
 4762 009e D968     		ldr	r1, [r3, #12]
 4763 00a0 5160     		str	r1, [r2, #4]
 4764 00a2 CAE7     		b	.L312
 4765              	.L318:
 4766              		.align	2
 4767              	.L317:
 4768 00a4 00000000 		.word	uxTopReadyPriority
 4769 00a8 00000000 		.word	pxReadyTasksLists
 4770 00ac 00000000 		.word	pxCurrentTCB
 4771 00b0 00000000 		.word	xYieldPendings
 4772              	.LBE120:
 4773              		.cfi_endproc
 4774              	.LFE160:
 4776              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4777              		.align	1
 4778              		.global	vTaskSetTimeOutState
 4779              		.syntax unified
 4780              		.thumb
 4781              		.thumb_func
 4783              	vTaskSetTimeOutState:
 4784              	.LVL371:
 4785              	.LFB161:
5507:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskSetTimeOutState( pxTimeOut );
 4786              		.loc 1 5507 1 view -0
 4787              		.cfi_startproc
 4788              		@ args = 0, pretend = 0, frame = 0
 4789              		@ frame_needed = 0, uses_anonymous_args = 0
5507:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskSetTimeOutState( pxTimeOut );
 4790              		.loc 1 5507 1 is_stmt 0 view .LVU1437
 4791 0000 10B5     		push	{r4, lr}
 4792              	.LCFI43:
 4793              		.cfi_def_cfa_offset 8
 4794              		.cfi_offset 4, -8
 4795              		.cfi_offset 14, -4
 4796 0002 0446     		mov	r4, r0
5508:FreeRTOS/Src/tasks.c **** 
 4797              		.loc 1 5508 49 is_stmt 1 view .LVU1438
5510:FreeRTOS/Src/tasks.c ****     taskENTER_CRITICAL();
 4798              		.loc 1 5510 30 view .LVU1439
5511:FreeRTOS/Src/tasks.c ****     {
 4799              		.loc 1 5511 5 view .LVU1440
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 262


 4800 0004 FFF7FEFF 		bl	vPortEnterCritical
 4801              	.LVL372:
5513:FreeRTOS/Src/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4802              		.loc 1 5513 9 view .LVU1441
5513:FreeRTOS/Src/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4803              		.loc 1 5513 35 is_stmt 0 view .LVU1442
 4804 0008 044B     		ldr	r3, .L321
 4805 000a 1B68     		ldr	r3, [r3]
 4806 000c 2360     		str	r3, [r4]
5514:FreeRTOS/Src/tasks.c ****     }
 4807              		.loc 1 5514 9 is_stmt 1 view .LVU1443
5514:FreeRTOS/Src/tasks.c ****     }
 4808              		.loc 1 5514 36 is_stmt 0 view .LVU1444
 4809 000e 044B     		ldr	r3, .L321+4
 4810 0010 1B68     		ldr	r3, [r3]
 4811 0012 6360     		str	r3, [r4, #4]
5516:FreeRTOS/Src/tasks.c **** 
 4812              		.loc 1 5516 5 is_stmt 1 view .LVU1445
 4813 0014 FFF7FEFF 		bl	vPortExitCritical
 4814              	.LVL373:
5518:FreeRTOS/Src/tasks.c **** }
 4815              		.loc 1 5518 39 view .LVU1446
5519:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4816              		.loc 1 5519 1 is_stmt 0 view .LVU1447
 4817 0018 10BD     		pop	{r4, pc}
 4818              	.LVL374:
 4819              	.L322:
5519:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4820              		.loc 1 5519 1 view .LVU1448
 4821 001a 00BF     		.align	2
 4822              	.L321:
 4823 001c 00000000 		.word	xNumOfOverflows
 4824 0020 00000000 		.word	xTickCount
 4825              		.cfi_endproc
 4826              	.LFE161:
 4828              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4829              		.align	1
 4830              		.global	vTaskInternalSetTimeOutState
 4831              		.syntax unified
 4832              		.thumb
 4833              		.thumb_func
 4835              	vTaskInternalSetTimeOutState:
 4836              	.LVL375:
 4837              	.LFB162:
5523:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );
 4838              		.loc 1 5523 1 is_stmt 1 view -0
 4839              		.cfi_startproc
 4840              		@ args = 0, pretend = 0, frame = 0
 4841              		@ frame_needed = 0, uses_anonymous_args = 0
 4842              		@ link register save eliminated.
5524:FreeRTOS/Src/tasks.c **** 
 4843              		.loc 1 5524 57 view .LVU1450
5527:FreeRTOS/Src/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4844              		.loc 1 5527 5 view .LVU1451
5527:FreeRTOS/Src/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4845              		.loc 1 5527 31 is_stmt 0 view .LVU1452
 4846 0000 034B     		ldr	r3, .L324
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 263


 4847 0002 1B68     		ldr	r3, [r3]
 4848 0004 0360     		str	r3, [r0]
5528:FreeRTOS/Src/tasks.c **** 
 4849              		.loc 1 5528 5 is_stmt 1 view .LVU1453
5528:FreeRTOS/Src/tasks.c **** 
 4850              		.loc 1 5528 32 is_stmt 0 view .LVU1454
 4851 0006 034B     		ldr	r3, .L324+4
 4852 0008 1B68     		ldr	r3, [r3]
 4853 000a 4360     		str	r3, [r0, #4]
5530:FreeRTOS/Src/tasks.c **** }
 4854              		.loc 1 5530 47 is_stmt 1 view .LVU1455
5531:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4855              		.loc 1 5531 1 is_stmt 0 view .LVU1456
 4856 000c 7047     		bx	lr
 4857              	.L325:
 4858 000e 00BF     		.align	2
 4859              	.L324:
 4860 0010 00000000 		.word	xNumOfOverflows
 4861 0014 00000000 		.word	xTickCount
 4862              		.cfi_endproc
 4863              	.LFE162:
 4865              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4866              		.align	1
 4867              		.global	xTaskCheckForTimeOut
 4868              		.syntax unified
 4869              		.thumb
 4870              		.thumb_func
 4872              	xTaskCheckForTimeOut:
 4873              	.LVL376:
 4874              	.LFB163:
5536:FreeRTOS/Src/tasks.c ****     BaseType_t xReturn;
 4875              		.loc 1 5536 1 is_stmt 1 view -0
 4876              		.cfi_startproc
 4877              		@ args = 0, pretend = 0, frame = 0
 4878              		@ frame_needed = 0, uses_anonymous_args = 0
5536:FreeRTOS/Src/tasks.c ****     BaseType_t xReturn;
 4879              		.loc 1 5536 1 is_stmt 0 view .LVU1458
 4880 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4881              	.LCFI44:
 4882              		.cfi_def_cfa_offset 24
 4883              		.cfi_offset 3, -24
 4884              		.cfi_offset 4, -20
 4885              		.cfi_offset 5, -16
 4886              		.cfi_offset 6, -12
 4887              		.cfi_offset 7, -8
 4888              		.cfi_offset 14, -4
 4889 0002 0446     		mov	r4, r0
 4890 0004 0D46     		mov	r5, r1
5537:FreeRTOS/Src/tasks.c **** 
 4891              		.loc 1 5537 5 is_stmt 1 view .LVU1459
5539:FreeRTOS/Src/tasks.c **** 
 4892              		.loc 1 5539 64 view .LVU1460
5541:FreeRTOS/Src/tasks.c ****     configASSERT( pxTicksToWait );
 4893              		.loc 1 5541 30 view .LVU1461
5542:FreeRTOS/Src/tasks.c **** 
 4894              		.loc 1 5542 34 view .LVU1462
5544:FreeRTOS/Src/tasks.c ****     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 264


 4895              		.loc 1 5544 5 view .LVU1463
 4896 0006 FFF7FEFF 		bl	vPortEnterCritical
 4897              	.LVL377:
 4898              	.LBB121:
5547:FreeRTOS/Src/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4899              		.loc 1 5547 9 view .LVU1464
5547:FreeRTOS/Src/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4900              		.loc 1 5547 26 is_stmt 0 view .LVU1465
 4901 000a 134B     		ldr	r3, .L333
 4902 000c 1968     		ldr	r1, [r3]
 4903              	.LVL378:
5548:FreeRTOS/Src/tasks.c **** 
 4904              		.loc 1 5548 9 is_stmt 1 view .LVU1466
5548:FreeRTOS/Src/tasks.c **** 
 4905              		.loc 1 5548 68 is_stmt 0 view .LVU1467
 4906 000e 6368     		ldr	r3, [r4, #4]
5548:FreeRTOS/Src/tasks.c **** 
 4907              		.loc 1 5548 26 view .LVU1468
 4908 0010 C81A     		subs	r0, r1, r3
 4909              	.LVL379:
5562:FreeRTOS/Src/tasks.c ****             {
 4910              		.loc 1 5562 13 is_stmt 1 view .LVU1469
5562:FreeRTOS/Src/tasks.c ****             {
 4911              		.loc 1 5562 17 is_stmt 0 view .LVU1470
 4912 0012 2A68     		ldr	r2, [r5]
5562:FreeRTOS/Src/tasks.c ****             {
 4913              		.loc 1 5562 15 view .LVU1471
 4914 0014 B2F1FF3F 		cmp	r2, #-1
 4915 0018 18D0     		beq	.L330
5572:FreeRTOS/Src/tasks.c ****         {
 4916              		.loc 1 5572 9 is_stmt 1 view .LVU1472
5572:FreeRTOS/Src/tasks.c ****         {
 4917              		.loc 1 5572 31 is_stmt 0 view .LVU1473
 4918 001a 104E     		ldr	r6, .L333+4
 4919 001c 3668     		ldr	r6, [r6]
5572:FreeRTOS/Src/tasks.c ****         {
 4920              		.loc 1 5572 11 view .LVU1474
 4921 001e 2768     		ldr	r7, [r4]
 4922 0020 B742     		cmp	r7, r6
 4923 0022 05D0     		beq	.L328
5572:FreeRTOS/Src/tasks.c ****         {
 4924              		.loc 1 5572 62 discriminator 1 view .LVU1475
 4925 0024 8B42     		cmp	r3, r1
 4926 0026 03D8     		bhi	.L328
5579:FreeRTOS/Src/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4927              		.loc 1 5579 13 is_stmt 1 view .LVU1476
 4928              	.LVL380:
5580:FreeRTOS/Src/tasks.c ****         }
 4929              		.loc 1 5580 13 view .LVU1477
5580:FreeRTOS/Src/tasks.c ****         }
 4930              		.loc 1 5580 28 is_stmt 0 view .LVU1478
 4931 0028 0023     		movs	r3, #0
 4932 002a 2B60     		str	r3, [r5]
5579:FreeRTOS/Src/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4933              		.loc 1 5579 21 view .LVU1479
 4934 002c 0124     		movs	r4, #1
 4935              	.LVL381:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 265


5580:FreeRTOS/Src/tasks.c ****         }
 4936              		.loc 1 5580 28 view .LVU1480
 4937 002e 0EE0     		b	.L327
 4938              	.LVL382:
 4939              	.L328:
5582:FreeRTOS/Src/tasks.c ****         {
 4940              		.loc 1 5582 14 is_stmt 1 view .LVU1481
5582:FreeRTOS/Src/tasks.c ****         {
 4941              		.loc 1 5582 16 is_stmt 0 view .LVU1482
 4942 0030 8242     		cmp	r2, r0
 4943 0032 03D8     		bhi	.L332
5591:FreeRTOS/Src/tasks.c ****             xReturn = pdTRUE;
 4944              		.loc 1 5591 13 is_stmt 1 view .LVU1483
5591:FreeRTOS/Src/tasks.c ****             xReturn = pdTRUE;
 4945              		.loc 1 5591 28 is_stmt 0 view .LVU1484
 4946 0034 0023     		movs	r3, #0
 4947 0036 2B60     		str	r3, [r5]
5592:FreeRTOS/Src/tasks.c ****         }
 4948              		.loc 1 5592 13 is_stmt 1 view .LVU1485
 4949              	.LVL383:
5592:FreeRTOS/Src/tasks.c ****         }
 4950              		.loc 1 5592 21 is_stmt 0 view .LVU1486
 4951 0038 0124     		movs	r4, #1
 4952              	.LVL384:
5592:FreeRTOS/Src/tasks.c ****         }
 4953              		.loc 1 5592 21 view .LVU1487
 4954 003a 08E0     		b	.L327
 4955              	.LVL385:
 4956              	.L332:
5585:FreeRTOS/Src/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4957              		.loc 1 5585 13 is_stmt 1 view .LVU1488
5585:FreeRTOS/Src/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4958              		.loc 1 5585 28 is_stmt 0 view .LVU1489
 4959 003c 5B1A     		subs	r3, r3, r1
 4960 003e 1344     		add	r3, r3, r2
 4961 0040 2B60     		str	r3, [r5]
5586:FreeRTOS/Src/tasks.c ****             xReturn = pdFALSE;
 4962              		.loc 1 5586 13 is_stmt 1 view .LVU1490
 4963 0042 2046     		mov	r0, r4
 4964              	.LVL386:
5586:FreeRTOS/Src/tasks.c ****             xReturn = pdFALSE;
 4965              		.loc 1 5586 13 is_stmt 0 view .LVU1491
 4966 0044 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4967              	.LVL387:
5587:FreeRTOS/Src/tasks.c ****         }
 4968              		.loc 1 5587 13 is_stmt 1 view .LVU1492
5587:FreeRTOS/Src/tasks.c ****         }
 4969              		.loc 1 5587 21 is_stmt 0 view .LVU1493
 4970 0048 0024     		movs	r4, #0
 4971              	.LVL388:
5587:FreeRTOS/Src/tasks.c ****         }
 4972              		.loc 1 5587 21 view .LVU1494
 4973 004a 00E0     		b	.L327
 4974              	.LVL389:
 4975              	.L330:
5567:FreeRTOS/Src/tasks.c ****             }
 4976              		.loc 1 5567 25 view .LVU1495
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 266


 4977 004c 0024     		movs	r4, #0
 4978              	.LVL390:
 4979              	.L327:
5567:FreeRTOS/Src/tasks.c ****             }
 4980              		.loc 1 5567 25 view .LVU1496
 4981              	.LBE121:
5595:FreeRTOS/Src/tasks.c **** 
 4982              		.loc 1 5595 5 is_stmt 1 view .LVU1497
 4983 004e FFF7FEFF 		bl	vPortExitCritical
 4984              	.LVL391:
5597:FreeRTOS/Src/tasks.c **** 
 4985              		.loc 1 5597 48 view .LVU1498
5599:FreeRTOS/Src/tasks.c **** }
 4986              		.loc 1 5599 5 view .LVU1499
5600:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4987              		.loc 1 5600 1 is_stmt 0 view .LVU1500
 4988 0052 2046     		mov	r0, r4
 4989 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4990              	.LVL392:
 4991              	.L334:
5600:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 4992              		.loc 1 5600 1 view .LVU1501
 4993 0056 00BF     		.align	2
 4994              	.L333:
 4995 0058 00000000 		.word	xTickCount
 4996 005c 00000000 		.word	xNumOfOverflows
 4997              		.cfi_endproc
 4998              	.LFE163:
 5000              		.section	.text.vTaskMissedYield,"ax",%progbits
 5001              		.align	1
 5002              		.global	vTaskMissedYield
 5003              		.syntax unified
 5004              		.thumb
 5005              		.thumb_func
 5007              	vTaskMissedYield:
 5008              	.LFB164:
5604:FreeRTOS/Src/tasks.c ****     traceENTER_vTaskMissedYield();
 5009              		.loc 1 5604 1 is_stmt 1 view -0
 5010              		.cfi_startproc
 5011              		@ args = 0, pretend = 0, frame = 0
 5012              		@ frame_needed = 0, uses_anonymous_args = 0
 5013              		@ link register save eliminated.
5605:FreeRTOS/Src/tasks.c **** 
 5014              		.loc 1 5605 34 view .LVU1503
5608:FreeRTOS/Src/tasks.c **** 
 5015              		.loc 1 5608 5 view .LVU1504
5608:FreeRTOS/Src/tasks.c **** 
 5016              		.loc 1 5608 41 is_stmt 0 view .LVU1505
 5017 0000 014B     		ldr	r3, .L336
 5018 0002 0122     		movs	r2, #1
 5019 0004 1A60     		str	r2, [r3]
5610:FreeRTOS/Src/tasks.c **** }
 5020              		.loc 1 5610 35 is_stmt 1 view .LVU1506
5611:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 5021              		.loc 1 5611 1 is_stmt 0 view .LVU1507
 5022 0006 7047     		bx	lr
 5023              	.L337:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 267


 5024              		.align	2
 5025              	.L336:
 5026 0008 00000000 		.word	xYieldPendings
 5027              		.cfi_endproc
 5028              	.LFE164:
 5030              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5031              		.align	1
 5032              		.global	xTaskGetCurrentTaskHandle
 5033              		.syntax unified
 5034              		.thumb
 5035              		.thumb_func
 5037              	xTaskGetCurrentTaskHandle:
 5038              	.LFB170:
6481:FreeRTOS/Src/tasks.c ****             TaskHandle_t xReturn;
 5039              		.loc 1 6481 9 is_stmt 1 view -0
 5040              		.cfi_startproc
 5041              		@ args = 0, pretend = 0, frame = 0
 5042              		@ frame_needed = 0, uses_anonymous_args = 0
 5043              		@ link register save eliminated.
6482:FreeRTOS/Src/tasks.c **** 
 5044              		.loc 1 6482 13 view .LVU1509
6484:FreeRTOS/Src/tasks.c **** 
 5045              		.loc 1 6484 51 view .LVU1510
6489:FreeRTOS/Src/tasks.c **** 
 5046              		.loc 1 6489 13 view .LVU1511
6489:FreeRTOS/Src/tasks.c **** 
 5047              		.loc 1 6489 21 is_stmt 0 view .LVU1512
 5048 0000 014B     		ldr	r3, .L339
 5049 0002 1868     		ldr	r0, [r3]
 5050              	.LVL393:
6491:FreeRTOS/Src/tasks.c **** 
 5051              		.loc 1 6491 61 is_stmt 1 view .LVU1513
6493:FreeRTOS/Src/tasks.c ****         }
 5052              		.loc 1 6493 13 view .LVU1514
6494:FreeRTOS/Src/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
 5053              		.loc 1 6494 9 is_stmt 0 view .LVU1515
 5054 0004 7047     		bx	lr
 5055              	.L340:
 5056 0006 00BF     		.align	2
 5057              	.L339:
 5058 0008 00000000 		.word	pxCurrentTCB
 5059              		.cfi_endproc
 5060              	.LFE170:
 5062              		.section	.text.xTaskGetCurrentTaskHandleForCore,"ax",%progbits
 5063              		.align	1
 5064              		.global	xTaskGetCurrentTaskHandleForCore
 5065              		.syntax unified
 5066              		.thumb
 5067              		.thumb_func
 5069              	xTaskGetCurrentTaskHandleForCore:
 5070              	.LVL394:
 5071              	.LFB171:
6516:FreeRTOS/Src/tasks.c ****         TaskHandle_t xReturn = NULL;
 5072              		.loc 1 6516 5 is_stmt 1 view -0
 5073              		.cfi_startproc
 5074              		@ args = 0, pretend = 0, frame = 0
 5075              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 268


 5076              		@ link register save eliminated.
6517:FreeRTOS/Src/tasks.c **** 
 5077              		.loc 1 6517 9 view .LVU1517
6519:FreeRTOS/Src/tasks.c **** 
 5078              		.loc 1 6519 63 view .LVU1518
6521:FreeRTOS/Src/tasks.c ****         {
 5079              		.loc 1 6521 9 view .LVU1519
6521:FreeRTOS/Src/tasks.c ****         {
 5080              		.loc 1 6521 11 is_stmt 0 view .LVU1520
 5081 0000 10B9     		cbnz	r0, .L343
6524:FreeRTOS/Src/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
 5082              		.loc 1 6524 17 is_stmt 1 view .LVU1521
6524:FreeRTOS/Src/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
 5083              		.loc 1 6524 25 is_stmt 0 view .LVU1522
 5084 0002 024B     		ldr	r3, .L344
 5085 0004 1868     		ldr	r0, [r3]
 5086              	.LVL395:
6524:FreeRTOS/Src/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
 5087              		.loc 1 6524 25 view .LVU1523
 5088 0006 7047     		bx	lr
 5089              	.LVL396:
 5090              	.L343:
6517:FreeRTOS/Src/tasks.c **** 
 5091              		.loc 1 6517 22 view .LVU1524
 5092 0008 0020     		movs	r0, #0
 5093              	.LVL397:
6530:FreeRTOS/Src/tasks.c **** 
 5094              		.loc 1 6530 64 is_stmt 1 view .LVU1525
6532:FreeRTOS/Src/tasks.c ****     }
 5095              		.loc 1 6532 9 view .LVU1526
6533:FreeRTOS/Src/tasks.c **** 
 5096              		.loc 1 6533 5 is_stmt 0 view .LVU1527
 5097 000a 7047     		bx	lr
 5098              	.L345:
 5099              		.align	2
 5100              	.L344:
 5101 000c 00000000 		.word	pxCurrentTCB
 5102              		.cfi_endproc
 5103              	.LFE171:
 5105              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5106              		.align	1
 5107              		.global	xTaskGetSchedulerState
 5108              		.syntax unified
 5109              		.thumb
 5110              		.thumb_func
 5112              	xTaskGetSchedulerState:
 5113              	.LFB172:
6541:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
 5114              		.loc 1 6541 5 is_stmt 1 view -0
 5115              		.cfi_startproc
 5116              		@ args = 0, pretend = 0, frame = 0
 5117              		@ frame_needed = 0, uses_anonymous_args = 0
 5118              		@ link register save eliminated.
6542:FreeRTOS/Src/tasks.c **** 
 5119              		.loc 1 6542 9 view .LVU1529
6544:FreeRTOS/Src/tasks.c **** 
 5120              		.loc 1 6544 44 view .LVU1530
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 269


6546:FreeRTOS/Src/tasks.c ****         {
 5121              		.loc 1 6546 9 view .LVU1531
6546:FreeRTOS/Src/tasks.c ****         {
 5122              		.loc 1 6546 31 is_stmt 0 view .LVU1532
 5123 0000 054B     		ldr	r3, .L351
 5124 0002 1B68     		ldr	r3, [r3]
6546:FreeRTOS/Src/tasks.c ****         {
 5125              		.loc 1 6546 11 view .LVU1533
 5126 0004 33B1     		cbz	r3, .L348
6556:FreeRTOS/Src/tasks.c ****                 {
 5127              		.loc 1 6556 17 is_stmt 1 view .LVU1534
6556:FreeRTOS/Src/tasks.c ****                 {
 5128              		.loc 1 6556 42 is_stmt 0 view .LVU1535
 5129 0006 054B     		ldr	r3, .L351+4
 5130 0008 1B68     		ldr	r3, [r3]
6556:FreeRTOS/Src/tasks.c ****                 {
 5131              		.loc 1 6556 19 view .LVU1536
 5132 000a 0BB1     		cbz	r3, .L350
6562:FreeRTOS/Src/tasks.c ****                 }
 5133              		.loc 1 6562 29 view .LVU1537
 5134 000c 0020     		movs	r0, #0
 5135              	.LVL398:
6570:FreeRTOS/Src/tasks.c **** 
 5136              		.loc 1 6570 54 is_stmt 1 view .LVU1538
6572:FreeRTOS/Src/tasks.c ****     }
 5137              		.loc 1 6572 9 view .LVU1539
6573:FreeRTOS/Src/tasks.c **** 
 5138              		.loc 1 6573 5 is_stmt 0 view .LVU1540
 5139 000e 7047     		bx	lr
 5140              	.LVL399:
 5141              	.L350:
6558:FreeRTOS/Src/tasks.c ****                 }
 5142              		.loc 1 6558 29 view .LVU1541
 5143 0010 0220     		movs	r0, #2
 5144 0012 7047     		bx	lr
 5145              	.L348:
6548:FreeRTOS/Src/tasks.c ****         }
 5146              		.loc 1 6548 21 view .LVU1542
 5147 0014 0120     		movs	r0, #1
 5148 0016 7047     		bx	lr
 5149              	.L352:
 5150              		.align	2
 5151              	.L351:
 5152 0018 00000000 		.word	xSchedulerRunning
 5153 001c 00000000 		.word	uxSchedulerSuspended
 5154              		.cfi_endproc
 5155              	.LFE172:
 5157              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 5158              		.align	1
 5159              		.global	xTaskPriorityInherit
 5160              		.syntax unified
 5161              		.thumb
 5162              		.thumb_func
 5164              	xTaskPriorityInherit:
 5165              	.LVL400:
 5166              	.LFB173:
6581:FreeRTOS/Src/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 270


 5167              		.loc 1 6581 5 is_stmt 1 view -0
 5168              		.cfi_startproc
 5169              		@ args = 0, pretend = 0, frame = 0
 5170              		@ frame_needed = 0, uses_anonymous_args = 0
6582:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn = pdFALSE;
 5171              		.loc 1 6582 9 view .LVU1544
6583:FreeRTOS/Src/tasks.c **** 
 5172              		.loc 1 6583 9 view .LVU1545
6585:FreeRTOS/Src/tasks.c **** 
 5173              		.loc 1 6585 57 view .LVU1546
6589:FreeRTOS/Src/tasks.c ****         {
 5174              		.loc 1 6589 9 view .LVU1547
6589:FreeRTOS/Src/tasks.c ****         {
 5175              		.loc 1 6589 11 is_stmt 0 view .LVU1548
 5176 0000 0028     		cmp	r0, #0
 5177 0002 57D0     		beq	.L359
6581:FreeRTOS/Src/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5178              		.loc 1 6581 5 view .LVU1549
 5179 0004 70B5     		push	{r4, r5, r6, lr}
 5180              	.LCFI45:
 5181              		.cfi_def_cfa_offset 16
 5182              		.cfi_offset 4, -16
 5183              		.cfi_offset 5, -12
 5184              		.cfi_offset 6, -8
 5185              		.cfi_offset 14, -4
 5186 0006 0446     		mov	r4, r0
6594:FreeRTOS/Src/tasks.c ****             {
 5187              		.loc 1 6594 13 is_stmt 1 view .LVU1550
6594:FreeRTOS/Src/tasks.c ****             {
 5188              		.loc 1 6594 33 is_stmt 0 view .LVU1551
 5189 0008 C36A     		ldr	r3, [r0, #44]
6594:FreeRTOS/Src/tasks.c ****             {
 5190              		.loc 1 6594 60 view .LVU1552
 5191 000a 2C4A     		ldr	r2, .L366
 5192 000c 1268     		ldr	r2, [r2]
 5193 000e D26A     		ldr	r2, [r2, #44]
6594:FreeRTOS/Src/tasks.c ****             {
 5194              		.loc 1 6594 15 view .LVU1553
 5195 0010 9342     		cmp	r3, r2
 5196 0012 47D2     		bcs	.L355
6599:FreeRTOS/Src/tasks.c ****                 {
 5197              		.loc 1 6599 17 is_stmt 1 view .LVU1554
6599:FreeRTOS/Src/tasks.c ****                 {
 5198              		.loc 1 6599 23 is_stmt 0 view .LVU1555
 5199 0014 8269     		ldr	r2, [r0, #24]
6599:FreeRTOS/Src/tasks.c ****                 {
 5200              		.loc 1 6599 19 view .LVU1556
 5201 0016 002A     		cmp	r2, #0
 5202 0018 05DB     		blt	.L356
6601:FreeRTOS/Src/tasks.c ****                 }
 5203              		.loc 1 6601 21 is_stmt 1 view .LVU1557
 5204 001a 284A     		ldr	r2, .L366
 5205 001c 1268     		ldr	r2, [r2]
 5206 001e D26A     		ldr	r2, [r2, #44]
 5207 0020 C2F10502 		rsb	r2, r2, #5
 5208 0024 8261     		str	r2, [r0, #24]
 5209              	.L356:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 271


6605:FreeRTOS/Src/tasks.c ****                 }
 5210              		.loc 1 6605 45 view .LVU1558
6610:FreeRTOS/Src/tasks.c ****                 {
 5211              		.loc 1 6610 17 view .LVU1559
6610:FreeRTOS/Src/tasks.c ****                 {
 5212              		.loc 1 6610 21 is_stmt 0 view .LVU1560
 5213 0026 6169     		ldr	r1, [r4, #20]
 5214 0028 03EB8303 		add	r3, r3, r3, lsl #2
 5215 002c 244A     		ldr	r2, .L366+4
 5216 002e 02EB8303 		add	r3, r2, r3, lsl #2
6610:FreeRTOS/Src/tasks.c ****                 {
 5217              		.loc 1 6610 19 view .LVU1561
 5218 0032 9942     		cmp	r1, r3
 5219 0034 05D0     		beq	.L365
6641:FreeRTOS/Src/tasks.c ****                 }
 5220              		.loc 1 6641 21 is_stmt 1 view .LVU1562
6641:FreeRTOS/Src/tasks.c ****                 }
 5221              		.loc 1 6641 64 is_stmt 0 view .LVU1563
 5222 0036 214B     		ldr	r3, .L366
 5223 0038 1B68     		ldr	r3, [r3]
 5224 003a DB6A     		ldr	r3, [r3, #44]
6641:FreeRTOS/Src/tasks.c ****                 }
 5225              		.loc 1 6641 50 view .LVU1564
 5226 003c E362     		str	r3, [r4, #44]
6647:FreeRTOS/Src/tasks.c ****             }
 5227              		.loc 1 6647 25 view .LVU1565
 5228 003e 0120     		movs	r0, #1
 5229              	.LVL401:
 5230              	.L353:
6676:FreeRTOS/Src/tasks.c **** 
 5231              		.loc 1 6676 5 view .LVU1566
 5232 0040 70BD     		pop	{r4, r5, r6, pc}
 5233              	.LVL402:
 5234              	.L365:
6612:FreeRTOS/Src/tasks.c ****                     {
 5235              		.loc 1 6612 21 is_stmt 1 view .LVU1567
6612:FreeRTOS/Src/tasks.c ****                     {
 5236              		.loc 1 6612 25 is_stmt 0 view .LVU1568
 5237 0042 251D     		adds	r5, r4, #4
 5238 0044 2846     		mov	r0, r5
 5239              	.LVL403:
6612:FreeRTOS/Src/tasks.c ****                     {
 5240              		.loc 1 6612 25 view .LVU1569
 5241 0046 FFF7FEFF 		bl	uxListRemove
 5242              	.LVL404:
6612:FreeRTOS/Src/tasks.c ****                     {
 5243              		.loc 1 6612 23 discriminator 1 view .LVU1570
 5244 004a 38B9     		cbnz	r0, .L358
6617:FreeRTOS/Src/tasks.c ****                     }
 5245              		.loc 1 6617 25 is_stmt 1 view .LVU1571
 5246 004c E36A     		ldr	r3, [r4, #44]
 5247 004e 0122     		movs	r2, #1
 5248 0050 9A40     		lsls	r2, r2, r3
 5249 0052 1C49     		ldr	r1, .L366+8
 5250 0054 0B68     		ldr	r3, [r1]
 5251 0056 23EA0203 		bic	r3, r3, r2
 5252 005a 0B60     		str	r3, [r1]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 272


 5253              	.L358:
6621:FreeRTOS/Src/tasks.c ****                     }
 5254              		.loc 1 6621 49 view .LVU1572
6625:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5255              		.loc 1 6625 21 view .LVU1573
6625:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5256              		.loc 1 6625 64 is_stmt 0 view .LVU1574
 5257 005c 174B     		ldr	r3, .L366
 5258 005e 1B68     		ldr	r3, [r3]
 5259 0060 DB6A     		ldr	r3, [r3, #44]
6625:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5260              		.loc 1 6625 50 view .LVU1575
 5261 0062 E362     		str	r3, [r4, #44]
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5262              		.loc 1 6626 21 is_stmt 1 view .LVU1576
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5263              		.loc 1 6626 21 view .LVU1577
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5264              		.loc 1 6626 21 view .LVU1578
 5265 0064 0120     		movs	r0, #1
 5266 0066 00FA03F2 		lsl	r2, r0, r3
 5267 006a 1649     		ldr	r1, .L366+8
 5268 006c 0E68     		ldr	r6, [r1]
 5269 006e 3243     		orrs	r2, r2, r6
 5270 0070 0A60     		str	r2, [r1]
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5271              		.loc 1 6626 21 view .LVU1579
 5272              	.LBB122:
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5273              		.loc 1 6626 21 view .LVU1580
 5274 0072 134A     		ldr	r2, .L366+4
 5275 0074 03EB8303 		add	r3, r3, r3, lsl #2
 5276 0078 02EB8303 		add	r3, r2, r3, lsl #2
 5277 007c 5B68     		ldr	r3, [r3, #4]
 5278              	.LVL405:
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5279              		.loc 1 6626 21 view .LVU1581
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5280              		.loc 1 6626 21 view .LVU1582
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5281              		.loc 1 6626 21 view .LVU1583
 5282 007e A360     		str	r3, [r4, #8]
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5283              		.loc 1 6626 21 view .LVU1584
 5284 0080 9968     		ldr	r1, [r3, #8]
 5285 0082 E160     		str	r1, [r4, #12]
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5286              		.loc 1 6626 21 view .LVU1585
 5287 0084 4D60     		str	r5, [r1, #4]
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5288              		.loc 1 6626 21 view .LVU1586
 5289 0086 9D60     		str	r5, [r3, #8]
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5290              		.loc 1 6626 21 view .LVU1587
 5291 0088 E36A     		ldr	r3, [r4, #44]
 5292              	.LVL406:
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 273


 5293              		.loc 1 6626 21 is_stmt 0 view .LVU1588
 5294 008a 03EB8301 		add	r1, r3, r3, lsl #2
 5295 008e 02EB8105 		add	r5, r2, r1, lsl #2
 5296 0092 6561     		str	r5, [r4, #20]
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5297              		.loc 1 6626 21 is_stmt 1 view .LVU1589
 5298 0094 52F82110 		ldr	r1, [r2, r1, lsl #2]
 5299 0098 0144     		add	r1, r1, r0
 5300 009a 03EB8303 		add	r3, r3, r3, lsl #2
 5301 009e 42F82310 		str	r1, [r2, r3, lsl #2]
 5302              	.LBE122:
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5303              		.loc 1 6626 21 view .LVU1590
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5304              		.loc 1 6626 21 view .LVU1591
6626:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5305              		.loc 1 6626 21 view .LVU1592
 5306 00a2 CDE7     		b	.L353
 5307              	.LVL407:
 5308              	.L355:
6651:FreeRTOS/Src/tasks.c ****                 {
 5309              		.loc 1 6651 17 view .LVU1593
6651:FreeRTOS/Src/tasks.c ****                 {
 5310              		.loc 1 6651 37 is_stmt 0 view .LVU1594
 5311 00a4 C26B     		ldr	r2, [r0, #60]
6651:FreeRTOS/Src/tasks.c ****                 {
 5312              		.loc 1 6651 68 view .LVU1595
 5313 00a6 054B     		ldr	r3, .L366
 5314 00a8 1B68     		ldr	r3, [r3]
 5315 00aa DB6A     		ldr	r3, [r3, #44]
6651:FreeRTOS/Src/tasks.c ****                 {
 5316              		.loc 1 6651 19 view .LVU1596
 5317 00ac 9A42     		cmp	r2, r3
 5318 00ae 03D3     		bcc	.L360
6583:FreeRTOS/Src/tasks.c **** 
 5319              		.loc 1 6583 20 view .LVU1597
 5320 00b0 0020     		movs	r0, #0
 5321              	.LVL408:
6583:FreeRTOS/Src/tasks.c **** 
 5322              		.loc 1 6583 20 view .LVU1598
 5323 00b2 C5E7     		b	.L353
 5324              	.LVL409:
 5325              	.L359:
 5326              	.LCFI46:
 5327              		.cfi_def_cfa_offset 0
 5328              		.cfi_restore 4
 5329              		.cfi_restore 5
 5330              		.cfi_restore 6
 5331              		.cfi_restore 14
6583:FreeRTOS/Src/tasks.c **** 
 5332              		.loc 1 6583 20 view .LVU1599
 5333 00b4 0020     		movs	r0, #0
 5334              	.LVL410:
6676:FreeRTOS/Src/tasks.c **** 
 5335              		.loc 1 6676 5 view .LVU1600
 5336 00b6 7047     		bx	lr
 5337              	.LVL411:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 274


 5338              	.L360:
 5339              	.LCFI47:
 5340              		.cfi_def_cfa_offset 16
 5341              		.cfi_offset 4, -16
 5342              		.cfi_offset 5, -12
 5343              		.cfi_offset 6, -8
 5344              		.cfi_offset 14, -4
6660:FreeRTOS/Src/tasks.c ****                 }
 5345              		.loc 1 6660 29 view .LVU1601
 5346 00b8 0120     		movs	r0, #1
 5347              	.LVL412:
6670:FreeRTOS/Src/tasks.c ****         }
 5348              		.loc 1 6670 37 is_stmt 1 view .LVU1602
6673:FreeRTOS/Src/tasks.c **** 
 5349              		.loc 1 6673 52 view .LVU1603
6675:FreeRTOS/Src/tasks.c ****     }
 5350              		.loc 1 6675 9 view .LVU1604
6675:FreeRTOS/Src/tasks.c ****     }
 5351              		.loc 1 6675 16 is_stmt 0 view .LVU1605
 5352 00ba C1E7     		b	.L353
 5353              	.L367:
 5354              		.align	2
 5355              	.L366:
 5356 00bc 00000000 		.word	pxCurrentTCB
 5357 00c0 00000000 		.word	pxReadyTasksLists
 5358 00c4 00000000 		.word	uxTopReadyPriority
 5359              		.cfi_endproc
 5360              	.LFE173:
 5362              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5363              		.align	1
 5364              		.global	xTaskPriorityDisinherit
 5365              		.syntax unified
 5366              		.thumb
 5367              		.thumb_func
 5369              	xTaskPriorityDisinherit:
 5370              	.LVL413:
 5371              	.LFB174:
6684:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5372              		.loc 1 6684 5 is_stmt 1 view -0
 5373              		.cfi_startproc
 5374              		@ args = 0, pretend = 0, frame = 0
 5375              		@ frame_needed = 0, uses_anonymous_args = 0
6685:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn = pdFALSE;
 5376              		.loc 1 6685 9 view .LVU1607
6686:FreeRTOS/Src/tasks.c **** 
 5377              		.loc 1 6686 9 view .LVU1608
6688:FreeRTOS/Src/tasks.c **** 
 5378              		.loc 1 6688 60 view .LVU1609
6690:FreeRTOS/Src/tasks.c ****         {
 5379              		.loc 1 6690 9 view .LVU1610
6690:FreeRTOS/Src/tasks.c ****         {
 5380              		.loc 1 6690 11 is_stmt 0 view .LVU1611
 5381 0000 0028     		cmp	r0, #0
 5382 0002 3DD0     		beq	.L371
6684:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5383              		.loc 1 6684 5 view .LVU1612
 5384 0004 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 275


 5385              	.LCFI48:
 5386              		.cfi_def_cfa_offset 16
 5387              		.cfi_offset 4, -16
 5388              		.cfi_offset 5, -12
 5389              		.cfi_offset 6, -8
 5390              		.cfi_offset 14, -4
 5391 0006 0446     		mov	r4, r0
6696:FreeRTOS/Src/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5392              		.loc 1 6696 50 is_stmt 1 view .LVU1613
6697:FreeRTOS/Src/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5393              		.loc 1 6697 49 view .LVU1614
6698:FreeRTOS/Src/tasks.c **** 
 5394              		.loc 1 6698 13 view .LVU1615
6698:FreeRTOS/Src/tasks.c **** 
 5395              		.loc 1 6698 20 is_stmt 0 view .LVU1616
 5396 0008 036C     		ldr	r3, [r0, #64]
6698:FreeRTOS/Src/tasks.c **** 
 5397              		.loc 1 6698 37 view .LVU1617
 5398 000a 013B     		subs	r3, r3, #1
 5399 000c 0364     		str	r3, [r0, #64]
6702:FreeRTOS/Src/tasks.c ****             {
 5400              		.loc 1 6702 13 is_stmt 1 view .LVU1618
6702:FreeRTOS/Src/tasks.c ****             {
 5401              		.loc 1 6702 22 is_stmt 0 view .LVU1619
 5402 000e C16A     		ldr	r1, [r0, #44]
6702:FreeRTOS/Src/tasks.c ****             {
 5403              		.loc 1 6702 43 view .LVU1620
 5404 0010 C26B     		ldr	r2, [r0, #60]
6702:FreeRTOS/Src/tasks.c ****             {
 5405              		.loc 1 6702 15 view .LVU1621
 5406 0012 9142     		cmp	r1, r2
 5407 0014 36D0     		beq	.L372
6705:FreeRTOS/Src/tasks.c ****                 {
 5408              		.loc 1 6705 17 is_stmt 1 view .LVU1622
6705:FreeRTOS/Src/tasks.c ****                 {
 5409              		.loc 1 6705 19 is_stmt 0 view .LVU1623
 5410 0016 0BB1     		cbz	r3, .L378
6686:FreeRTOS/Src/tasks.c **** 
 5411              		.loc 1 6686 20 view .LVU1624
 5412 0018 0020     		movs	r0, #0
 5413              	.LVL414:
6764:FreeRTOS/Src/tasks.c ****         }
 5414              		.loc 1 6764 37 is_stmt 1 view .LVU1625
6767:FreeRTOS/Src/tasks.c **** 
 5415              		.loc 1 6767 55 view .LVU1626
6769:FreeRTOS/Src/tasks.c ****     }
 5416              		.loc 1 6769 9 view .LVU1627
 5417              	.L368:
6770:FreeRTOS/Src/tasks.c **** 
 5418              		.loc 1 6770 5 is_stmt 0 view .LVU1628
 5419 001a 70BD     		pop	{r4, r5, r6, pc}
 5420              	.LVL415:
 5421              	.L378:
6712:FreeRTOS/Src/tasks.c ****                     {
 5422              		.loc 1 6712 21 is_stmt 1 view .LVU1629
6712:FreeRTOS/Src/tasks.c ****                     {
 5423              		.loc 1 6712 25 is_stmt 0 view .LVU1630
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 276


 5424 001c 051D     		adds	r5, r0, #4
 5425 001e 2846     		mov	r0, r5
 5426              	.LVL416:
6712:FreeRTOS/Src/tasks.c ****                     {
 5427              		.loc 1 6712 25 view .LVU1631
 5428 0020 FFF7FEFF 		bl	uxListRemove
 5429              	.LVL417:
6712:FreeRTOS/Src/tasks.c ****                     {
 5430              		.loc 1 6712 23 discriminator 1 view .LVU1632
 5431 0024 38B9     		cbnz	r0, .L370
6714:FreeRTOS/Src/tasks.c ****                     }
 5432              		.loc 1 6714 25 is_stmt 1 view .LVU1633
 5433 0026 E36A     		ldr	r3, [r4, #44]
 5434 0028 0122     		movs	r2, #1
 5435 002a 9A40     		lsls	r2, r2, r3
 5436 002c 1649     		ldr	r1, .L379
 5437 002e 0B68     		ldr	r3, [r1]
 5438 0030 23EA0203 		bic	r3, r3, r2
 5439 0034 0B60     		str	r3, [r1]
 5440              	.L370:
6718:FreeRTOS/Src/tasks.c ****                     }
 5441              		.loc 1 6718 49 view .LVU1634
6723:FreeRTOS/Src/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 5442              		.loc 1 6723 82 view .LVU1635
6724:FreeRTOS/Src/tasks.c **** 
 5443              		.loc 1 6724 21 view .LVU1636
6724:FreeRTOS/Src/tasks.c **** 
 5444              		.loc 1 6724 46 is_stmt 0 view .LVU1637
 5445 0036 E36B     		ldr	r3, [r4, #60]
6724:FreeRTOS/Src/tasks.c **** 
 5446              		.loc 1 6724 39 view .LVU1638
 5447 0038 E362     		str	r3, [r4, #44]
6729:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5448              		.loc 1 6729 21 is_stmt 1 view .LVU1639
 5449 003a C3F10502 		rsb	r2, r3, #5
 5450 003e A261     		str	r2, [r4, #24]
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5451              		.loc 1 6730 21 view .LVU1640
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5452              		.loc 1 6730 21 view .LVU1641
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5453              		.loc 1 6730 21 view .LVU1642
 5454 0040 0120     		movs	r0, #1
 5455 0042 00FA03F2 		lsl	r2, r0, r3
 5456 0046 1049     		ldr	r1, .L379
 5457 0048 0E68     		ldr	r6, [r1]
 5458 004a 3243     		orrs	r2, r2, r6
 5459 004c 0A60     		str	r2, [r1]
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5460              		.loc 1 6730 21 view .LVU1643
 5461              	.LBB123:
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5462              		.loc 1 6730 21 view .LVU1644
 5463 004e 0F4A     		ldr	r2, .L379+4
 5464 0050 03EB8303 		add	r3, r3, r3, lsl #2
 5465 0054 02EB8303 		add	r3, r2, r3, lsl #2
 5466 0058 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 277


 5467              	.LVL418:
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5468              		.loc 1 6730 21 view .LVU1645
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5469              		.loc 1 6730 21 view .LVU1646
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5470              		.loc 1 6730 21 view .LVU1647
 5471 005a A360     		str	r3, [r4, #8]
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5472              		.loc 1 6730 21 view .LVU1648
 5473 005c 9968     		ldr	r1, [r3, #8]
 5474 005e E160     		str	r1, [r4, #12]
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5475              		.loc 1 6730 21 view .LVU1649
 5476 0060 4D60     		str	r5, [r1, #4]
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5477              		.loc 1 6730 21 view .LVU1650
 5478 0062 9D60     		str	r5, [r3, #8]
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5479              		.loc 1 6730 21 view .LVU1651
 5480 0064 E36A     		ldr	r3, [r4, #44]
 5481              	.LVL419:
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5482              		.loc 1 6730 21 is_stmt 0 view .LVU1652
 5483 0066 03EB8301 		add	r1, r3, r3, lsl #2
 5484 006a 02EB8105 		add	r5, r2, r1, lsl #2
 5485 006e 6561     		str	r5, [r4, #20]
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5486              		.loc 1 6730 21 is_stmt 1 view .LVU1653
 5487 0070 52F82110 		ldr	r1, [r2, r1, lsl #2]
 5488 0074 0144     		add	r1, r1, r0
 5489 0076 03EB8303 		add	r3, r3, r3, lsl #2
 5490 007a 42F82310 		str	r1, [r2, r3, lsl #2]
 5491              	.LBE123:
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5492              		.loc 1 6730 21 view .LVU1654
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5493              		.loc 1 6730 21 view .LVU1655
6730:FreeRTOS/Src/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 5494              		.loc 1 6730 21 view .LVU1656
6750:FreeRTOS/Src/tasks.c ****                 }
 5495              		.loc 1 6750 21 view .LVU1657
 5496              	.LVL420:
6750:FreeRTOS/Src/tasks.c ****                 }
 5497              		.loc 1 6750 21 is_stmt 0 view .LVU1658
 5498 007e CCE7     		b	.L368
 5499              	.LVL421:
 5500              	.L371:
 5501              	.LCFI49:
 5502              		.cfi_def_cfa_offset 0
 5503              		.cfi_restore 4
 5504              		.cfi_restore 5
 5505              		.cfi_restore 6
 5506              		.cfi_restore 14
6686:FreeRTOS/Src/tasks.c **** 
 5507              		.loc 1 6686 20 view .LVU1659
 5508 0080 0020     		movs	r0, #0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 278


 5509              	.LVL422:
6770:FreeRTOS/Src/tasks.c **** 
 5510              		.loc 1 6770 5 view .LVU1660
 5511 0082 7047     		bx	lr
 5512              	.LVL423:
 5513              	.L372:
 5514              	.LCFI50:
 5515              		.cfi_def_cfa_offset 16
 5516              		.cfi_offset 4, -16
 5517              		.cfi_offset 5, -12
 5518              		.cfi_offset 6, -8
 5519              		.cfi_offset 14, -4
6686:FreeRTOS/Src/tasks.c **** 
 5520              		.loc 1 6686 20 view .LVU1661
 5521 0084 0020     		movs	r0, #0
 5522              	.LVL424:
6686:FreeRTOS/Src/tasks.c **** 
 5523              		.loc 1 6686 20 view .LVU1662
 5524 0086 C8E7     		b	.L368
 5525              	.L380:
 5526              		.align	2
 5527              	.L379:
 5528 0088 00000000 		.word	uxTopReadyPriority
 5529 008c 00000000 		.word	pxReadyTasksLists
 5530              		.cfi_endproc
 5531              	.LFE174:
 5533              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5534              		.align	1
 5535              		.global	vTaskPriorityDisinheritAfterTimeout
 5536              		.syntax unified
 5537              		.thumb
 5538              		.thumb_func
 5540              	vTaskPriorityDisinheritAfterTimeout:
 5541              	.LVL425:
 5542              	.LFB175:
6779:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5543              		.loc 1 6779 5 is_stmt 1 view -0
 5544              		.cfi_startproc
 5545              		@ args = 0, pretend = 0, frame = 0
 5546              		@ frame_needed = 0, uses_anonymous_args = 0
6780:FreeRTOS/Src/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 5547              		.loc 1 6780 9 view .LVU1664
6781:FreeRTOS/Src/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5548              		.loc 1 6781 9 view .LVU1665
6782:FreeRTOS/Src/tasks.c **** 
 5549              		.loc 1 6782 9 view .LVU1666
6784:FreeRTOS/Src/tasks.c **** 
 5550              		.loc 1 6784 102 view .LVU1667
6786:FreeRTOS/Src/tasks.c ****         {
 5551              		.loc 1 6786 9 view .LVU1668
6786:FreeRTOS/Src/tasks.c ****         {
 5552              		.loc 1 6786 11 is_stmt 0 view .LVU1669
 5553 0000 0028     		cmp	r0, #0
 5554 0002 48D0     		beq	.L387
6779:FreeRTOS/Src/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5555              		.loc 1 6779 5 view .LVU1670
 5556 0004 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 279


 5557              	.LCFI51:
 5558              		.cfi_def_cfa_offset 16
 5559              		.cfi_offset 3, -16
 5560              		.cfi_offset 4, -12
 5561              		.cfi_offset 5, -8
 5562              		.cfi_offset 14, -4
 5563 0006 0446     		mov	r4, r0
6790:FreeRTOS/Src/tasks.c **** 
 5564              		.loc 1 6790 49 is_stmt 1 view .LVU1671
6796:FreeRTOS/Src/tasks.c ****             {
 5565              		.loc 1 6796 13 view .LVU1672
6796:FreeRTOS/Src/tasks.c ****             {
 5566              		.loc 1 6796 22 is_stmt 0 view .LVU1673
 5567 0008 C36B     		ldr	r3, [r0, #60]
6796:FreeRTOS/Src/tasks.c ****             {
 5568              		.loc 1 6796 15 view .LVU1674
 5569 000a 8B42     		cmp	r3, r1
 5570 000c 00D2     		bcs	.L383
6798:FreeRTOS/Src/tasks.c ****             }
 5571              		.loc 1 6798 33 view .LVU1675
 5572 000e 0B46     		mov	r3, r1
 5573              	.L383:
 5574              	.LVL426:
6806:FreeRTOS/Src/tasks.c ****             {
 5575              		.loc 1 6806 13 is_stmt 1 view .LVU1676
6806:FreeRTOS/Src/tasks.c ****             {
 5576              		.loc 1 6806 22 is_stmt 0 view .LVU1677
 5577 0010 E26A     		ldr	r2, [r4, #44]
6806:FreeRTOS/Src/tasks.c ****             {
 5578              		.loc 1 6806 15 view .LVU1678
 5579 0012 9A42     		cmp	r2, r3
 5580 0014 02D0     		beq	.L381
6812:FreeRTOS/Src/tasks.c ****                 {
 5581              		.loc 1 6812 17 is_stmt 1 view .LVU1679
6812:FreeRTOS/Src/tasks.c ****                 {
 5582              		.loc 1 6812 26 is_stmt 0 view .LVU1680
 5583 0016 216C     		ldr	r1, [r4, #64]
 5584              	.LVL427:
6812:FreeRTOS/Src/tasks.c ****                 {
 5585              		.loc 1 6812 19 view .LVU1681
 5586 0018 0129     		cmp	r1, #1
 5587 001a 00D0     		beq	.L390
 5588              	.LVL428:
 5589              	.L381:
6890:FreeRTOS/Src/tasks.c **** 
 5590              		.loc 1 6890 5 view .LVU1682
 5591 001c 38BD     		pop	{r3, r4, r5, pc}
 5592              	.LVL429:
 5593              	.L390:
6817:FreeRTOS/Src/tasks.c **** 
 5594              		.loc 1 6817 58 is_stmt 1 view .LVU1683
6822:FreeRTOS/Src/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5595              		.loc 1 6822 76 view .LVU1684
6823:FreeRTOS/Src/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 5596              		.loc 1 6823 21 view .LVU1685
6824:FreeRTOS/Src/tasks.c **** 
 5597              		.loc 1 6824 21 view .LVU1686
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 280


6824:FreeRTOS/Src/tasks.c **** 
 5598              		.loc 1 6824 39 is_stmt 0 view .LVU1687
 5599 001e E362     		str	r3, [r4, #44]
6828:FreeRTOS/Src/tasks.c ****                     {
 5600              		.loc 1 6828 21 is_stmt 1 view .LVU1688
6828:FreeRTOS/Src/tasks.c ****                     {
 5601              		.loc 1 6828 27 is_stmt 0 view .LVU1689
 5602 0020 A169     		ldr	r1, [r4, #24]
6828:FreeRTOS/Src/tasks.c ****                     {
 5603              		.loc 1 6828 23 view .LVU1690
 5604 0022 0029     		cmp	r1, #0
 5605 0024 02DB     		blt	.L384
6830:FreeRTOS/Src/tasks.c ****                     }
 5606              		.loc 1 6830 25 is_stmt 1 view .LVU1691
 5607 0026 C3F10503 		rsb	r3, r3, #5
 5608              	.LVL430:
6830:FreeRTOS/Src/tasks.c ****                     }
 5609              		.loc 1 6830 25 is_stmt 0 view .LVU1692
 5610 002a A361     		str	r3, [r4, #24]
 5611              	.L384:
6834:FreeRTOS/Src/tasks.c ****                     }
 5612              		.loc 1 6834 49 is_stmt 1 view .LVU1693
6843:FreeRTOS/Src/tasks.c ****                     {
 5613              		.loc 1 6843 21 view .LVU1694
6843:FreeRTOS/Src/tasks.c ****                     {
 5614              		.loc 1 6843 25 is_stmt 0 view .LVU1695
 5615 002c 6169     		ldr	r1, [r4, #20]
 5616 002e 02EB8202 		add	r2, r2, r2, lsl #2
 5617              	.LVL431:
6843:FreeRTOS/Src/tasks.c ****                     {
 5618              		.loc 1 6843 25 view .LVU1696
 5619 0032 194B     		ldr	r3, .L391
 5620 0034 03EB8203 		add	r3, r3, r2, lsl #2
6843:FreeRTOS/Src/tasks.c ****                     {
 5621              		.loc 1 6843 23 view .LVU1697
 5622 0038 9942     		cmp	r1, r3
 5623 003a EFD1     		bne	.L381
6845:FreeRTOS/Src/tasks.c ****                         {
 5624              		.loc 1 6845 25 is_stmt 1 view .LVU1698
6845:FreeRTOS/Src/tasks.c ****                         {
 5625              		.loc 1 6845 29 is_stmt 0 view .LVU1699
 5626 003c 251D     		adds	r5, r4, #4
 5627 003e 2846     		mov	r0, r5
 5628              	.LVL432:
6845:FreeRTOS/Src/tasks.c ****                         {
 5629              		.loc 1 6845 29 view .LVU1700
 5630 0040 FFF7FEFF 		bl	uxListRemove
 5631              	.LVL433:
6845:FreeRTOS/Src/tasks.c ****                         {
 5632              		.loc 1 6845 27 discriminator 1 view .LVU1701
 5633 0044 38B9     		cbnz	r0, .L385
6850:FreeRTOS/Src/tasks.c ****                         }
 5634              		.loc 1 6850 29 is_stmt 1 view .LVU1702
 5635 0046 E36A     		ldr	r3, [r4, #44]
 5636 0048 0122     		movs	r2, #1
 5637 004a 9A40     		lsls	r2, r2, r3
 5638 004c 1349     		ldr	r1, .L391+4
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 281


 5639 004e 0B68     		ldr	r3, [r1]
 5640 0050 23EA0203 		bic	r3, r3, r2
 5641 0054 0B60     		str	r3, [r1]
 5642              	.L385:
6854:FreeRTOS/Src/tasks.c ****                         }
 5643              		.loc 1 6854 53 view .LVU1703
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5644              		.loc 1 6857 25 view .LVU1704
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5645              		.loc 1 6857 25 view .LVU1705
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5646              		.loc 1 6857 25 view .LVU1706
 5647 0056 E36A     		ldr	r3, [r4, #44]
 5648 0058 0122     		movs	r2, #1
 5649 005a 9A40     		lsls	r2, r2, r3
 5650 005c 0F49     		ldr	r1, .L391+4
 5651 005e 0868     		ldr	r0, [r1]
 5652 0060 0243     		orrs	r2, r2, r0
 5653 0062 0A60     		str	r2, [r1]
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5654              		.loc 1 6857 25 view .LVU1707
 5655              	.LBB124:
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5656              		.loc 1 6857 25 view .LVU1708
 5657 0064 0C4A     		ldr	r2, .L391
 5658 0066 03EB8303 		add	r3, r3, r3, lsl #2
 5659 006a 02EB8303 		add	r3, r2, r3, lsl #2
 5660 006e 5B68     		ldr	r3, [r3, #4]
 5661              	.LVL434:
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5662              		.loc 1 6857 25 view .LVU1709
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5663              		.loc 1 6857 25 view .LVU1710
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5664              		.loc 1 6857 25 view .LVU1711
 5665 0070 A360     		str	r3, [r4, #8]
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5666              		.loc 1 6857 25 view .LVU1712
 5667 0072 9968     		ldr	r1, [r3, #8]
 5668 0074 E160     		str	r1, [r4, #12]
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5669              		.loc 1 6857 25 view .LVU1713
 5670 0076 4D60     		str	r5, [r1, #4]
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5671              		.loc 1 6857 25 view .LVU1714
 5672 0078 9D60     		str	r5, [r3, #8]
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5673              		.loc 1 6857 25 view .LVU1715
 5674 007a E36A     		ldr	r3, [r4, #44]
 5675              	.LVL435:
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5676              		.loc 1 6857 25 is_stmt 0 view .LVU1716
 5677 007c 03EB8301 		add	r1, r3, r3, lsl #2
 5678 0080 02EB8100 		add	r0, r2, r1, lsl #2
 5679 0084 6061     		str	r0, [r4, #20]
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5680              		.loc 1 6857 25 is_stmt 1 view .LVU1717
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 282


 5681 0086 52F82110 		ldr	r1, [r2, r1, lsl #2]
 5682 008a 0131     		adds	r1, r1, #1
 5683 008c 03EB8303 		add	r3, r3, r3, lsl #2
 5684 0090 42F82310 		str	r1, [r2, r3, lsl #2]
 5685              	.LBE124:
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5686              		.loc 1 6857 25 view .LVU1718
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5687              		.loc 1 6857 25 view .LVU1719
6857:FreeRTOS/Src/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 5688              		.loc 1 6857 25 view .LVU1720
6886:FreeRTOS/Src/tasks.c ****         }
 5689              		.loc 1 6886 37 view .LVU1721
6889:FreeRTOS/Src/tasks.c ****     }
 5690              		.loc 1 6889 58 view .LVU1722
6890:FreeRTOS/Src/tasks.c **** 
 5691              		.loc 1 6890 5 is_stmt 0 view .LVU1723
 5692 0094 C2E7     		b	.L381
 5693              	.LVL436:
 5694              	.L387:
 5695              	.LCFI52:
 5696              		.cfi_def_cfa_offset 0
 5697              		.cfi_restore 3
 5698              		.cfi_restore 4
 5699              		.cfi_restore 5
 5700              		.cfi_restore 14
6890:FreeRTOS/Src/tasks.c **** 
 5701              		.loc 1 6890 5 view .LVU1724
 5702 0096 7047     		bx	lr
 5703              	.L392:
 5704              		.align	2
 5705              	.L391:
 5706 0098 00000000 		.word	pxReadyTasksLists
 5707 009c 00000000 		.word	uxTopReadyPriority
 5708              		.cfi_endproc
 5709              	.LFE175:
 5711              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5712              		.align	1
 5713              		.global	uxTaskResetEventItemValue
 5714              		.syntax unified
 5715              		.thumb
 5716              		.thumb_func
 5718              	uxTaskResetEventItemValue:
 5719              	.LFB176:
7570:FreeRTOS/Src/tasks.c ****     TickType_t uxReturn;
 5720              		.loc 1 7570 1 is_stmt 1 view -0
 5721              		.cfi_startproc
 5722              		@ args = 0, pretend = 0, frame = 0
 5723              		@ frame_needed = 0, uses_anonymous_args = 0
 5724              		@ link register save eliminated.
7571:FreeRTOS/Src/tasks.c **** 
 5725              		.loc 1 7571 5 view .LVU1726
7573:FreeRTOS/Src/tasks.c **** 
 5726              		.loc 1 7573 43 view .LVU1727
7575:FreeRTOS/Src/tasks.c **** 
 5727              		.loc 1 7575 5 view .LVU1728
7575:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 283


 5728              		.loc 1 7575 16 is_stmt 0 view .LVU1729
 5729 0000 044A     		ldr	r2, .L394
 5730 0002 1368     		ldr	r3, [r2]
7575:FreeRTOS/Src/tasks.c **** 
 5731              		.loc 1 7575 14 view .LVU1730
 5732 0004 9869     		ldr	r0, [r3, #24]
 5733              	.LVL437:
7579:FreeRTOS/Src/tasks.c **** 
 5734              		.loc 1 7579 5 is_stmt 1 view .LVU1731
 5735 0006 1368     		ldr	r3, [r2]
 5736 0008 DB6A     		ldr	r3, [r3, #44]
 5737 000a 1268     		ldr	r2, [r2]
 5738 000c C3F10503 		rsb	r3, r3, #5
 5739 0010 9361     		str	r3, [r2, #24]
7581:FreeRTOS/Src/tasks.c **** 
 5740              		.loc 1 7581 54 view .LVU1732
7583:FreeRTOS/Src/tasks.c **** }
 5741              		.loc 1 7583 5 view .LVU1733
7584:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 5742              		.loc 1 7584 1 is_stmt 0 view .LVU1734
 5743 0012 7047     		bx	lr
 5744              	.L395:
 5745              		.align	2
 5746              	.L394:
 5747 0014 00000000 		.word	pxCurrentTCB
 5748              		.cfi_endproc
 5749              	.LFE176:
 5751              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5752              		.align	1
 5753              		.global	pvTaskIncrementMutexHeldCount
 5754              		.syntax unified
 5755              		.thumb
 5756              		.thumb_func
 5758              	pvTaskIncrementMutexHeldCount:
 5759              	.LFB177:
7590:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 5760              		.loc 1 7590 5 is_stmt 1 view -0
 5761              		.cfi_startproc
 5762              		@ args = 0, pretend = 0, frame = 0
 5763              		@ frame_needed = 0, uses_anonymous_args = 0
 5764              		@ link register save eliminated.
7591:FreeRTOS/Src/tasks.c **** 
 5765              		.loc 1 7591 9 view .LVU1736
7593:FreeRTOS/Src/tasks.c **** 
 5766              		.loc 1 7593 51 view .LVU1737
7595:FreeRTOS/Src/tasks.c **** 
 5767              		.loc 1 7595 9 view .LVU1738
7595:FreeRTOS/Src/tasks.c **** 
 5768              		.loc 1 7595 15 is_stmt 0 view .LVU1739
 5769 0000 034B     		ldr	r3, .L398
 5770 0002 1868     		ldr	r0, [r3]
 5771              	.LVL438:
7599:FreeRTOS/Src/tasks.c ****         {
 5772              		.loc 1 7599 9 is_stmt 1 view .LVU1740
7599:FreeRTOS/Src/tasks.c ****         {
 5773              		.loc 1 7599 11 is_stmt 0 view .LVU1741
 5774 0004 10B1     		cbz	r0, .L396
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 284


7601:FreeRTOS/Src/tasks.c ****         }
 5775              		.loc 1 7601 13 is_stmt 1 view .LVU1742
7601:FreeRTOS/Src/tasks.c ****         }
 5776              		.loc 1 7601 20 is_stmt 0 view .LVU1743
 5777 0006 036C     		ldr	r3, [r0, #64]
7601:FreeRTOS/Src/tasks.c ****         }
 5778              		.loc 1 7601 37 view .LVU1744
 5779 0008 0133     		adds	r3, r3, #1
 5780 000a 0364     		str	r3, [r0, #64]
7604:FreeRTOS/Src/tasks.c **** 
 5781              		.loc 1 7604 59 is_stmt 1 view .LVU1745
7606:FreeRTOS/Src/tasks.c ****     }
 5782              		.loc 1 7606 9 view .LVU1746
 5783              	.L396:
7607:FreeRTOS/Src/tasks.c **** 
 5784              		.loc 1 7607 5 is_stmt 0 view .LVU1747
 5785 000c 7047     		bx	lr
 5786              	.L399:
 5787 000e 00BF     		.align	2
 5788              	.L398:
 5789 0010 00000000 		.word	pxCurrentTCB
 5790              		.cfi_endproc
 5791              	.LFE177:
 5793              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 5794              		.align	1
 5795              		.global	ulTaskGenericNotifyTake
 5796              		.syntax unified
 5797              		.thumb
 5798              		.thumb_func
 5800              	ulTaskGenericNotifyTake:
 5801              	.LVL439:
 5802              	.LFB178:
7617:FreeRTOS/Src/tasks.c ****         uint32_t ulReturn;
 5803              		.loc 1 7617 5 is_stmt 1 view -0
 5804              		.cfi_startproc
 5805              		@ args = 0, pretend = 0, frame = 0
 5806              		@ frame_needed = 0, uses_anonymous_args = 0
7617:FreeRTOS/Src/tasks.c ****         uint32_t ulReturn;
 5807              		.loc 1 7617 5 is_stmt 0 view .LVU1749
 5808 0000 70B5     		push	{r4, r5, r6, lr}
 5809              	.LCFI53:
 5810              		.cfi_def_cfa_offset 16
 5811              		.cfi_offset 4, -16
 5812              		.cfi_offset 5, -12
 5813              		.cfi_offset 6, -8
 5814              		.cfi_offset 14, -4
 5815 0002 0446     		mov	r4, r0
 5816 0004 0E46     		mov	r6, r1
 5817 0006 1546     		mov	r5, r2
7618:FreeRTOS/Src/tasks.c ****         BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 5818              		.loc 1 7618 9 is_stmt 1 view .LVU1750
7619:FreeRTOS/Src/tasks.c **** 
 5819              		.loc 1 7619 9 view .LVU1751
 5820              	.LVL440:
7621:FreeRTOS/Src/tasks.c **** 
 5821              		.loc 1 7621 95 view .LVU1752
7623:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 285


 5822              		.loc 1 7623 80 view .LVU1753
7627:FreeRTOS/Src/tasks.c ****         {
 5823              		.loc 1 7627 9 view .LVU1754
 5824 0008 FFF7FEFF 		bl	vTaskSuspendAll
 5825              	.LVL441:
7633:FreeRTOS/Src/tasks.c ****             {
 5826              		.loc 1 7633 13 view .LVU1755
 5827 000c FFF7FEFF 		bl	vPortEnterCritical
 5828              	.LVL442:
7636:FreeRTOS/Src/tasks.c ****                 {
 5829              		.loc 1 7636 17 view .LVU1756
7636:FreeRTOS/Src/tasks.c ****                 {
 5830              		.loc 1 7636 33 is_stmt 0 view .LVU1757
 5831 0010 284B     		ldr	r3, .L410
 5832 0012 1B68     		ldr	r3, [r3]
7636:FreeRTOS/Src/tasks.c ****                 {
 5833              		.loc 1 7636 50 view .LVU1758
 5834 0014 04F11002 		add	r2, r4, #16
 5835 0018 03EB8203 		add	r3, r3, r2, lsl #2
 5836 001c 5B68     		ldr	r3, [r3, #4]
7636:FreeRTOS/Src/tasks.c ****                 {
 5837              		.loc 1 7636 19 view .LVU1759
 5838 001e 33BB     		cbnz	r3, .L408
7639:FreeRTOS/Src/tasks.c **** 
 5839              		.loc 1 7639 21 is_stmt 1 view .LVU1760
7639:FreeRTOS/Src/tasks.c **** 
 5840              		.loc 1 7639 33 is_stmt 0 view .LVU1761
 5841 0020 244B     		ldr	r3, .L410
 5842 0022 1B68     		ldr	r3, [r3]
7639:FreeRTOS/Src/tasks.c **** 
 5843              		.loc 1 7639 68 view .LVU1762
 5844 0024 2344     		add	r3, r3, r4
 5845 0026 0122     		movs	r2, #1
 5846 0028 83F84820 		strb	r2, [r3, #72]
7641:FreeRTOS/Src/tasks.c ****                     {
 5847              		.loc 1 7641 21 is_stmt 1 view .LVU1763
7641:FreeRTOS/Src/tasks.c ****                     {
 5848              		.loc 1 7641 23 is_stmt 0 view .LVU1764
 5849 002c 1DBB     		cbnz	r5, .L403
7652:FreeRTOS/Src/tasks.c ****                 }
 5850              		.loc 1 7652 45 is_stmt 1 view .LVU1765
7655:FreeRTOS/Src/tasks.c **** 
 5851              		.loc 1 7655 13 view .LVU1766
 5852 002e FFF7FEFF 		bl	vPortExitCritical
 5853              	.LVL443:
7660:FreeRTOS/Src/tasks.c ****             {
 5854              		.loc 1 7660 13 view .LVU1767
 5855              	.L402:
7667:FreeRTOS/Src/tasks.c ****             }
 5856              		.loc 1 7667 41 view .LVU1768
7670:FreeRTOS/Src/tasks.c **** 
 5857              		.loc 1 7670 9 view .LVU1769
7670:FreeRTOS/Src/tasks.c **** 
 5858              		.loc 1 7670 27 is_stmt 0 view .LVU1770
 5859 0032 FFF7FEFF 		bl	xTaskResumeAll
 5860              	.LVL444:
7673:FreeRTOS/Src/tasks.c ****         {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 286


 5861              		.loc 1 7673 9 is_stmt 1 view .LVU1771
7673:FreeRTOS/Src/tasks.c ****         {
 5862              		.loc 1 7673 11 is_stmt 0 view .LVU1772
 5863 0036 35BB     		cbnz	r5, .L409
 5864              	.L404:
7679:FreeRTOS/Src/tasks.c ****         }
 5865              		.loc 1 7679 37 is_stmt 1 view .LVU1773
7682:FreeRTOS/Src/tasks.c ****         {
 5866              		.loc 1 7682 9 view .LVU1774
 5867 0038 FFF7FEFF 		bl	vPortEnterCritical
 5868              	.LVL445:
7684:FreeRTOS/Src/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 5869              		.loc 1 7684 53 view .LVU1775
7685:FreeRTOS/Src/tasks.c **** 
 5870              		.loc 1 7685 13 view .LVU1776
7685:FreeRTOS/Src/tasks.c **** 
 5871              		.loc 1 7685 36 is_stmt 0 view .LVU1777
 5872 003c 1D4B     		ldr	r3, .L410
 5873 003e 1B68     		ldr	r3, [r3]
7685:FreeRTOS/Src/tasks.c **** 
 5874              		.loc 1 7685 22 view .LVU1778
 5875 0040 04F11002 		add	r2, r4, #16
 5876 0044 03EB8203 		add	r3, r3, r2, lsl #2
 5877 0048 5D68     		ldr	r5, [r3, #4]
 5878              	.LVL446:
7687:FreeRTOS/Src/tasks.c ****             {
 5879              		.loc 1 7687 13 is_stmt 1 view .LVU1779
7687:FreeRTOS/Src/tasks.c ****             {
 5880              		.loc 1 7687 15 is_stmt 0 view .LVU1780
 5881 004a 35B1     		cbz	r5, .L405
7689:FreeRTOS/Src/tasks.c ****                 {
 5882              		.loc 1 7689 17 is_stmt 1 view .LVU1781
7689:FreeRTOS/Src/tasks.c ****                 {
 5883              		.loc 1 7689 19 is_stmt 0 view .LVU1782
 5884 004c 46B3     		cbz	r6, .L406
7691:FreeRTOS/Src/tasks.c ****                 }
 5885              		.loc 1 7691 21 is_stmt 1 view .LVU1783
7691:FreeRTOS/Src/tasks.c ****                 }
 5886              		.loc 1 7691 33 is_stmt 0 view .LVU1784
 5887 004e 194B     		ldr	r3, .L410
 5888 0050 1B68     		ldr	r3, [r3]
7691:FreeRTOS/Src/tasks.c ****                 }
 5889              		.loc 1 7691 70 view .LVU1785
 5890 0052 03EB8203 		add	r3, r3, r2, lsl #2
 5891 0056 0022     		movs	r2, #0
 5892 0058 5A60     		str	r2, [r3, #4]
 5893              	.L405:
7700:FreeRTOS/Src/tasks.c ****             }
 5894              		.loc 1 7700 41 is_stmt 1 view .LVU1786
7703:FreeRTOS/Src/tasks.c ****         }
 5895              		.loc 1 7703 13 view .LVU1787
7703:FreeRTOS/Src/tasks.c ****         }
 5896              		.loc 1 7703 25 is_stmt 0 view .LVU1788
 5897 005a 164B     		ldr	r3, .L410
 5898 005c 1B68     		ldr	r3, [r3]
7703:FreeRTOS/Src/tasks.c ****         }
 5899              		.loc 1 7703 60 view .LVU1789
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 287


 5900 005e 2344     		add	r3, r3, r4
 5901 0060 0022     		movs	r2, #0
 5902 0062 83F84820 		strb	r2, [r3, #72]
7705:FreeRTOS/Src/tasks.c **** 
 5903              		.loc 1 7705 9 is_stmt 1 view .LVU1790
 5904 0066 FFF7FEFF 		bl	vPortExitCritical
 5905              	.LVL447:
7707:FreeRTOS/Src/tasks.c **** 
 5906              		.loc 1 7707 56 view .LVU1791
7709:FreeRTOS/Src/tasks.c ****     }
 5907              		.loc 1 7709 9 view .LVU1792
7710:FreeRTOS/Src/tasks.c **** 
 5908              		.loc 1 7710 5 is_stmt 0 view .LVU1793
 5909 006a 2846     		mov	r0, r5
 5910 006c 70BD     		pop	{r4, r5, r6, pc}
 5911              	.LVL448:
 5912              	.L408:
7652:FreeRTOS/Src/tasks.c ****                 }
 5913              		.loc 1 7652 45 is_stmt 1 view .LVU1794
7655:FreeRTOS/Src/tasks.c **** 
 5914              		.loc 1 7655 13 view .LVU1795
 5915 006e FFF7FEFF 		bl	vPortExitCritical
 5916              	.LVL449:
7660:FreeRTOS/Src/tasks.c ****             {
 5917              		.loc 1 7660 13 view .LVU1796
7619:FreeRTOS/Src/tasks.c **** 
 5918              		.loc 1 7619 37 is_stmt 0 view .LVU1797
 5919 0072 0025     		movs	r5, #0
 5920              	.LVL450:
7619:FreeRTOS/Src/tasks.c **** 
 5921              		.loc 1 7619 37 view .LVU1798
 5922 0074 DDE7     		b	.L402
 5923              	.LVL451:
 5924              	.L403:
7643:FreeRTOS/Src/tasks.c ****                     }
 5925              		.loc 1 7643 25 is_stmt 1 view .LVU1799
7652:FreeRTOS/Src/tasks.c ****                 }
 5926              		.loc 1 7652 45 view .LVU1800
7655:FreeRTOS/Src/tasks.c **** 
 5927              		.loc 1 7655 13 view .LVU1801
 5928 0076 FFF7FEFF 		bl	vPortExitCritical
 5929              	.LVL452:
7660:FreeRTOS/Src/tasks.c ****             {
 5930              		.loc 1 7660 13 view .LVU1802
7662:FreeRTOS/Src/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5931              		.loc 1 7662 63 view .LVU1803
7663:FreeRTOS/Src/tasks.c ****             }
 5932              		.loc 1 7663 17 view .LVU1804
 5933 007a 0121     		movs	r1, #1
 5934 007c 2846     		mov	r0, r5
 5935 007e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5936              	.LVL453:
7643:FreeRTOS/Src/tasks.c ****                     }
 5937              		.loc 1 7643 38 is_stmt 0 view .LVU1805
 5938 0082 0125     		movs	r5, #1
 5939              	.LVL454:
7643:FreeRTOS/Src/tasks.c ****                     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 288


 5940              		.loc 1 7643 38 view .LVU1806
 5941 0084 D5E7     		b	.L402
 5942              	.LVL455:
 5943              	.L409:
7673:FreeRTOS/Src/tasks.c ****         {
 5944              		.loc 1 7673 40 discriminator 1 view .LVU1807
 5945 0086 0028     		cmp	r0, #0
 5946 0088 D6D1     		bne	.L404
7675:FreeRTOS/Src/tasks.c ****         }
 5947              		.loc 1 7675 13 is_stmt 1 view .LVU1808
 5948 008a 4FF0E023 		mov	r3, #-536813568
 5949 008e 4FF08052 		mov	r2, #268435456
 5950 0092 C3F8042D 		str	r2, [r3, #3332]
7675:FreeRTOS/Src/tasks.c ****         }
 5951              		.loc 1 7675 13 view .LVU1809
 5952              		.syntax unified
 5953              	@ 7675 "FreeRTOS/Src/tasks.c" 1
 5954 0096 BFF34F8F 		dsb
 5955              	@ 0 "" 2
7675:FreeRTOS/Src/tasks.c ****         }
 5956              		.loc 1 7675 13 view .LVU1810
 5957              	@ 7675 "FreeRTOS/Src/tasks.c" 1
 5958 009a BFF36F8F 		isb
 5959              	@ 0 "" 2
7675:FreeRTOS/Src/tasks.c ****         }
 5960              		.loc 1 7675 35 view .LVU1811
 5961              		.thumb
 5962              		.syntax unified
 5963 009e CBE7     		b	.L404
 5964              	.LVL456:
 5965              	.L406:
7695:FreeRTOS/Src/tasks.c ****                 }
 5966              		.loc 1 7695 21 view .LVU1812
7695:FreeRTOS/Src/tasks.c ****                 }
 5967              		.loc 1 7695 33 is_stmt 0 view .LVU1813
 5968 00a0 044B     		ldr	r3, .L410
 5969 00a2 1B68     		ldr	r3, [r3]
7695:FreeRTOS/Src/tasks.c ****                 }
 5970              		.loc 1 7695 81 view .LVU1814
 5971 00a4 6A1E     		subs	r2, r5, #1
7695:FreeRTOS/Src/tasks.c ****                 }
 5972              		.loc 1 7695 70 view .LVU1815
 5973 00a6 04F11001 		add	r1, r4, #16
 5974 00aa 03EB8103 		add	r3, r3, r1, lsl #2
 5975 00ae 5A60     		str	r2, [r3, #4]
 5976 00b0 D3E7     		b	.L405
 5977              	.L411:
 5978 00b2 00BF     		.align	2
 5979              	.L410:
 5980 00b4 00000000 		.word	pxCurrentTCB
 5981              		.cfi_endproc
 5982              	.LFE178:
 5984              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 5985              		.align	1
 5986              		.global	xTaskGenericNotifyWait
 5987              		.syntax unified
 5988              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 289


 5989              		.thumb_func
 5991              	xTaskGenericNotifyWait:
 5992              	.LVL457:
 5993              	.LFB179:
7722:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 5994              		.loc 1 7722 5 is_stmt 1 view -0
 5995              		.cfi_startproc
 5996              		@ args = 4, pretend = 0, frame = 0
 5997              		@ frame_needed = 0, uses_anonymous_args = 0
7722:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 5998              		.loc 1 7722 5 is_stmt 0 view .LVU1817
 5999 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6000              	.LCFI54:
 6001              		.cfi_def_cfa_offset 24
 6002              		.cfi_offset 4, -24
 6003              		.cfi_offset 5, -20
 6004              		.cfi_offset 6, -16
 6005              		.cfi_offset 7, -12
 6006              		.cfi_offset 8, -8
 6007              		.cfi_offset 14, -4
 6008 0004 0446     		mov	r4, r0
 6009 0006 8846     		mov	r8, r1
 6010 0008 1746     		mov	r7, r2
 6011 000a 1D46     		mov	r5, r3
 6012 000c 069E     		ldr	r6, [sp, #24]
7723:FreeRTOS/Src/tasks.c **** 
 6013              		.loc 1 7723 9 is_stmt 1 view .LVU1818
 6014              	.LVL458:
7725:FreeRTOS/Src/tasks.c **** 
 6015              		.loc 1 7725 140 view .LVU1819
7727:FreeRTOS/Src/tasks.c **** 
 6016              		.loc 1 7727 80 view .LVU1820
7731:FreeRTOS/Src/tasks.c ****         {
 6017              		.loc 1 7731 9 view .LVU1821
 6018 000e FFF7FEFF 		bl	vTaskSuspendAll
 6019              	.LVL459:
7736:FreeRTOS/Src/tasks.c ****             {
 6020              		.loc 1 7736 13 view .LVU1822
 6021 0012 FFF7FEFF 		bl	vPortEnterCritical
 6022              	.LVL460:
7739:FreeRTOS/Src/tasks.c ****                 {
 6023              		.loc 1 7739 17 view .LVU1823
7739:FreeRTOS/Src/tasks.c ****                 {
 6024              		.loc 1 7739 33 is_stmt 0 view .LVU1824
 6025 0016 2F4B     		ldr	r3, .L424
 6026 0018 1B68     		ldr	r3, [r3]
7739:FreeRTOS/Src/tasks.c ****                 {
 6027              		.loc 1 7739 48 view .LVU1825
 6028 001a 2344     		add	r3, r3, r4
 6029 001c 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
7739:FreeRTOS/Src/tasks.c ****                 {
 6030              		.loc 1 7739 19 view .LVU1826
 6031 0020 022B     		cmp	r3, #2
 6032 0022 32D0     		beq	.L421
7744:FreeRTOS/Src/tasks.c **** 
 6033              		.loc 1 7744 21 is_stmt 1 view .LVU1827
7744:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 290


 6034              		.loc 1 7744 33 is_stmt 0 view .LVU1828
 6035 0024 2B49     		ldr	r1, .L424
 6036 0026 0B68     		ldr	r3, [r1]
7744:FreeRTOS/Src/tasks.c **** 
 6037              		.loc 1 7744 50 view .LVU1829
 6038 0028 04F11002 		add	r2, r4, #16
 6039 002c 03EB8203 		add	r3, r3, r2, lsl #2
 6040 0030 5A68     		ldr	r2, [r3, #4]
7744:FreeRTOS/Src/tasks.c **** 
 6041              		.loc 1 7744 70 view .LVU1830
 6042 0032 22EA0802 		bic	r2, r2, r8
 6043 0036 5A60     		str	r2, [r3, #4]
7747:FreeRTOS/Src/tasks.c **** 
 6044              		.loc 1 7747 21 is_stmt 1 view .LVU1831
7747:FreeRTOS/Src/tasks.c **** 
 6045              		.loc 1 7747 33 is_stmt 0 view .LVU1832
 6046 0038 0B68     		ldr	r3, [r1]
7747:FreeRTOS/Src/tasks.c **** 
 6047              		.loc 1 7747 68 view .LVU1833
 6048 003a 2344     		add	r3, r3, r4
 6049 003c 0122     		movs	r2, #1
 6050 003e 83F84820 		strb	r2, [r3, #72]
7749:FreeRTOS/Src/tasks.c ****                     {
 6051              		.loc 1 7749 21 is_stmt 1 view .LVU1834
7749:FreeRTOS/Src/tasks.c ****                     {
 6052              		.loc 1 7749 23 is_stmt 0 view .LVU1835
 6053 0042 36BB     		cbnz	r6, .L415
7760:FreeRTOS/Src/tasks.c ****                 }
 6054              		.loc 1 7760 45 is_stmt 1 view .LVU1836
7763:FreeRTOS/Src/tasks.c **** 
 6055              		.loc 1 7763 13 view .LVU1837
 6056 0044 FFF7FEFF 		bl	vPortExitCritical
 6057              	.LVL461:
7768:FreeRTOS/Src/tasks.c ****             {
 6058              		.loc 1 7768 13 view .LVU1838
 6059              	.L414:
7775:FreeRTOS/Src/tasks.c ****             }
 6060              		.loc 1 7775 41 view .LVU1839
7778:FreeRTOS/Src/tasks.c **** 
 6061              		.loc 1 7778 9 view .LVU1840
7778:FreeRTOS/Src/tasks.c **** 
 6062              		.loc 1 7778 27 is_stmt 0 view .LVU1841
 6063 0048 FFF7FEFF 		bl	xTaskResumeAll
 6064              	.LVL462:
7781:FreeRTOS/Src/tasks.c ****         {
 6065              		.loc 1 7781 9 is_stmt 1 view .LVU1842
7781:FreeRTOS/Src/tasks.c ****         {
 6066              		.loc 1 7781 11 is_stmt 0 view .LVU1843
 6067 004c 4EBB     		cbnz	r6, .L422
 6068              	.LVL463:
 6069              	.L416:
7787:FreeRTOS/Src/tasks.c ****         }
 6070              		.loc 1 7787 37 is_stmt 1 view .LVU1844
7790:FreeRTOS/Src/tasks.c ****         {
 6071              		.loc 1 7790 9 view .LVU1845
 6072 004e FFF7FEFF 		bl	vPortEnterCritical
 6073              	.LVL464:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 291


7792:FreeRTOS/Src/tasks.c **** 
 6074              		.loc 1 7792 53 view .LVU1846
7794:FreeRTOS/Src/tasks.c ****             {
 6075              		.loc 1 7794 13 view .LVU1847
7794:FreeRTOS/Src/tasks.c ****             {
 6076              		.loc 1 7794 15 is_stmt 0 view .LVU1848
 6077 0052 3DB1     		cbz	r5, .L417
7798:FreeRTOS/Src/tasks.c ****             }
 6078              		.loc 1 7798 17 is_stmt 1 view .LVU1849
7798:FreeRTOS/Src/tasks.c ****             }
 6079              		.loc 1 7798 53 is_stmt 0 view .LVU1850
 6080 0054 1F4B     		ldr	r3, .L424
 6081 0056 1B68     		ldr	r3, [r3]
7798:FreeRTOS/Src/tasks.c ****             }
 6082              		.loc 1 7798 70 view .LVU1851
 6083 0058 04F11002 		add	r2, r4, #16
 6084 005c 03EB8203 		add	r3, r3, r2, lsl #2
 6085 0060 5B68     		ldr	r3, [r3, #4]
7798:FreeRTOS/Src/tasks.c ****             }
 6086              		.loc 1 7798 39 view .LVU1852
 6087 0062 2B60     		str	r3, [r5]
 6088              	.L417:
7805:FreeRTOS/Src/tasks.c ****             {
 6089              		.loc 1 7805 13 is_stmt 1 view .LVU1853
7805:FreeRTOS/Src/tasks.c ****             {
 6090              		.loc 1 7805 29 is_stmt 0 view .LVU1854
 6091 0064 1B4B     		ldr	r3, .L424
 6092 0066 1B68     		ldr	r3, [r3]
7805:FreeRTOS/Src/tasks.c ****             {
 6093              		.loc 1 7805 44 view .LVU1855
 6094 0068 2344     		add	r3, r3, r4
 6095 006a 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
7805:FreeRTOS/Src/tasks.c ****             {
 6096              		.loc 1 7805 15 view .LVU1856
 6097 006e 022B     		cmp	r3, #2
 6098 0070 24D0     		beq	.L423
7808:FreeRTOS/Src/tasks.c ****             }
 6099              		.loc 1 7808 25 view .LVU1857
 6100 0072 0025     		movs	r5, #0
 6101              	.LVL465:
 6102              	.L418:
7818:FreeRTOS/Src/tasks.c ****         }
 6103              		.loc 1 7818 13 is_stmt 1 view .LVU1858
7818:FreeRTOS/Src/tasks.c ****         }
 6104              		.loc 1 7818 25 is_stmt 0 view .LVU1859
 6105 0074 174B     		ldr	r3, .L424
 6106 0076 1B68     		ldr	r3, [r3]
7818:FreeRTOS/Src/tasks.c ****         }
 6107              		.loc 1 7818 60 view .LVU1860
 6108 0078 2344     		add	r3, r3, r4
 6109 007a 0022     		movs	r2, #0
 6110 007c 83F84820 		strb	r2, [r3, #72]
7820:FreeRTOS/Src/tasks.c **** 
 6111              		.loc 1 7820 9 is_stmt 1 view .LVU1861
 6112 0080 FFF7FEFF 		bl	vPortExitCritical
 6113              	.LVL466:
7822:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 292


 6114              		.loc 1 7822 54 view .LVU1862
7824:FreeRTOS/Src/tasks.c ****     }
 6115              		.loc 1 7824 9 view .LVU1863
7825:FreeRTOS/Src/tasks.c **** 
 6116              		.loc 1 7825 5 is_stmt 0 view .LVU1864
 6117 0084 2846     		mov	r0, r5
 6118 0086 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6119              	.LVL467:
 6120              	.L421:
7760:FreeRTOS/Src/tasks.c ****                 }
 6121              		.loc 1 7760 45 is_stmt 1 view .LVU1865
7763:FreeRTOS/Src/tasks.c **** 
 6122              		.loc 1 7763 13 view .LVU1866
 6123 008a FFF7FEFF 		bl	vPortExitCritical
 6124              	.LVL468:
7768:FreeRTOS/Src/tasks.c ****             {
 6125              		.loc 1 7768 13 view .LVU1867
7723:FreeRTOS/Src/tasks.c **** 
 6126              		.loc 1 7723 46 is_stmt 0 view .LVU1868
 6127 008e 0026     		movs	r6, #0
 6128 0090 DAE7     		b	.L414
 6129              	.L415:
7751:FreeRTOS/Src/tasks.c ****                     }
 6130              		.loc 1 7751 25 is_stmt 1 view .LVU1869
 6131              	.LVL469:
7760:FreeRTOS/Src/tasks.c ****                 }
 6132              		.loc 1 7760 45 view .LVU1870
7763:FreeRTOS/Src/tasks.c **** 
 6133              		.loc 1 7763 13 view .LVU1871
 6134 0092 FFF7FEFF 		bl	vPortExitCritical
 6135              	.LVL470:
7768:FreeRTOS/Src/tasks.c ****             {
 6136              		.loc 1 7768 13 view .LVU1872
7770:FreeRTOS/Src/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6137              		.loc 1 7770 63 view .LVU1873
7771:FreeRTOS/Src/tasks.c ****             }
 6138              		.loc 1 7771 17 view .LVU1874
 6139 0096 0121     		movs	r1, #1
 6140 0098 3046     		mov	r0, r6
 6141 009a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6142              	.LVL471:
7751:FreeRTOS/Src/tasks.c ****                     }
 6143              		.loc 1 7751 38 is_stmt 0 view .LVU1875
 6144 009e 0126     		movs	r6, #1
 6145 00a0 D2E7     		b	.L414
 6146              	.LVL472:
 6147              	.L422:
7781:FreeRTOS/Src/tasks.c ****         {
 6148              		.loc 1 7781 40 discriminator 1 view .LVU1876
 6149 00a2 0028     		cmp	r0, #0
 6150 00a4 D3D1     		bne	.L416
7783:FreeRTOS/Src/tasks.c ****         }
 6151              		.loc 1 7783 13 is_stmt 1 view .LVU1877
 6152 00a6 4FF0E023 		mov	r3, #-536813568
 6153 00aa 4FF08052 		mov	r2, #268435456
 6154 00ae C3F8042D 		str	r2, [r3, #3332]
 6155              	.LVL473:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 293


7783:FreeRTOS/Src/tasks.c ****         }
 6156              		.loc 1 7783 13 view .LVU1878
 6157              		.syntax unified
 6158              	@ 7783 "FreeRTOS/Src/tasks.c" 1
 6159 00b2 BFF34F8F 		dsb
 6160              	@ 0 "" 2
7783:FreeRTOS/Src/tasks.c ****         }
 6161              		.loc 1 7783 13 view .LVU1879
 6162              	@ 7783 "FreeRTOS/Src/tasks.c" 1
 6163 00b6 BFF36F8F 		isb
 6164              	@ 0 "" 2
7783:FreeRTOS/Src/tasks.c ****         }
 6165              		.loc 1 7783 35 view .LVU1880
 6166              		.thumb
 6167              		.syntax unified
 6168 00ba C8E7     		b	.L416
 6169              	.LVL474:
 6170              	.L423:
7814:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
 6171              		.loc 1 7814 17 view .LVU1881
7814:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
 6172              		.loc 1 7814 29 is_stmt 0 view .LVU1882
 6173 00bc 054B     		ldr	r3, .L424
 6174 00be 1B68     		ldr	r3, [r3]
7814:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
 6175              		.loc 1 7814 46 view .LVU1883
 6176 00c0 04F11002 		add	r2, r4, #16
 6177 00c4 03EB8203 		add	r3, r3, r2, lsl #2
 6178 00c8 5A68     		ldr	r2, [r3, #4]
7814:FreeRTOS/Src/tasks.c ****                 xReturn = pdTRUE;
 6179              		.loc 1 7814 66 view .LVU1884
 6180 00ca 22EA0702 		bic	r2, r2, r7
 6181 00ce 5A60     		str	r2, [r3, #4]
7815:FreeRTOS/Src/tasks.c ****             }
 6182              		.loc 1 7815 17 is_stmt 1 view .LVU1885
 6183              	.LVL475:
7815:FreeRTOS/Src/tasks.c ****             }
 6184              		.loc 1 7815 25 is_stmt 0 view .LVU1886
 6185 00d0 0125     		movs	r5, #1
 6186              	.LVL476:
7815:FreeRTOS/Src/tasks.c ****             }
 6187              		.loc 1 7815 25 view .LVU1887
 6188 00d2 CFE7     		b	.L418
 6189              	.L425:
 6190              		.align	2
 6191              	.L424:
 6192 00d4 00000000 		.word	pxCurrentTCB
 6193              		.cfi_endproc
 6194              	.LFE179:
 6196              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6197              		.align	1
 6198              		.global	xTaskGenericNotify
 6199              		.syntax unified
 6200              		.thumb
 6201              		.thumb_func
 6203              	xTaskGenericNotify:
 6204              	.LVL477:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 294


 6205              	.LFB180:
7837:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 6206              		.loc 1 7837 5 is_stmt 1 view -0
 6207              		.cfi_startproc
 6208              		@ args = 4, pretend = 0, frame = 0
 6209              		@ frame_needed = 0, uses_anonymous_args = 0
7837:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 6210              		.loc 1 7837 5 is_stmt 0 view .LVU1889
 6211 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6212              	.LCFI55:
 6213              		.cfi_def_cfa_offset 24
 6214              		.cfi_offset 4, -24
 6215              		.cfi_offset 5, -20
 6216              		.cfi_offset 6, -16
 6217              		.cfi_offset 7, -12
 6218              		.cfi_offset 8, -8
 6219              		.cfi_offset 14, -4
 6220 0004 0646     		mov	r6, r0
 6221 0006 0C46     		mov	r4, r1
 6222 0008 1746     		mov	r7, r2
 6223 000a 1D46     		mov	r5, r3
 6224 000c DDF81880 		ldr	r8, [sp, #24]
7838:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn = pdPASS;
 6225              		.loc 1 7838 9 is_stmt 1 view .LVU1890
7839:FreeRTOS/Src/tasks.c ****         uint8_t ucOriginalNotifyState;
 6226              		.loc 1 7839 9 view .LVU1891
 6227              	.LVL478:
7840:FreeRTOS/Src/tasks.c **** 
 6228              		.loc 1 7840 9 view .LVU1892
7842:FreeRTOS/Src/tasks.c **** 
 6229              		.loc 1 7842 120 view .LVU1893
7844:FreeRTOS/Src/tasks.c ****         configASSERT( xTaskToNotify );
 6230              		.loc 1 7844 80 view .LVU1894
7845:FreeRTOS/Src/tasks.c ****         pxTCB = xTaskToNotify;
 6231              		.loc 1 7845 38 view .LVU1895
7846:FreeRTOS/Src/tasks.c **** 
 6232              		.loc 1 7846 9 view .LVU1896
7848:FreeRTOS/Src/tasks.c ****         {
 6233              		.loc 1 7848 9 view .LVU1897
 6234 0010 FFF7FEFF 		bl	vPortEnterCritical
 6235              	.LVL479:
7850:FreeRTOS/Src/tasks.c ****             {
 6236              		.loc 1 7850 13 view .LVU1898
7850:FreeRTOS/Src/tasks.c ****             {
 6237              		.loc 1 7850 15 is_stmt 0 view .LVU1899
 6238 0014 B8F1000F 		cmp	r8, #0
 6239 0018 06D0     		beq	.L427
7852:FreeRTOS/Src/tasks.c ****             }
 6240              		.loc 1 7852 17 is_stmt 1 view .LVU1900
7852:FreeRTOS/Src/tasks.c ****             }
 6241              		.loc 1 7852 71 is_stmt 0 view .LVU1901
 6242 001a 04F11003 		add	r3, r4, #16
 6243 001e 06EB8303 		add	r3, r6, r3, lsl #2
 6244 0022 5B68     		ldr	r3, [r3, #4]
7852:FreeRTOS/Src/tasks.c ****             }
 6245              		.loc 1 7852 47 view .LVU1902
 6246 0024 C8F80030 		str	r3, [r8]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 295


 6247              	.L427:
7855:FreeRTOS/Src/tasks.c **** 
 6248              		.loc 1 7855 13 is_stmt 1 view .LVU1903
7855:FreeRTOS/Src/tasks.c **** 
 6249              		.loc 1 7855 35 is_stmt 0 view .LVU1904
 6250 0028 3319     		adds	r3, r6, r4
 6251 002a 93F84810 		ldrb	r1, [r3, #72]	@ zero_extendqisi2
 6252 002e C9B2     		uxtb	r1, r1
 6253              	.LVL480:
7857:FreeRTOS/Src/tasks.c **** 
 6254              		.loc 1 7857 13 is_stmt 1 view .LVU1905
7857:FreeRTOS/Src/tasks.c **** 
 6255              		.loc 1 7857 53 is_stmt 0 view .LVU1906
 6256 0030 0222     		movs	r2, #2
 6257 0032 83F84820 		strb	r2, [r3, #72]
7859:FreeRTOS/Src/tasks.c ****             {
 6258              		.loc 1 7859 13 is_stmt 1 view .LVU1907
 6259 0036 6B1E     		subs	r3, r5, #1
 6260 0038 032B     		cmp	r3, #3
 6261 003a 09D8     		bhi	.L428
 6262 003c DFE803F0 		tbb	[pc, r3]
 6263              	.L430:
 6264 0040 02       		.byte	(.L433-.L430)/2
 6265 0041 10       		.byte	(.L432-.L430)/2
 6266 0042 17       		.byte	(.L431-.L430)/2
 6267 0043 1C       		.byte	(.L429-.L430)/2
 6268              		.p2align 1
 6269              	.L433:
7862:FreeRTOS/Src/tasks.c ****                     break;
 6270              		.loc 1 7862 21 view .LVU1908
7862:FreeRTOS/Src/tasks.c ****                     break;
 6271              		.loc 1 7862 43 is_stmt 0 view .LVU1909
 6272 0044 1034     		adds	r4, r4, #16
 6273              	.LVL481:
7862:FreeRTOS/Src/tasks.c ****                     break;
 6274              		.loc 1 7862 43 view .LVU1910
 6275 0046 06EB8404 		add	r4, r6, r4, lsl #2
 6276              	.LVL482:
7862:FreeRTOS/Src/tasks.c ****                     break;
 6277              		.loc 1 7862 43 view .LVU1911
 6278 004a 6368     		ldr	r3, [r4, #4]
7862:FreeRTOS/Src/tasks.c ****                     break;
 6279              		.loc 1 7862 63 view .LVU1912
 6280 004c 3B43     		orrs	r3, r3, r7
 6281 004e 6360     		str	r3, [r4, #4]
7863:FreeRTOS/Src/tasks.c **** 
 6282              		.loc 1 7863 21 is_stmt 1 view .LVU1913
 6283              	.L428:
7903:FreeRTOS/Src/tasks.c **** 
 6284              		.loc 1 7903 48 view .LVU1914
7907:FreeRTOS/Src/tasks.c ****             {
 6285              		.loc 1 7907 13 view .LVU1915
7907:FreeRTOS/Src/tasks.c ****             {
 6286              		.loc 1 7907 15 is_stmt 0 view .LVU1916
 6287 0050 0129     		cmp	r1, #1
 6288 0052 18D0     		beq	.L441
 6289 0054 0124     		movs	r4, #1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 296


 6290              	.LVL483:
 6291              	.L434:
7937:FreeRTOS/Src/tasks.c ****             }
 6292              		.loc 1 7937 41 is_stmt 1 view .LVU1917
7940:FreeRTOS/Src/tasks.c **** 
 6293              		.loc 1 7940 9 view .LVU1918
 6294 0056 FFF7FEFF 		bl	vPortExitCritical
 6295              	.LVL484:
7942:FreeRTOS/Src/tasks.c **** 
 6296              		.loc 1 7942 50 view .LVU1919
7944:FreeRTOS/Src/tasks.c ****     }
 6297              		.loc 1 7944 9 view .LVU1920
7945:FreeRTOS/Src/tasks.c **** 
 6298              		.loc 1 7945 5 is_stmt 0 view .LVU1921
 6299 005a 2046     		mov	r0, r4
 6300 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6301              	.LVL485:
 6302              	.L432:
7866:FreeRTOS/Src/tasks.c ****                     break;
 6303              		.loc 1 7866 21 is_stmt 1 view .LVU1922
7866:FreeRTOS/Src/tasks.c ****                     break;
 6304              		.loc 1 7866 45 is_stmt 0 view .LVU1923
 6305 0060 1034     		adds	r4, r4, #16
 6306              	.LVL486:
7866:FreeRTOS/Src/tasks.c ****                     break;
 6307              		.loc 1 7866 45 view .LVU1924
 6308 0062 06EB8404 		add	r4, r6, r4, lsl #2
 6309              	.LVL487:
7866:FreeRTOS/Src/tasks.c ****                     break;
 6310              		.loc 1 7866 45 view .LVU1925
 6311 0066 6368     		ldr	r3, [r4, #4]
7866:FreeRTOS/Src/tasks.c ****                     break;
 6312              		.loc 1 7866 66 view .LVU1926
 6313 0068 0133     		adds	r3, r3, #1
 6314 006a 6360     		str	r3, [r4, #4]
7867:FreeRTOS/Src/tasks.c **** 
 6315              		.loc 1 7867 21 is_stmt 1 view .LVU1927
 6316 006c F0E7     		b	.L428
 6317              	.LVL488:
 6318              	.L431:
7870:FreeRTOS/Src/tasks.c ****                     break;
 6319              		.loc 1 7870 21 view .LVU1928
7870:FreeRTOS/Src/tasks.c ****                     break;
 6320              		.loc 1 7870 63 is_stmt 0 view .LVU1929
 6321 006e 1034     		adds	r4, r4, #16
 6322              	.LVL489:
7870:FreeRTOS/Src/tasks.c ****                     break;
 6323              		.loc 1 7870 63 view .LVU1930
 6324 0070 06EB8404 		add	r4, r6, r4, lsl #2
 6325              	.LVL490:
7870:FreeRTOS/Src/tasks.c ****                     break;
 6326              		.loc 1 7870 63 view .LVU1931
 6327 0074 6760     		str	r7, [r4, #4]
7871:FreeRTOS/Src/tasks.c **** 
 6328              		.loc 1 7871 21 is_stmt 1 view .LVU1932
 6329 0076 EBE7     		b	.L428
 6330              	.LVL491:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 297


 6331              	.L429:
7875:FreeRTOS/Src/tasks.c ****                     {
 6332              		.loc 1 7875 21 view .LVU1933
7875:FreeRTOS/Src/tasks.c ****                     {
 6333              		.loc 1 7875 23 is_stmt 0 view .LVU1934
 6334 0078 0229     		cmp	r1, #2
 6335 007a 47D0     		beq	.L436
7877:FreeRTOS/Src/tasks.c ****                     }
 6336              		.loc 1 7877 25 is_stmt 1 view .LVU1935
7877:FreeRTOS/Src/tasks.c ****                     }
 6337              		.loc 1 7877 67 is_stmt 0 view .LVU1936
 6338 007c 1034     		adds	r4, r4, #16
 6339              	.LVL492:
7877:FreeRTOS/Src/tasks.c ****                     }
 6340              		.loc 1 7877 67 view .LVU1937
 6341 007e 06EB8404 		add	r4, r6, r4, lsl #2
 6342              	.LVL493:
7877:FreeRTOS/Src/tasks.c ****                     }
 6343              		.loc 1 7877 67 view .LVU1938
 6344 0082 6760     		str	r7, [r4, #4]
 6345 0084 E4E7     		b	.L428
 6346              	.L441:
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6347              		.loc 1 7909 17 is_stmt 1 view .LVU1939
 6348              	.LBB125:
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6349              		.loc 1 7909 17 view .LVU1940
 6350 0086 7369     		ldr	r3, [r6, #20]
 6351              	.LVL494:
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6352              		.loc 1 7909 17 view .LVU1941
 6353 0088 B168     		ldr	r1, [r6, #8]
 6354              	.LVL495:
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6355              		.loc 1 7909 17 is_stmt 0 view .LVU1942
 6356 008a F268     		ldr	r2, [r6, #12]
 6357 008c 8A60     		str	r2, [r1, #8]
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6358              		.loc 1 7909 17 is_stmt 1 view .LVU1943
 6359 008e B168     		ldr	r1, [r6, #8]
 6360 0090 5160     		str	r1, [r2, #4]
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6361              		.loc 1 7909 17 view .LVU1944
 6362 0092 5A68     		ldr	r2, [r3, #4]
 6363 0094 311D     		adds	r1, r6, #4
 6364 0096 8A42     		cmp	r2, r1
 6365 0098 35D0     		beq	.L442
 6366              	.L435:
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6367              		.loc 1 7909 17 discriminator 3 view .LVU1945
 6368 009a 0022     		movs	r2, #0
 6369 009c 7261     		str	r2, [r6, #20]
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6370              		.loc 1 7909 17 view .LVU1946
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6371              		.loc 1 7909 17 is_stmt 0 discriminator 3 view .LVU1947
 6372 009e 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 298


 6373 00a0 013A     		subs	r2, r2, #1
 6374 00a2 1A60     		str	r2, [r3]
 6375              	.LBE125:
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6376              		.loc 1 7909 17 is_stmt 1 view .LVU1948
7910:FreeRTOS/Src/tasks.c **** 
 6377              		.loc 1 7910 17 view .LVU1949
7910:FreeRTOS/Src/tasks.c **** 
 6378              		.loc 1 7910 17 view .LVU1950
7910:FreeRTOS/Src/tasks.c **** 
 6379              		.loc 1 7910 17 view .LVU1951
 6380 00a4 F36A     		ldr	r3, [r6, #44]
 6381              	.LVL496:
7910:FreeRTOS/Src/tasks.c **** 
 6382              		.loc 1 7910 17 is_stmt 0 view .LVU1952
 6383 00a6 0122     		movs	r2, #1
 6384 00a8 9A40     		lsls	r2, r2, r3
 6385 00aa 1A48     		ldr	r0, .L443
 6386 00ac 0468     		ldr	r4, [r0]
 6387 00ae 2243     		orrs	r2, r2, r4
 6388 00b0 0260     		str	r2, [r0]
7910:FreeRTOS/Src/tasks.c **** 
 6389              		.loc 1 7910 17 is_stmt 1 view .LVU1953
 6390              	.LBB126:
7910:FreeRTOS/Src/tasks.c **** 
 6391              		.loc 1 7910 17 view .LVU1954
 6392 00b2 194A     		ldr	r2, .L443+4
 6393 00b4 03EB8303 		add	r3, r3, r3, lsl #2
 6394 00b8 02EB8303 		add	r3, r2, r3, lsl #2
 6395 00bc 5B68     		ldr	r3, [r3, #4]
 6396              	.LVL497:
7910:FreeRTOS/Src/tasks.c **** 
 6397              		.loc 1 7910 17 view .LVU1955
7910:FreeRTOS/Src/tasks.c **** 
 6398              		.loc 1 7910 17 view .LVU1956
7910:FreeRTOS/Src/tasks.c **** 
 6399              		.loc 1 7910 17 view .LVU1957
 6400 00be B360     		str	r3, [r6, #8]
7910:FreeRTOS/Src/tasks.c **** 
 6401              		.loc 1 7910 17 view .LVU1958
 6402 00c0 9868     		ldr	r0, [r3, #8]
 6403 00c2 F060     		str	r0, [r6, #12]
7910:FreeRTOS/Src/tasks.c **** 
 6404              		.loc 1 7910 17 view .LVU1959
 6405 00c4 4160     		str	r1, [r0, #4]
7910:FreeRTOS/Src/tasks.c **** 
 6406              		.loc 1 7910 17 view .LVU1960
 6407 00c6 9960     		str	r1, [r3, #8]
7910:FreeRTOS/Src/tasks.c **** 
 6408              		.loc 1 7910 17 view .LVU1961
 6409 00c8 F36A     		ldr	r3, [r6, #44]
 6410              	.LVL498:
7910:FreeRTOS/Src/tasks.c **** 
 6411              		.loc 1 7910 17 is_stmt 0 view .LVU1962
 6412 00ca 03EB8301 		add	r1, r3, r3, lsl #2
 6413 00ce 02EB8100 		add	r0, r2, r1, lsl #2
 6414 00d2 7061     		str	r0, [r6, #20]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 299


7910:FreeRTOS/Src/tasks.c **** 
 6415              		.loc 1 7910 17 is_stmt 1 view .LVU1963
 6416 00d4 52F82110 		ldr	r1, [r2, r1, lsl #2]
 6417 00d8 0131     		adds	r1, r1, #1
 6418 00da 03EB8303 		add	r3, r3, r3, lsl #2
 6419 00de 42F82310 		str	r1, [r2, r3, lsl #2]
 6420              	.LBE126:
7910:FreeRTOS/Src/tasks.c **** 
 6421              		.loc 1 7910 17 view .LVU1964
7910:FreeRTOS/Src/tasks.c **** 
 6422              		.loc 1 7910 17 view .LVU1965
7910:FreeRTOS/Src/tasks.c **** 
 6423              		.loc 1 7910 17 view .LVU1966
7913:FreeRTOS/Src/tasks.c **** 
 6424              		.loc 1 7913 94 view .LVU1967
7933:FreeRTOS/Src/tasks.c ****             }
 6425              		.loc 1 7933 17 view .LVU1968
7933:FreeRTOS/Src/tasks.c ****             }
 6426              		.loc 1 7933 17 view .LVU1969
 6427 00e2 0E4B     		ldr	r3, .L443+8
 6428 00e4 1B68     		ldr	r3, [r3]
 6429 00e6 DA6A     		ldr	r2, [r3, #44]
 6430 00e8 F36A     		ldr	r3, [r6, #44]
 6431 00ea 9A42     		cmp	r2, r3
 6432 00ec 10D2     		bcs	.L438
7933:FreeRTOS/Src/tasks.c ****             }
 6433              		.loc 1 7933 17 discriminator 1 view .LVU1970
 6434 00ee 4FF0E023 		mov	r3, #-536813568
 6435 00f2 4FF08052 		mov	r2, #268435456
 6436 00f6 C3F8042D 		str	r2, [r3, #3332]
 6437              	.LVL499:
7933:FreeRTOS/Src/tasks.c ****             }
 6438              		.loc 1 7933 17 view .LVU1971
7933:FreeRTOS/Src/tasks.c ****             }
 6439              		.loc 1 7933 17 is_stmt 0 discriminator 1 view .LVU1972
 6440              		.syntax unified
 6441              	@ 7933 "FreeRTOS/Src/tasks.c" 1
 6442 00fa BFF34F8F 		dsb
 6443              	@ 0 "" 2
7933:FreeRTOS/Src/tasks.c ****             }
 6444              		.loc 1 7933 17 is_stmt 1 view .LVU1973
7933:FreeRTOS/Src/tasks.c ****             }
 6445              		.loc 1 7933 17 is_stmt 0 discriminator 1 view .LVU1974
 6446              	@ 7933 "FreeRTOS/Src/tasks.c" 1
 6447 00fe BFF36F8F 		isb
 6448              	@ 0 "" 2
7933:FreeRTOS/Src/tasks.c ****             }
 6449              		.loc 1 7933 17 is_stmt 1 view .LVU1975
 6450              		.thumb
 6451              		.syntax unified
 6452 0102 0124     		movs	r4, #1
 6453 0104 A7E7     		b	.L434
 6454              	.LVL500:
 6455              	.L442:
 6456              	.LBB127:
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6457              		.loc 1 7909 17 discriminator 1 view .LVU1976
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 300


 6458 0106 F268     		ldr	r2, [r6, #12]
 6459 0108 5A60     		str	r2, [r3, #4]
 6460 010a C6E7     		b	.L435
 6461              	.LVL501:
 6462              	.L436:
7909:FreeRTOS/Src/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6463              		.loc 1 7909 17 is_stmt 0 discriminator 1 view .LVU1977
 6464              	.LBE127:
7882:FreeRTOS/Src/tasks.c ****                     }
 6465              		.loc 1 7882 33 view .LVU1978
 6466 010c 0024     		movs	r4, #0
 6467              	.LVL502:
7882:FreeRTOS/Src/tasks.c ****                     }
 6468              		.loc 1 7882 33 view .LVU1979
 6469 010e A2E7     		b	.L434
 6470              	.LVL503:
 6471              	.L438:
7882:FreeRTOS/Src/tasks.c ****                     }
 6472              		.loc 1 7882 33 view .LVU1980
 6473 0110 0124     		movs	r4, #1
 6474 0112 A0E7     		b	.L434
 6475              	.L444:
 6476              		.align	2
 6477              	.L443:
 6478 0114 00000000 		.word	uxTopReadyPriority
 6479 0118 00000000 		.word	pxReadyTasksLists
 6480 011c 00000000 		.word	pxCurrentTCB
 6481              		.cfi_endproc
 6482              	.LFE180:
 6484              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6485              		.align	1
 6486              		.global	xTaskGenericNotifyFromISR
 6487              		.syntax unified
 6488              		.thumb
 6489              		.thumb_func
 6491              	xTaskGenericNotifyFromISR:
 6492              	.LVL504:
 6493              	.LFB181:
7958:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 6494              		.loc 1 7958 5 is_stmt 1 view -0
 6495              		.cfi_startproc
 6496              		@ args = 8, pretend = 0, frame = 0
 6497              		@ frame_needed = 0, uses_anonymous_args = 0
7958:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 6498              		.loc 1 7958 5 is_stmt 0 view .LVU1982
 6499 0000 30B5     		push	{r4, r5, lr}
 6500              	.LCFI56:
 6501              		.cfi_def_cfa_offset 12
 6502              		.cfi_offset 4, -12
 6503              		.cfi_offset 5, -8
 6504              		.cfi_offset 14, -4
 6505 0002 039C     		ldr	r4, [sp, #12]
7959:FreeRTOS/Src/tasks.c ****         uint8_t ucOriginalNotifyState;
 6506              		.loc 1 7959 9 is_stmt 1 view .LVU1983
7960:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn = pdPASS;
 6507              		.loc 1 7960 9 view .LVU1984
7961:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 301


 6508              		.loc 1 7961 9 view .LVU1985
 6509              	.LVL505:
7962:FreeRTOS/Src/tasks.c **** 
 6510              		.loc 1 7962 9 view .LVU1986
7964:FreeRTOS/Src/tasks.c **** 
 6511              		.loc 1 7964 154 view .LVU1987
7966:FreeRTOS/Src/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6512              		.loc 1 7966 38 view .LVU1988
7967:FreeRTOS/Src/tasks.c **** 
 6513              		.loc 1 7967 80 view .LVU1989
7985:FreeRTOS/Src/tasks.c **** 
 6514              		.loc 1 7985 51 view .LVU1990
7987:FreeRTOS/Src/tasks.c **** 
 6515              		.loc 1 7987 9 view .LVU1991
7992:FreeRTOS/Src/tasks.c ****         {
 6516              		.loc 1 7992 9 view .LVU1992
 6517              	.LBB128:
 6518              	.LBI128:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6519              		.loc 2 229 34 view .LVU1993
 6520              	.LBB129:
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6521              		.loc 2 231 5 view .LVU1994
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6522              		.loc 2 233 5 view .LVU1995
 6523              		.syntax unified
 6524              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6525 0004 EFF3118C 		   mrs ip, basepri                                         
 6526 0008 4FF05005 	   mov r5, #80                                              
 6527 000c 85F31188 	   msr basepri, r5                                         
 6528 0010 BFF36F8F 	   isb                                                     
 6529 0014 BFF34F8F 	   dsb                                                     
 6530              	
 6531              	@ 0 "" 2
 6532              	.LVL506:
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 6533              		.loc 2 245 5 view .LVU1996
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 6534              		.loc 2 245 5 is_stmt 0 view .LVU1997
 6535              		.thumb
 6536              		.syntax unified
 6537              	.LBE129:
 6538              	.LBE128:
7994:FreeRTOS/Src/tasks.c ****             {
 6539              		.loc 1 7994 13 is_stmt 1 view .LVU1998
7994:FreeRTOS/Src/tasks.c ****             {
 6540              		.loc 1 7994 15 is_stmt 0 view .LVU1999
 6541 0018 34B1     		cbz	r4, .L446
7996:FreeRTOS/Src/tasks.c ****             }
 6542              		.loc 1 7996 17 is_stmt 1 view .LVU2000
7996:FreeRTOS/Src/tasks.c ****             }
 6543              		.loc 1 7996 71 is_stmt 0 view .LVU2001
 6544 001a 01F1100E 		add	lr, r1, #16
 6545 001e 00EB8E0E 		add	lr, r0, lr, lsl #2
 6546 0022 DEF80450 		ldr	r5, [lr, #4]
7996:FreeRTOS/Src/tasks.c ****             }
 6547              		.loc 1 7996 47 view .LVU2002
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 302


 6548 0026 2560     		str	r5, [r4]
 6549              	.L446:
7999:FreeRTOS/Src/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6550              		.loc 1 7999 13 is_stmt 1 view .LVU2003
7999:FreeRTOS/Src/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6551              		.loc 1 7999 35 is_stmt 0 view .LVU2004
 6552 0028 00EB010E 		add	lr, r0, r1
 6553 002c 9EF84840 		ldrb	r4, [lr, #72]	@ zero_extendqisi2
 6554 0030 E5B2     		uxtb	r5, r4
 6555              	.LVL507:
8000:FreeRTOS/Src/tasks.c **** 
 6556              		.loc 1 8000 13 is_stmt 1 view .LVU2005
8000:FreeRTOS/Src/tasks.c **** 
 6557              		.loc 1 8000 53 is_stmt 0 view .LVU2006
 6558 0032 0224     		movs	r4, #2
 6559 0034 8EF84840 		strb	r4, [lr, #72]
8002:FreeRTOS/Src/tasks.c ****             {
 6560              		.loc 1 8002 13 is_stmt 1 view .LVU2007
 6561 0038 013B     		subs	r3, r3, #1
 6562              	.LVL508:
8002:FreeRTOS/Src/tasks.c ****             {
 6563              		.loc 1 8002 13 is_stmt 0 view .LVU2008
 6564 003a 032B     		cmp	r3, #3
 6565 003c 09D8     		bhi	.L447
 6566 003e DFE803F0 		tbb	[pc, r3]
 6567              	.L449:
 6568 0042 02       		.byte	(.L452-.L449)/2
 6569 0043 0E       		.byte	(.L451-.L449)/2
 6570 0044 15       		.byte	(.L450-.L449)/2
 6571 0045 1A       		.byte	(.L448-.L449)/2
 6572              		.p2align 1
 6573              	.L452:
8005:FreeRTOS/Src/tasks.c ****                     break;
 6574              		.loc 1 8005 21 is_stmt 1 view .LVU2009
8005:FreeRTOS/Src/tasks.c ****                     break;
 6575              		.loc 1 8005 43 is_stmt 0 view .LVU2010
 6576 0046 1031     		adds	r1, r1, #16
 6577              	.LVL509:
8005:FreeRTOS/Src/tasks.c ****                     break;
 6578              		.loc 1 8005 43 view .LVU2011
 6579 0048 00EB8101 		add	r1, r0, r1, lsl #2
 6580              	.LVL510:
8005:FreeRTOS/Src/tasks.c ****                     break;
 6581              		.loc 1 8005 43 view .LVU2012
 6582 004c 4B68     		ldr	r3, [r1, #4]
8005:FreeRTOS/Src/tasks.c ****                     break;
 6583              		.loc 1 8005 63 view .LVU2013
 6584 004e 1343     		orrs	r3, r3, r2
 6585 0050 4B60     		str	r3, [r1, #4]
8006:FreeRTOS/Src/tasks.c **** 
 6586              		.loc 1 8006 21 is_stmt 1 view .LVU2014
 6587              	.L447:
8045:FreeRTOS/Src/tasks.c **** 
 6588              		.loc 1 8045 57 view .LVU2015
8049:FreeRTOS/Src/tasks.c ****             {
 6589              		.loc 1 8049 13 view .LVU2016
8049:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 303


 6590              		.loc 1 8049 15 is_stmt 0 view .LVU2017
 6591 0052 012D     		cmp	r5, #1
 6592 0054 16D0     		beq	.L463
 6593 0056 0120     		movs	r0, #1
 6594              	.LVL511:
 6595              	.L453:
8084:FreeRTOS/Src/tasks.c ****                     }
 6596              		.loc 1 8084 49 is_stmt 1 view .LVU2018
8106:FreeRTOS/Src/tasks.c **** 
 6597              		.loc 1 8106 9 view .LVU2019
 6598              	.LBB130:
 6599              	.LBI130:
 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6600              		.loc 2 249 30 view .LVU2020
 6601              	.LBB131:
 6602              		.loc 2 251 5 view .LVU2021
 6603              		.syntax unified
 6604              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6605 0058 8CF31188 		   msr basepri, ip 
 6606              	@ 0 "" 2
 6607              		.thumb
 6608              		.syntax unified
 6609              	.LBE131:
 6610              	.LBE130:
8108:FreeRTOS/Src/tasks.c **** 
 6611              		.loc 1 8108 57 view .LVU2022
8110:FreeRTOS/Src/tasks.c ****     }
 6612              		.loc 1 8110 9 view .LVU2023
8111:FreeRTOS/Src/tasks.c **** 
 6613              		.loc 1 8111 5 is_stmt 0 view .LVU2024
 6614 005c 30BD     		pop	{r4, r5, pc}
 6615              	.LVL512:
 6616              	.L451:
8009:FreeRTOS/Src/tasks.c ****                     break;
 6617              		.loc 1 8009 21 is_stmt 1 view .LVU2025
8009:FreeRTOS/Src/tasks.c ****                     break;
 6618              		.loc 1 8009 45 is_stmt 0 view .LVU2026
 6619 005e 1031     		adds	r1, r1, #16
 6620              	.LVL513:
8009:FreeRTOS/Src/tasks.c ****                     break;
 6621              		.loc 1 8009 45 view .LVU2027
 6622 0060 00EB8101 		add	r1, r0, r1, lsl #2
 6623              	.LVL514:
8009:FreeRTOS/Src/tasks.c ****                     break;
 6624              		.loc 1 8009 45 view .LVU2028
 6625 0064 4B68     		ldr	r3, [r1, #4]
8009:FreeRTOS/Src/tasks.c ****                     break;
 6626              		.loc 1 8009 66 view .LVU2029
 6627 0066 0133     		adds	r3, r3, #1
 6628 0068 4B60     		str	r3, [r1, #4]
8010:FreeRTOS/Src/tasks.c **** 
 6629              		.loc 1 8010 21 is_stmt 1 view .LVU2030
 6630 006a F2E7     		b	.L447
 6631              	.LVL515:
 6632              	.L450:
8013:FreeRTOS/Src/tasks.c ****                     break;
 6633              		.loc 1 8013 21 view .LVU2031
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 304


8013:FreeRTOS/Src/tasks.c ****                     break;
 6634              		.loc 1 8013 63 is_stmt 0 view .LVU2032
 6635 006c 1031     		adds	r1, r1, #16
 6636              	.LVL516:
8013:FreeRTOS/Src/tasks.c ****                     break;
 6637              		.loc 1 8013 63 view .LVU2033
 6638 006e 00EB8101 		add	r1, r0, r1, lsl #2
 6639              	.LVL517:
8013:FreeRTOS/Src/tasks.c ****                     break;
 6640              		.loc 1 8013 63 view .LVU2034
 6641 0072 4A60     		str	r2, [r1, #4]
8014:FreeRTOS/Src/tasks.c **** 
 6642              		.loc 1 8014 21 is_stmt 1 view .LVU2035
 6643 0074 EDE7     		b	.L447
 6644              	.LVL518:
 6645              	.L448:
8018:FreeRTOS/Src/tasks.c ****                     {
 6646              		.loc 1 8018 21 view .LVU2036
8018:FreeRTOS/Src/tasks.c ****                     {
 6647              		.loc 1 8018 23 is_stmt 0 view .LVU2037
 6648 0076 022D     		cmp	r5, #2
 6649 0078 56D0     		beq	.L458
8020:FreeRTOS/Src/tasks.c ****                     }
 6650              		.loc 1 8020 25 is_stmt 1 view .LVU2038
8020:FreeRTOS/Src/tasks.c ****                     }
 6651              		.loc 1 8020 67 is_stmt 0 view .LVU2039
 6652 007a 1031     		adds	r1, r1, #16
 6653              	.LVL519:
8020:FreeRTOS/Src/tasks.c ****                     }
 6654              		.loc 1 8020 67 view .LVU2040
 6655 007c 00EB8101 		add	r1, r0, r1, lsl #2
 6656              	.LVL520:
8020:FreeRTOS/Src/tasks.c ****                     }
 6657              		.loc 1 8020 67 view .LVU2041
 6658 0080 4A60     		str	r2, [r1, #4]
 6659 0082 E6E7     		b	.L447
 6660              	.L463:
8052:FreeRTOS/Src/tasks.c **** 
 6661              		.loc 1 8052 94 is_stmt 1 view .LVU2042
8054:FreeRTOS/Src/tasks.c ****                 {
 6662              		.loc 1 8054 17 view .LVU2043
8054:FreeRTOS/Src/tasks.c ****                 {
 6663              		.loc 1 8054 42 is_stmt 0 view .LVU2044
 6664 0084 2A4B     		ldr	r3, .L465
 6665 0086 1B68     		ldr	r3, [r3]
8054:FreeRTOS/Src/tasks.c ****                 {
 6666              		.loc 1 8054 19 view .LVU2045
 6667 0088 002B     		cmp	r3, #0
 6668 008a 3FD1     		bne	.L454
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6669              		.loc 1 8056 21 is_stmt 1 view .LVU2046
 6670              	.LBB132:
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6671              		.loc 1 8056 21 view .LVU2047
 6672 008c 4369     		ldr	r3, [r0, #20]
 6673              	.LVL521:
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 305


 6674              		.loc 1 8056 21 view .LVU2048
 6675 008e 8168     		ldr	r1, [r0, #8]
 6676 0090 C268     		ldr	r2, [r0, #12]
 6677              	.LVL522:
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6678              		.loc 1 8056 21 is_stmt 0 view .LVU2049
 6679 0092 8A60     		str	r2, [r1, #8]
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6680              		.loc 1 8056 21 is_stmt 1 view .LVU2050
 6681 0094 8168     		ldr	r1, [r0, #8]
 6682 0096 5160     		str	r1, [r2, #4]
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6683              		.loc 1 8056 21 view .LVU2051
 6684 0098 5A68     		ldr	r2, [r3, #4]
 6685 009a 011D     		adds	r1, r0, #4
 6686 009c 8A42     		cmp	r2, r1
 6687 009e 32D0     		beq	.L464
 6688              	.L455:
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6689              		.loc 1 8056 21 discriminator 3 view .LVU2052
 6690 00a0 0022     		movs	r2, #0
 6691 00a2 4261     		str	r2, [r0, #20]
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6692              		.loc 1 8056 21 view .LVU2053
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6693              		.loc 1 8056 21 is_stmt 0 discriminator 3 view .LVU2054
 6694 00a4 1A68     		ldr	r2, [r3]
 6695 00a6 013A     		subs	r2, r2, #1
 6696 00a8 1A60     		str	r2, [r3]
 6697              	.LBE132:
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6698              		.loc 1 8056 21 is_stmt 1 view .LVU2055
8057:FreeRTOS/Src/tasks.c ****                 }
 6699              		.loc 1 8057 21 view .LVU2056
8057:FreeRTOS/Src/tasks.c ****                 }
 6700              		.loc 1 8057 21 view .LVU2057
8057:FreeRTOS/Src/tasks.c ****                 }
 6701              		.loc 1 8057 21 view .LVU2058
 6702 00aa C36A     		ldr	r3, [r0, #44]
 6703              	.LVL523:
8057:FreeRTOS/Src/tasks.c ****                 }
 6704              		.loc 1 8057 21 is_stmt 0 view .LVU2059
 6705 00ac 0122     		movs	r2, #1
 6706 00ae 9A40     		lsls	r2, r2, r3
 6707 00b0 204C     		ldr	r4, .L465+4
 6708 00b2 2568     		ldr	r5, [r4]
 6709              	.LVL524:
8057:FreeRTOS/Src/tasks.c ****                 }
 6710              		.loc 1 8057 21 view .LVU2060
 6711 00b4 2A43     		orrs	r2, r2, r5
 6712 00b6 2260     		str	r2, [r4]
8057:FreeRTOS/Src/tasks.c ****                 }
 6713              		.loc 1 8057 21 is_stmt 1 view .LVU2061
 6714              	.LBB133:
8057:FreeRTOS/Src/tasks.c ****                 }
 6715              		.loc 1 8057 21 view .LVU2062
 6716 00b8 1F4A     		ldr	r2, .L465+8
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 306


 6717 00ba 03EB8303 		add	r3, r3, r3, lsl #2
 6718 00be 02EB8303 		add	r3, r2, r3, lsl #2
 6719 00c2 5B68     		ldr	r3, [r3, #4]
 6720              	.LVL525:
8057:FreeRTOS/Src/tasks.c ****                 }
 6721              		.loc 1 8057 21 view .LVU2063
8057:FreeRTOS/Src/tasks.c ****                 }
 6722              		.loc 1 8057 21 view .LVU2064
8057:FreeRTOS/Src/tasks.c ****                 }
 6723              		.loc 1 8057 21 view .LVU2065
 6724 00c4 8360     		str	r3, [r0, #8]
8057:FreeRTOS/Src/tasks.c ****                 }
 6725              		.loc 1 8057 21 view .LVU2066
 6726 00c6 9C68     		ldr	r4, [r3, #8]
 6727 00c8 C460     		str	r4, [r0, #12]
8057:FreeRTOS/Src/tasks.c ****                 }
 6728              		.loc 1 8057 21 view .LVU2067
 6729 00ca 6160     		str	r1, [r4, #4]
8057:FreeRTOS/Src/tasks.c ****                 }
 6730              		.loc 1 8057 21 view .LVU2068
 6731 00cc 9960     		str	r1, [r3, #8]
8057:FreeRTOS/Src/tasks.c ****                 }
 6732              		.loc 1 8057 21 view .LVU2069
 6733 00ce C36A     		ldr	r3, [r0, #44]
 6734              	.LVL526:
8057:FreeRTOS/Src/tasks.c ****                 }
 6735              		.loc 1 8057 21 is_stmt 0 view .LVU2070
 6736 00d0 03EB8301 		add	r1, r3, r3, lsl #2
 6737 00d4 02EB8104 		add	r4, r2, r1, lsl #2
 6738 00d8 4461     		str	r4, [r0, #20]
8057:FreeRTOS/Src/tasks.c ****                 }
 6739              		.loc 1 8057 21 is_stmt 1 view .LVU2071
 6740 00da 52F82110 		ldr	r1, [r2, r1, lsl #2]
 6741 00de 0131     		adds	r1, r1, #1
 6742 00e0 03EB8303 		add	r3, r3, r3, lsl #2
 6743 00e4 42F82310 		str	r1, [r2, r3, lsl #2]
 6744              	.LBE133:
8057:FreeRTOS/Src/tasks.c ****                 }
 6745              		.loc 1 8057 21 view .LVU2072
8057:FreeRTOS/Src/tasks.c ****                 }
 6746              		.loc 1 8057 21 view .LVU2073
8057:FreeRTOS/Src/tasks.c ****                 }
 6747              		.loc 1 8057 21 view .LVU2074
 6748              	.LVL527:
 6749              	.L456:
8063:FreeRTOS/Src/tasks.c ****                 }
 6750              		.loc 1 8063 21 discriminator 1 view .LVU2075
8068:FreeRTOS/Src/tasks.c ****                     {
 6751              		.loc 1 8068 21 view .LVU2076
8068:FreeRTOS/Src/tasks.c ****                     {
 6752              		.loc 1 8068 30 is_stmt 0 view .LVU2077
 6753 00e8 C26A     		ldr	r2, [r0, #44]
8068:FreeRTOS/Src/tasks.c ****                     {
 6754              		.loc 1 8068 57 view .LVU2078
 6755 00ea 144B     		ldr	r3, .L465+12
 6756 00ec 1B68     		ldr	r3, [r3]
 6757 00ee DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 307


8068:FreeRTOS/Src/tasks.c ****                     {
 6758              		.loc 1 8068 23 view .LVU2079
 6759 00f0 9A42     		cmp	r2, r3
 6760 00f2 1BD9     		bls	.L460
8072:FreeRTOS/Src/tasks.c ****                         {
 6761              		.loc 1 8072 25 is_stmt 1 view .LVU2080
8072:FreeRTOS/Src/tasks.c ****                         {
 6762              		.loc 1 8072 27 is_stmt 0 view .LVU2081
 6763 00f4 049B     		ldr	r3, [sp, #16]
 6764 00f6 13B1     		cbz	r3, .L457
8074:FreeRTOS/Src/tasks.c ****                         }
 6765              		.loc 1 8074 29 is_stmt 1 view .LVU2082
8074:FreeRTOS/Src/tasks.c ****                         }
 6766              		.loc 1 8074 56 is_stmt 0 view .LVU2083
 6767 00f8 0123     		movs	r3, #1
 6768 00fa 049A     		ldr	r2, [sp, #16]
 6769 00fc 1360     		str	r3, [r2]
 6770              	.L457:
8080:FreeRTOS/Src/tasks.c ****                     }
 6771              		.loc 1 8080 25 is_stmt 1 view .LVU2084
8080:FreeRTOS/Src/tasks.c ****                     }
 6772              		.loc 1 8080 45 is_stmt 0 view .LVU2085
 6773 00fe 0120     		movs	r0, #1
 6774              	.LVL528:
8080:FreeRTOS/Src/tasks.c ****                     }
 6775              		.loc 1 8080 45 view .LVU2086
 6776 0100 0F4B     		ldr	r3, .L465+16
 6777 0102 1860     		str	r0, [r3]
 6778 0104 A8E7     		b	.L453
 6779              	.LVL529:
 6780              	.L464:
 6781              	.LBB134:
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6782              		.loc 1 8056 21 is_stmt 1 discriminator 1 view .LVU2087
 6783 0106 C268     		ldr	r2, [r0, #12]
 6784 0108 5A60     		str	r2, [r3, #4]
 6785 010a C9E7     		b	.L455
 6786              	.LVL530:
 6787              	.L454:
8056:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6788              		.loc 1 8056 21 is_stmt 0 discriminator 1 view .LVU2088
 6789              	.LBE134:
8063:FreeRTOS/Src/tasks.c ****                 }
 6790              		.loc 1 8063 21 is_stmt 1 view .LVU2089
 6791              	.LBB135:
8063:FreeRTOS/Src/tasks.c ****                 }
 6792              		.loc 1 8063 21 view .LVU2090
 6793 010c 0D4B     		ldr	r3, .L465+20
 6794 010e 5A68     		ldr	r2, [r3, #4]
 6795              	.LVL531:
8063:FreeRTOS/Src/tasks.c ****                 }
 6796              		.loc 1 8063 21 view .LVU2091
8063:FreeRTOS/Src/tasks.c ****                 }
 6797              		.loc 1 8063 21 view .LVU2092
8063:FreeRTOS/Src/tasks.c ****                 }
 6798              		.loc 1 8063 21 view .LVU2093
 6799 0110 C261     		str	r2, [r0, #28]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 308


8063:FreeRTOS/Src/tasks.c ****                 }
 6800              		.loc 1 8063 21 view .LVU2094
 6801 0112 9468     		ldr	r4, [r2, #8]
 6802 0114 0462     		str	r4, [r0, #32]
8063:FreeRTOS/Src/tasks.c ****                 }
 6803              		.loc 1 8063 21 view .LVU2095
 6804 0116 00F11801 		add	r1, r0, #24
 6805 011a 6160     		str	r1, [r4, #4]
8063:FreeRTOS/Src/tasks.c ****                 }
 6806              		.loc 1 8063 21 view .LVU2096
 6807 011c 9160     		str	r1, [r2, #8]
8063:FreeRTOS/Src/tasks.c ****                 }
 6808              		.loc 1 8063 21 view .LVU2097
 6809 011e 8362     		str	r3, [r0, #40]
8063:FreeRTOS/Src/tasks.c ****                 }
 6810              		.loc 1 8063 21 view .LVU2098
 6811 0120 1A68     		ldr	r2, [r3]
 6812              	.LVL532:
8063:FreeRTOS/Src/tasks.c ****                 }
 6813              		.loc 1 8063 21 is_stmt 0 view .LVU2099
 6814 0122 0132     		adds	r2, r2, #1
 6815 0124 1A60     		str	r2, [r3]
 6816 0126 DFE7     		b	.L456
 6817              	.LVL533:
 6818              	.L458:
8063:FreeRTOS/Src/tasks.c ****                 }
 6819              		.loc 1 8063 21 view .LVU2100
 6820              	.LBE135:
8025:FreeRTOS/Src/tasks.c ****                     }
 6821              		.loc 1 8025 33 view .LVU2101
 6822 0128 0020     		movs	r0, #0
 6823              	.LVL534:
8025:FreeRTOS/Src/tasks.c ****                     }
 6824              		.loc 1 8025 33 view .LVU2102
 6825 012a 95E7     		b	.L453
 6826              	.LVL535:
 6827              	.L460:
8025:FreeRTOS/Src/tasks.c ****                     }
 6828              		.loc 1 8025 33 view .LVU2103
 6829 012c 0120     		movs	r0, #1
 6830              	.LVL536:
8025:FreeRTOS/Src/tasks.c ****                     }
 6831              		.loc 1 8025 33 view .LVU2104
 6832 012e 93E7     		b	.L453
 6833              	.L466:
 6834              		.align	2
 6835              	.L465:
 6836 0130 00000000 		.word	uxSchedulerSuspended
 6837 0134 00000000 		.word	uxTopReadyPriority
 6838 0138 00000000 		.word	pxReadyTasksLists
 6839 013c 00000000 		.word	pxCurrentTCB
 6840 0140 00000000 		.word	xYieldPendings
 6841 0144 00000000 		.word	xPendingReadyList
 6842              		.cfi_endproc
 6843              	.LFE181:
 6845              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 6846              		.align	1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 309


 6847              		.global	vTaskGenericNotifyGiveFromISR
 6848              		.syntax unified
 6849              		.thumb
 6850              		.thumb_func
 6852              	vTaskGenericNotifyGiveFromISR:
 6853              	.LVL537:
 6854              	.LFB182:
8121:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 6855              		.loc 1 8121 5 is_stmt 1 view -0
 6856              		.cfi_startproc
 6857              		@ args = 0, pretend = 0, frame = 0
 6858              		@ frame_needed = 0, uses_anonymous_args = 0
8121:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 6859              		.loc 1 8121 5 is_stmt 0 view .LVU2106
 6860 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6861              	.LCFI57:
 6862              		.cfi_def_cfa_offset 20
 6863              		.cfi_offset 4, -20
 6864              		.cfi_offset 5, -16
 6865              		.cfi_offset 6, -12
 6866              		.cfi_offset 7, -8
 6867              		.cfi_offset 14, -4
8122:FreeRTOS/Src/tasks.c ****         uint8_t ucOriginalNotifyState;
 6868              		.loc 1 8122 9 is_stmt 1 view .LVU2107
8123:FreeRTOS/Src/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6869              		.loc 1 8123 9 view .LVU2108
8124:FreeRTOS/Src/tasks.c **** 
 6870              		.loc 1 8124 9 view .LVU2109
8126:FreeRTOS/Src/tasks.c **** 
 6871              		.loc 1 8126 110 view .LVU2110
8128:FreeRTOS/Src/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6872              		.loc 1 8128 38 view .LVU2111
8129:FreeRTOS/Src/tasks.c **** 
 6873              		.loc 1 8129 80 view .LVU2112
8147:FreeRTOS/Src/tasks.c **** 
 6874              		.loc 1 8147 51 view .LVU2113
8149:FreeRTOS/Src/tasks.c **** 
 6875              		.loc 1 8149 9 view .LVU2114
 6876              	.LVL538:
8154:FreeRTOS/Src/tasks.c ****         {
 6877              		.loc 1 8154 9 view .LVU2115
 6878              	.LBB136:
 6879              	.LBI136:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6880              		.loc 2 229 34 view .LVU2116
 6881              	.LBB137:
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6882              		.loc 2 231 5 view .LVU2117
 233:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6883              		.loc 2 233 5 view .LVU2118
 6884              		.syntax unified
 6885              	@ 233 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6886 0002 EFF31183 		   mrs r3, basepri                                         
 6887 0006 4FF05004 	   mov r4, #80                                              
 6888 000a 84F31188 	   msr basepri, r4                                         
 6889 000e BFF36F8F 	   isb                                                     
 6890 0012 BFF34F8F 	   dsb                                                     
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 310


 6891              	
 6892              	@ 0 "" 2
 6893              	.LVL539:
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 6894              		.loc 2 245 5 view .LVU2119
 245:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 6895              		.loc 2 245 5 is_stmt 0 view .LVU2120
 6896              		.thumb
 6897              		.syntax unified
 6898              	.LBE137:
 6899              	.LBE136:
8156:FreeRTOS/Src/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6900              		.loc 1 8156 13 is_stmt 1 view .LVU2121
8156:FreeRTOS/Src/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6901              		.loc 1 8156 35 is_stmt 0 view .LVU2122
 6902 0016 4418     		adds	r4, r0, r1
 6903 0018 94F848C0 		ldrb	ip, [r4, #72]	@ zero_extendqisi2
 6904              	.LVL540:
8157:FreeRTOS/Src/tasks.c **** 
 6905              		.loc 1 8157 13 is_stmt 1 view .LVU2123
8157:FreeRTOS/Src/tasks.c **** 
 6906              		.loc 1 8157 53 is_stmt 0 view .LVU2124
 6907 001c 4FF0020E 		mov	lr, #2
 6908 0020 84F848E0 		strb	lr, [r4, #72]
8161:FreeRTOS/Src/tasks.c **** 
 6909              		.loc 1 8161 13 is_stmt 1 view .LVU2125
8161:FreeRTOS/Src/tasks.c **** 
 6910              		.loc 1 8161 37 is_stmt 0 view .LVU2126
 6911 0024 1031     		adds	r1, r1, #16
 6912              	.LVL541:
8161:FreeRTOS/Src/tasks.c **** 
 6913              		.loc 1 8161 37 view .LVU2127
 6914 0026 00EB8101 		add	r1, r0, r1, lsl #2
 6915              	.LVL542:
8161:FreeRTOS/Src/tasks.c **** 
 6916              		.loc 1 8161 37 view .LVU2128
 6917 002a 4C68     		ldr	r4, [r1, #4]
8161:FreeRTOS/Src/tasks.c **** 
 6918              		.loc 1 8161 58 view .LVU2129
 6919 002c 0134     		adds	r4, r4, #1
 6920 002e 4C60     		str	r4, [r1, #4]
8163:FreeRTOS/Src/tasks.c **** 
 6921              		.loc 1 8163 62 is_stmt 1 view .LVU2130
8167:FreeRTOS/Src/tasks.c ****             {
 6922              		.loc 1 8167 13 view .LVU2131
8167:FreeRTOS/Src/tasks.c ****             {
 6923              		.loc 1 8167 15 is_stmt 0 view .LVU2132
 6924 0030 BCF1010F 		cmp	ip, #1
 6925 0034 02D0     		beq	.L474
 6926              	.LVL543:
 6927              	.L468:
8202:FreeRTOS/Src/tasks.c ****                     }
 6928              		.loc 1 8202 49 is_stmt 1 view .LVU2133
8224:FreeRTOS/Src/tasks.c **** 
 6929              		.loc 1 8224 9 view .LVU2134
 6930              	.LBB138:
 6931              	.LBI138:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 311


 249:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6932              		.loc 2 249 30 view .LVU2135
 6933              	.LBB139:
 6934              		.loc 2 251 5 view .LVU2136
 6935              		.syntax unified
 6936              	@ 251 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6937 0036 83F31188 		   msr basepri, r3 
 6938              	@ 0 "" 2
 6939              		.thumb
 6940              		.syntax unified
 6941              	.LBE139:
 6942              	.LBE138:
8226:FreeRTOS/Src/tasks.c ****     }
 6943              		.loc 1 8226 52 view .LVU2137
8227:FreeRTOS/Src/tasks.c **** 
 6944              		.loc 1 8227 5 is_stmt 0 view .LVU2138
 6945 003a F0BD     		pop	{r4, r5, r6, r7, pc}
 6946              	.LVL544:
 6947              	.L474:
8170:FreeRTOS/Src/tasks.c **** 
 6948              		.loc 1 8170 94 is_stmt 1 view .LVU2139
8172:FreeRTOS/Src/tasks.c ****                 {
 6949              		.loc 1 8172 17 view .LVU2140
8172:FreeRTOS/Src/tasks.c ****                 {
 6950              		.loc 1 8172 42 is_stmt 0 view .LVU2141
 6951 003c 2749     		ldr	r1, .L476
 6952 003e 0968     		ldr	r1, [r1]
8172:FreeRTOS/Src/tasks.c ****                 {
 6953              		.loc 1 8172 19 view .LVU2142
 6954 0040 0029     		cmp	r1, #0
 6955 0042 3DD1     		bne	.L469
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6956              		.loc 1 8174 21 is_stmt 1 view .LVU2143
 6957              	.LBB140:
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6958              		.loc 1 8174 21 view .LVU2144
 6959 0044 4169     		ldr	r1, [r0, #20]
 6960              	.LVL545:
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6961              		.loc 1 8174 21 view .LVU2145
 6962 0046 8568     		ldr	r5, [r0, #8]
 6963 0048 C468     		ldr	r4, [r0, #12]
 6964 004a AC60     		str	r4, [r5, #8]
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6965              		.loc 1 8174 21 view .LVU2146
 6966 004c 8568     		ldr	r5, [r0, #8]
 6967 004e 6560     		str	r5, [r4, #4]
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6968              		.loc 1 8174 21 view .LVU2147
 6969 0050 4C68     		ldr	r4, [r1, #4]
 6970 0052 051D     		adds	r5, r0, #4
 6971 0054 AC42     		cmp	r4, r5
 6972 0056 30D0     		beq	.L475
 6973              	.L470:
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6974              		.loc 1 8174 21 discriminator 3 view .LVU2148
 6975 0058 0024     		movs	r4, #0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 312


 6976 005a 4461     		str	r4, [r0, #20]
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6977              		.loc 1 8174 21 view .LVU2149
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6978              		.loc 1 8174 21 is_stmt 0 discriminator 3 view .LVU2150
 6979 005c 0C68     		ldr	r4, [r1]
 6980 005e 013C     		subs	r4, r4, #1
 6981 0060 0C60     		str	r4, [r1]
 6982              	.LBE140:
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6983              		.loc 1 8174 21 is_stmt 1 view .LVU2151
8175:FreeRTOS/Src/tasks.c ****                 }
 6984              		.loc 1 8175 21 view .LVU2152
8175:FreeRTOS/Src/tasks.c ****                 }
 6985              		.loc 1 8175 21 view .LVU2153
8175:FreeRTOS/Src/tasks.c ****                 }
 6986              		.loc 1 8175 21 view .LVU2154
 6987 0062 C16A     		ldr	r1, [r0, #44]
 6988              	.LVL546:
8175:FreeRTOS/Src/tasks.c ****                 }
 6989              		.loc 1 8175 21 is_stmt 0 view .LVU2155
 6990 0064 0124     		movs	r4, #1
 6991 0066 8C40     		lsls	r4, r4, r1
 6992 0068 1D4E     		ldr	r6, .L476+4
 6993 006a 3768     		ldr	r7, [r6]
 6994 006c 3C43     		orrs	r4, r4, r7
 6995 006e 3460     		str	r4, [r6]
8175:FreeRTOS/Src/tasks.c ****                 }
 6996              		.loc 1 8175 21 is_stmt 1 view .LVU2156
 6997              	.LBB141:
8175:FreeRTOS/Src/tasks.c ****                 }
 6998              		.loc 1 8175 21 view .LVU2157
 6999 0070 1C4C     		ldr	r4, .L476+8
 7000 0072 01EB8101 		add	r1, r1, r1, lsl #2
 7001 0076 04EB8101 		add	r1, r4, r1, lsl #2
 7002 007a 4968     		ldr	r1, [r1, #4]
 7003              	.LVL547:
8175:FreeRTOS/Src/tasks.c ****                 }
 7004              		.loc 1 8175 21 view .LVU2158
8175:FreeRTOS/Src/tasks.c ****                 }
 7005              		.loc 1 8175 21 view .LVU2159
8175:FreeRTOS/Src/tasks.c ****                 }
 7006              		.loc 1 8175 21 view .LVU2160
 7007 007c 8160     		str	r1, [r0, #8]
8175:FreeRTOS/Src/tasks.c ****                 }
 7008              		.loc 1 8175 21 view .LVU2161
 7009 007e 8E68     		ldr	r6, [r1, #8]
 7010 0080 C660     		str	r6, [r0, #12]
8175:FreeRTOS/Src/tasks.c ****                 }
 7011              		.loc 1 8175 21 view .LVU2162
 7012 0082 7560     		str	r5, [r6, #4]
8175:FreeRTOS/Src/tasks.c ****                 }
 7013              		.loc 1 8175 21 view .LVU2163
 7014 0084 8D60     		str	r5, [r1, #8]
8175:FreeRTOS/Src/tasks.c ****                 }
 7015              		.loc 1 8175 21 view .LVU2164
 7016 0086 C16A     		ldr	r1, [r0, #44]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 313


 7017              	.LVL548:
8175:FreeRTOS/Src/tasks.c ****                 }
 7018              		.loc 1 8175 21 is_stmt 0 view .LVU2165
 7019 0088 01EB8105 		add	r5, r1, r1, lsl #2
 7020 008c 04EB8506 		add	r6, r4, r5, lsl #2
 7021 0090 4661     		str	r6, [r0, #20]
8175:FreeRTOS/Src/tasks.c ****                 }
 7022              		.loc 1 8175 21 is_stmt 1 view .LVU2166
 7023 0092 54F82550 		ldr	r5, [r4, r5, lsl #2]
 7024 0096 0135     		adds	r5, r5, #1
 7025 0098 01EB8101 		add	r1, r1, r1, lsl #2
 7026 009c 44F82150 		str	r5, [r4, r1, lsl #2]
 7027              	.LBE141:
8175:FreeRTOS/Src/tasks.c ****                 }
 7028              		.loc 1 8175 21 view .LVU2167
8175:FreeRTOS/Src/tasks.c ****                 }
 7029              		.loc 1 8175 21 view .LVU2168
8175:FreeRTOS/Src/tasks.c ****                 }
 7030              		.loc 1 8175 21 view .LVU2169
 7031              	.LVL549:
 7032              	.L471:
8181:FreeRTOS/Src/tasks.c ****                 }
 7033              		.loc 1 8181 21 discriminator 1 view .LVU2170
8186:FreeRTOS/Src/tasks.c ****                     {
 7034              		.loc 1 8186 21 view .LVU2171
8186:FreeRTOS/Src/tasks.c ****                     {
 7035              		.loc 1 8186 30 is_stmt 0 view .LVU2172
 7036 00a0 C06A     		ldr	r0, [r0, #44]
 7037              	.LVL550:
8186:FreeRTOS/Src/tasks.c ****                     {
 7038              		.loc 1 8186 57 view .LVU2173
 7039 00a2 1149     		ldr	r1, .L476+12
 7040 00a4 0968     		ldr	r1, [r1]
 7041 00a6 C96A     		ldr	r1, [r1, #44]
8186:FreeRTOS/Src/tasks.c ****                     {
 7042              		.loc 1 8186 23 view .LVU2174
 7043 00a8 8842     		cmp	r0, r1
 7044 00aa C4D9     		bls	.L468
8190:FreeRTOS/Src/tasks.c ****                         {
 7045              		.loc 1 8190 25 is_stmt 1 view .LVU2175
8190:FreeRTOS/Src/tasks.c ****                         {
 7046              		.loc 1 8190 27 is_stmt 0 view .LVU2176
 7047 00ac 0AB1     		cbz	r2, .L472
8192:FreeRTOS/Src/tasks.c ****                         }
 7048              		.loc 1 8192 29 is_stmt 1 view .LVU2177
8192:FreeRTOS/Src/tasks.c ****                         }
 7049              		.loc 1 8192 56 is_stmt 0 view .LVU2178
 7050 00ae 0121     		movs	r1, #1
 7051 00b0 1160     		str	r1, [r2]
 7052              	.L472:
8198:FreeRTOS/Src/tasks.c ****                     }
 7053              		.loc 1 8198 25 is_stmt 1 view .LVU2179
8198:FreeRTOS/Src/tasks.c ****                     }
 7054              		.loc 1 8198 45 is_stmt 0 view .LVU2180
 7055 00b2 0E4A     		ldr	r2, .L476+16
 7056              	.LVL551:
8198:FreeRTOS/Src/tasks.c ****                     }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 314


 7057              		.loc 1 8198 45 view .LVU2181
 7058 00b4 0121     		movs	r1, #1
 7059 00b6 1160     		str	r1, [r2]
 7060 00b8 BDE7     		b	.L468
 7061              	.LVL552:
 7062              	.L475:
 7063              	.LBB142:
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7064              		.loc 1 8174 21 is_stmt 1 discriminator 1 view .LVU2182
 7065 00ba C468     		ldr	r4, [r0, #12]
 7066 00bc 4C60     		str	r4, [r1, #4]
 7067 00be CBE7     		b	.L470
 7068              	.LVL553:
 7069              	.L469:
8174:FreeRTOS/Src/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7070              		.loc 1 8174 21 is_stmt 0 discriminator 1 view .LVU2183
 7071              	.LBE142:
8181:FreeRTOS/Src/tasks.c ****                 }
 7072              		.loc 1 8181 21 is_stmt 1 view .LVU2184
 7073              	.LBB143:
8181:FreeRTOS/Src/tasks.c ****                 }
 7074              		.loc 1 8181 21 view .LVU2185
 7075 00c0 0B49     		ldr	r1, .L476+20
 7076 00c2 4C68     		ldr	r4, [r1, #4]
 7077              	.LVL554:
8181:FreeRTOS/Src/tasks.c ****                 }
 7078              		.loc 1 8181 21 view .LVU2186
8181:FreeRTOS/Src/tasks.c ****                 }
 7079              		.loc 1 8181 21 view .LVU2187
8181:FreeRTOS/Src/tasks.c ****                 }
 7080              		.loc 1 8181 21 view .LVU2188
 7081 00c4 C461     		str	r4, [r0, #28]
8181:FreeRTOS/Src/tasks.c ****                 }
 7082              		.loc 1 8181 21 view .LVU2189
 7083 00c6 A668     		ldr	r6, [r4, #8]
 7084 00c8 0662     		str	r6, [r0, #32]
8181:FreeRTOS/Src/tasks.c ****                 }
 7085              		.loc 1 8181 21 view .LVU2190
 7086 00ca 00F11805 		add	r5, r0, #24
 7087 00ce 7560     		str	r5, [r6, #4]
8181:FreeRTOS/Src/tasks.c ****                 }
 7088              		.loc 1 8181 21 view .LVU2191
 7089 00d0 A560     		str	r5, [r4, #8]
8181:FreeRTOS/Src/tasks.c ****                 }
 7090              		.loc 1 8181 21 view .LVU2192
 7091 00d2 8162     		str	r1, [r0, #40]
8181:FreeRTOS/Src/tasks.c ****                 }
 7092              		.loc 1 8181 21 view .LVU2193
 7093 00d4 0C68     		ldr	r4, [r1]
 7094              	.LVL555:
8181:FreeRTOS/Src/tasks.c ****                 }
 7095              		.loc 1 8181 21 is_stmt 0 view .LVU2194
 7096 00d6 0134     		adds	r4, r4, #1
 7097 00d8 0C60     		str	r4, [r1]
 7098 00da E1E7     		b	.L471
 7099              	.L477:
 7100              		.align	2
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 315


 7101              	.L476:
 7102 00dc 00000000 		.word	uxSchedulerSuspended
 7103 00e0 00000000 		.word	uxTopReadyPriority
 7104 00e4 00000000 		.word	pxReadyTasksLists
 7105 00e8 00000000 		.word	pxCurrentTCB
 7106 00ec 00000000 		.word	xYieldPendings
 7107 00f0 00000000 		.word	xPendingReadyList
 7108              	.LBE143:
 7109              		.cfi_endproc
 7110              	.LFE182:
 7112              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 7113              		.align	1
 7114              		.global	xTaskGenericNotifyStateClear
 7115              		.syntax unified
 7116              		.thumb
 7117              		.thumb_func
 7119              	xTaskGenericNotifyStateClear:
 7120              	.LVL556:
 7121              	.LFB183:
8236:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 7122              		.loc 1 8236 5 is_stmt 1 view -0
 7123              		.cfi_startproc
 7124              		@ args = 0, pretend = 0, frame = 0
 7125              		@ frame_needed = 0, uses_anonymous_args = 0
8236:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 7126              		.loc 1 8236 5 is_stmt 0 view .LVU2196
 7127 0000 38B5     		push	{r3, r4, r5, lr}
 7128              	.LCFI58:
 7129              		.cfi_def_cfa_offset 16
 7130              		.cfi_offset 3, -16
 7131              		.cfi_offset 4, -12
 7132              		.cfi_offset 5, -8
 7133              		.cfi_offset 14, -4
 7134 0002 0C46     		mov	r4, r1
8237:FreeRTOS/Src/tasks.c ****         BaseType_t xReturn;
 7135              		.loc 1 8237 9 is_stmt 1 view .LVU2197
8238:FreeRTOS/Src/tasks.c **** 
 7136              		.loc 1 8238 9 view .LVU2198
8240:FreeRTOS/Src/tasks.c **** 
 7137              		.loc 1 8240 73 view .LVU2199
8242:FreeRTOS/Src/tasks.c **** 
 7138              		.loc 1 8242 79 view .LVU2200
8246:FreeRTOS/Src/tasks.c **** 
 7139              		.loc 1 8246 9 view .LVU2201
8246:FreeRTOS/Src/tasks.c **** 
 7140              		.loc 1 8246 17 is_stmt 0 view .LVU2202
 7141 0004 0546     		mov	r5, r0
 7142 0006 58B1     		cbz	r0, .L483
 7143              	.LVL557:
 7144              	.L479:
8248:FreeRTOS/Src/tasks.c ****         {
 7145              		.loc 1 8248 9 is_stmt 1 view .LVU2203
 7146 0008 FFF7FEFF 		bl	vPortEnterCritical
 7147              	.LVL558:
8250:FreeRTOS/Src/tasks.c ****             {
 7148              		.loc 1 8250 13 view .LVU2204
8250:FreeRTOS/Src/tasks.c ****             {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 316


 7149              		.loc 1 8250 37 is_stmt 0 view .LVU2205
 7150 000c 2B19     		adds	r3, r5, r4
 7151 000e 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
8250:FreeRTOS/Src/tasks.c ****             {
 7152              		.loc 1 8250 15 view .LVU2206
 7153 0012 022B     		cmp	r3, #2
 7154 0014 07D0     		beq	.L484
8257:FreeRTOS/Src/tasks.c ****             }
 7155              		.loc 1 8257 25 view .LVU2207
 7156 0016 0024     		movs	r4, #0
 7157              	.LVL559:
 7158              	.L480:
8260:FreeRTOS/Src/tasks.c **** 
 7159              		.loc 1 8260 9 is_stmt 1 view .LVU2208
 7160 0018 FFF7FEFF 		bl	vPortExitCritical
 7161              	.LVL560:
8262:FreeRTOS/Src/tasks.c **** 
 7162              		.loc 1 8262 60 view .LVU2209
8264:FreeRTOS/Src/tasks.c ****     }
 7163              		.loc 1 8264 9 view .LVU2210
8265:FreeRTOS/Src/tasks.c **** 
 7164              		.loc 1 8265 5 is_stmt 0 view .LVU2211
 7165 001c 2046     		mov	r0, r4
 7166 001e 38BD     		pop	{r3, r4, r5, pc}
 7167              	.LVL561:
 7168              	.L483:
8246:FreeRTOS/Src/tasks.c **** 
 7169              		.loc 1 8246 17 discriminator 1 view .LVU2212
 7170 0020 044B     		ldr	r3, .L485
 7171 0022 1D68     		ldr	r5, [r3]
 7172              	.LVL562:
8246:FreeRTOS/Src/tasks.c **** 
 7173              		.loc 1 8246 17 discriminator 1 view .LVU2213
 7174 0024 F0E7     		b	.L479
 7175              	.LVL563:
 7176              	.L484:
8252:FreeRTOS/Src/tasks.c ****                 xReturn = pdPASS;
 7177              		.loc 1 8252 17 is_stmt 1 view .LVU2214
8252:FreeRTOS/Src/tasks.c ****                 xReturn = pdPASS;
 7178              		.loc 1 8252 56 is_stmt 0 view .LVU2215
 7179 0026 2544     		add	r5, r5, r4
 7180              	.LVL564:
8252:FreeRTOS/Src/tasks.c ****                 xReturn = pdPASS;
 7181              		.loc 1 8252 56 view .LVU2216
 7182 0028 0023     		movs	r3, #0
 7183 002a 85F84830 		strb	r3, [r5, #72]
8253:FreeRTOS/Src/tasks.c ****             }
 7184              		.loc 1 8253 17 is_stmt 1 view .LVU2217
 7185              	.LVL565:
8253:FreeRTOS/Src/tasks.c ****             }
 7186              		.loc 1 8253 25 is_stmt 0 view .LVU2218
 7187 002e 0124     		movs	r4, #1
 7188              	.LVL566:
8253:FreeRTOS/Src/tasks.c ****             }
 7189              		.loc 1 8253 25 view .LVU2219
 7190 0030 F2E7     		b	.L480
 7191              	.L486:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 317


 7192 0032 00BF     		.align	2
 7193              	.L485:
 7194 0034 00000000 		.word	pxCurrentTCB
 7195              		.cfi_endproc
 7196              	.LFE183:
 7198              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 7199              		.align	1
 7200              		.global	ulTaskGenericNotifyValueClear
 7201              		.syntax unified
 7202              		.thumb
 7203              		.thumb_func
 7205              	ulTaskGenericNotifyValueClear:
 7206              	.LVL567:
 7207              	.LFB184:
8275:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 7208              		.loc 1 8275 5 is_stmt 1 view -0
 7209              		.cfi_startproc
 7210              		@ args = 0, pretend = 0, frame = 0
 7211              		@ frame_needed = 0, uses_anonymous_args = 0
8275:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
 7212              		.loc 1 8275 5 is_stmt 0 view .LVU2221
 7213 0000 70B5     		push	{r4, r5, r6, lr}
 7214              	.LCFI59:
 7215              		.cfi_def_cfa_offset 16
 7216              		.cfi_offset 4, -16
 7217              		.cfi_offset 5, -12
 7218              		.cfi_offset 6, -8
 7219              		.cfi_offset 14, -4
 7220 0002 0D46     		mov	r5, r1
 7221 0004 1646     		mov	r6, r2
8276:FreeRTOS/Src/tasks.c ****         uint32_t ulReturn;
 7222              		.loc 1 8276 9 is_stmt 1 view .LVU2222
8277:FreeRTOS/Src/tasks.c **** 
 7223              		.loc 1 8277 9 view .LVU2223
8279:FreeRTOS/Src/tasks.c **** 
 7224              		.loc 1 8279 89 view .LVU2224
8281:FreeRTOS/Src/tasks.c **** 
 7225              		.loc 1 8281 79 view .LVU2225
8285:FreeRTOS/Src/tasks.c **** 
 7226              		.loc 1 8285 9 view .LVU2226
8285:FreeRTOS/Src/tasks.c **** 
 7227              		.loc 1 8285 17 is_stmt 0 view .LVU2227
 7228 0006 0446     		mov	r4, r0
 7229 0008 68B1     		cbz	r0, .L490
 7230              	.LVL568:
 7231              	.L488:
8287:FreeRTOS/Src/tasks.c ****         {
 7232              		.loc 1 8287 9 is_stmt 1 view .LVU2228
 7233 000a FFF7FEFF 		bl	vPortEnterCritical
 7234              	.LVL569:
8291:FreeRTOS/Src/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 7235              		.loc 1 8291 13 view .LVU2229
8291:FreeRTOS/Src/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 7236              		.loc 1 8291 22 is_stmt 0 view .LVU2230
 7237 000e 1035     		adds	r5, r5, #16
 7238              	.LVL570:
8291:FreeRTOS/Src/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 318


 7239              		.loc 1 8291 22 view .LVU2231
 7240 0010 04EB8503 		add	r3, r4, r5, lsl #2
 7241 0014 5C68     		ldr	r4, [r3, #4]
 7242              	.LVL571:
8292:FreeRTOS/Src/tasks.c ****         }
 7243              		.loc 1 8292 13 is_stmt 1 view .LVU2232
8292:FreeRTOS/Src/tasks.c ****         }
 7244              		.loc 1 8292 35 is_stmt 0 view .LVU2233
 7245 0016 5968     		ldr	r1, [r3, #4]
8292:FreeRTOS/Src/tasks.c ****         }
 7246              		.loc 1 8292 54 view .LVU2234
 7247 0018 21EA0601 		bic	r1, r1, r6
 7248 001c 5960     		str	r1, [r3, #4]
8294:FreeRTOS/Src/tasks.c **** 
 7249              		.loc 1 8294 9 is_stmt 1 view .LVU2235
 7250 001e FFF7FEFF 		bl	vPortExitCritical
 7251              	.LVL572:
8296:FreeRTOS/Src/tasks.c **** 
 7252              		.loc 1 8296 62 view .LVU2236
8298:FreeRTOS/Src/tasks.c ****     }
 7253              		.loc 1 8298 9 view .LVU2237
8299:FreeRTOS/Src/tasks.c **** 
 7254              		.loc 1 8299 5 is_stmt 0 view .LVU2238
 7255 0022 2046     		mov	r0, r4
 7256 0024 70BD     		pop	{r4, r5, r6, pc}
 7257              	.LVL573:
 7258              	.L490:
8285:FreeRTOS/Src/tasks.c **** 
 7259              		.loc 1 8285 17 discriminator 1 view .LVU2239
 7260 0026 014B     		ldr	r3, .L491
 7261 0028 1C68     		ldr	r4, [r3]
 7262              	.LVL574:
8285:FreeRTOS/Src/tasks.c **** 
 7263              		.loc 1 8285 17 discriminator 1 view .LVU2240
 7264 002a EEE7     		b	.L488
 7265              	.L492:
 7266              		.align	2
 7267              	.L491:
 7268 002c 00000000 		.word	pxCurrentTCB
 7269              		.cfi_endproc
 7270              	.LFE184:
 7272              		.section	.text.vTaskResetState,"ax",%progbits
 7273              		.align	1
 7274              		.global	vTaskResetState
 7275              		.syntax unified
 7276              		.thumb
 7277              		.thumb_func
 7279              	vTaskResetState:
 7280              	.LFB186:
8532:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8533:FreeRTOS/Src/tasks.c **** 
8534:FreeRTOS/Src/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
8535:FreeRTOS/Src/tasks.c **** 
8536:FreeRTOS/Src/tasks.c ****     xMPU_SETTINGS * xTaskGetMPUSettings( TaskHandle_t xTask )
8537:FreeRTOS/Src/tasks.c ****     {
8538:FreeRTOS/Src/tasks.c ****         TCB_t * pxTCB;
8539:FreeRTOS/Src/tasks.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 319


8540:FreeRTOS/Src/tasks.c ****         traceENTER_xTaskGetMPUSettings( xTask );
8541:FreeRTOS/Src/tasks.c **** 
8542:FreeRTOS/Src/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
8543:FreeRTOS/Src/tasks.c **** 
8544:FreeRTOS/Src/tasks.c ****         traceRETURN_xTaskGetMPUSettings( &( pxTCB->xMPUSettings ) );
8545:FreeRTOS/Src/tasks.c **** 
8546:FreeRTOS/Src/tasks.c ****         return &( pxTCB->xMPUSettings );
8547:FreeRTOS/Src/tasks.c ****     }
8548:FreeRTOS/Src/tasks.c **** 
8549:FreeRTOS/Src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
8550:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8551:FreeRTOS/Src/tasks.c **** 
8552:FreeRTOS/Src/tasks.c **** /* Code below here allows additional code to be inserted into this source file,
8553:FreeRTOS/Src/tasks.c ****  * especially where access to file scope functions and data is needed (for example
8554:FreeRTOS/Src/tasks.c ****  * when performing module tests). */
8555:FreeRTOS/Src/tasks.c **** 
8556:FreeRTOS/Src/tasks.c **** #ifdef FREERTOS_MODULE_TEST
8557:FreeRTOS/Src/tasks.c ****     #include "tasks_test_access_functions.h"
8558:FreeRTOS/Src/tasks.c **** #endif
8559:FreeRTOS/Src/tasks.c **** 
8560:FreeRTOS/Src/tasks.c **** 
8561:FreeRTOS/Src/tasks.c **** #if ( configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H == 1 )
8562:FreeRTOS/Src/tasks.c **** 
8563:FreeRTOS/Src/tasks.c ****     #include "freertos_tasks_c_additions.h"
8564:FreeRTOS/Src/tasks.c **** 
8565:FreeRTOS/Src/tasks.c ****     #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
8566:FreeRTOS/Src/tasks.c ****         static void freertos_tasks_c_additions_init( void )
8567:FreeRTOS/Src/tasks.c ****         {
8568:FreeRTOS/Src/tasks.c ****             FREERTOS_TASKS_C_ADDITIONS_INIT();
8569:FreeRTOS/Src/tasks.c ****         }
8570:FreeRTOS/Src/tasks.c ****     #endif
8571:FreeRTOS/Src/tasks.c **** 
8572:FreeRTOS/Src/tasks.c **** #endif /* if ( configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H == 1 ) */
8573:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8574:FreeRTOS/Src/tasks.c **** 
8575:FreeRTOS/Src/tasks.c **** #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY == 1 ) && (
8576:FreeRTOS/Src/tasks.c **** 
8577:FreeRTOS/Src/tasks.c **** /*
8578:FreeRTOS/Src/tasks.c ****  * This is the kernel provided implementation of vApplicationGetIdleTaskMemory()
8579:FreeRTOS/Src/tasks.c ****  * to provide the memory that is used by the Idle task. It is used when
8580:FreeRTOS/Src/tasks.c ****  * configKERNEL_PROVIDED_STATIC_MEMORY is set to 1. The application can provide
8581:FreeRTOS/Src/tasks.c ****  * it's own implementation of vApplicationGetIdleTaskMemory by setting
8582:FreeRTOS/Src/tasks.c ****  * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
8583:FreeRTOS/Src/tasks.c ****  */
8584:FreeRTOS/Src/tasks.c ****     void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
8585:FreeRTOS/Src/tasks.c ****                                         StackType_t ** ppxIdleTaskStackBuffer,
8586:FreeRTOS/Src/tasks.c ****                                         configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
8587:FreeRTOS/Src/tasks.c ****     {
8588:FreeRTOS/Src/tasks.c ****         static StaticTask_t xIdleTaskTCB;
8589:FreeRTOS/Src/tasks.c ****         static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];
8590:FreeRTOS/Src/tasks.c **** 
8591:FreeRTOS/Src/tasks.c ****         *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
8592:FreeRTOS/Src/tasks.c ****         *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
8593:FreeRTOS/Src/tasks.c ****         *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
8594:FreeRTOS/Src/tasks.c ****     }
8595:FreeRTOS/Src/tasks.c **** 
8596:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 320


8597:FreeRTOS/Src/tasks.c **** 
8598:FreeRTOS/Src/tasks.c ****         void vApplicationGetPassiveIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
8599:FreeRTOS/Src/tasks.c ****                                                    StackType_t ** ppxIdleTaskStackBuffer,
8600:FreeRTOS/Src/tasks.c ****                                                    configSTACK_DEPTH_TYPE * puxIdleTaskStackSize,
8601:FreeRTOS/Src/tasks.c ****                                                    BaseType_t xPassiveIdleTaskIndex )
8602:FreeRTOS/Src/tasks.c ****         {
8603:FreeRTOS/Src/tasks.c ****             static StaticTask_t xIdleTaskTCBs[ configNUMBER_OF_CORES - 1 ];
8604:FreeRTOS/Src/tasks.c ****             static StackType_t uxIdleTaskStacks[ configNUMBER_OF_CORES - 1 ][ configMINIMAL_STACK_S
8605:FreeRTOS/Src/tasks.c **** 
8606:FreeRTOS/Src/tasks.c ****             *ppxIdleTaskTCBBuffer = &( xIdleTaskTCBs[ xPassiveIdleTaskIndex ] );
8607:FreeRTOS/Src/tasks.c ****             *ppxIdleTaskStackBuffer = &( uxIdleTaskStacks[ xPassiveIdleTaskIndex ][ 0 ] );
8608:FreeRTOS/Src/tasks.c ****             *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
8609:FreeRTOS/Src/tasks.c ****         }
8610:FreeRTOS/Src/tasks.c **** 
8611:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
8612:FreeRTOS/Src/tasks.c **** 
8613:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY =
8614:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8615:FreeRTOS/Src/tasks.c **** 
8616:FreeRTOS/Src/tasks.c **** #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY == 1 ) && (
8617:FreeRTOS/Src/tasks.c **** 
8618:FreeRTOS/Src/tasks.c **** /*
8619:FreeRTOS/Src/tasks.c ****  * This is the kernel provided implementation of vApplicationGetTimerTaskMemory()
8620:FreeRTOS/Src/tasks.c ****  * to provide the memory that is used by the Timer service task. It is used when
8621:FreeRTOS/Src/tasks.c ****  * configKERNEL_PROVIDED_STATIC_MEMORY is set to 1. The application can provide
8622:FreeRTOS/Src/tasks.c ****  * it's own implementation of vApplicationGetTimerTaskMemory by setting
8623:FreeRTOS/Src/tasks.c ****  * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
8624:FreeRTOS/Src/tasks.c ****  */
8625:FreeRTOS/Src/tasks.c ****     void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
8626:FreeRTOS/Src/tasks.c ****                                          StackType_t ** ppxTimerTaskStackBuffer,
8627:FreeRTOS/Src/tasks.c ****                                          configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
8628:FreeRTOS/Src/tasks.c ****     {
8629:FreeRTOS/Src/tasks.c ****         static StaticTask_t xTimerTaskTCB;
8630:FreeRTOS/Src/tasks.c ****         static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];
8631:FreeRTOS/Src/tasks.c **** 
8632:FreeRTOS/Src/tasks.c ****         *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
8633:FreeRTOS/Src/tasks.c ****         *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
8634:FreeRTOS/Src/tasks.c ****         *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
8635:FreeRTOS/Src/tasks.c ****     }
8636:FreeRTOS/Src/tasks.c **** 
8637:FreeRTOS/Src/tasks.c **** #endif /* #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY =
8638:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
8639:FreeRTOS/Src/tasks.c **** 
8640:FreeRTOS/Src/tasks.c **** /*
8641:FreeRTOS/Src/tasks.c ****  * Reset the state in this file. This state is normally initialized at start up.
8642:FreeRTOS/Src/tasks.c ****  * This function must be called by the application before restarting the
8643:FreeRTOS/Src/tasks.c ****  * scheduler.
8644:FreeRTOS/Src/tasks.c ****  */
8645:FreeRTOS/Src/tasks.c **** void vTaskResetState( void )
8646:FreeRTOS/Src/tasks.c **** {
 7281              		.loc 1 8646 1 is_stmt 1 view -0
 7282              		.cfi_startproc
 7283              		@ args = 0, pretend = 0, frame = 0
 7284              		@ frame_needed = 0, uses_anonymous_args = 0
 7285              		@ link register save eliminated.
8647:FreeRTOS/Src/tasks.c ****     BaseType_t xCoreID;
 7286              		.loc 1 8647 5 view .LVU2242
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 321


8648:FreeRTOS/Src/tasks.c **** 
8649:FreeRTOS/Src/tasks.c ****     /* Task control block. */
8650:FreeRTOS/Src/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
8651:FreeRTOS/Src/tasks.c ****     {
8652:FreeRTOS/Src/tasks.c ****         pxCurrentTCB = NULL;
 7287              		.loc 1 8652 9 view .LVU2243
 7288              		.loc 1 8652 22 is_stmt 0 view .LVU2244
 7289 0000 0023     		movs	r3, #0
 7290 0002 104A     		ldr	r2, .L496
 7291 0004 1360     		str	r3, [r2]
8653:FreeRTOS/Src/tasks.c ****     }
8654:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
8655:FreeRTOS/Src/tasks.c **** 
8656:FreeRTOS/Src/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
8657:FreeRTOS/Src/tasks.c ****     {
8658:FreeRTOS/Src/tasks.c ****         uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 7292              		.loc 1 8658 9 is_stmt 1 view .LVU2245
 7293              		.loc 1 8658 38 is_stmt 0 view .LVU2246
 7294 0006 104A     		ldr	r2, .L496+4
 7295 0008 1360     		str	r3, [r2]
8659:FreeRTOS/Src/tasks.c ****     }
8660:FreeRTOS/Src/tasks.c ****     #endif /* #if ( INCLUDE_vTaskDelete == 1 ) */
8661:FreeRTOS/Src/tasks.c **** 
8662:FreeRTOS/Src/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
8663:FreeRTOS/Src/tasks.c ****     {
8664:FreeRTOS/Src/tasks.c ****         FreeRTOS_errno = 0;
8665:FreeRTOS/Src/tasks.c ****     }
8666:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configUSE_POSIX_ERRNO == 1 ) */
8667:FreeRTOS/Src/tasks.c **** 
8668:FreeRTOS/Src/tasks.c ****     /* Other file private variables. */
8669:FreeRTOS/Src/tasks.c ****     uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 7296              		.loc 1 8669 5 is_stmt 1 view .LVU2247
 7297              		.loc 1 8669 28 is_stmt 0 view .LVU2248
 7298 000a 104A     		ldr	r2, .L496+8
 7299 000c 1360     		str	r3, [r2]
8670:FreeRTOS/Src/tasks.c ****     xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 7300              		.loc 1 8670 5 is_stmt 1 view .LVU2249
 7301              		.loc 1 8670 16 is_stmt 0 view .LVU2250
 7302 000e 104A     		ldr	r2, .L496+12
 7303 0010 1360     		str	r3, [r2]
8671:FreeRTOS/Src/tasks.c ****     uxTopReadyPriority = tskIDLE_PRIORITY;
 7304              		.loc 1 8671 5 is_stmt 1 view .LVU2251
 7305              		.loc 1 8671 24 is_stmt 0 view .LVU2252
 7306 0012 104A     		ldr	r2, .L496+16
 7307 0014 1360     		str	r3, [r2]
8672:FreeRTOS/Src/tasks.c ****     xSchedulerRunning = pdFALSE;
 7308              		.loc 1 8672 5 is_stmt 1 view .LVU2253
 7309              		.loc 1 8672 23 is_stmt 0 view .LVU2254
 7310 0016 104A     		ldr	r2, .L496+20
 7311 0018 1360     		str	r3, [r2]
8673:FreeRTOS/Src/tasks.c ****     xPendedTicks = ( TickType_t ) 0U;
 7312              		.loc 1 8673 5 is_stmt 1 view .LVU2255
 7313              		.loc 1 8673 18 is_stmt 0 view .LVU2256
 7314 001a 104A     		ldr	r2, .L496+24
 7315 001c 1360     		str	r3, [r2]
8674:FreeRTOS/Src/tasks.c **** 
8675:FreeRTOS/Src/tasks.c ****     for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 322


 7316              		.loc 1 8675 5 is_stmt 1 view .LVU2257
 7317              	.LVL575:
 7318              	.L494:
 7319              		.loc 1 8675 31 discriminator 1 view .LVU2258
 7320 001e 002B     		cmp	r3, #0
 7321 0020 09DD     		ble	.L495
8676:FreeRTOS/Src/tasks.c ****     {
8677:FreeRTOS/Src/tasks.c ****         xYieldPendings[ xCoreID ] = pdFALSE;
8678:FreeRTOS/Src/tasks.c ****     }
8679:FreeRTOS/Src/tasks.c **** 
8680:FreeRTOS/Src/tasks.c ****     xNumOfOverflows = ( BaseType_t ) 0;
 7322              		.loc 1 8680 5 view .LVU2259
 7323              		.loc 1 8680 21 is_stmt 0 view .LVU2260
 7324 0022 0023     		movs	r3, #0
 7325              	.LVL576:
 7326              		.loc 1 8680 21 view .LVU2261
 7327 0024 0E4A     		ldr	r2, .L496+28
 7328 0026 1360     		str	r3, [r2]
8681:FreeRTOS/Src/tasks.c ****     uxTaskNumber = ( UBaseType_t ) 0U;
 7329              		.loc 1 8681 5 is_stmt 1 view .LVU2262
 7330              		.loc 1 8681 18 is_stmt 0 view .LVU2263
 7331 0028 0E4A     		ldr	r2, .L496+32
 7332 002a 1360     		str	r3, [r2]
8682:FreeRTOS/Src/tasks.c ****     xNextTaskUnblockTime = ( TickType_t ) 0U;
 7333              		.loc 1 8682 5 is_stmt 1 view .LVU2264
 7334              		.loc 1 8682 26 is_stmt 0 view .LVU2265
 7335 002c 0E4A     		ldr	r2, .L496+36
 7336 002e 1360     		str	r3, [r2]
8683:FreeRTOS/Src/tasks.c **** 
8684:FreeRTOS/Src/tasks.c ****     uxSchedulerSuspended = ( UBaseType_t ) 0U;
 7337              		.loc 1 8684 5 is_stmt 1 view .LVU2266
 7338              		.loc 1 8684 26 is_stmt 0 view .LVU2267
 7339 0030 0E4A     		ldr	r2, .L496+40
 7340 0032 1360     		str	r3, [r2]
8685:FreeRTOS/Src/tasks.c **** 
8686:FreeRTOS/Src/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
8687:FreeRTOS/Src/tasks.c ****     {
8688:FreeRTOS/Src/tasks.c ****         for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
8689:FreeRTOS/Src/tasks.c ****         {
8690:FreeRTOS/Src/tasks.c ****             ulTaskSwitchedInTime[ xCoreID ] = 0U;
8691:FreeRTOS/Src/tasks.c ****             ulTotalRunTime[ xCoreID ] = 0U;
8692:FreeRTOS/Src/tasks.c ****         }
8693:FreeRTOS/Src/tasks.c ****     }
8694:FreeRTOS/Src/tasks.c ****     #endif /* #if ( configGENERATE_RUN_TIME_STATS == 1 ) */
8695:FreeRTOS/Src/tasks.c **** }
 7341              		.loc 1 8695 1 view .LVU2268
 7342 0034 7047     		bx	lr
 7343              	.LVL577:
 7344              	.L495:
8677:FreeRTOS/Src/tasks.c ****     }
 7345              		.loc 1 8677 9 is_stmt 1 view .LVU2269
8677:FreeRTOS/Src/tasks.c ****     }
 7346              		.loc 1 8677 35 is_stmt 0 view .LVU2270
 7347 0036 0E4A     		ldr	r2, .L496+44
 7348 0038 0021     		movs	r1, #0
 7349 003a 42F82310 		str	r1, [r2, r3, lsl #2]
8675:FreeRTOS/Src/tasks.c ****     {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 323


 7350              		.loc 1 8675 63 is_stmt 1 discriminator 3 view .LVU2271
 7351 003e 0133     		adds	r3, r3, #1
 7352              	.LVL578:
8675:FreeRTOS/Src/tasks.c ****     {
 7353              		.loc 1 8675 63 is_stmt 0 discriminator 3 view .LVU2272
 7354 0040 EDE7     		b	.L494
 7355              	.L497:
 7356 0042 00BF     		.align	2
 7357              	.L496:
 7358 0044 00000000 		.word	pxCurrentTCB
 7359 0048 00000000 		.word	uxDeletedTasksWaitingCleanUp
 7360 004c 00000000 		.word	uxCurrentNumberOfTasks
 7361 0050 00000000 		.word	xTickCount
 7362 0054 00000000 		.word	uxTopReadyPriority
 7363 0058 00000000 		.word	xSchedulerRunning
 7364 005c 00000000 		.word	xPendedTicks
 7365 0060 00000000 		.word	xNumOfOverflows
 7366 0064 00000000 		.word	uxTaskNumber
 7367 0068 00000000 		.word	xNextTaskUnblockTime
 7368 006c 00000000 		.word	uxSchedulerSuspended
 7369 0070 00000000 		.word	xYieldPendings
 7370              		.cfi_endproc
 7371              	.LFE186:
 7373              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 7374              		.align	2
 7377              	uxSchedulerSuspended:
 7378 0000 00000000 		.space	4
 7379              		.section	.rodata.uxTopUsedPriority,"a"
 7380              		.align	2
 7383              	uxTopUsedPriority:
 7384 0000 04000000 		.word	4
 7385              		.section	.bss.xIdleTaskHandles,"aw",%nobits
 7386              		.align	2
 7389              	xIdleTaskHandles:
 7390 0000 00000000 		.space	4
 7391              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 7392              		.align	2
 7395              	xNextTaskUnblockTime:
 7396 0000 00000000 		.space	4
 7397              		.section	.bss.uxTaskNumber,"aw",%nobits
 7398              		.align	2
 7401              	uxTaskNumber:
 7402 0000 00000000 		.space	4
 7403              		.section	.bss.xNumOfOverflows,"aw",%nobits
 7404              		.align	2
 7407              	xNumOfOverflows:
 7408 0000 00000000 		.space	4
 7409              		.section	.bss.xYieldPendings,"aw",%nobits
 7410              		.align	2
 7413              	xYieldPendings:
 7414 0000 00000000 		.space	4
 7415              		.section	.bss.xPendedTicks,"aw",%nobits
 7416              		.align	2
 7419              	xPendedTicks:
 7420 0000 00000000 		.space	4
 7421              		.section	.bss.xSchedulerRunning,"aw",%nobits
 7422              		.align	2
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 324


 7425              	xSchedulerRunning:
 7426 0000 00000000 		.space	4
 7427              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 7428              		.align	2
 7431              	uxTopReadyPriority:
 7432 0000 00000000 		.space	4
 7433              		.section	.bss.xTickCount,"aw",%nobits
 7434              		.align	2
 7437              	xTickCount:
 7438 0000 00000000 		.space	4
 7439              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 7440              		.align	2
 7443              	uxCurrentNumberOfTasks:
 7444 0000 00000000 		.space	4
 7445              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 7446              		.align	2
 7449              	xSuspendedTaskList:
 7450 0000 00000000 		.space	20
 7450      00000000 
 7450      00000000 
 7450      00000000 
 7450      00000000 
 7451              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 7452              		.align	2
 7455              	uxDeletedTasksWaitingCleanUp:
 7456 0000 00000000 		.space	4
 7457              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 7458              		.align	2
 7461              	xTasksWaitingTermination:
 7462 0000 00000000 		.space	20
 7462      00000000 
 7462      00000000 
 7462      00000000 
 7462      00000000 
 7463              		.section	.bss.xPendingReadyList,"aw",%nobits
 7464              		.align	2
 7467              	xPendingReadyList:
 7468 0000 00000000 		.space	20
 7468      00000000 
 7468      00000000 
 7468      00000000 
 7468      00000000 
 7469              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 7470              		.align	2
 7473              	pxOverflowDelayedTaskList:
 7474 0000 00000000 		.space	4
 7475              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 7476              		.align	2
 7479              	pxDelayedTaskList:
 7480 0000 00000000 		.space	4
 7481              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 7482              		.align	2
 7485              	xDelayedTaskList2:
 7486 0000 00000000 		.space	20
 7486      00000000 
 7486      00000000 
 7486      00000000 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 325


 7486      00000000 
 7487              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 7488              		.align	2
 7491              	xDelayedTaskList1:
 7492 0000 00000000 		.space	20
 7492      00000000 
 7492      00000000 
 7492      00000000 
 7492      00000000 
 7493              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 7494              		.align	2
 7497              	pxReadyTasksLists:
 7498 0000 00000000 		.space	100
 7498      00000000 
 7498      00000000 
 7498      00000000 
 7498      00000000 
 7499              		.global	pxCurrentTCB
 7500              		.section	.bss.pxCurrentTCB,"aw",%nobits
 7501              		.align	2
 7504              	pxCurrentTCB:
 7505 0000 00000000 		.space	4
 7506              		.text
 7507              	.Letext0:
 7508              		.file 3 "D:/Tools/arm-gnu-toolchain/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h"
 7509              		.file 4 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 7510              		.file 5 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 7511              		.file 6 "FreeRTOS/Inc/projdefs.h"
 7512              		.file 7 "FreeRTOS/Inc/list.h"
 7513              		.file 8 "FreeRTOS/Inc/task.h"
 7514              		.file 9 "FreeRTOS/Inc/timers.h"
 7515              		.file 10 "FreeRTOS/Inc/portable.h"
 7516              		.file 11 "D:/Tools/arm-gnu-toolchain/arm-none-eabi/include/string.h"
 7517              		.file 12 "<built-in>"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 326


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:19     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:117    .text.prvTaskIsTaskSuspended:0000003c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7449   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7467   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:123    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:128    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:163    .text.prvResetNextTaskUnblockTime:00000020 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7479   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7395   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:169    .text.prvDeleteTCB:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:174    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:206    .text.prvInitialiseNewTask:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:211    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:358    .text.prvCreateTask:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:363    .text.prvCreateTask:00000000 prvCreateTask
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:476    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:481    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:554    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7497   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7491   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7485   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7461   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7473   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:566    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:571    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:737    .text.prvAddNewTaskToReadyList:000000b4 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7443   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7504   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7425   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7401   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7431   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:747    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:752    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:825    .text.prvCheckTasksWaitingTermination:00000040 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7455   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:832    .text.prvIdleTask:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:837    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:886    .text.prvIdleTask:00000024 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:891    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:896    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1054   .text.prvAddCurrentTaskToDelayedList:000000a0 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7437   .bss.xTickCount:00000000 xTickCount
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1065   .text.xTaskCreate:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1071   .text.xTaskCreate:00000000 xTaskCreate
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1131   .rodata.prvCreateIdleTasks.str1.4:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1135   .text.prvCreateIdleTasks:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1140   .text.prvCreateIdleTasks:00000000 prvCreateIdleTasks
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1233   .text.prvCreateIdleTasks:00000048 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7389   .bss.xIdleTaskHandles:00000000 xIdleTaskHandles
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1240   .text.vTaskDelete:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1246   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1433   .text.vTaskDelete:000000b4 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1445   .text.uxTaskPriorityGet:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1451   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 327


C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1499   .text.uxTaskPriorityGet:0000001c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1504   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1510   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1585   .text.uxTaskPriorityGetFromISR:00000024 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1590   .text.uxTaskBasePriorityGet:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1596   .text.uxTaskBasePriorityGet:00000000 uxTaskBasePriorityGet
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1644   .text.uxTaskBasePriorityGet:0000001c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1649   .text.uxTaskBasePriorityGetFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1655   .text.uxTaskBasePriorityGetFromISR:00000000 uxTaskBasePriorityGetFromISR
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1729   .text.uxTaskBasePriorityGetFromISR:00000024 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1734   .text.vTaskPrioritySet:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1740   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1992   .text.vTaskPrioritySet:000000ec $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:1999   .text.vTaskResume:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2005   .text.vTaskResume:00000000 vTaskResume
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2138   .text.vTaskResume:00000088 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2145   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2151   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2325   .text.xTaskResumeFromISR:0000009c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7377   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7413   .bss.xYieldPendings:00000000 xYieldPendings
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2335   .text.vTaskStartScheduler:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2341   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2428   .text.vTaskStartScheduler:00000044 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7383   .rodata.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2436   .text.vTaskEndScheduler:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2442   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2520   .text.vTaskEndScheduler:00000040 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2527   .text.vTaskSuspendAll:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2533   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2556   .text.vTaskSuspendAll:0000000c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2561   .text.xTaskGetTickCount:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2567   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2590   .text.xTaskGetTickCount:00000008 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2595   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2601   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2627   .text.xTaskGetTickCountFromISR:00000008 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2632   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2638   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2656   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2661   .text.pcTaskGetName:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2667   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2700   .text.pcTaskGetName:00000010 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2705   .text.xTaskIncrementTick:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:2711   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3047   .text.xTaskIncrementTick:00000134 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7407   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7419   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3062   .text.xTaskResumeAll:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3068   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3391   .text.xTaskResumeAll:00000120 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3403   .text.xTaskDelayUntil:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3409   .text.xTaskDelayUntil:00000000 xTaskDelayUntil
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3569   .text.xTaskDelayUntil:00000068 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3574   .text.vTaskDelay:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3580   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3651   .text.xTaskCatchUpTicks:00000000 $t
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 328


C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3657   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3702   .text.xTaskCatchUpTicks:00000020 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3707   .text.vTaskSwitchContext:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3713   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3884   .text.vTaskSwitchContext:0000009c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3895   .text.vTaskSuspend:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:3901   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4110   .text.vTaskSuspend:000000c0 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4120   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4126   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4164   .text.vTaskPlaceOnEventList:00000018 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4169   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4175   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4247   .text.vTaskPlaceOnUnorderedEventList:0000003c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4252   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4258   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4330   .text.vTaskPlaceOnEventListRestricted:00000038 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4335   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4341   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4573   .text.xTaskRemoveFromEventList:000000c8 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4583   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4589   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4768   .text.vTaskRemoveFromUnorderedEventList:000000a4 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4777   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4783   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4823   .text.vTaskSetTimeOutState:0000001c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4829   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4835   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4860   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4866   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4872   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:4995   .text.xTaskCheckForTimeOut:00000058 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5001   .text.vTaskMissedYield:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5007   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5026   .text.vTaskMissedYield:00000008 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5031   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5037   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5058   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5063   .text.xTaskGetCurrentTaskHandleForCore:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5069   .text.xTaskGetCurrentTaskHandleForCore:00000000 xTaskGetCurrentTaskHandleForCore
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5101   .text.xTaskGetCurrentTaskHandleForCore:0000000c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5106   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5112   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5152   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5158   .text.xTaskPriorityInherit:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5164   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5356   .text.xTaskPriorityInherit:000000bc $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5363   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5369   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5528   .text.xTaskPriorityDisinherit:00000088 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5534   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5540   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5706   .text.vTaskPriorityDisinheritAfterTimeout:00000098 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5712   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5718   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5747   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5752   .text.pvTaskIncrementMutexHeldCount:00000000 $t
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 329


C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5758   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5789   .text.pvTaskIncrementMutexHeldCount:00000010 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5794   .text.ulTaskGenericNotifyTake:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5800   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5980   .text.ulTaskGenericNotifyTake:000000b4 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5985   .text.xTaskGenericNotifyWait:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:5991   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6192   .text.xTaskGenericNotifyWait:000000d4 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6197   .text.xTaskGenericNotify:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6203   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6264   .text.xTaskGenericNotify:00000040 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6268   .text.xTaskGenericNotify:00000044 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6478   .text.xTaskGenericNotify:00000114 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6485   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6491   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6568   .text.xTaskGenericNotifyFromISR:00000042 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6572   .text.xTaskGenericNotifyFromISR:00000046 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6836   .text.xTaskGenericNotifyFromISR:00000130 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6846   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:6852   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7102   .text.vTaskGenericNotifyGiveFromISR:000000dc $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7113   .text.xTaskGenericNotifyStateClear:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7119   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7194   .text.xTaskGenericNotifyStateClear:00000034 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7199   .text.ulTaskGenericNotifyValueClear:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7205   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7268   .text.ulTaskGenericNotifyValueClear:0000002c $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7273   .text.vTaskResetState:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7279   .text.vTaskResetState:00000000 vTaskResetState
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7358   .text.vTaskResetState:00000044 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7374   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7380   .rodata.uxTopUsedPriority:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7386   .bss.xIdleTaskHandles:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7392   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7398   .bss.uxTaskNumber:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7404   .bss.xNumOfOverflows:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7410   .bss.xYieldPendings:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7416   .bss.xPendedTicks:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7422   .bss.xSchedulerRunning:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7428   .bss.uxTopReadyPriority:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7434   .bss.xTickCount:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7440   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7446   .bss.xSuspendedTaskList:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7452   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7458   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7464   .bss.xPendingReadyList:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7470   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7476   .bss.pxDelayedTaskList:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7482   .bss.xDelayedTaskList2:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7488   .bss.xDelayedTaskList1:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7494   .bss.pxReadyTasksLists:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s:7501   .bss.pxCurrentTCB:00000000 $d

UNDEFINED SYMBOLS
vPortFree
memset
vListInitialiseItem
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\cczvIO1l.s 			page 330


pxPortInitialiseStack
pvPortMalloc
vListInitialise
vPortEnterCritical
vPortExitCritical
uxListRemove
vListInsert
vListInsertEnd
xTimerCreateTimerTask
xPortStartScheduler
xTimerGetTimerDaemonTaskHandle
vPortEndScheduler
vApplicationStackOverflowHook
