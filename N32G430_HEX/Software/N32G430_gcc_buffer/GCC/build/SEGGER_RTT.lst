ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"SEGGER_RTT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "../RTT/Src/SEGGER_RTT.c"
  20              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_GetAvailWriteSpace:
  27              	.LVL0:
  28              	.LFB4:
   1:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
   2:../RTT/Src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:../RTT/Src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
   5:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
   6:../RTT/Src/SEGGER_RTT.c **** *            (c) 1995 - 2021 SEGGER Microcontroller GmbH             *
   7:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
   8:../RTT/Src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  10:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
  11:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  12:../RTT/Src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  14:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
  15:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  16:../RTT/Src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  18:../RTT/Src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:../RTT/Src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:../RTT/Src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  22:../RTT/Src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:../RTT/Src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:../RTT/Src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  26:../RTT/Src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:../RTT/Src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  29:../RTT/Src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:../RTT/Src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 2


  31:../RTT/Src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:../RTT/Src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:../RTT/Src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:../RTT/Src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:../RTT/Src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:../RTT/Src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:../RTT/Src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:../RTT/Src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:../RTT/Src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:../RTT/Src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:../RTT/Src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  43:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
  44:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  45:../RTT/Src/SEGGER_RTT.c **** *       RTT version: 8.40                                           *
  46:../RTT/Src/SEGGER_RTT.c **** *                                                                    *
  47:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
  48:../RTT/Src/SEGGER_RTT.c **** 
  49:../RTT/Src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  50:../RTT/Src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  51:../RTT/Src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  52:../RTT/Src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  53:../RTT/Src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  54:../RTT/Src/SEGGER_RTT.c **** Revision: $Rev: 29668 $
  55:../RTT/Src/SEGGER_RTT.c **** 
  56:../RTT/Src/SEGGER_RTT.c **** Additional information:
  57:../RTT/Src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  58:../RTT/Src/SEGGER_RTT.c ****           H->T    Host to target communication
  59:../RTT/Src/SEGGER_RTT.c ****           T->H    Target to host communication
  60:../RTT/Src/SEGGER_RTT.c **** 
  61:../RTT/Src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  62:../RTT/Src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  63:../RTT/Src/SEGGER_RTT.c **** 
  64:../RTT/Src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  65:../RTT/Src/SEGGER_RTT.c **** 
  66:../RTT/Src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  67:../RTT/Src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  68:../RTT/Src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  69:../RTT/Src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  70:../RTT/Src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):
  71:../RTT/Src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  72:../RTT/Src/SEGGER_RTT.c **** 
  73:../RTT/Src/SEGGER_RTT.c **** 
  74:../RTT/Src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  75:../RTT/Src/SEGGER_RTT.c **** */
  76:../RTT/Src/SEGGER_RTT.c **** 
  77:../RTT/Src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  78:../RTT/Src/SEGGER_RTT.c **** 
  79:../RTT/Src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  80:../RTT/Src/SEGGER_RTT.c **** 
  81:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
  82:../RTT/Src/SEGGER_RTT.c **** *
  83:../RTT/Src/SEGGER_RTT.c **** *       Configuration, default values
  84:../RTT/Src/SEGGER_RTT.c **** *
  85:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
  86:../RTT/Src/SEGGER_RTT.c **** */
  87:../RTT/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 3


  88:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  89:../RTT/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  90:../RTT/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  91:../RTT/Src/SEGGER_RTT.c ****   #endif
  92:../RTT/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  93:../RTT/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  94:../RTT/Src/SEGGER_RTT.c ****   #endif
  95:../RTT/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  96:../RTT/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  97:../RTT/Src/SEGGER_RTT.c ****   #endif
  98:../RTT/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  99:../RTT/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
 100:../RTT/Src/SEGGER_RTT.c ****   #endif
 101:../RTT/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
 102:../RTT/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
 103:../RTT/Src/SEGGER_RTT.c ****   #endif
 104:../RTT/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 105:../RTT/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
 106:../RTT/Src/SEGGER_RTT.c ****   #endif
 107:../RTT/Src/SEGGER_RTT.c **** #endif
 108:../RTT/Src/SEGGER_RTT.c **** 
 109:../RTT/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 110:../RTT/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 111:../RTT/Src/SEGGER_RTT.c **** #endif
 112:../RTT/Src/SEGGER_RTT.c **** 
 113:../RTT/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 114:../RTT/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 115:../RTT/Src/SEGGER_RTT.c **** #endif
 116:../RTT/Src/SEGGER_RTT.c **** 
 117:../RTT/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 118:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 119:../RTT/Src/SEGGER_RTT.c **** #endif
 120:../RTT/Src/SEGGER_RTT.c **** 
 121:../RTT/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 122:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 123:../RTT/Src/SEGGER_RTT.c **** #endif
 124:../RTT/Src/SEGGER_RTT.c **** 
 125:../RTT/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 126:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 127:../RTT/Src/SEGGER_RTT.c **** #endif
 128:../RTT/Src/SEGGER_RTT.c **** 
 129:../RTT/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 130:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 131:../RTT/Src/SEGGER_RTT.c **** #endif
 132:../RTT/Src/SEGGER_RTT.c **** 
 133:../RTT/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 134:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 135:../RTT/Src/SEGGER_RTT.c **** #endif
 136:../RTT/Src/SEGGER_RTT.c **** 
 137:../RTT/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 138:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 139:../RTT/Src/SEGGER_RTT.c **** #endif
 140:../RTT/Src/SEGGER_RTT.c **** 
 141:../RTT/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 142:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 143:../RTT/Src/SEGGER_RTT.c **** #endif
 144:../RTT/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 4


 145:../RTT/Src/SEGGER_RTT.c **** #ifndef   STRLEN
 146:../RTT/Src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 147:../RTT/Src/SEGGER_RTT.c **** #endif
 148:../RTT/Src/SEGGER_RTT.c **** 
 149:../RTT/Src/SEGGER_RTT.c **** #ifndef   STRCPY
 150:../RTT/Src/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 151:../RTT/Src/SEGGER_RTT.c **** #endif
 152:../RTT/Src/SEGGER_RTT.c **** 
 153:../RTT/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 154:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 155:../RTT/Src/SEGGER_RTT.c **** #endif
 156:../RTT/Src/SEGGER_RTT.c **** 
 157:../RTT/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 158:../RTT/Src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 159:../RTT/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 160:../RTT/Src/SEGGER_RTT.c ****   #else
 161:../RTT/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 162:../RTT/Src/SEGGER_RTT.c ****   #endif
 163:../RTT/Src/SEGGER_RTT.c **** #endif
 164:../RTT/Src/SEGGER_RTT.c **** 
 165:../RTT/Src/SEGGER_RTT.c **** #ifndef   MIN
 166:../RTT/Src/SEGGER_RTT.c ****   #define MIN(a, b)                                       (((a) < (b)) ? (a) : (b))
 167:../RTT/Src/SEGGER_RTT.c **** #endif
 168:../RTT/Src/SEGGER_RTT.c **** 
 169:../RTT/Src/SEGGER_RTT.c **** #ifndef   MAX
 170:../RTT/Src/SEGGER_RTT.c ****   #define MAX(a, b)                                       (((a) > (b)) ? (a) : (b))
 171:../RTT/Src/SEGGER_RTT.c **** #endif
 172:../RTT/Src/SEGGER_RTT.c **** 
 173:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 174:../RTT/Src/SEGGER_RTT.c **** *
 175:../RTT/Src/SEGGER_RTT.c **** *       Defines, fixed
 176:../RTT/Src/SEGGER_RTT.c **** *
 177:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
 178:../RTT/Src/SEGGER_RTT.c **** */
 179:../RTT/Src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 180:../RTT/Src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 181:../RTT/Src/SEGGER_RTT.c **** #endif
 182:../RTT/Src/SEGGER_RTT.c **** 
 183:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 184:../RTT/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 185:../RTT/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 186:../RTT/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 187:../RTT/Src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 188:../RTT/Src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 189:../RTT/Src/SEGGER_RTT.c ****                                   Var
 190:../RTT/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 191:../RTT/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 192:../RTT/Src/SEGGER_RTT.c ****   #else
 193:../RTT/Src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 194:../RTT/Src/SEGGER_RTT.c ****   #endif
 195:../RTT/Src/SEGGER_RTT.c **** #else
 196:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 197:../RTT/Src/SEGGER_RTT.c **** #endif
 198:../RTT/Src/SEGGER_RTT.c **** 
 199:../RTT/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 200:../RTT/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 201:../RTT/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 5


 202:../RTT/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 203:../RTT/Src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 204:../RTT/Src/SEGGER_RTT.c ****                                         Var
 205:../RTT/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 206:../RTT/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section)))  Var
 207:../RTT/Src/SEGGER_RTT.c ****   #else
 208:../RTT/Src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 209:../RTT/Src/SEGGER_RTT.c ****   #endif
 210:../RTT/Src/SEGGER_RTT.c **** #else
 211:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 212:../RTT/Src/SEGGER_RTT.c **** #endif
 213:../RTT/Src/SEGGER_RTT.c **** 
 214:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 215:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 216:../RTT/Src/SEGGER_RTT.c **** #else
 217:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 218:../RTT/Src/SEGGER_RTT.c **** #endif
 219:../RTT/Src/SEGGER_RTT.c **** 
 220:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 221:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 222:../RTT/Src/SEGGER_RTT.c **** #else
 223:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 224:../RTT/Src/SEGGER_RTT.c **** #endif
 225:../RTT/Src/SEGGER_RTT.c **** 
 226:../RTT/Src/SEGGER_RTT.c **** 
 227:../RTT/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 228:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 229:../RTT/Src/SEGGER_RTT.c **** #else
 230:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 231:../RTT/Src/SEGGER_RTT.c **** #endif
 232:../RTT/Src/SEGGER_RTT.c **** 
 233:../RTT/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 234:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 235:../RTT/Src/SEGGER_RTT.c **** #else
 236:../RTT/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 237:../RTT/Src/SEGGER_RTT.c **** #endif
 238:../RTT/Src/SEGGER_RTT.c **** 
 239:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 240:../RTT/Src/SEGGER_RTT.c **** *
 241:../RTT/Src/SEGGER_RTT.c **** *       Static const data
 242:../RTT/Src/SEGGER_RTT.c **** *
 243:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
 244:../RTT/Src/SEGGER_RTT.c **** */
 245:../RTT/Src/SEGGER_RTT.c **** 
 246:../RTT/Src/SEGGER_RTT.c **** static const unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '
 247:../RTT/Src/SEGGER_RTT.c **** 
 248:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 249:../RTT/Src/SEGGER_RTT.c **** *
 250:../RTT/Src/SEGGER_RTT.c **** *       Static data
 251:../RTT/Src/SEGGER_RTT.c **** *
 252:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
 253:../RTT/Src/SEGGER_RTT.c **** */
 254:../RTT/Src/SEGGER_RTT.c **** 
 255:../RTT/Src/SEGGER_RTT.c **** //
 256:../RTT/Src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 257:../RTT/Src/SEGGER_RTT.c **** //
 258:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 6


 259:../RTT/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 260:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 261:../RTT/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 262:../RTT/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 263:../RTT/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__)
 264:../RTT/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 265:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT;
 266:../RTT/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 267:../RTT/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)];
 268:../RTT/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 269:../RTT/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)];
 270:../RTT/Src/SEGGER_RTT.c ****   #else
 271:../RTT/Src/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
 272:../RTT/Src/SEGGER_RTT.c ****   #endif
 273:../RTT/Src/SEGGER_RTT.c **** #else
 274:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 275:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 276:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 277:../RTT/Src/SEGGER_RTT.c **** #endif
 278:../RTT/Src/SEGGER_RTT.c **** 
 279:../RTT/Src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 280:../RTT/Src/SEGGER_RTT.c **** 
 281:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 282:../RTT/Src/SEGGER_RTT.c **** *
 283:../RTT/Src/SEGGER_RTT.c **** *       Static functions
 284:../RTT/Src/SEGGER_RTT.c **** *
 285:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
 286:../RTT/Src/SEGGER_RTT.c **** */
 287:../RTT/Src/SEGGER_RTT.c **** 
 288:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 289:../RTT/Src/SEGGER_RTT.c **** *
 290:../RTT/Src/SEGGER_RTT.c **** *       _DoInit()
 291:../RTT/Src/SEGGER_RTT.c **** *
 292:../RTT/Src/SEGGER_RTT.c **** *  Function description
 293:../RTT/Src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 294:../RTT/Src/SEGGER_RTT.c **** *
 295:../RTT/Src/SEGGER_RTT.c **** *  Notes
 296:../RTT/Src/SEGGER_RTT.c **** *    (1) May only be called via INIT() to avoid overriding settings.
 297:../RTT/Src/SEGGER_RTT.c **** *        The only exception is SEGGER_RTT_Init(), to make an intentional override possible.
 298:../RTT/Src/SEGGER_RTT.c **** */
 299:../RTT/Src/SEGGER_RTT.c ****   #define INIT()                                                                             \
 300:../RTT/Src/SEGGER_RTT.c ****     do {                                                                                     \
 301:../RTT/Src/SEGGER_RTT.c ****       volatile SEGGER_RTT_CB* pRTTCBInit;                                                    \
 302:../RTT/Src/SEGGER_RTT.c ****       pRTTCBInit = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF); \
 303:../RTT/Src/SEGGER_RTT.c ****       if (pRTTCBInit->acID[0] != 'S') {                                                      \
 304:../RTT/Src/SEGGER_RTT.c ****         _DoInit();                                                                           \
 305:../RTT/Src/SEGGER_RTT.c ****       }                                                                                      \
 306:../RTT/Src/SEGGER_RTT.c ****     } while (0)
 307:../RTT/Src/SEGGER_RTT.c **** 
 308:../RTT/Src/SEGGER_RTT.c **** static void _DoInit(void) {
 309:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 310:../RTT/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 311:../RTT/Src/SEGGER_RTT.c ****   unsigned i;
 312:../RTT/Src/SEGGER_RTT.c ****   //
 313:../RTT/Src/SEGGER_RTT.c ****   // Initialize control block
 314:../RTT/Src/SEGGER_RTT.c ****   //
 315:../RTT/Src/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_O
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 7


 316:../RTT/Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 317:../RTT/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 318:../RTT/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 319:../RTT/Src/SEGGER_RTT.c ****   //
 320:../RTT/Src/SEGGER_RTT.c ****   // Initialize up buffer 0
 321:../RTT/Src/SEGGER_RTT.c ****   //
 322:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 323:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 324:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 325:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 326:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 327:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 328:../RTT/Src/SEGGER_RTT.c ****   //
 329:../RTT/Src/SEGGER_RTT.c ****   // Initialize down buffer 0
 330:../RTT/Src/SEGGER_RTT.c ****   //
 331:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 332:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 333:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 334:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 335:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 336:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 337:../RTT/Src/SEGGER_RTT.c ****   //
 338:../RTT/Src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 339:../RTT/Src/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 340:../RTT/Src/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 341:../RTT/Src/SEGGER_RTT.c ****   //
 342:../RTT/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 343:../RTT/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 344:../RTT/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 345:../RTT/Src/SEGGER_RTT.c ****   }
 346:../RTT/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 347:../RTT/Src/SEGGER_RTT.c **** }
 348:../RTT/Src/SEGGER_RTT.c **** 
 349:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 350:../RTT/Src/SEGGER_RTT.c **** *
 351:../RTT/Src/SEGGER_RTT.c **** *       _WriteBlocking()
 352:../RTT/Src/SEGGER_RTT.c **** *
 353:../RTT/Src/SEGGER_RTT.c **** *  Function description
 354:../RTT/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 355:../RTT/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 356:../RTT/Src/SEGGER_RTT.c **** *    read by the host.
 357:../RTT/Src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 358:../RTT/Src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 359:../RTT/Src/SEGGER_RTT.c **** *
 360:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 361:../RTT/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 362:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 363:../RTT/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 364:../RTT/Src/SEGGER_RTT.c **** *
 365:../RTT/Src/SEGGER_RTT.c **** *  Return value
 366:../RTT/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 367:../RTT/Src/SEGGER_RTT.c **** */
 368:../RTT/Src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 369:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 370:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 371:../RTT/Src/SEGGER_RTT.c ****   unsigned RdOff;
 372:../RTT/Src/SEGGER_RTT.c ****   unsigned WrOff;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 8


 373:../RTT/Src/SEGGER_RTT.c ****   volatile char* pDst;
 374:../RTT/Src/SEGGER_RTT.c ****   //
 375:../RTT/Src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 376:../RTT/Src/SEGGER_RTT.c ****   //
 377:../RTT/Src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 378:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 379:../RTT/Src/SEGGER_RTT.c ****   do {
 380:../RTT/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 381:../RTT/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 382:../RTT/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 383:../RTT/Src/SEGGER_RTT.c ****     } else {
 384:../RTT/Src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 385:../RTT/Src/SEGGER_RTT.c ****     }
 386:../RTT/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 387:../RTT/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 388:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 389:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 390:../RTT/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 391:../RTT/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 392:../RTT/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 393:../RTT/Src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 394:../RTT/Src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 395:../RTT/Src/SEGGER_RTT.c ****     };
 396:../RTT/Src/SEGGER_RTT.c **** #else
 397:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 398:../RTT/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 399:../RTT/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 400:../RTT/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 401:../RTT/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 402:../RTT/Src/SEGGER_RTT.c **** #endif
 403:../RTT/Src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 404:../RTT/Src/SEGGER_RTT.c ****       WrOff = 0u;
 405:../RTT/Src/SEGGER_RTT.c ****     }
 406:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 407:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 408:../RTT/Src/SEGGER_RTT.c ****   } while (NumBytes);
 409:../RTT/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 410:../RTT/Src/SEGGER_RTT.c **** }
 411:../RTT/Src/SEGGER_RTT.c **** 
 412:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 413:../RTT/Src/SEGGER_RTT.c **** *
 414:../RTT/Src/SEGGER_RTT.c **** *       _WriteNoCheck()
 415:../RTT/Src/SEGGER_RTT.c **** *
 416:../RTT/Src/SEGGER_RTT.c **** *  Function description
 417:../RTT/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 418:../RTT/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 419:../RTT/Src/SEGGER_RTT.c **** *    read by the host.
 420:../RTT/Src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 421:../RTT/Src/SEGGER_RTT.c **** *
 422:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 423:../RTT/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 424:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 425:../RTT/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 426:../RTT/Src/SEGGER_RTT.c **** *
 427:../RTT/Src/SEGGER_RTT.c **** *  Notes
 428:../RTT/Src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 429:../RTT/Src/SEGGER_RTT.c **** */
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 9


 430:../RTT/Src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 431:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 432:../RTT/Src/SEGGER_RTT.c ****   unsigned WrOff;
 433:../RTT/Src/SEGGER_RTT.c ****   unsigned Rem;
 434:../RTT/Src/SEGGER_RTT.c ****   volatile char* pDst;
 435:../RTT/Src/SEGGER_RTT.c **** 
 436:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 437:../RTT/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 438:../RTT/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 439:../RTT/Src/SEGGER_RTT.c ****     //
 440:../RTT/Src/SEGGER_RTT.c ****     // All data fits before wrap around
 441:../RTT/Src/SEGGER_RTT.c ****     //
 442:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 443:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 444:../RTT/Src/SEGGER_RTT.c ****     WrOff += NumBytes;
 445:../RTT/Src/SEGGER_RTT.c ****     while (NumBytes--) {
 446:../RTT/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 447:../RTT/Src/SEGGER_RTT.c ****     };
 448:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 449:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 450:../RTT/Src/SEGGER_RTT.c **** #else
 451:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 452:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 453:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 454:../RTT/Src/SEGGER_RTT.c **** #endif
 455:../RTT/Src/SEGGER_RTT.c ****   } else {
 456:../RTT/Src/SEGGER_RTT.c ****     //
 457:../RTT/Src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 458:../RTT/Src/SEGGER_RTT.c ****     //
 459:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 460:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 461:../RTT/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 462:../RTT/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 463:../RTT/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 464:../RTT/Src/SEGGER_RTT.c ****     };
 465:../RTT/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 466:../RTT/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 467:../RTT/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 468:../RTT/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 469:../RTT/Src/SEGGER_RTT.c ****     };
 470:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 471:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 472:../RTT/Src/SEGGER_RTT.c **** #else
 473:../RTT/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 474:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 475:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 476:../RTT/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 477:../RTT/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 478:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 479:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 480:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 481:../RTT/Src/SEGGER_RTT.c **** #endif
 482:../RTT/Src/SEGGER_RTT.c ****   }
 483:../RTT/Src/SEGGER_RTT.c **** }
 484:../RTT/Src/SEGGER_RTT.c **** 
 485:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 486:../RTT/Src/SEGGER_RTT.c **** *
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 10


 487:../RTT/Src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 488:../RTT/Src/SEGGER_RTT.c **** *
 489:../RTT/Src/SEGGER_RTT.c **** *  Function description
 490:../RTT/Src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 491:../RTT/Src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 492:../RTT/Src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 493:../RTT/Src/SEGGER_RTT.c **** *
 494:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 495:../RTT/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 496:../RTT/Src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 497:../RTT/Src/SEGGER_RTT.c **** */
 498:../RTT/Src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 499:../RTT/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 500:../RTT/Src/SEGGER_RTT.c **** 
 501:../RTT/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 502:../RTT/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 503:../RTT/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 504:../RTT/Src/SEGGER_RTT.c **** }
 505:../RTT/Src/SEGGER_RTT.c **** 
 506:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 507:../RTT/Src/SEGGER_RTT.c **** *
 508:../RTT/Src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 509:../RTT/Src/SEGGER_RTT.c **** *
 510:../RTT/Src/SEGGER_RTT.c **** *  Function description
 511:../RTT/Src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 512:../RTT/Src/SEGGER_RTT.c **** *    buffer without blocking.
 513:../RTT/Src/SEGGER_RTT.c **** *
 514:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 515:../RTT/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 516:../RTT/Src/SEGGER_RTT.c **** *
 517:../RTT/Src/SEGGER_RTT.c **** *  Return value
 518:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 519:../RTT/Src/SEGGER_RTT.c **** */
 520:../RTT/Src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  29              		.loc 1 520 66 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 521:../RTT/Src/SEGGER_RTT.c ****   unsigned RdOff;
  34              		.loc 1 521 3 view .LVU1
 522:../RTT/Src/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 522 3 view .LVU2
 523:../RTT/Src/SEGGER_RTT.c ****   unsigned r;
  36              		.loc 1 523 3 view .LVU3
 524:../RTT/Src/SEGGER_RTT.c ****   //
 525:../RTT/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 526:../RTT/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 527:../RTT/Src/SEGGER_RTT.c ****   //
 528:../RTT/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  37              		.loc 1 528 3 view .LVU4
  38              		.loc 1 528 9 is_stmt 0 view .LVU5
  39 0000 0369     		ldr	r3, [r0, #16]
  40              	.LVL1:
 529:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  41              		.loc 1 529 3 is_stmt 1 view .LVU6
  42              		.loc 1 529 9 is_stmt 0 view .LVU7
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 11


  43 0002 C268     		ldr	r2, [r0, #12]
  44              	.LVL2:
 530:../RTT/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  45              		.loc 1 530 3 is_stmt 1 view .LVU8
  46              		.loc 1 530 6 is_stmt 0 view .LVU9
  47 0004 9342     		cmp	r3, r2
 531:../RTT/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  48              		.loc 1 531 5 is_stmt 1 view .LVU10
  49              		.loc 1 531 7 is_stmt 0 view .LVU11
  50 0006 9CBF     		itt	ls
  51 0008 8168     		ldrls	r1, [r0, #8]
  52 000a 5B18     		addls	r3, r3, r1
  53              	.LVL3:
 532:../RTT/Src/SEGGER_RTT.c ****   } else {
 533:../RTT/Src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  54              		.loc 1 533 5 is_stmt 1 view .LVU12
  55              		.loc 1 533 7 is_stmt 0 view .LVU13
  56 000c 013B     		subs	r3, r3, #1
  57 000e 981A     		subs	r0, r3, r2
  58              	.LVL4:
 534:../RTT/Src/SEGGER_RTT.c ****   }
 535:../RTT/Src/SEGGER_RTT.c ****   return r;
  59              		.loc 1 535 3 is_stmt 1 view .LVU14
 536:../RTT/Src/SEGGER_RTT.c **** }
  60              		.loc 1 536 1 is_stmt 0 view .LVU15
  61 0010 7047     		bx	lr
  62              		.cfi_endproc
  63              	.LFE4:
  65              		.section	.text._WriteNoCheck,"ax",%progbits
  66              		.align	1
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  71              	_WriteNoCheck:
  72              	.LVL5:
  73              	.LFB2:
 430:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  74              		.loc 1 430 94 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
 431:../RTT/Src/SEGGER_RTT.c ****   unsigned WrOff;
  78              		.loc 1 431 3 view .LVU17
 432:../RTT/Src/SEGGER_RTT.c ****   unsigned Rem;
  79              		.loc 1 432 3 view .LVU18
 433:../RTT/Src/SEGGER_RTT.c ****   volatile char* pDst;
  80              		.loc 1 433 3 view .LVU19
 434:../RTT/Src/SEGGER_RTT.c **** 
  81              		.loc 1 434 3 view .LVU20
 436:../RTT/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
  82              		.loc 1 436 3 view .LVU21
 430:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  83              		.loc 1 430 94 is_stmt 0 view .LVU22
  84 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 24
  87              		.cfi_offset 4, -24
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 12


  88              		.cfi_offset 5, -20
  89              		.cfi_offset 6, -16
  90              		.cfi_offset 7, -12
  91              		.cfi_offset 8, -8
  92              		.cfi_offset 14, -4
 437:../RTT/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
  93              		.loc 1 437 14 view .LVU23
  94 0004 D0E90284 		ldrd	r8, r4, [r0, #8]
 430:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  95              		.loc 1 430 94 view .LVU24
  96 0008 0546     		mov	r5, r0
 437:../RTT/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
  97              		.loc 1 437 7 view .LVU25
  98 000a A8EB0406 		sub	r6, r8, r4
  99              	.LVL6:
 438:../RTT/Src/SEGGER_RTT.c ****     //
 100              		.loc 1 438 3 is_stmt 1 view .LVU26
 442:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 101              		.loc 1 442 10 is_stmt 0 view .LVU27
 102 000e 4068     		ldr	r0, [r0, #4]
 103              	.LVL7:
 438:../RTT/Src/SEGGER_RTT.c ****     //
 104              		.loc 1 438 6 view .LVU28
 105 0010 9642     		cmp	r6, r2
 442:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 106              		.loc 1 442 10 view .LVU29
 107 0012 2044     		add	r0, r0, r4
 430:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 108              		.loc 1 430 94 view .LVU30
 109 0014 0F46     		mov	r7, r1
 453:../RTT/Src/SEGGER_RTT.c **** #endif
 110              		.loc 1 453 26 view .LVU31
 111 0016 1444     		add	r4, r4, r2
 438:../RTT/Src/SEGGER_RTT.c ****     //
 112              		.loc 1 438 6 view .LVU32
 113 0018 06D9     		bls	.L5
 114              	.LVL8:
 115              	.L7:
 478:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 116              		.loc 1 478 5 view .LVU33
 117 001a FFF7FEFF 		bl	memcpy
 118              	.LVL9:
 479:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 119              		.loc 1 479 5 is_stmt 1 view .LVU34
 120              		.syntax unified
 121              	@ 479 "../RTT/Src/SEGGER_RTT.c" 1
 122 001e BFF35F8F 		dmb
 123              	
 124              	@ 0 "" 2
 479:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 125              		.loc 1 479 15 view .LVU35
 480:../RTT/Src/SEGGER_RTT.c **** #endif
 126              		.loc 1 480 5 view .LVU36
 453:../RTT/Src/SEGGER_RTT.c **** #endif
 127              		.loc 1 453 18 is_stmt 0 view .LVU37
 128              		.thumb
 129              		.syntax unified
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 13


 130 0022 EC60     		str	r4, [r5, #12]
 483:../RTT/Src/SEGGER_RTT.c **** 
 131              		.loc 1 483 1 view .LVU38
 132 0024 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 133              	.LVL10:
 134              	.L5:
 473:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 135              		.loc 1 473 5 is_stmt 1 view .LVU39
 474:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 136              		.loc 1 474 5 view .LVU40
 475:../RTT/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 137              		.loc 1 475 5 view .LVU41
 138 0028 3246     		mov	r2, r6
 139              	.LVL11:
 476:../RTT/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 140              		.loc 1 476 20 is_stmt 0 view .LVU42
 141 002a A4EB0804 		sub	r4, r4, r8
 475:../RTT/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 142              		.loc 1 475 5 view .LVU43
 143 002e FFF7FEFF 		bl	memcpy
 144              	.LVL12:
 476:../RTT/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 145              		.loc 1 476 5 is_stmt 1 view .LVU44
 477:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 146              		.loc 1 477 5 view .LVU45
 478:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 147              		.loc 1 478 5 view .LVU46
 148 0032 6868     		ldr	r0, [r5, #4]
 149 0034 2246     		mov	r2, r4
 150 0036 B919     		adds	r1, r7, r6
 151 0038 EFE7     		b	.L7
 152              		.cfi_endproc
 153              	.LFE2:
 155              		.section	.text._WriteBlocking,"ax",%progbits
 156              		.align	1
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	_WriteBlocking:
 162              	.LVL13:
 163              	.LFB1:
 368:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 164              		.loc 1 368 101 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 369:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 168              		.loc 1 369 3 view .LVU48
 370:../RTT/Src/SEGGER_RTT.c ****   unsigned RdOff;
 169              		.loc 1 370 3 view .LVU49
 371:../RTT/Src/SEGGER_RTT.c ****   unsigned WrOff;
 170              		.loc 1 371 3 view .LVU50
 372:../RTT/Src/SEGGER_RTT.c ****   volatile char* pDst;
 171              		.loc 1 372 3 view .LVU51
 373:../RTT/Src/SEGGER_RTT.c ****   //
 172              		.loc 1 373 3 view .LVU52
 377:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 14


 173              		.loc 1 377 3 view .LVU53
 378:../RTT/Src/SEGGER_RTT.c ****   do {
 174              		.loc 1 378 3 view .LVU54
 368:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 175              		.loc 1 368 101 is_stmt 0 view .LVU55
 176 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 177              	.LCFI1:
 178              		.cfi_def_cfa_offset 32
 179              		.cfi_offset 3, -32
 180              		.cfi_offset 4, -28
 181              		.cfi_offset 5, -24
 182              		.cfi_offset 6, -20
 183              		.cfi_offset 7, -16
 184              		.cfi_offset 8, -12
 185              		.cfi_offset 9, -8
 186              		.cfi_offset 14, -4
 378:../RTT/Src/SEGGER_RTT.c ****   do {
 187              		.loc 1 378 9 view .LVU56
 188 0004 C568     		ldr	r5, [r0, #12]
 189              	.LVL14:
 368:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 190              		.loc 1 368 101 view .LVU57
 191 0006 0646     		mov	r6, r0
 192 0008 8946     		mov	r9, r1
 193 000a 1746     		mov	r7, r2
 377:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 194              		.loc 1 377 19 view .LVU58
 195 000c 4FF00008 		mov	r8, #0
 196              	.LVL15:
 197              	.L12:
 379:../RTT/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 198              		.loc 1 379 3 is_stmt 1 view .LVU59
 380:../RTT/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 199              		.loc 1 380 5 view .LVU60
 380:../RTT/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 200              		.loc 1 380 11 is_stmt 0 view .LVU61
 201 0010 3369     		ldr	r3, [r6, #16]
 202              	.LVL16:
 381:../RTT/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 203              		.loc 1 381 5 is_stmt 1 view .LVU62
 384:../RTT/Src/SEGGER_RTT.c ****     }
 204              		.loc 1 384 30 is_stmt 0 view .LVU63
 205 0012 B468     		ldr	r4, [r6, #8]
 388:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 206              		.loc 1 388 10 view .LVU64
 207 0014 7068     		ldr	r0, [r6, #4]
 381:../RTT/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 208              		.loc 1 381 8 view .LVU65
 209 0016 9D42     		cmp	r5, r3
 382:../RTT/Src/SEGGER_RTT.c ****     } else {
 210              		.loc 1 382 7 is_stmt 1 view .LVU66
 384:../RTT/Src/SEGGER_RTT.c ****     }
 211              		.loc 1 384 7 view .LVU67
 384:../RTT/Src/SEGGER_RTT.c ****     }
 212              		.loc 1 384 23 is_stmt 0 view .LVU68
 213 0018 28BF     		it	cs
 214 001a 1B19     		addcs	r3, r3, r4
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 15


 215              	.LVL17:
 386:../RTT/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 216              		.loc 1 386 23 view .LVU69
 217 001c 641B     		subs	r4, r4, r5
 387:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 218              		.loc 1 387 21 view .LVU70
 219 001e BC42     		cmp	r4, r7
 384:../RTT/Src/SEGGER_RTT.c ****     }
 220              		.loc 1 384 23 view .LVU71
 221 0020 03F1FF33 		add	r3, r3, #-1
 387:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 222              		.loc 1 387 21 view .LVU72
 223 0024 28BF     		it	cs
 224 0026 3C46     		movcs	r4, r7
 384:../RTT/Src/SEGGER_RTT.c ****     }
 225              		.loc 1 384 23 view .LVU73
 226 0028 5B1B     		subs	r3, r3, r5
 227              	.LVL18:
 386:../RTT/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 228              		.loc 1 386 5 is_stmt 1 view .LVU74
 387:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 229              		.loc 1 387 5 view .LVU75
 387:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 230              		.loc 1 387 21 is_stmt 0 view .LVU76
 231 002a 9C42     		cmp	r4, r3
 232 002c 28BF     		it	cs
 233 002e 1C46     		movcs	r4, r3
 234              	.LVL19:
 388:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 235              		.loc 1 388 5 is_stmt 1 view .LVU77
 397:../RTT/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 236              		.loc 1 397 5 view .LVU78
 237 0030 4946     		mov	r1, r9
 238 0032 2246     		mov	r2, r4
 239 0034 2844     		add	r0, r0, r5
 240              	.LVL20:
 397:../RTT/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 241              		.loc 1 397 5 is_stmt 0 view .LVU79
 242 0036 FFF7FEFF 		bl	memcpy
 243              	.LVL21:
 398:../RTT/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 244              		.loc 1 398 5 is_stmt 1 view .LVU80
 403:../RTT/Src/SEGGER_RTT.c ****       WrOff = 0u;
 245              		.loc 1 403 8 is_stmt 0 view .LVU81
 246 003a B368     		ldr	r3, [r6, #8]
 401:../RTT/Src/SEGGER_RTT.c **** #endif
 247              		.loc 1 401 21 view .LVU82
 248 003c 2544     		add	r5, r5, r4
 249              	.LVL22:
 398:../RTT/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 250              		.loc 1 398 21 view .LVU83
 251 003e A044     		add	r8, r8, r4
 252              	.LVL23:
 399:../RTT/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 253              		.loc 1 399 5 is_stmt 1 view .LVU84
 399:../RTT/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 254              		.loc 1 399 21 is_stmt 0 view .LVU85
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 16


 255 0040 A144     		add	r9, r9, r4
 256              	.LVL24:
 400:../RTT/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 257              		.loc 1 400 5 is_stmt 1 view .LVU86
 400:../RTT/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 258              		.loc 1 400 21 is_stmt 0 view .LVU87
 259 0042 3F1B     		subs	r7, r7, r4
 260              	.LVL25:
 401:../RTT/Src/SEGGER_RTT.c **** #endif
 261              		.loc 1 401 5 is_stmt 1 view .LVU88
 403:../RTT/Src/SEGGER_RTT.c ****       WrOff = 0u;
 262              		.loc 1 403 5 view .LVU89
 404:../RTT/Src/SEGGER_RTT.c ****     }
 263              		.loc 1 404 13 is_stmt 0 view .LVU90
 264 0044 AB42     		cmp	r3, r5
 265 0046 08BF     		it	eq
 266 0048 0025     		moveq	r5, #0
 267              	.LVL26:
 406:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 268              		.loc 1 406 5 is_stmt 1 view .LVU91
 269              		.syntax unified
 270              	@ 406 "../RTT/Src/SEGGER_RTT.c" 1
 271 004a BFF35F8F 		dmb
 272              	
 273              	@ 0 "" 2
 406:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 274              		.loc 1 406 15 view .LVU92
 407:../RTT/Src/SEGGER_RTT.c ****   } while (NumBytes);
 275              		.loc 1 407 5 view .LVU93
 407:../RTT/Src/SEGGER_RTT.c ****   } while (NumBytes);
 276              		.loc 1 407 18 is_stmt 0 view .LVU94
 277              		.thumb
 278              		.syntax unified
 279 004e F560     		str	r5, [r6, #12]
 408:../RTT/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 280              		.loc 1 408 12 is_stmt 1 view .LVU95
 281 0050 002F     		cmp	r7, #0
 282 0052 DDD1     		bne	.L12
 409:../RTT/Src/SEGGER_RTT.c **** }
 283              		.loc 1 409 3 view .LVU96
 410:../RTT/Src/SEGGER_RTT.c **** 
 284              		.loc 1 410 1 is_stmt 0 view .LVU97
 285 0054 4046     		mov	r0, r8
 286 0056 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 410:../RTT/Src/SEGGER_RTT.c **** 
 287              		.loc 1 410 1 view .LVU98
 288              		.cfi_endproc
 289              	.LFE1:
 291              		.section	.rodata._DoInit.str1.1,"aMS",%progbits,1
 292              	.LC0:
 293 0000 5465726D 		.ascii	"Terminal\000"
 293      696E616C 
 293      00
 294              		.section	.text._DoInit,"ax",%progbits
 295              		.align	1
 296              		.syntax unified
 297              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 17


 298              		.thumb_func
 300              	_DoInit:
 301              	.LFB0:
 308:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 302              		.loc 1 308 27 is_stmt 1 view -0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 309:../RTT/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 306              		.loc 1 309 3 view .LVU100
 310:../RTT/Src/SEGGER_RTT.c ****   unsigned i;
 307              		.loc 1 310 3 view .LVU101
 311:../RTT/Src/SEGGER_RTT.c ****   //
 308              		.loc 1 311 3 view .LVU102
 315:../RTT/Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 309              		.loc 1 315 3 view .LVU103
 310              	.LVL27:
 316:../RTT/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 311              		.loc 1 316 3 view .LVU104
 308:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 312              		.loc 1 308 27 is_stmt 0 view .LVU105
 313 0000 08B5     		push	{r3, lr}
 314              	.LCFI2:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 3, -8
 317              		.cfi_offset 14, -4
 316:../RTT/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 318              		.loc 1 316 3 view .LVU106
 319 0002 144B     		ldr	r3, .L19
 320 0004 A822     		movs	r2, #168
 321 0006 0021     		movs	r1, #0
 322 0008 1846     		mov	r0, r3
 323 000a FFF7FEFF 		bl	memset
 324              	.LVL28:
 317:../RTT/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 325              		.loc 1 317 25 view .LVU107
 326 000e 0322     		movs	r2, #3
 327 0010 0261     		str	r2, [r0, #16]
 322:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 328              		.loc 1 322 27 view .LVU108
 329 0012 1149     		ldr	r1, .L19+4
 318:../RTT/Src/SEGGER_RTT.c ****   //
 330              		.loc 1 318 25 view .LVU109
 331 0014 4261     		str	r2, [r0, #20]
 323:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 332              		.loc 1 323 27 view .LVU110
 333 0016 114A     		ldr	r2, .L19+8
 322:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 334              		.loc 1 322 27 view .LVU111
 335 0018 8161     		str	r1, [r0, #24]
 323:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 336              		.loc 1 323 27 view .LVU112
 337 001a C261     		str	r2, [r0, #28]
 324:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 338              		.loc 1 324 27 view .LVU113
 339 001c 4FF48062 		mov	r2, #1024
 340 0020 0262     		str	r2, [r0, #32]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 18


 325:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 341              		.loc 1 325 27 view .LVU114
 342 0022 0022     		movs	r2, #0
 343 0024 8262     		str	r2, [r0, #40]
 326:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 344              		.loc 1 326 27 view .LVU115
 345 0026 4262     		str	r2, [r0, #36]
 327:../RTT/Src/SEGGER_RTT.c ****   //
 346              		.loc 1 327 27 view .LVU116
 347 0028 C262     		str	r2, [r0, #44]
 331:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 348              		.loc 1 331 29 view .LVU117
 349 002a 0166     		str	r1, [r0, #96]
 332:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 350              		.loc 1 332 29 view .LVU118
 351 002c 0C49     		ldr	r1, .L19+12
 352 002e 4166     		str	r1, [r0, #100]
 333:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 353              		.loc 1 333 29 view .LVU119
 354 0030 1021     		movs	r1, #16
 355 0032 8166     		str	r1, [r0, #104]
 316:../RTT/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 356              		.loc 1 316 3 view .LVU120
 357 0034 0346     		mov	r3, r0
 317:../RTT/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 358              		.loc 1 317 3 is_stmt 1 view .LVU121
 318:../RTT/Src/SEGGER_RTT.c ****   //
 359              		.loc 1 318 3 view .LVU122
 322:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 360              		.loc 1 322 3 view .LVU123
 323:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 361              		.loc 1 323 3 view .LVU124
 324:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 362              		.loc 1 324 3 view .LVU125
 325:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 363              		.loc 1 325 3 view .LVU126
 326:../RTT/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 364              		.loc 1 326 3 view .LVU127
 327:../RTT/Src/SEGGER_RTT.c ****   //
 365              		.loc 1 327 3 view .LVU128
 331:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 366              		.loc 1 331 3 view .LVU129
 332:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 367              		.loc 1 332 3 view .LVU130
 333:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 368              		.loc 1 333 3 view .LVU131
 334:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 369              		.loc 1 334 3 view .LVU132
 334:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 370              		.loc 1 334 29 is_stmt 0 view .LVU133
 371 0036 0267     		str	r2, [r0, #112]
 335:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 372              		.loc 1 335 3 is_stmt 1 view .LVU134
 335:../RTT/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 373              		.loc 1 335 29 is_stmt 0 view .LVU135
 374 0038 C266     		str	r2, [r0, #108]
 336:../RTT/Src/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 19


 375              		.loc 1 336 3 is_stmt 1 view .LVU136
 336:../RTT/Src/SEGGER_RTT.c ****   //
 376              		.loc 1 336 29 is_stmt 0 view .LVU137
 377 003a 4267     		str	r2, [r0, #116]
 342:../RTT/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 378              		.loc 1 342 3 is_stmt 1 view .LVU138
 379              		.syntax unified
 380              	@ 342 "../RTT/Src/SEGGER_RTT.c" 1
 381 003c BFF35F8F 		dmb
 382              	
 383              	@ 0 "" 2
 342:../RTT/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 384              		.loc 1 342 13 view .LVU139
 343:../RTT/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 385              		.loc 1 343 3 view .LVU140
 386              	.LVL29:
 343:../RTT/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 387              		.loc 1 343 17 discriminator 1 view .LVU141
 388              		.thumb
 389              		.syntax unified
 390 0040 0849     		ldr	r1, .L19+16
 391              	.LVL30:
 392              	.L17:
 344:../RTT/Src/SEGGER_RTT.c ****   }
 393              		.loc 1 344 5 view .LVU142
 344:../RTT/Src/SEGGER_RTT.c ****   }
 394              		.loc 1 344 27 is_stmt 0 view .LVU143
 395 0042 11F8010D 		ldrb	r0, [r1, #-1]!	@ zero_extendqisi2
 344:../RTT/Src/SEGGER_RTT.c ****   }
 396              		.loc 1 344 16 view .LVU144
 397 0046 9854     		strb	r0, [r3, r2]
 343:../RTT/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 398              		.loc 1 343 42 is_stmt 1 discriminator 3 view .LVU145
 399 0048 0132     		adds	r2, r2, #1
 400              	.LVL31:
 343:../RTT/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 401              		.loc 1 343 17 discriminator 1 view .LVU146
 402 004a 102A     		cmp	r2, #16
 403 004c F9D1     		bne	.L17
 346:../RTT/Src/SEGGER_RTT.c **** }
 404              		.loc 1 346 3 view .LVU147
 405              		.syntax unified
 406              	@ 346 "../RTT/Src/SEGGER_RTT.c" 1
 407 004e BFF35F8F 		dmb
 408              	
 409              	@ 0 "" 2
 346:../RTT/Src/SEGGER_RTT.c **** }
 410              		.loc 1 346 13 view .LVU148
 347:../RTT/Src/SEGGER_RTT.c **** 
 411              		.loc 1 347 1 is_stmt 0 view .LVU149
 412              		.thumb
 413              		.syntax unified
 414 0052 08BD     		pop	{r3, pc}
 415              	.L20:
 416              		.align	2
 417              	.L19:
 418 0054 00000000 		.word	_SEGGER_RTT
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 20


 419 0058 00000000 		.word	.LC0
 420 005c 00000000 		.word	_acUpBuffer
 421 0060 00000000 		.word	_acDownBuffer
 422 0064 10000000 		.word	_aInitStr.0+16
 423              		.cfi_endproc
 424              	.LFE0:
 426              		.section	.text._PostTerminalSwitch.constprop.0,"ax",%progbits
 427              		.align	1
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 432              	_PostTerminalSwitch.constprop.0:
 433              	.LVL32:
 434              	.LFB36:
 498:../RTT/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 435              		.loc 1 498 13 is_stmt 1 view -0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 8
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 499:../RTT/Src/SEGGER_RTT.c **** 
 439              		.loc 1 499 3 view .LVU151
 501:../RTT/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 440              		.loc 1 501 3 view .LVU152
 498:../RTT/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 441              		.loc 1 498 13 is_stmt 0 view .LVU153
 442 0000 07B5     		push	{r0, r1, r2, lr}
 443              	.LCFI3:
 444              		.cfi_def_cfa_offset 16
 445              		.cfi_offset 14, -4
 501:../RTT/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 446              		.loc 1 501 9 view .LVU154
 447 0002 FF23     		movs	r3, #255
 448 0004 8DF80430 		strb	r3, [sp, #4]
 502:../RTT/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 449              		.loc 1 502 3 is_stmt 1 view .LVU155
 502:../RTT/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 450              		.loc 1 502 23 is_stmt 0 view .LVU156
 451 0008 054B     		ldr	r3, .L22
 503:../RTT/Src/SEGGER_RTT.c **** }
 452              		.loc 1 503 3 view .LVU157
 453 000a 0222     		movs	r2, #2
 502:../RTT/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 454              		.loc 1 502 9 view .LVU158
 455 000c 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 503:../RTT/Src/SEGGER_RTT.c **** }
 456              		.loc 1 503 3 view .LVU159
 457 000e 0548     		ldr	r0, .L22+4
 458              	.LVL33:
 502:../RTT/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 459              		.loc 1 502 9 view .LVU160
 460 0010 8DF80530 		strb	r3, [sp, #5]
 503:../RTT/Src/SEGGER_RTT.c **** }
 461              		.loc 1 503 3 is_stmt 1 view .LVU161
 462 0014 01A9     		add	r1, sp, #4
 463 0016 FFF7FEFF 		bl	_WriteBlocking
 464              	.LVL34:
 504:../RTT/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 21


 465              		.loc 1 504 1 is_stmt 0 view .LVU162
 466 001a 03B0     		add	sp, sp, #12
 467              	.LCFI4:
 468              		.cfi_def_cfa_offset 4
 469              		@ sp needed
 470 001c 5DF804FB 		ldr	pc, [sp], #4
 471              	.L23:
 472              		.align	2
 473              	.L22:
 474 0020 00000000 		.word	_aTerminalId
 475 0024 18000000 		.word	_SEGGER_RTT+24
 476              		.cfi_endproc
 477              	.LFE36:
 479              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 480              		.align	1
 481              		.global	SEGGER_RTT_ReadUpBufferNoLock
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 486              	SEGGER_RTT_ReadUpBufferNoLock:
 487              	.LVL35:
 488              	.LFB5:
 537:../RTT/Src/SEGGER_RTT.c **** 
 538:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 539:../RTT/Src/SEGGER_RTT.c **** *
 540:../RTT/Src/SEGGER_RTT.c **** *       Public code
 541:../RTT/Src/SEGGER_RTT.c **** *
 542:../RTT/Src/SEGGER_RTT.c **** **********************************************************************
 543:../RTT/Src/SEGGER_RTT.c **** */
 544:../RTT/Src/SEGGER_RTT.c **** 
 545:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 546:../RTT/Src/SEGGER_RTT.c **** *
 547:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 548:../RTT/Src/SEGGER_RTT.c **** *
 549:../RTT/Src/SEGGER_RTT.c **** *  Function description
 550:../RTT/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 551:../RTT/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 552:../RTT/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 553:../RTT/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer
 554:../RTT/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 555:../RTT/Src/SEGGER_RTT.c **** *
 556:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 557:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 558:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 559:../RTT/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 560:../RTT/Src/SEGGER_RTT.c **** *
 561:../RTT/Src/SEGGER_RTT.c **** *  Return value
 562:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 563:../RTT/Src/SEGGER_RTT.c **** *
 564:../RTT/Src/SEGGER_RTT.c **** *  Additional information
 565:../RTT/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 566:../RTT/Src/SEGGER_RTT.c **** */
 567:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 489              		.loc 1 567 96 is_stmt 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 22


 493              		.loc 1 567 96 is_stmt 0 view .LVU164
 494 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 495              	.LCFI5:
 496              		.cfi_def_cfa_offset 40
 497              		.cfi_offset 3, -40
 498              		.cfi_offset 4, -36
 499              		.cfi_offset 5, -32
 500              		.cfi_offset 6, -28
 501              		.cfi_offset 7, -24
 502              		.cfi_offset 8, -20
 503              		.cfi_offset 9, -16
 504              		.cfi_offset 10, -12
 505              		.cfi_offset 11, -8
 506              		.cfi_offset 14, -4
 507              	.LBB2:
 568:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 569:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 570:../RTT/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 571:../RTT/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 572:../RTT/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 573:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 574:../RTT/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 575:../RTT/Src/SEGGER_RTT.c **** 
 576:../RTT/Src/SEGGER_RTT.c ****   INIT();
 508              		.loc 1 576 3 view .LVU165
 509 0004 224F     		ldr	r7, .L40
 510 0006 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 511 0008 532B     		cmp	r3, #83
 512              	.LBE2:
 567:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 513              		.loc 1 567 96 view .LVU166
 514 000a 8046     		mov	r8, r0
 515 000c 8946     		mov	r9, r1
 568:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 516              		.loc 1 568 3 is_stmt 1 view .LVU167
 569:../RTT/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 517              		.loc 1 569 3 view .LVU168
 570:../RTT/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 518              		.loc 1 570 3 view .LVU169
 571:../RTT/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 519              		.loc 1 571 3 view .LVU170
 572:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 520              		.loc 1 572 3 view .LVU171
 573:../RTT/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 521              		.loc 1 573 3 view .LVU172
 574:../RTT/Src/SEGGER_RTT.c **** 
 522              		.loc 1 574 3 view .LVU173
 523              		.loc 1 576 3 view .LVU174
 524              	.LBB3:
 525              		.loc 1 576 3 view .LVU175
 526              		.loc 1 576 3 view .LVU176
 527              	.LVL36:
 528              		.loc 1 576 3 view .LVU177
 529              	.LBE3:
 567:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 530              		.loc 1 567 96 is_stmt 0 view .LVU178
 531 000e 1646     		mov	r6, r2
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 23


 532              	.LBB4:
 533              		.loc 1 576 3 view .LVU179
 534 0010 01D0     		beq	.L25
 535              		.loc 1 576 3 is_stmt 1 discriminator 1 view .LVU180
 536 0012 FFF7FEFF 		bl	_DoInit
 537              	.LVL37:
 538              	.L25:
 539              		.loc 1 576 3 is_stmt 0 discriminator 1 view .LVU181
 540              	.LBE4:
 541              		.loc 1 576 3 is_stmt 1 discriminator 3 view .LVU182
 577:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 542              		.loc 1 577 3 view .LVU183
 578:../RTT/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 543              		.loc 1 578 3 view .LVU184
 579:../RTT/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 544              		.loc 1 579 3 view .LVU185
 545              		.loc 1 579 9 is_stmt 0 view .LVU186
 546 0016 1823     		movs	r3, #24
 547 0018 03FB087B 		mla	fp, r3, r8, r7
 548 001c DBF82850 		ldr	r5, [fp, #40]
 549              	.LVL38:
 580:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 550              		.loc 1 580 3 is_stmt 1 view .LVU187
 551              		.loc 1 580 9 is_stmt 0 view .LVU188
 552 0020 DBF824A0 		ldr	r10, [fp, #36]
 553              	.LVL39:
 581:../RTT/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 554              		.loc 1 581 3 is_stmt 1 view .LVU189
 582:../RTT/Src/SEGGER_RTT.c ****   //
 583:../RTT/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 584:../RTT/Src/SEGGER_RTT.c ****   //
 585:../RTT/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 555              		.loc 1 585 3 view .LVU190
 556              		.loc 1 585 6 is_stmt 0 view .LVU191
 557 0024 5545     		cmp	r5, r10
 558 0026 30D9     		bls	.L29
 586:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 559              		.loc 1 586 5 is_stmt 1 view .LVU192
 560              		.loc 1 586 17 is_stmt 0 view .LVU193
 561 0028 DBF82040 		ldr	r4, [fp, #32]
 587:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 588:../RTT/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 562              		.loc 1 588 18 view .LVU194
 563 002c 08FB0333 		mla	r3, r8, r3, r3
 564 0030 3B44     		add	r3, r3, r7
 586:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 565              		.loc 1 586 17 view .LVU195
 566 0032 641B     		subs	r4, r4, r5
 567              	.LVL40:
 587:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 568              		.loc 1 587 5 is_stmt 1 view .LVU196
 587:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 569              		.loc 1 587 17 is_stmt 0 view .LVU197
 570 0034 B442     		cmp	r4, r6
 571              		.loc 1 588 10 view .LVU198
 572 0036 5968     		ldr	r1, [r3, #4]
 587:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 24


 573              		.loc 1 587 17 view .LVU199
 574 0038 28BF     		it	cs
 575 003a 3446     		movcs	r4, r6
 576              	.LVL41:
 577              		.loc 1 588 5 is_stmt 1 view .LVU200
 589:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 590:../RTT/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 591:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 592:../RTT/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 593:../RTT/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 594:../RTT/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 595:../RTT/Src/SEGGER_RTT.c ****     };
 596:../RTT/Src/SEGGER_RTT.c **** #else
 597:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 578              		.loc 1 597 5 view .LVU201
 579 003c 2944     		add	r1, r1, r5
 580 003e 4846     		mov	r0, r9
 581 0040 2246     		mov	r2, r4
 582 0042 FFF7FEFF 		bl	memcpy
 583              	.LVL42:
 598:../RTT/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 584              		.loc 1 598 5 view .LVU202
 599:../RTT/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 585              		.loc 1 599 5 view .LVU203
 600:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 601:../RTT/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 602:../RTT/Src/SEGGER_RTT.c **** #endif
 603:../RTT/Src/SEGGER_RTT.c ****     //
 604:../RTT/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 605:../RTT/Src/SEGGER_RTT.c ****     //
 606:../RTT/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 586              		.loc 1 606 8 is_stmt 0 view .LVU204
 587 0046 DBF82030 		ldr	r3, [fp, #32]
 601:../RTT/Src/SEGGER_RTT.c **** #endif
 588              		.loc 1 601 18 view .LVU205
 589 004a 2544     		add	r5, r5, r4
 590              	.LVL43:
 599:../RTT/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 591              		.loc 1 599 18 view .LVU206
 592 004c A144     		add	r9, r9, r4
 593              	.LVL44:
 600:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 594              		.loc 1 600 5 is_stmt 1 view .LVU207
 600:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 595              		.loc 1 600 18 is_stmt 0 view .LVU208
 596 004e 361B     		subs	r6, r6, r4
 597              	.LVL45:
 601:../RTT/Src/SEGGER_RTT.c **** #endif
 598              		.loc 1 601 5 is_stmt 1 view .LVU209
 599              		.loc 1 606 5 view .LVU210
 607:../RTT/Src/SEGGER_RTT.c ****       RdOff = 0u;
 600              		.loc 1 607 13 is_stmt 0 view .LVU211
 601 0050 AB42     		cmp	r3, r5
 602 0052 08BF     		it	eq
 603 0054 0025     		moveq	r5, #0
 604              	.LVL46:
 605              	.L26:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 25


 608:../RTT/Src/SEGGER_RTT.c ****     }
 609:../RTT/Src/SEGGER_RTT.c ****   }
 610:../RTT/Src/SEGGER_RTT.c ****   //
 611:../RTT/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 612:../RTT/Src/SEGGER_RTT.c ****   //
 613:../RTT/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 606              		.loc 1 613 3 is_stmt 1 view .LVU212
 607              		.loc 1 613 15 is_stmt 0 view .LVU213
 608 0056 AAEB050A 		sub	r10, r10, r5
 609              	.LVL47:
 614:../RTT/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 610              		.loc 1 614 3 is_stmt 1 view .LVU214
 611              		.loc 1 614 15 is_stmt 0 view .LVU215
 612 005a 5645     		cmp	r6, r10
 613 005c 28BF     		it	cs
 614 005e 5646     		movcs	r6, r10
 615              	.LVL48:
 615:../RTT/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 616              		.loc 1 615 3 is_stmt 1 view .LVU216
 617              		.loc 1 615 6 is_stmt 0 view .LVU217
 618 0060 5EB1     		cbz	r6, .L27
 616:../RTT/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 619              		.loc 1 616 5 is_stmt 1 view .LVU218
 620              	.LVL49:
 617:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 618:../RTT/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 619:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 620:../RTT/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 621:../RTT/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 622:../RTT/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 623:../RTT/Src/SEGGER_RTT.c ****     };
 624:../RTT/Src/SEGGER_RTT.c **** #else
 625:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 621              		.loc 1 625 5 view .LVU219
 616:../RTT/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 622              		.loc 1 616 18 is_stmt 0 view .LVU220
 623 0062 1823     		movs	r3, #24
 624 0064 08FB0333 		mla	r3, r8, r3, r3
 625 0068 3B44     		add	r3, r3, r7
 626              		.loc 1 625 5 view .LVU221
 627 006a 3246     		mov	r2, r6
 616:../RTT/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 628              		.loc 1 616 10 view .LVU222
 629 006c 5968     		ldr	r1, [r3, #4]
 630              		.loc 1 625 5 view .LVU223
 631 006e 4846     		mov	r0, r9
 632 0070 2944     		add	r1, r1, r5
 633 0072 FFF7FEFF 		bl	memcpy
 634              	.LVL50:
 626:../RTT/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 635              		.loc 1 626 5 is_stmt 1 view .LVU224
 636              		.loc 1 626 18 is_stmt 0 view .LVU225
 637 0076 3444     		add	r4, r4, r6
 638              	.LVL51:
 627:../RTT/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 639              		.loc 1 627 5 is_stmt 1 view .LVU226
 628:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 26


 640              		.loc 1 628 5 view .LVU227
 629:../RTT/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 641              		.loc 1 629 5 view .LVU228
 642              		.loc 1 629 18 is_stmt 0 view .LVU229
 643 0078 3544     		add	r5, r5, r6
 644              	.LVL52:
 645              	.L27:
 630:../RTT/Src/SEGGER_RTT.c **** #endif
 631:../RTT/Src/SEGGER_RTT.c ****   }
 632:../RTT/Src/SEGGER_RTT.c ****   //
 633:../RTT/Src/SEGGER_RTT.c ****   // Update read offset of buffer
 634:../RTT/Src/SEGGER_RTT.c ****   //
 635:../RTT/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 646              		.loc 1 635 3 is_stmt 1 view .LVU230
 647              		.loc 1 635 6 is_stmt 0 view .LVU231
 648 007a 1CB1     		cbz	r4, .L24
 636:../RTT/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 649              		.loc 1 636 5 is_stmt 1 view .LVU232
 650              		.loc 1 636 18 is_stmt 0 view .LVU233
 651 007c 1823     		movs	r3, #24
 652 007e 03FB0877 		mla	r7, r3, r8, r7
 653 0082 BD62     		str	r5, [r7, #40]
 637:../RTT/Src/SEGGER_RTT.c ****   }
 638:../RTT/Src/SEGGER_RTT.c ****   //
 639:../RTT/Src/SEGGER_RTT.c ****   return NumBytesRead;
 654              		.loc 1 639 3 is_stmt 1 view .LVU234
 655              	.L24:
 640:../RTT/Src/SEGGER_RTT.c **** }
 656              		.loc 1 640 1 is_stmt 0 view .LVU235
 657 0084 2046     		mov	r0, r4
 658 0086 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 659              	.LVL53:
 660              	.L29:
 581:../RTT/Src/SEGGER_RTT.c ****   //
 661              		.loc 1 581 16 view .LVU236
 662 008a 0024     		movs	r4, #0
 663 008c E3E7     		b	.L26
 664              	.L41:
 665 008e 00BF     		.align	2
 666              	.L40:
 667 0090 00000000 		.word	_SEGGER_RTT
 668              		.cfi_endproc
 669              	.LFE5:
 671              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 672              		.align	1
 673              		.global	SEGGER_RTT_ReadNoLock
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
 678              	SEGGER_RTT_ReadNoLock:
 679              	.LVL54:
 680              	.LFB6:
 641:../RTT/Src/SEGGER_RTT.c **** 
 642:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 643:../RTT/Src/SEGGER_RTT.c **** *
 644:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 645:../RTT/Src/SEGGER_RTT.c **** *
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 27


 646:../RTT/Src/SEGGER_RTT.c **** *  Function description
 647:../RTT/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 648:../RTT/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 649:../RTT/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 650:../RTT/Src/SEGGER_RTT.c **** *
 651:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 652:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 653:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 654:../RTT/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 655:../RTT/Src/SEGGER_RTT.c **** *
 656:../RTT/Src/SEGGER_RTT.c **** *  Return value
 657:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 658:../RTT/Src/SEGGER_RTT.c **** */
 659:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 681              		.loc 1 659 88 is_stmt 1 view -0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              		.loc 1 659 88 is_stmt 0 view .LVU238
 686 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 687              	.LCFI6:
 688              		.cfi_def_cfa_offset 40
 689              		.cfi_offset 3, -40
 690              		.cfi_offset 4, -36
 691              		.cfi_offset 5, -32
 692              		.cfi_offset 6, -28
 693              		.cfi_offset 7, -24
 694              		.cfi_offset 8, -20
 695              		.cfi_offset 9, -16
 696              		.cfi_offset 10, -12
 697              		.cfi_offset 11, -8
 698              		.cfi_offset 14, -4
 699              	.LBB5:
 660:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 661:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 662:../RTT/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 663:../RTT/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 664:../RTT/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 665:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 666:../RTT/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 667:../RTT/Src/SEGGER_RTT.c ****   //
 668:../RTT/Src/SEGGER_RTT.c ****   INIT();
 700              		.loc 1 668 3 view .LVU239
 701 0004 DFF88080 		ldr	r8, .L58
 702 0008 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
 703 000c 532B     		cmp	r3, #83
 704              	.LBE5:
 659:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 705              		.loc 1 659 88 view .LVU240
 706 000e 8246     		mov	r10, r0
 707 0010 8946     		mov	r9, r1
 660:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 708              		.loc 1 660 3 is_stmt 1 view .LVU241
 661:../RTT/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 709              		.loc 1 661 3 view .LVU242
 662:../RTT/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 710              		.loc 1 662 3 view .LVU243
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 28


 663:../RTT/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 711              		.loc 1 663 3 view .LVU244
 664:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 712              		.loc 1 664 3 view .LVU245
 665:../RTT/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 713              		.loc 1 665 3 view .LVU246
 666:../RTT/Src/SEGGER_RTT.c ****   //
 714              		.loc 1 666 3 view .LVU247
 715              		.loc 1 668 3 view .LVU248
 716              	.LBB6:
 717              		.loc 1 668 3 view .LVU249
 718              		.loc 1 668 3 view .LVU250
 719              	.LVL55:
 720              		.loc 1 668 3 view .LVU251
 721              	.LBE6:
 659:../RTT/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 722              		.loc 1 659 88 is_stmt 0 view .LVU252
 723 0012 1646     		mov	r6, r2
 724              	.LBB7:
 725              		.loc 1 668 3 view .LVU253
 726 0014 01D0     		beq	.L43
 727              		.loc 1 668 3 is_stmt 1 discriminator 1 view .LVU254
 728 0016 FFF7FEFF 		bl	_DoInit
 729              	.LVL56:
 730              	.L43:
 731              		.loc 1 668 3 is_stmt 0 discriminator 1 view .LVU255
 732              	.LBE7:
 733              		.loc 1 668 3 is_stmt 1 discriminator 3 view .LVU256
 669:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHE
 734              		.loc 1 669 3 view .LVU257
 670:../RTT/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 735              		.loc 1 670 3 view .LVU258
 671:../RTT/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 736              		.loc 1 671 3 view .LVU259
 737              		.loc 1 671 9 is_stmt 0 view .LVU260
 738 001a 1827     		movs	r7, #24
 739 001c 07FB0A87 		mla	r7, r7, r10, r8
 740 0020 3D6F     		ldr	r5, [r7, #112]
 741              	.LVL57:
 672:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 742              		.loc 1 672 3 is_stmt 1 view .LVU261
 743              		.loc 1 672 9 is_stmt 0 view .LVU262
 744 0022 D7F86CB0 		ldr	fp, [r7, #108]
 745              	.LVL58:
 673:../RTT/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 746              		.loc 1 673 3 is_stmt 1 view .LVU263
 674:../RTT/Src/SEGGER_RTT.c ****   //
 675:../RTT/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 676:../RTT/Src/SEGGER_RTT.c ****   //
 677:../RTT/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 747              		.loc 1 677 3 view .LVU264
 748              		.loc 1 677 6 is_stmt 0 view .LVU265
 749 0026 5D45     		cmp	r5, fp
 750 0028 2BD9     		bls	.L47
 678:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 751              		.loc 1 678 5 is_stmt 1 view .LVU266
 752              		.loc 1 678 17 is_stmt 0 view .LVU267
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 29


 753 002a BC6E     		ldr	r4, [r7, #104]
 679:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 680:../RTT/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 754              		.loc 1 680 10 view .LVU268
 755 002c 796E     		ldr	r1, [r7, #100]
 678:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 756              		.loc 1 678 17 view .LVU269
 757 002e 641B     		subs	r4, r4, r5
 758              	.LVL59:
 679:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 759              		.loc 1 679 5 is_stmt 1 view .LVU270
 679:../RTT/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 760              		.loc 1 679 17 is_stmt 0 view .LVU271
 761 0030 B442     		cmp	r4, r6
 762 0032 28BF     		it	cs
 763 0034 3446     		movcs	r4, r6
 764              	.LVL60:
 765              		.loc 1 680 5 is_stmt 1 view .LVU272
 681:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 682:../RTT/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 683:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 684:../RTT/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 685:../RTT/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 686:../RTT/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 687:../RTT/Src/SEGGER_RTT.c ****     };
 688:../RTT/Src/SEGGER_RTT.c **** #else
 689:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 766              		.loc 1 689 5 view .LVU273
 767 0036 2944     		add	r1, r1, r5
 768 0038 4846     		mov	r0, r9
 769 003a 2246     		mov	r2, r4
 770 003c FFF7FEFF 		bl	memcpy
 771              	.LVL61:
 690:../RTT/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 772              		.loc 1 690 5 view .LVU274
 691:../RTT/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 773              		.loc 1 691 5 view .LVU275
 692:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 693:../RTT/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 694:../RTT/Src/SEGGER_RTT.c **** #endif
 695:../RTT/Src/SEGGER_RTT.c ****     //
 696:../RTT/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 697:../RTT/Src/SEGGER_RTT.c ****     //
 698:../RTT/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 774              		.loc 1 698 8 is_stmt 0 view .LVU276
 775 0040 BB6E     		ldr	r3, [r7, #104]
 693:../RTT/Src/SEGGER_RTT.c **** #endif
 776              		.loc 1 693 18 view .LVU277
 777 0042 2544     		add	r5, r5, r4
 778              	.LVL62:
 691:../RTT/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 779              		.loc 1 691 18 view .LVU278
 780 0044 A144     		add	r9, r9, r4
 781              	.LVL63:
 692:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 782              		.loc 1 692 5 is_stmt 1 view .LVU279
 692:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 30


 783              		.loc 1 692 18 is_stmt 0 view .LVU280
 784 0046 361B     		subs	r6, r6, r4
 785              	.LVL64:
 693:../RTT/Src/SEGGER_RTT.c **** #endif
 786              		.loc 1 693 5 is_stmt 1 view .LVU281
 787              		.loc 1 698 5 view .LVU282
 699:../RTT/Src/SEGGER_RTT.c ****       RdOff = 0u;
 788              		.loc 1 699 13 is_stmt 0 view .LVU283
 789 0048 AB42     		cmp	r3, r5
 790 004a 08BF     		it	eq
 791 004c 0025     		moveq	r5, #0
 792              	.LVL65:
 793              	.L44:
 700:../RTT/Src/SEGGER_RTT.c ****     }
 701:../RTT/Src/SEGGER_RTT.c ****   }
 702:../RTT/Src/SEGGER_RTT.c ****   //
 703:../RTT/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 704:../RTT/Src/SEGGER_RTT.c ****   //
 705:../RTT/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 794              		.loc 1 705 3 is_stmt 1 view .LVU284
 795              		.loc 1 705 15 is_stmt 0 view .LVU285
 796 004e ABEB050B 		sub	fp, fp, r5
 797              	.LVL66:
 706:../RTT/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 798              		.loc 1 706 3 is_stmt 1 view .LVU286
 799              		.loc 1 706 15 is_stmt 0 view .LVU287
 800 0052 5E45     		cmp	r6, fp
 801 0054 28BF     		it	cs
 802 0056 5E46     		movcs	r6, fp
 803              	.LVL67:
 707:../RTT/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 804              		.loc 1 707 3 is_stmt 1 view .LVU288
 805              		.loc 1 707 6 is_stmt 0 view .LVU289
 806 0058 56B1     		cbz	r6, .L45
 708:../RTT/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 807              		.loc 1 708 5 is_stmt 1 view .LVU290
 808              	.LVL68:
 709:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 710:../RTT/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 711:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 712:../RTT/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 713:../RTT/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 714:../RTT/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 715:../RTT/Src/SEGGER_RTT.c ****     };
 716:../RTT/Src/SEGGER_RTT.c **** #else
 717:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 809              		.loc 1 717 5 view .LVU291
 708:../RTT/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 810              		.loc 1 708 18 is_stmt 0 view .LVU292
 811 005a 1823     		movs	r3, #24
 812 005c 03FB0A83 		mla	r3, r3, r10, r8
 813              		.loc 1 717 5 view .LVU293
 814 0060 3246     		mov	r2, r6
 708:../RTT/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 815              		.loc 1 708 10 view .LVU294
 816 0062 596E     		ldr	r1, [r3, #100]
 817              		.loc 1 717 5 view .LVU295
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 31


 818 0064 4846     		mov	r0, r9
 819 0066 2944     		add	r1, r1, r5
 820 0068 FFF7FEFF 		bl	memcpy
 821              	.LVL69:
 718:../RTT/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 822              		.loc 1 718 5 is_stmt 1 view .LVU296
 823              		.loc 1 718 18 is_stmt 0 view .LVU297
 824 006c 3444     		add	r4, r4, r6
 825              	.LVL70:
 719:../RTT/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 826              		.loc 1 719 5 is_stmt 1 view .LVU298
 720:../RTT/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 827              		.loc 1 720 5 view .LVU299
 721:../RTT/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 828              		.loc 1 721 5 view .LVU300
 829              		.loc 1 721 18 is_stmt 0 view .LVU301
 830 006e 3544     		add	r5, r5, r6
 831              	.LVL71:
 832              	.L45:
 722:../RTT/Src/SEGGER_RTT.c **** #endif
 723:../RTT/Src/SEGGER_RTT.c ****   }
 724:../RTT/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 833              		.loc 1 724 3 is_stmt 1 view .LVU302
 834              		.loc 1 724 6 is_stmt 0 view .LVU303
 835 0070 24B1     		cbz	r4, .L42
 725:../RTT/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 836              		.loc 1 725 5 is_stmt 1 view .LVU304
 837              		.loc 1 725 18 is_stmt 0 view .LVU305
 838 0072 1823     		movs	r3, #24
 839 0074 03FB0A88 		mla	r8, r3, r10, r8
 840 0078 C8F87050 		str	r5, [r8, #112]
 726:../RTT/Src/SEGGER_RTT.c ****   }
 727:../RTT/Src/SEGGER_RTT.c ****   //
 728:../RTT/Src/SEGGER_RTT.c ****   return NumBytesRead;
 841              		.loc 1 728 3 is_stmt 1 view .LVU306
 842              	.L42:
 729:../RTT/Src/SEGGER_RTT.c **** }
 843              		.loc 1 729 1 is_stmt 0 view .LVU307
 844 007c 2046     		mov	r0, r4
 845 007e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 846              	.LVL72:
 847              	.L47:
 673:../RTT/Src/SEGGER_RTT.c ****   //
 848              		.loc 1 673 16 view .LVU308
 849 0082 0024     		movs	r4, #0
 850 0084 E3E7     		b	.L44
 851              	.L59:
 852 0086 00BF     		.align	2
 853              	.L58:
 854 0088 00000000 		.word	_SEGGER_RTT
 855              		.cfi_endproc
 856              	.LFE6:
 858              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 859              		.align	1
 860              		.global	SEGGER_RTT_ReadUpBuffer
 861              		.syntax unified
 862              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 32


 863              		.thumb_func
 865              	SEGGER_RTT_ReadUpBuffer:
 866              	.LVL73:
 867              	.LFB7:
 730:../RTT/Src/SEGGER_RTT.c **** 
 731:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 732:../RTT/Src/SEGGER_RTT.c **** *
 733:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 734:../RTT/Src/SEGGER_RTT.c **** *
 735:../RTT/Src/SEGGER_RTT.c **** *  Function description
 736:../RTT/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 737:../RTT/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 738:../RTT/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer
 739:../RTT/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 740:../RTT/Src/SEGGER_RTT.c **** *
 741:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 742:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 743:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 744:../RTT/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 745:../RTT/Src/SEGGER_RTT.c **** *
 746:../RTT/Src/SEGGER_RTT.c **** *  Return value
 747:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 748:../RTT/Src/SEGGER_RTT.c **** *
 749:../RTT/Src/SEGGER_RTT.c **** *  Additional information
 750:../RTT/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 751:../RTT/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 752:../RTT/Src/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 753:../RTT/Src/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer,
 754:../RTT/Src/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 755:../RTT/Src/SEGGER_RTT.c **** */
 756:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 868              		.loc 1 756 92 is_stmt 1 view -0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 757:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 872              		.loc 1 757 3 view .LVU310
 873              	.LBB8:
 758:../RTT/Src/SEGGER_RTT.c **** 
 759:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 874              		.loc 1 759 3 view .LVU311
 875              		.loc 1 759 3 view .LVU312
 876              	.LBE8:
 756:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 877              		.loc 1 756 92 is_stmt 0 view .LVU313
 878 0000 10B5     		push	{r4, lr}
 879              	.LCFI7:
 880              		.cfi_def_cfa_offset 8
 881              		.cfi_offset 4, -8
 882              		.cfi_offset 14, -4
 756:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 883              		.loc 1 756 92 view .LVU314
 884 0002 0B46     		mov	r3, r1
 885              	.LBB9:
 886              		.loc 1 759 3 view .LVU315
 887              		.syntax unified
 888              	@ 759 "../RTT/Src/SEGGER_RTT.c" 1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 33


 889 0004 EFF31184 		mrs   r4, basepri  
 890 0008 4FF02001 		mov   r1, #32       
 891 000c 81F31188 		msr   basepri, r1  
 892              		
 893              	@ 0 "" 2
 894              	.LVL74:
 895              		.loc 1 759 20 is_stmt 1 view .LVU316
 760:../RTT/Src/SEGGER_RTT.c ****   //
 761:../RTT/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 762:../RTT/Src/SEGGER_RTT.c ****   //
 763:../RTT/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 896              		.loc 1 763 3 view .LVU317
 897              		.loc 1 763 18 is_stmt 0 view .LVU318
 898              		.thumb
 899              		.syntax unified
 900 0010 1946     		mov	r1, r3
 901 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 902              	.LVL75:
 764:../RTT/Src/SEGGER_RTT.c ****   //
 765:../RTT/Src/SEGGER_RTT.c ****   // Finish up.
 766:../RTT/Src/SEGGER_RTT.c ****   //
 767:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 903              		.loc 1 767 3 is_stmt 1 view .LVU319
 904              		.syntax unified
 905              	@ 767 "../RTT/Src/SEGGER_RTT.c" 1
 906 0016 84F31188 		msr   basepri, r4  
 907              		
 908              	@ 0 "" 2
 909              		.thumb
 910              		.syntax unified
 911              	.LBE9:
 912              		.loc 1 767 22 view .LVU320
 768:../RTT/Src/SEGGER_RTT.c ****   //
 769:../RTT/Src/SEGGER_RTT.c ****   return NumBytesRead;
 913              		.loc 1 769 3 view .LVU321
 770:../RTT/Src/SEGGER_RTT.c **** }
 914              		.loc 1 770 1 is_stmt 0 view .LVU322
 915 001a 10BD     		pop	{r4, pc}
 916              		.loc 1 770 1 view .LVU323
 917              		.cfi_endproc
 918              	.LFE7:
 920              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 921              		.align	1
 922              		.global	SEGGER_RTT_Read
 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 927              	SEGGER_RTT_Read:
 928              	.LVL76:
 929              	.LFB8:
 771:../RTT/Src/SEGGER_RTT.c **** 
 772:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 773:../RTT/Src/SEGGER_RTT.c **** *
 774:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 775:../RTT/Src/SEGGER_RTT.c **** *
 776:../RTT/Src/SEGGER_RTT.c **** *  Function description
 777:../RTT/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 34


 778:../RTT/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 779:../RTT/Src/SEGGER_RTT.c **** *
 780:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 781:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 782:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 783:../RTT/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 784:../RTT/Src/SEGGER_RTT.c **** *
 785:../RTT/Src/SEGGER_RTT.c **** *  Return value
 786:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 787:../RTT/Src/SEGGER_RTT.c **** */
 788:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 930              		.loc 1 788 84 is_stmt 1 view -0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 789:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 934              		.loc 1 789 3 view .LVU325
 935              	.LBB10:
 790:../RTT/Src/SEGGER_RTT.c **** 
 791:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 936              		.loc 1 791 3 view .LVU326
 937              		.loc 1 791 3 view .LVU327
 938              	.LBE10:
 788:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 939              		.loc 1 788 84 is_stmt 0 view .LVU328
 940 0000 10B5     		push	{r4, lr}
 941              	.LCFI8:
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 4, -8
 944              		.cfi_offset 14, -4
 788:../RTT/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 945              		.loc 1 788 84 view .LVU329
 946 0002 0B46     		mov	r3, r1
 947              	.LBB11:
 948              		.loc 1 791 3 view .LVU330
 949              		.syntax unified
 950              	@ 791 "../RTT/Src/SEGGER_RTT.c" 1
 951 0004 EFF31184 		mrs   r4, basepri  
 952 0008 4FF02001 		mov   r1, #32       
 953 000c 81F31188 		msr   basepri, r1  
 954              		
 955              	@ 0 "" 2
 956              	.LVL77:
 957              		.loc 1 791 20 is_stmt 1 view .LVU331
 792:../RTT/Src/SEGGER_RTT.c ****   //
 793:../RTT/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 794:../RTT/Src/SEGGER_RTT.c ****   //
 795:../RTT/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 958              		.loc 1 795 3 view .LVU332
 959              		.loc 1 795 18 is_stmt 0 view .LVU333
 960              		.thumb
 961              		.syntax unified
 962 0010 1946     		mov	r1, r3
 963 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 964              	.LVL78:
 796:../RTT/Src/SEGGER_RTT.c ****   //
 797:../RTT/Src/SEGGER_RTT.c ****   // Finish up.
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 35


 798:../RTT/Src/SEGGER_RTT.c ****   //
 799:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 965              		.loc 1 799 3 is_stmt 1 view .LVU334
 966              		.syntax unified
 967              	@ 799 "../RTT/Src/SEGGER_RTT.c" 1
 968 0016 84F31188 		msr   basepri, r4  
 969              		
 970              	@ 0 "" 2
 971              		.thumb
 972              		.syntax unified
 973              	.LBE11:
 974              		.loc 1 799 22 view .LVU335
 800:../RTT/Src/SEGGER_RTT.c ****   //
 801:../RTT/Src/SEGGER_RTT.c ****   return NumBytesRead;
 975              		.loc 1 801 3 view .LVU336
 802:../RTT/Src/SEGGER_RTT.c **** }
 976              		.loc 1 802 1 is_stmt 0 view .LVU337
 977 001a 10BD     		pop	{r4, pc}
 978              		.loc 1 802 1 view .LVU338
 979              		.cfi_endproc
 980              	.LFE8:
 982              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 983              		.align	1
 984              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 985              		.syntax unified
 986              		.thumb
 987              		.thumb_func
 989              	SEGGER_RTT_WriteWithOverwriteNoLock:
 990              	.LVL79:
 991              	.LFB9:
 803:../RTT/Src/SEGGER_RTT.c **** 
 804:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 805:../RTT/Src/SEGGER_RTT.c **** *
 806:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 807:../RTT/Src/SEGGER_RTT.c **** *
 808:../RTT/Src/SEGGER_RTT.c **** *  Function description
 809:../RTT/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 810:../RTT/Src/SEGGER_RTT.c **** *    control block.
 811:../RTT/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application
 812:../RTT/Src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 813:../RTT/Src/SEGGER_RTT.c **** *
 814:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 815:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 816:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 817:../RTT/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 818:../RTT/Src/SEGGER_RTT.c **** *
 819:../RTT/Src/SEGGER_RTT.c **** *  Notes
 820:../RTT/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 821:../RTT/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 822:../RTT/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 823:../RTT/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 824:../RTT/Src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link
 825:../RTT/Src/SEGGER_RTT.c **** *        connection reads RTT data.
 826:../RTT/Src/SEGGER_RTT.c **** */
 827:../RTT/Src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 992              		.loc 1 827 104 is_stmt 1 view -0
 993              		.cfi_startproc
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 36


 994              		@ args = 0, pretend = 0, frame = 0
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 828:../RTT/Src/SEGGER_RTT.c ****   const char*           pData;
 996              		.loc 1 828 3 view .LVU340
 829:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 997              		.loc 1 829 3 view .LVU341
 830:../RTT/Src/SEGGER_RTT.c ****   unsigned              Avail;
 998              		.loc 1 830 3 view .LVU342
 831:../RTT/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 999              		.loc 1 831 3 view .LVU343
 832:../RTT/Src/SEGGER_RTT.c ****   //
 833:../RTT/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 834:../RTT/Src/SEGGER_RTT.c ****   //
 835:../RTT/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1000              		.loc 1 835 3 view .LVU344
 827:../RTT/Src/SEGGER_RTT.c ****   const char*           pData;
 1001              		.loc 1 827 104 is_stmt 0 view .LVU345
 1002 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1003              	.LCFI9:
 1004              		.cfi_def_cfa_offset 40
 1005              		.cfi_offset 3, -40
 1006              		.cfi_offset 4, -36
 1007              		.cfi_offset 5, -32
 1008              		.cfi_offset 6, -28
 1009              		.cfi_offset 7, -24
 1010              		.cfi_offset 8, -20
 1011              		.cfi_offset 9, -16
 1012              		.cfi_offset 10, -12
 1013              		.cfi_offset 11, -8
 1014              		.cfi_offset 14, -4
 836:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 837:../RTT/Src/SEGGER_RTT.c ****   //
 838:../RTT/Src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 839:../RTT/Src/SEGGER_RTT.c ****   //
 840:../RTT/Src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1015              		.loc 1 840 12 view .LVU346
 1016 0004 2C4E     		ldr	r6, .L75
 827:../RTT/Src/SEGGER_RTT.c ****   const char*           pData;
 1017              		.loc 1 827 104 view .LVU347
 1018 0006 1446     		mov	r4, r2
 1019              		.loc 1 840 12 view .LVU348
 1020 0008 1822     		movs	r2, #24
 1021              	.LVL80:
 1022              		.loc 1 840 12 view .LVU349
 1023 000a 02FB0062 		mla	r2, r2, r0, r6
 827:../RTT/Src/SEGGER_RTT.c ****   const char*           pData;
 1024              		.loc 1 827 104 view .LVU350
 1025 000e 0F46     		mov	r7, r1
 1026              	.LVL81:
 836:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1027              		.loc 1 836 3 is_stmt 1 view .LVU351
 1028              		.loc 1 840 3 view .LVU352
 1029              		.loc 1 840 28 is_stmt 0 view .LVU353
 1030 0010 936A     		ldr	r3, [r2, #40]
 1031              		.loc 1 840 12 view .LVU354
 1032 0012 516A     		ldr	r1, [r2, #36]
 1033              	.LVL82:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 37


 1034              		.loc 1 840 6 view .LVU355
 1035 0014 9942     		cmp	r1, r3
 827:../RTT/Src/SEGGER_RTT.c ****   const char*           pData;
 1036              		.loc 1 827 104 view .LVU356
 1037 0016 0546     		mov	r5, r0
 1038              		.loc 1 840 6 view .LVU357
 1039 0018 23D1     		bne	.L63
 841:../RTT/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1040              		.loc 1 841 5 is_stmt 1 view .LVU358
 1041              		.loc 1 841 11 is_stmt 0 view .LVU359
 1042 001a 136A     		ldr	r3, [r2, #32]
 1043 001c 013B     		subs	r3, r3, #1
 1044              	.LVL83:
 1045              	.L64:
 842:../RTT/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 843:../RTT/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 844:../RTT/Src/SEGGER_RTT.c ****   } else {
 845:../RTT/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 846:../RTT/Src/SEGGER_RTT.c ****   }
 847:../RTT/Src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1046              		.loc 1 847 3 is_stmt 1 view .LVU360
 1047              		.loc 1 847 6 is_stmt 0 view .LVU361
 1048 001e A342     		cmp	r3, r4
 1049 0020 28D3     		bcc	.L66
 1050              	.LVL84:
 1051              	.L70:
 848:../RTT/Src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 849:../RTT/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 850:../RTT/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 851:../RTT/Src/SEGGER_RTT.c ****     }
 852:../RTT/Src/SEGGER_RTT.c ****   }
 853:../RTT/Src/SEGGER_RTT.c ****   //
 854:../RTT/Src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 855:../RTT/Src/SEGGER_RTT.c ****   //
 856:../RTT/Src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1052              		.loc 1 856 3 is_stmt 1 view .LVU362
 1053              		.loc 1 856 16 is_stmt 0 view .LVU363
 1054 0022 4FF0180A 		mov	r10, #24
 1055 0026 0AFB0563 		mla	r3, r10, r5, r6
 857:../RTT/Src/SEGGER_RTT.c ****   do {
 858:../RTT/Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 859:../RTT/Src/SEGGER_RTT.c ****       //
 860:../RTT/Src/SEGGER_RTT.c ****       // Last round
 861:../RTT/Src/SEGGER_RTT.c ****       //
 862:../RTT/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1056              		.loc 1 862 20 view .LVU364
 1057 002a 05FB0AAB 		mla	fp, r5, r10, r10
 856:../RTT/Src/SEGGER_RTT.c ****   do {
 1058              		.loc 1 856 9 view .LVU365
 1059 002e 1B6A     		ldr	r3, [r3, #32]
 1060 0030 A3EB0108 		sub	r8, r3, r1
 1061              	.LVL85:
 1062              	.L67:
 857:../RTT/Src/SEGGER_RTT.c ****   do {
 1063              		.loc 1 857 3 is_stmt 1 view .LVU366
 858:../RTT/Src/SEGGER_RTT.c ****       //
 1064              		.loc 1 858 5 view .LVU367
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 38


 1065              		.loc 1 862 20 is_stmt 0 view .LVU368
 1066 0034 06EB0B03 		add	r3, r6, fp
 1067              		.loc 1 862 37 view .LVU369
 1068 0038 0AFB0569 		mla	r9, r10, r5, r6
 1069              		.loc 1 862 12 view .LVU370
 1070 003c 5868     		ldr	r0, [r3, #4]
 1071 003e D9F82430 		ldr	r3, [r9, #36]
 858:../RTT/Src/SEGGER_RTT.c ****       //
 1072              		.loc 1 858 8 view .LVU371
 1073 0042 4445     		cmp	r4, r8
 1074              		.loc 1 862 12 view .LVU372
 1075 0044 1844     		add	r0, r0, r3
 858:../RTT/Src/SEGGER_RTT.c ****       //
 1076              		.loc 1 858 8 view .LVU373
 1077 0046 24D2     		bcs	.L71
 1078              		.loc 1 862 7 is_stmt 1 view .LVU374
 1079              	.LVL86:
 863:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 864:../RTT/Src/SEGGER_RTT.c ****       Avail = NumBytes;
 865:../RTT/Src/SEGGER_RTT.c ****       while (NumBytes--) {
 866:../RTT/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 867:../RTT/Src/SEGGER_RTT.c ****       };
 868:../RTT/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 869:../RTT/Src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 870:../RTT/Src/SEGGER_RTT.c **** #else
 871:../RTT/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 1080              		.loc 1 871 7 view .LVU375
 1081 0048 2246     		mov	r2, r4
 1082 004a 3946     		mov	r1, r7
 1083 004c FFF7FEFF 		bl	memcpy
 1084              	.LVL87:
 872:../RTT/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1085              		.loc 1 872 7 view .LVU376
 1086              		.syntax unified
 1087              	@ 872 "../RTT/Src/SEGGER_RTT.c" 1
 1088 0050 BFF35F8F 		dmb
 1089              	
 1090              	@ 0 "" 2
 1091              		.loc 1 872 17 view .LVU377
 873:../RTT/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1092              		.loc 1 873 7 view .LVU378
 1093              		.loc 1 873 20 is_stmt 0 view .LVU379
 1094              		.thumb
 1095              		.syntax unified
 1096 0054 D9F82430 		ldr	r3, [r9, #36]
 1097 0058 2344     		add	r3, r3, r4
 1098 005a C9F82430 		str	r3, [r9, #36]
 874:../RTT/Src/SEGGER_RTT.c **** #endif
 875:../RTT/Src/SEGGER_RTT.c ****       break;
 1099              		.loc 1 875 7 is_stmt 1 view .LVU380
 1100              	.LVL88:
 1101              	.L62:
 876:../RTT/Src/SEGGER_RTT.c ****     } else {
 877:../RTT/Src/SEGGER_RTT.c ****       //
 878:../RTT/Src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 879:../RTT/Src/SEGGER_RTT.c ****       //
 880:../RTT/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 39


 881:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 882:../RTT/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 883:../RTT/Src/SEGGER_RTT.c ****       while (Avail--) {
 884:../RTT/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 885:../RTT/Src/SEGGER_RTT.c ****       };
 886:../RTT/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 887:../RTT/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 888:../RTT/Src/SEGGER_RTT.c **** #else
 889:../RTT/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 890:../RTT/Src/SEGGER_RTT.c ****       pData += Avail;
 891:../RTT/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 892:../RTT/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 893:../RTT/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 894:../RTT/Src/SEGGER_RTT.c **** #endif
 895:../RTT/Src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 896:../RTT/Src/SEGGER_RTT.c ****     }
 897:../RTT/Src/SEGGER_RTT.c ****   } while (NumBytes);
 898:../RTT/Src/SEGGER_RTT.c **** }
 1102              		.loc 1 898 1 is_stmt 0 view .LVU381
 1103 005e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1104              	.LVL89:
 1105              	.L63:
 842:../RTT/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1106              		.loc 1 842 10 is_stmt 1 view .LVU382
 842:../RTT/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1107              		.loc 1 842 35 is_stmt 0 view .LVU383
 1108 0062 936A     		ldr	r3, [r2, #40]
 842:../RTT/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1109              		.loc 1 842 13 view .LVU384
 1110 0064 9942     		cmp	r1, r3
 843:../RTT/Src/SEGGER_RTT.c ****   } else {
 1111              		.loc 1 843 18 view .LVU385
 1112 0066 936A     		ldr	r3, [r2, #40]
 843:../RTT/Src/SEGGER_RTT.c ****   } else {
 1113              		.loc 1 843 5 is_stmt 1 view .LVU386
 845:../RTT/Src/SEGGER_RTT.c ****   }
 1114              		.loc 1 845 5 view .LVU387
 845:../RTT/Src/SEGGER_RTT.c ****   }
 1115              		.loc 1 845 11 is_stmt 0 view .LVU388
 1116 0068 24BF     		itt	cs
 1117 006a 126A     		ldrcs	r2, [r2, #32]
 1118 006c 9B18     		addcs	r3, r3, r2
 1119 006e 013B     		subs	r3, r3, #1
 1120 0070 5B1A     		subs	r3, r3, r1
 1121 0072 D4E7     		b	.L64
 1122              	.LVL90:
 1123              	.L66:
 848:../RTT/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1124              		.loc 1 848 5 is_stmt 1 view .LVU389
 848:../RTT/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1125              		.loc 1 848 10 is_stmt 0 view .LVU390
 1126 0074 1822     		movs	r2, #24
 1127 0076 02FB0562 		mla	r2, r2, r5, r6
 1128 007a 906A     		ldr	r0, [r2, #40]
 1129              	.LVL91:
 848:../RTT/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1130              		.loc 1 848 18 view .LVU391
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 40


 1131 007c 2044     		add	r0, r0, r4
 1132 007e C31A     		subs	r3, r0, r3
 1133              	.LVL92:
 849:../RTT/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1134              		.loc 1 849 33 view .LVU392
 1135 0080 106A     		ldr	r0, [r2, #32]
 848:../RTT/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1136              		.loc 1 848 18 view .LVU393
 1137 0082 9362     		str	r3, [r2, #40]
 849:../RTT/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1138              		.loc 1 849 5 is_stmt 1 view .LVU394
 1139              	.L68:
 849:../RTT/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1140              		.loc 1 849 25 view .LVU395
 849:../RTT/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1141              		.loc 1 849 17 is_stmt 0 view .LVU396
 1142 0084 936A     		ldr	r3, [r2, #40]
 849:../RTT/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1143              		.loc 1 849 25 view .LVU397
 1144 0086 8342     		cmp	r3, r0
 1145 0088 CBD3     		bcc	.L70
 850:../RTT/Src/SEGGER_RTT.c ****     }
 1146              		.loc 1 850 7 is_stmt 1 view .LVU398
 850:../RTT/Src/SEGGER_RTT.c ****     }
 1147              		.loc 1 850 12 is_stmt 0 view .LVU399
 1148 008a 936A     		ldr	r3, [r2, #40]
 850:../RTT/Src/SEGGER_RTT.c ****     }
 1149              		.loc 1 850 20 view .LVU400
 1150 008c 1B1A     		subs	r3, r3, r0
 1151 008e 9362     		str	r3, [r2, #40]
 1152 0090 F8E7     		b	.L68
 1153              	.LVL93:
 1154              	.L71:
 880:../RTT/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1155              		.loc 1 880 7 is_stmt 1 view .LVU401
 889:../RTT/Src/SEGGER_RTT.c ****       pData += Avail;
 1156              		.loc 1 889 7 view .LVU402
 1157 0092 3946     		mov	r1, r7
 1158 0094 4246     		mov	r2, r8
 1159 0096 FFF7FEFF 		bl	memcpy
 1160              	.LVL94:
 890:../RTT/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1161              		.loc 1 890 7 view .LVU403
 890:../RTT/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1162              		.loc 1 890 13 is_stmt 0 view .LVU404
 1163 009a 4744     		add	r7, r7, r8
 1164              	.LVL95:
 891:../RTT/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1165              		.loc 1 891 7 is_stmt 1 view .LVU405
 1166              		.syntax unified
 1167              	@ 891 "../RTT/Src/SEGGER_RTT.c" 1
 1168 009c BFF35F8F 		dmb
 1169              	
 1170              	@ 0 "" 2
 891:../RTT/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1171              		.loc 1 891 17 view .LVU406
 892:../RTT/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 41


 1172              		.loc 1 892 7 view .LVU407
 892:../RTT/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1173              		.loc 1 892 20 is_stmt 0 view .LVU408
 1174              		.thumb
 1175              		.syntax unified
 1176 00a0 0023     		movs	r3, #0
 1177 00a2 C9F82430 		str	r3, [r9, #36]
 893:../RTT/Src/SEGGER_RTT.c **** #endif
 1178              		.loc 1 893 7 is_stmt 1 view .LVU409
 895:../RTT/Src/SEGGER_RTT.c ****     }
 1179              		.loc 1 895 13 is_stmt 0 view .LVU410
 1180 00a6 D9F82030 		ldr	r3, [r9, #32]
 893:../RTT/Src/SEGGER_RTT.c **** #endif
 1181              		.loc 1 893 16 view .LVU411
 1182 00aa A4EB0804 		sub	r4, r4, r8
 1183              	.LVL96:
 895:../RTT/Src/SEGGER_RTT.c ****     }
 1184              		.loc 1 895 7 is_stmt 1 view .LVU412
 895:../RTT/Src/SEGGER_RTT.c ****     }
 1185              		.loc 1 895 13 is_stmt 0 view .LVU413
 1186 00ae 03F1FF38 		add	r8, r3, #-1
 1187              	.LVL97:
 897:../RTT/Src/SEGGER_RTT.c **** }
 1188              		.loc 1 897 12 is_stmt 1 view .LVU414
 1189 00b2 002C     		cmp	r4, #0
 1190 00b4 BED1     		bne	.L67
 1191 00b6 D2E7     		b	.L62
 1192              	.L76:
 1193              		.align	2
 1194              	.L75:
 1195 00b8 00000000 		.word	_SEGGER_RTT
 1196              		.cfi_endproc
 1197              	.LFE9:
 1199              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1200              		.align	1
 1201              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1202              		.syntax unified
 1203              		.thumb
 1204              		.thumb_func
 1206              	SEGGER_RTT_WriteDownBufferNoLock:
 1207              	.LVL98:
 1208              	.LFB10:
 899:../RTT/Src/SEGGER_RTT.c **** 
 900:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 901:../RTT/Src/SEGGER_RTT.c **** *
 902:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 903:../RTT/Src/SEGGER_RTT.c **** *
 904:../RTT/Src/SEGGER_RTT.c **** *  Function description
 905:../RTT/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 906:../RTT/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 907:../RTT/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 908:../RTT/Src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 909:../RTT/Src/SEGGER_RTT.c **** *
 910:../RTT/Src/SEGGER_RTT.c **** *  Parameters
 911:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 912:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 913:../RTT/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 42


 914:../RTT/Src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 915:../RTT/Src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 916:../RTT/Src/SEGGER_RTT.c **** *
 917:../RTT/Src/SEGGER_RTT.c **** *  Return value
 918:../RTT/Src/SEGGER_RTT.c **** *    1: Data has been copied
 919:../RTT/Src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 920:../RTT/Src/SEGGER_RTT.c **** *
 921:../RTT/Src/SEGGER_RTT.c **** *  Notes
 922:../RTT/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 923:../RTT/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 924:../RTT/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 925:../RTT/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 926:../RTT/Src/SEGGER_RTT.c **** */
 927:../RTT/Src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 928:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 929:../RTT/Src/SEGGER_RTT.c ****   const char*           pData;
 930:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 931:../RTT/Src/SEGGER_RTT.c ****   unsigned              Avail;
 932:../RTT/Src/SEGGER_RTT.c ****   unsigned              RdOff;
 933:../RTT/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 934:../RTT/Src/SEGGER_RTT.c ****   unsigned              Rem;
 935:../RTT/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 936:../RTT/Src/SEGGER_RTT.c ****   //
 937:../RTT/Src/SEGGER_RTT.c ****   // Cases:
 938:../RTT/Src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 939:../RTT/Src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 940:../RTT/Src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 941:../RTT/Src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 942:../RTT/Src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 943:../RTT/Src/SEGGER_RTT.c ****   //
 944:../RTT/Src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 945:../RTT/Src/SEGGER_RTT.c ****   //
 946:../RTT/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 947:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 948:../RTT/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 949:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 950:../RTT/Src/SEGGER_RTT.c ****   pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 951:../RTT/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 952:../RTT/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 953:../RTT/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 954:../RTT/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 955:../RTT/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 956:../RTT/Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 957:../RTT/Src/SEGGER_RTT.c ****       return 1;
 958:../RTT/Src/SEGGER_RTT.c ****     }
 959:../RTT/Src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 960:../RTT/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 961:../RTT/Src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 962:../RTT/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 963:../RTT/Src/SEGGER_RTT.c ****       NumBytes -= Rem;
 964:../RTT/Src/SEGGER_RTT.c ****       //
 965:../RTT/Src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 966:../RTT/Src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 967:../RTT/Src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 968:../RTT/Src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 969:../RTT/Src/SEGGER_RTT.c ****       //
 970:../RTT/Src/SEGGER_RTT.c ****       if (NumBytes) {
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 43


 971:../RTT/Src/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 972:../RTT/Src/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 973:../RTT/Src/SEGGER_RTT.c ****       }
 974:../RTT/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 975:../RTT/Src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 976:../RTT/Src/SEGGER_RTT.c ****       return 1;
 977:../RTT/Src/SEGGER_RTT.c ****     }
 978:../RTT/Src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 979:../RTT/Src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 980:../RTT/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 981:../RTT/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 982:../RTT/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 983:../RTT/Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 984:../RTT/Src/SEGGER_RTT.c ****       return 1;
 985:../RTT/Src/SEGGER_RTT.c ****     }
 986:../RTT/Src/SEGGER_RTT.c ****   }
 987:../RTT/Src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 988:../RTT/Src/SEGGER_RTT.c **** }
 989:../RTT/Src/SEGGER_RTT.c **** #endif
 990:../RTT/Src/SEGGER_RTT.c **** 
 991:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
 992:../RTT/Src/SEGGER_RTT.c **** *
 993:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 994:../RTT/Src/SEGGER_RTT.c **** *
 995:../RTT/Src/SEGGER_RTT.c **** *  Function description
 996:../RTT/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 997:../RTT/Src/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
 998:../RTT/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
 999:../RTT/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer
1000:../RTT/Src/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
1001:../RTT/Src/SEGGER_RTT.c **** *
1002:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1003:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
1004:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1005:../RTT/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1006:../RTT/Src/SEGGER_RTT.c **** *
1007:../RTT/Src/SEGGER_RTT.c **** *  Return value
1008:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1009:../RTT/Src/SEGGER_RTT.c **** *
1010:../RTT/Src/SEGGER_RTT.c **** *  Notes
1011:../RTT/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1012:../RTT/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1013:../RTT/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1014:../RTT/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1015:../RTT/Src/SEGGER_RTT.c **** *
1016:../RTT/Src/SEGGER_RTT.c **** *  Additional information
1017:../RTT/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1018:../RTT/Src/SEGGER_RTT.c **** */
1019:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1209              		.loc 1 1019 105 view -0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 0
 1212              		@ frame_needed = 0, uses_anonymous_args = 0
1020:../RTT/Src/SEGGER_RTT.c ****   unsigned                Status;
 1213              		.loc 1 1020 3 view .LVU416
1021:../RTT/Src/SEGGER_RTT.c ****   unsigned                Avail;
 1214              		.loc 1 1021 3 view .LVU417
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 44


1022:../RTT/Src/SEGGER_RTT.c ****   const char*             pData;
 1215              		.loc 1 1022 3 view .LVU418
1023:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1216              		.loc 1 1023 3 view .LVU419
1024:../RTT/Src/SEGGER_RTT.c ****   //
1025:../RTT/Src/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1026:../RTT/Src/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1027:../RTT/Src/SEGGER_RTT.c ****   //
1028:../RTT/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1217              		.loc 1 1028 3 view .LVU420
1029:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_
 1218              		.loc 1 1029 3 view .LVU421
1019:../RTT/Src/SEGGER_RTT.c ****   unsigned                Status;
 1219              		.loc 1 1019 105 is_stmt 0 view .LVU422
 1220 0000 70B5     		push	{r4, r5, r6, lr}
 1221              	.LCFI10:
 1222              		.cfi_def_cfa_offset 16
 1223              		.cfi_offset 4, -16
 1224              		.cfi_offset 5, -12
 1225              		.cfi_offset 6, -8
 1226              		.cfi_offset 14, -4
 1227              		.loc 1 1029 9 view .LVU423
 1228 0002 124D     		ldr	r5, .L84
 1229 0004 1823     		movs	r3, #24
 1230 0006 03FB0055 		mla	r5, r3, r0, r5
 1231              	.LVL99:
1030:../RTT/Src/SEGGER_RTT.c ****   //
1031:../RTT/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1032:../RTT/Src/SEGGER_RTT.c ****   //
1033:../RTT/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1232              		.loc 1 1033 3 is_stmt 1 view .LVU424
1019:../RTT/Src/SEGGER_RTT.c ****   unsigned                Status;
 1233              		.loc 1 1019 105 is_stmt 0 view .LVU425
 1234 000a 0E46     		mov	r6, r1
 1235              		.loc 1 1033 16 view .LVU426
 1236 000c 6B69     		ldr	r3, [r5, #20]
 1237              		.loc 1 1033 3 view .LVU427
 1238 000e 012B     		cmp	r3, #1
1019:../RTT/Src/SEGGER_RTT.c ****   unsigned                Status;
 1239              		.loc 1 1019 105 view .LVU428
 1240 0010 1446     		mov	r4, r2
 1241              		.loc 1 1033 3 view .LVU429
 1242 0012 0AD0     		beq	.L78
 1243 0014 022B     		cmp	r3, #2
 1244 0016 14D0     		beq	.L79
 1245 0018 23B9     		cbnz	r3, .L80
1034:../RTT/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1035:../RTT/Src/SEGGER_RTT.c ****     //
1036:../RTT/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1037:../RTT/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1038:../RTT/Src/SEGGER_RTT.c ****     //
1039:../RTT/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1246              		.loc 1 1039 5 is_stmt 1 view .LVU430
 1247              		.loc 1 1039 13 is_stmt 0 view .LVU431
 1248 001a 2846     		mov	r0, r5
 1249              	.LVL100:
 1250              		.loc 1 1039 13 view .LVU432
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 45


 1251 001c FFF7FEFF 		bl	_GetAvailWriteSpace
 1252              	.LVL101:
1040:../RTT/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1253              		.loc 1 1040 5 is_stmt 1 view .LVU433
 1254              		.loc 1 1040 8 is_stmt 0 view .LVU434
 1255 0020 8442     		cmp	r4, r0
 1256 0022 08D9     		bls	.L83
 1257              	.LVL102:
 1258              	.L80:
1041:../RTT/Src/SEGGER_RTT.c ****       Status = 0u;
1042:../RTT/Src/SEGGER_RTT.c ****     } else {
1043:../RTT/Src/SEGGER_RTT.c ****       Status = NumBytes;
1044:../RTT/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1045:../RTT/Src/SEGGER_RTT.c ****     }
1046:../RTT/Src/SEGGER_RTT.c ****     break;
1047:../RTT/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1048:../RTT/Src/SEGGER_RTT.c ****     //
1049:../RTT/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1050:../RTT/Src/SEGGER_RTT.c ****     //
1051:../RTT/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1052:../RTT/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1053:../RTT/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1054:../RTT/Src/SEGGER_RTT.c ****     break;
1055:../RTT/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1056:../RTT/Src/SEGGER_RTT.c ****     //
1057:../RTT/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1058:../RTT/Src/SEGGER_RTT.c ****     //
1059:../RTT/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1060:../RTT/Src/SEGGER_RTT.c ****     break;
1061:../RTT/Src/SEGGER_RTT.c ****   default:
1062:../RTT/Src/SEGGER_RTT.c ****     Status = 0u;
 1259              		.loc 1 1062 12 view .LVU435
 1260 0024 0024     		movs	r4, #0
 1261              	.LVL103:
 1262              	.L82:
1063:../RTT/Src/SEGGER_RTT.c ****     break;
1064:../RTT/Src/SEGGER_RTT.c ****   }
1065:../RTT/Src/SEGGER_RTT.c ****   //
1066:../RTT/Src/SEGGER_RTT.c ****   // Finish up.
1067:../RTT/Src/SEGGER_RTT.c ****   //
1068:../RTT/Src/SEGGER_RTT.c ****   return Status;
 1263              		.loc 1 1068 3 is_stmt 1 view .LVU436
1069:../RTT/Src/SEGGER_RTT.c **** }
 1264              		.loc 1 1069 1 is_stmt 0 view .LVU437
 1265 0026 2046     		mov	r0, r4
 1266 0028 70BD     		pop	{r4, r5, r6, pc}
 1267              	.LVL104:
 1268              	.L78:
1051:../RTT/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1269              		.loc 1 1051 5 is_stmt 1 view .LVU438
1051:../RTT/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1270              		.loc 1 1051 13 is_stmt 0 view .LVU439
 1271 002a 2846     		mov	r0, r5
 1272              	.LVL105:
1051:../RTT/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1273              		.loc 1 1051 13 view .LVU440
 1274 002c FFF7FEFF 		bl	_GetAvailWriteSpace
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 46


 1275              	.LVL106:
1052:../RTT/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1276              		.loc 1 1052 5 is_stmt 1 view .LVU441
1052:../RTT/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1277              		.loc 1 1052 12 is_stmt 0 view .LVU442
 1278 0030 8442     		cmp	r4, r0
 1279 0032 28BF     		it	cs
 1280 0034 0446     		movcs	r4, r0
 1281              	.LVL107:
 1282              	.L83:
1053:../RTT/Src/SEGGER_RTT.c ****     break;
 1283              		.loc 1 1053 5 is_stmt 1 view .LVU443
 1284 0036 2246     		mov	r2, r4
 1285 0038 3146     		mov	r1, r6
 1286 003a 2846     		mov	r0, r5
 1287              	.LVL108:
1053:../RTT/Src/SEGGER_RTT.c ****     break;
 1288              		.loc 1 1053 5 is_stmt 0 view .LVU444
 1289 003c FFF7FEFF 		bl	_WriteNoCheck
 1290              	.LVL109:
1054:../RTT/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1291              		.loc 1 1054 5 is_stmt 1 view .LVU445
 1292 0040 F1E7     		b	.L82
 1293              	.LVL110:
 1294              	.L79:
1059:../RTT/Src/SEGGER_RTT.c ****     break;
 1295              		.loc 1 1059 5 view .LVU446
1059:../RTT/Src/SEGGER_RTT.c ****     break;
 1296              		.loc 1 1059 14 is_stmt 0 view .LVU447
 1297 0042 2846     		mov	r0, r5
 1298              	.LVL111:
 1299              		.loc 1 1069 1 view .LVU448
 1300 0044 BDE87040 		pop	{r4, r5, r6, lr}
 1301              	.LCFI11:
 1302              		.cfi_restore 14
 1303              		.cfi_restore 6
 1304              		.cfi_restore 5
 1305              		.cfi_restore 4
 1306              		.cfi_def_cfa_offset 0
 1307              	.LVL112:
1059:../RTT/Src/SEGGER_RTT.c ****     break;
 1308              		.loc 1 1059 14 view .LVU449
 1309 0048 FFF7FEBF 		b	_WriteBlocking
 1310              	.LVL113:
 1311              	.L85:
1059:../RTT/Src/SEGGER_RTT.c ****     break;
 1312              		.loc 1 1059 14 view .LVU450
 1313              		.align	2
 1314              	.L84:
 1315 004c 60000000 		.word	_SEGGER_RTT+96
 1316              		.cfi_endproc
 1317              	.LFE10:
 1319              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1320              		.align	1
 1321              		.global	SEGGER_RTT_WriteNoLock
 1322              		.syntax unified
 1323              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 47


 1324              		.thumb_func
 1326              	SEGGER_RTT_WriteNoLock:
 1327              	.LVL114:
 1328              	.LFB11:
1070:../RTT/Src/SEGGER_RTT.c **** 
1071:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1072:../RTT/Src/SEGGER_RTT.c **** *
1073:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1074:../RTT/Src/SEGGER_RTT.c **** *
1075:../RTT/Src/SEGGER_RTT.c **** *  Function description
1076:../RTT/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1077:../RTT/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1078:../RTT/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1079:../RTT/Src/SEGGER_RTT.c **** *
1080:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1081:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1082:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1083:../RTT/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1084:../RTT/Src/SEGGER_RTT.c **** *
1085:../RTT/Src/SEGGER_RTT.c **** *  Return value
1086:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1087:../RTT/Src/SEGGER_RTT.c **** *
1088:../RTT/Src/SEGGER_RTT.c **** *  Notes
1089:../RTT/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1090:../RTT/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1091:../RTT/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1092:../RTT/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1093:../RTT/Src/SEGGER_RTT.c **** */
1094:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1329              		.loc 1 1094 95 is_stmt 1 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
1095:../RTT/Src/SEGGER_RTT.c ****   unsigned              Status;
 1333              		.loc 1 1095 3 view .LVU452
1096:../RTT/Src/SEGGER_RTT.c ****   unsigned              Avail;
 1334              		.loc 1 1096 3 view .LVU453
1097:../RTT/Src/SEGGER_RTT.c ****   const char*           pData;
 1335              		.loc 1 1097 3 view .LVU454
1098:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1336              		.loc 1 1098 3 view .LVU455
1099:../RTT/Src/SEGGER_RTT.c ****   //
1100:../RTT/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1101:../RTT/Src/SEGGER_RTT.c ****   //
1102:../RTT/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1337              		.loc 1 1102 3 view .LVU456
1103:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1338              		.loc 1 1103 3 view .LVU457
1094:../RTT/Src/SEGGER_RTT.c ****   unsigned              Status;
 1339              		.loc 1 1094 95 is_stmt 0 view .LVU458
 1340 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1341              	.LCFI12:
 1342              		.cfi_def_cfa_offset 24
 1343              		.cfi_offset 3, -24
 1344              		.cfi_offset 4, -20
 1345              		.cfi_offset 5, -16
 1346              		.cfi_offset 6, -12
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 48


 1347              		.cfi_offset 7, -8
 1348              		.cfi_offset 14, -4
 1349              		.loc 1 1103 9 view .LVU459
 1350 0002 144B     		ldr	r3, .L93
 1351 0004 1827     		movs	r7, #24
 1352 0006 00FB0775 		mla	r5, r0, r7, r7
 1353 000a 1D44     		add	r5, r5, r3
 1354              	.LVL115:
1104:../RTT/Src/SEGGER_RTT.c ****   //
1105:../RTT/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1106:../RTT/Src/SEGGER_RTT.c ****   //
1107:../RTT/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1355              		.loc 1 1107 3 is_stmt 1 view .LVU460
 1356              		.loc 1 1107 16 is_stmt 0 view .LVU461
 1357 000c 07FB0033 		mla	r3, r7, r0, r3
1094:../RTT/Src/SEGGER_RTT.c ****   unsigned              Status;
 1358              		.loc 1 1094 95 view .LVU462
 1359 0010 0E46     		mov	r6, r1
 1360              		.loc 1 1107 16 view .LVU463
 1361 0012 DB6A     		ldr	r3, [r3, #44]
 1362              		.loc 1 1107 3 view .LVU464
 1363 0014 012B     		cmp	r3, #1
1094:../RTT/Src/SEGGER_RTT.c ****   unsigned              Status;
 1364              		.loc 1 1094 95 view .LVU465
 1365 0016 1446     		mov	r4, r2
 1366              		.loc 1 1107 3 view .LVU466
 1367 0018 0AD0     		beq	.L87
 1368 001a 022B     		cmp	r3, #2
 1369 001c 14D0     		beq	.L88
 1370 001e 23B9     		cbnz	r3, .L89
1108:../RTT/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1109:../RTT/Src/SEGGER_RTT.c ****     //
1110:../RTT/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1111:../RTT/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1112:../RTT/Src/SEGGER_RTT.c ****     //
1113:../RTT/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1371              		.loc 1 1113 5 is_stmt 1 view .LVU467
 1372              		.loc 1 1113 13 is_stmt 0 view .LVU468
 1373 0020 2846     		mov	r0, r5
 1374              	.LVL116:
 1375              		.loc 1 1113 13 view .LVU469
 1376 0022 FFF7FEFF 		bl	_GetAvailWriteSpace
 1377              	.LVL117:
1114:../RTT/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1378              		.loc 1 1114 5 is_stmt 1 view .LVU470
 1379              		.loc 1 1114 8 is_stmt 0 view .LVU471
 1380 0026 8442     		cmp	r4, r0
 1381 0028 08D9     		bls	.L92
 1382              	.LVL118:
 1383              	.L89:
1115:../RTT/Src/SEGGER_RTT.c ****       Status = 0u;
1116:../RTT/Src/SEGGER_RTT.c ****     } else {
1117:../RTT/Src/SEGGER_RTT.c ****       Status = NumBytes;
1118:../RTT/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1119:../RTT/Src/SEGGER_RTT.c ****     }
1120:../RTT/Src/SEGGER_RTT.c ****     break;
1121:../RTT/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 49


1122:../RTT/Src/SEGGER_RTT.c ****     //
1123:../RTT/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1124:../RTT/Src/SEGGER_RTT.c ****     //
1125:../RTT/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1126:../RTT/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1127:../RTT/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1128:../RTT/Src/SEGGER_RTT.c ****     break;
1129:../RTT/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1130:../RTT/Src/SEGGER_RTT.c ****     //
1131:../RTT/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1132:../RTT/Src/SEGGER_RTT.c ****     //
1133:../RTT/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1134:../RTT/Src/SEGGER_RTT.c ****     break;
1135:../RTT/Src/SEGGER_RTT.c ****   default:
1136:../RTT/Src/SEGGER_RTT.c ****     Status = 0u;
 1384              		.loc 1 1136 12 view .LVU472
 1385 002a 0024     		movs	r4, #0
 1386              	.LVL119:
 1387              	.L91:
1137:../RTT/Src/SEGGER_RTT.c ****     break;
1138:../RTT/Src/SEGGER_RTT.c ****   }
1139:../RTT/Src/SEGGER_RTT.c ****   //
1140:../RTT/Src/SEGGER_RTT.c ****   // Finish up.
1141:../RTT/Src/SEGGER_RTT.c ****   //
1142:../RTT/Src/SEGGER_RTT.c ****   return Status;
 1388              		.loc 1 1142 3 is_stmt 1 view .LVU473
1143:../RTT/Src/SEGGER_RTT.c **** }
 1389              		.loc 1 1143 1 is_stmt 0 view .LVU474
 1390 002c 2046     		mov	r0, r4
 1391 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1392              	.LVL120:
 1393              	.L87:
1125:../RTT/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1394              		.loc 1 1125 5 is_stmt 1 view .LVU475
1125:../RTT/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1395              		.loc 1 1125 13 is_stmt 0 view .LVU476
 1396 0030 2846     		mov	r0, r5
 1397              	.LVL121:
1125:../RTT/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1398              		.loc 1 1125 13 view .LVU477
 1399 0032 FFF7FEFF 		bl	_GetAvailWriteSpace
 1400              	.LVL122:
1126:../RTT/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1401              		.loc 1 1126 5 is_stmt 1 view .LVU478
1126:../RTT/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1402              		.loc 1 1126 12 is_stmt 0 view .LVU479
 1403 0036 8442     		cmp	r4, r0
 1404 0038 28BF     		it	cs
 1405 003a 0446     		movcs	r4, r0
 1406              	.LVL123:
 1407              	.L92:
1127:../RTT/Src/SEGGER_RTT.c ****     break;
 1408              		.loc 1 1127 5 is_stmt 1 view .LVU480
 1409 003c 2246     		mov	r2, r4
 1410 003e 3146     		mov	r1, r6
 1411 0040 2846     		mov	r0, r5
 1412              	.LVL124:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 50


1127:../RTT/Src/SEGGER_RTT.c ****     break;
 1413              		.loc 1 1127 5 is_stmt 0 view .LVU481
 1414 0042 FFF7FEFF 		bl	_WriteNoCheck
 1415              	.LVL125:
1128:../RTT/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1416              		.loc 1 1128 5 is_stmt 1 view .LVU482
 1417 0046 F1E7     		b	.L91
 1418              	.LVL126:
 1419              	.L88:
1133:../RTT/Src/SEGGER_RTT.c ****     break;
 1420              		.loc 1 1133 5 view .LVU483
1133:../RTT/Src/SEGGER_RTT.c ****     break;
 1421              		.loc 1 1133 14 is_stmt 0 view .LVU484
 1422 0048 2846     		mov	r0, r5
 1423              	.LVL127:
 1424              		.loc 1 1143 1 view .LVU485
 1425 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 1426              	.LCFI13:
 1427              		.cfi_restore 14
 1428              		.cfi_restore 7
 1429              		.cfi_restore 6
 1430              		.cfi_restore 5
 1431              		.cfi_restore 4
 1432              		.cfi_restore 3
 1433              		.cfi_def_cfa_offset 0
 1434              	.LVL128:
1133:../RTT/Src/SEGGER_RTT.c ****     break;
 1435              		.loc 1 1133 14 view .LVU486
 1436 004e FFF7FEBF 		b	_WriteBlocking
 1437              	.LVL129:
 1438              	.L94:
1133:../RTT/Src/SEGGER_RTT.c ****     break;
 1439              		.loc 1 1133 14 view .LVU487
 1440 0052 00BF     		.align	2
 1441              	.L93:
 1442 0054 00000000 		.word	_SEGGER_RTT
 1443              		.cfi_endproc
 1444              	.LFE11:
 1446              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1447              		.align	1
 1448              		.global	SEGGER_RTT_WriteDownBuffer
 1449              		.syntax unified
 1450              		.thumb
 1451              		.thumb_func
 1453              	SEGGER_RTT_WriteDownBuffer:
 1454              	.LVL130:
 1455              	.LFB12:
1144:../RTT/Src/SEGGER_RTT.c **** 
1145:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1146:../RTT/Src/SEGGER_RTT.c **** *
1147:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1148:../RTT/Src/SEGGER_RTT.c **** *
1149:../RTT/Src/SEGGER_RTT.c **** *  Function description
1150:../RTT/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1151:../RTT/Src/SEGGER_RTT.c **** *
1152:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1153:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 51


1154:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1155:../RTT/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1156:../RTT/Src/SEGGER_RTT.c **** *
1157:../RTT/Src/SEGGER_RTT.c **** *  Return value
1158:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1159:../RTT/Src/SEGGER_RTT.c **** *
1160:../RTT/Src/SEGGER_RTT.c **** *  Notes
1161:../RTT/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1162:../RTT/Src/SEGGER_RTT.c **** *
1163:../RTT/Src/SEGGER_RTT.c **** *  Additional information
1164:../RTT/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1165:../RTT/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1166:../RTT/Src/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1167:../RTT/Src/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer,
1168:../RTT/Src/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1169:../RTT/Src/SEGGER_RTT.c **** */
1170:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1456              		.loc 1 1170 99 is_stmt 1 view -0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
1171:../RTT/Src/SEGGER_RTT.c ****   unsigned Status;
 1460              		.loc 1 1171 3 view .LVU489
1172:../RTT/Src/SEGGER_RTT.c **** 
1173:../RTT/Src/SEGGER_RTT.c ****   INIT();
 1461              		.loc 1 1173 3 view .LVU490
 1462              	.LBB12:
 1463              		.loc 1 1173 3 view .LVU491
 1464              		.loc 1 1173 3 view .LVU492
 1465              		.loc 1 1173 3 view .LVU493
 1466              	.LBE12:
1170:../RTT/Src/SEGGER_RTT.c ****   unsigned Status;
 1467              		.loc 1 1170 99 is_stmt 0 view .LVU494
 1468 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1469              	.LCFI14:
 1470              		.cfi_def_cfa_offset 24
 1471              		.cfi_offset 3, -24
 1472              		.cfi_offset 4, -20
 1473              		.cfi_offset 5, -16
 1474              		.cfi_offset 6, -12
 1475              		.cfi_offset 7, -8
 1476              		.cfi_offset 14, -4
 1477              	.LBB13:
 1478              		.loc 1 1173 3 view .LVU495
 1479 0002 0B4B     		ldr	r3, .L100
 1480 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1481 0006 532B     		cmp	r3, #83
 1482              	.LBE13:
1170:../RTT/Src/SEGGER_RTT.c ****   unsigned Status;
 1483              		.loc 1 1170 99 view .LVU496
 1484 0008 0446     		mov	r4, r0
 1485 000a 0D46     		mov	r5, r1
 1486 000c 1646     		mov	r6, r2
 1487              	.LBB14:
 1488              		.loc 1 1173 3 view .LVU497
 1489 000e 01D0     		beq	.L96
 1490              		.loc 1 1173 3 is_stmt 1 discriminator 1 view .LVU498
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 52


 1491 0010 FFF7FEFF 		bl	_DoInit
 1492              	.LVL131:
 1493              	.L96:
 1494              		.loc 1 1173 3 is_stmt 0 discriminator 1 view .LVU499
 1495              	.LBE14:
 1496              		.loc 1 1173 3 is_stmt 1 discriminator 3 view .LVU500
 1497              	.LBB15:
1174:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1498              		.loc 1 1174 3 view .LVU501
 1499              		.loc 1 1174 3 view .LVU502
 1500              		.syntax unified
 1501              	@ 1174 "../RTT/Src/SEGGER_RTT.c" 1
 1502 0014 EFF31187 		mrs   r7, basepri  
 1503 0018 4FF02001 		mov   r1, #32       
 1504 001c 81F31188 		msr   basepri, r1  
 1505              		
 1506              	@ 0 "" 2
 1507              	.LVL132:
 1508              		.loc 1 1174 20 view .LVU503
1175:../RTT/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1509              		.loc 1 1175 3 view .LVU504
 1510              		.loc 1 1175 12 is_stmt 0 view .LVU505
 1511              		.thumb
 1512              		.syntax unified
 1513 0020 3246     		mov	r2, r6
 1514 0022 2946     		mov	r1, r5
 1515 0024 2046     		mov	r0, r4
 1516 0026 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1517              	.LVL133:
1176:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1518              		.loc 1 1176 3 is_stmt 1 view .LVU506
 1519              		.syntax unified
 1520              	@ 1176 "../RTT/Src/SEGGER_RTT.c" 1
 1521 002a 87F31188 		msr   basepri, r7  
 1522              		
 1523              	@ 0 "" 2
 1524              		.thumb
 1525              		.syntax unified
 1526              	.LBE15:
 1527              		.loc 1 1176 22 view .LVU507
1177:../RTT/Src/SEGGER_RTT.c ****   return Status;
 1528              		.loc 1 1177 3 view .LVU508
1178:../RTT/Src/SEGGER_RTT.c **** }
 1529              		.loc 1 1178 1 is_stmt 0 view .LVU509
 1530 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1531              	.LVL134:
 1532              	.L101:
 1533              		.loc 1 1178 1 view .LVU510
 1534              		.align	2
 1535              	.L100:
 1536 0030 00000000 		.word	_SEGGER_RTT
 1537              		.cfi_endproc
 1538              	.LFE12:
 1540              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1541              		.align	1
 1542              		.global	SEGGER_RTT_Write
 1543              		.syntax unified
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 53


 1544              		.thumb
 1545              		.thumb_func
 1547              	SEGGER_RTT_Write:
 1548              	.LVL135:
 1549              	.LFB13:
1179:../RTT/Src/SEGGER_RTT.c **** 
1180:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1181:../RTT/Src/SEGGER_RTT.c **** *
1182:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1183:../RTT/Src/SEGGER_RTT.c **** *
1184:../RTT/Src/SEGGER_RTT.c **** *  Function description
1185:../RTT/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1186:../RTT/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1187:../RTT/Src/SEGGER_RTT.c **** *
1188:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1189:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1190:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1191:../RTT/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1192:../RTT/Src/SEGGER_RTT.c **** *
1193:../RTT/Src/SEGGER_RTT.c **** *  Return value
1194:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1195:../RTT/Src/SEGGER_RTT.c **** *
1196:../RTT/Src/SEGGER_RTT.c **** *  Notes
1197:../RTT/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1198:../RTT/Src/SEGGER_RTT.c **** */
1199:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1550              		.loc 1 1199 89 is_stmt 1 view -0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
1200:../RTT/Src/SEGGER_RTT.c ****   unsigned Status;
 1554              		.loc 1 1200 3 view .LVU512
1201:../RTT/Src/SEGGER_RTT.c **** 
1202:../RTT/Src/SEGGER_RTT.c ****   INIT();
 1555              		.loc 1 1202 3 view .LVU513
 1556              	.LBB16:
 1557              		.loc 1 1202 3 view .LVU514
 1558              		.loc 1 1202 3 view .LVU515
 1559              		.loc 1 1202 3 view .LVU516
 1560              	.LBE16:
1199:../RTT/Src/SEGGER_RTT.c ****   unsigned Status;
 1561              		.loc 1 1199 89 is_stmt 0 view .LVU517
 1562 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1563              	.LCFI15:
 1564              		.cfi_def_cfa_offset 24
 1565              		.cfi_offset 3, -24
 1566              		.cfi_offset 4, -20
 1567              		.cfi_offset 5, -16
 1568              		.cfi_offset 6, -12
 1569              		.cfi_offset 7, -8
 1570              		.cfi_offset 14, -4
 1571              	.LBB17:
 1572              		.loc 1 1202 3 view .LVU518
 1573 0002 0B4B     		ldr	r3, .L107
 1574 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1575 0006 532B     		cmp	r3, #83
 1576              	.LBE17:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 54


1199:../RTT/Src/SEGGER_RTT.c ****   unsigned Status;
 1577              		.loc 1 1199 89 view .LVU519
 1578 0008 0446     		mov	r4, r0
 1579 000a 0D46     		mov	r5, r1
 1580 000c 1646     		mov	r6, r2
 1581              	.LBB18:
 1582              		.loc 1 1202 3 view .LVU520
 1583 000e 01D0     		beq	.L103
 1584              		.loc 1 1202 3 is_stmt 1 discriminator 1 view .LVU521
 1585 0010 FFF7FEFF 		bl	_DoInit
 1586              	.LVL136:
 1587              	.L103:
 1588              		.loc 1 1202 3 is_stmt 0 discriminator 1 view .LVU522
 1589              	.LBE18:
 1590              		.loc 1 1202 3 is_stmt 1 discriminator 3 view .LVU523
 1591              	.LBB19:
1203:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1592              		.loc 1 1203 3 view .LVU524
 1593              		.loc 1 1203 3 view .LVU525
 1594              		.syntax unified
 1595              	@ 1203 "../RTT/Src/SEGGER_RTT.c" 1
 1596 0014 EFF31187 		mrs   r7, basepri  
 1597 0018 4FF02001 		mov   r1, #32       
 1598 001c 81F31188 		msr   basepri, r1  
 1599              		
 1600              	@ 0 "" 2
 1601              	.LVL137:
 1602              		.loc 1 1203 20 view .LVU526
1204:../RTT/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1603              		.loc 1 1204 3 view .LVU527
 1604              		.loc 1 1204 12 is_stmt 0 view .LVU528
 1605              		.thumb
 1606              		.syntax unified
 1607 0020 3246     		mov	r2, r6
 1608 0022 2946     		mov	r1, r5
 1609 0024 2046     		mov	r0, r4
 1610 0026 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1611              	.LVL138:
1205:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1612              		.loc 1 1205 3 is_stmt 1 view .LVU529
 1613              		.syntax unified
 1614              	@ 1205 "../RTT/Src/SEGGER_RTT.c" 1
 1615 002a 87F31188 		msr   basepri, r7  
 1616              		
 1617              	@ 0 "" 2
 1618              		.thumb
 1619              		.syntax unified
 1620              	.LBE19:
 1621              		.loc 1 1205 22 view .LVU530
1206:../RTT/Src/SEGGER_RTT.c ****   return Status;
 1622              		.loc 1 1206 3 view .LVU531
1207:../RTT/Src/SEGGER_RTT.c **** }
 1623              		.loc 1 1207 1 is_stmt 0 view .LVU532
 1624 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1625              	.LVL139:
 1626              	.L108:
 1627              		.loc 1 1207 1 view .LVU533
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 55


 1628              		.align	2
 1629              	.L107:
 1630 0030 00000000 		.word	_SEGGER_RTT
 1631              		.cfi_endproc
 1632              	.LFE13:
 1634              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1635              		.align	1
 1636              		.global	SEGGER_RTT_WriteString
 1637              		.syntax unified
 1638              		.thumb
 1639              		.thumb_func
 1641              	SEGGER_RTT_WriteString:
 1642              	.LVL140:
 1643              	.LFB14:
1208:../RTT/Src/SEGGER_RTT.c **** 
1209:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1210:../RTT/Src/SEGGER_RTT.c **** *
1211:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1212:../RTT/Src/SEGGER_RTT.c **** *
1213:../RTT/Src/SEGGER_RTT.c **** *  Function description
1214:../RTT/Src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1215:../RTT/Src/SEGGER_RTT.c **** *    This data is read by the host.
1216:../RTT/Src/SEGGER_RTT.c **** *
1217:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1218:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1219:../RTT/Src/SEGGER_RTT.c **** *    s            Pointer to string.
1220:../RTT/Src/SEGGER_RTT.c **** *
1221:../RTT/Src/SEGGER_RTT.c **** *  Return value
1222:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1223:../RTT/Src/SEGGER_RTT.c **** *
1224:../RTT/Src/SEGGER_RTT.c **** *  Notes
1225:../RTT/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1226:../RTT/Src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1227:../RTT/Src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1228:../RTT/Src/SEGGER_RTT.c **** */
1229:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1644              		.loc 1 1229 70 is_stmt 1 view -0
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 0
 1647              		@ frame_needed = 0, uses_anonymous_args = 0
1230:../RTT/Src/SEGGER_RTT.c ****   unsigned Len;
 1648              		.loc 1 1230 3 view .LVU535
1231:../RTT/Src/SEGGER_RTT.c **** 
1232:../RTT/Src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1649              		.loc 1 1232 3 view .LVU536
1229:../RTT/Src/SEGGER_RTT.c ****   unsigned Len;
 1650              		.loc 1 1229 70 is_stmt 0 view .LVU537
 1651 0000 38B5     		push	{r3, r4, r5, lr}
 1652              	.LCFI16:
 1653              		.cfi_def_cfa_offset 16
 1654              		.cfi_offset 3, -16
 1655              		.cfi_offset 4, -12
 1656              		.cfi_offset 5, -8
 1657              		.cfi_offset 14, -4
1229:../RTT/Src/SEGGER_RTT.c ****   unsigned Len;
 1658              		.loc 1 1229 70 view .LVU538
 1659 0002 0546     		mov	r5, r0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 56


 1660              		.loc 1 1232 9 view .LVU539
 1661 0004 0846     		mov	r0, r1
 1662              	.LVL141:
1229:../RTT/Src/SEGGER_RTT.c ****   unsigned Len;
 1663              		.loc 1 1229 70 view .LVU540
 1664 0006 0C46     		mov	r4, r1
 1665              		.loc 1 1232 9 view .LVU541
 1666 0008 FFF7FEFF 		bl	strlen
 1667              	.LVL142:
1233:../RTT/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1668              		.loc 1 1233 10 view .LVU542
 1669 000c 2146     		mov	r1, r4
1232:../RTT/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1670              		.loc 1 1232 9 view .LVU543
 1671 000e 0246     		mov	r2, r0
 1672              	.LVL143:
 1673              		.loc 1 1233 3 is_stmt 1 view .LVU544
 1674              		.loc 1 1233 10 is_stmt 0 view .LVU545
 1675 0010 2846     		mov	r0, r5
 1676              	.LVL144:
1234:../RTT/Src/SEGGER_RTT.c **** }
 1677              		.loc 1 1234 1 view .LVU546
 1678 0012 BDE83840 		pop	{r3, r4, r5, lr}
 1679              	.LCFI17:
 1680              		.cfi_restore 14
 1681              		.cfi_restore 5
 1682              		.cfi_restore 4
 1683              		.cfi_restore 3
 1684              		.cfi_def_cfa_offset 0
 1685              	.LVL145:
1233:../RTT/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1686              		.loc 1 1233 10 view .LVU547
 1687 0016 FFF7FEBF 		b	SEGGER_RTT_Write
 1688              	.LVL146:
1233:../RTT/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1689              		.loc 1 1233 10 view .LVU548
 1690              		.cfi_endproc
 1691              	.LFE14:
 1693              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1694              		.align	1
 1695              		.global	SEGGER_RTT_PutCharSkipNoLock
 1696              		.syntax unified
 1697              		.thumb
 1698              		.thumb_func
 1700              	SEGGER_RTT_PutCharSkipNoLock:
 1701              	.LVL147:
 1702              	.LFB15:
1235:../RTT/Src/SEGGER_RTT.c **** 
1236:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1237:../RTT/Src/SEGGER_RTT.c **** *
1238:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1239:../RTT/Src/SEGGER_RTT.c **** *
1240:../RTT/Src/SEGGER_RTT.c **** *  Function description
1241:../RTT/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1242:../RTT/Src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1243:../RTT/Src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1244:../RTT/Src/SEGGER_RTT.c **** *
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 57


1245:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1246:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1247:../RTT/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1248:../RTT/Src/SEGGER_RTT.c **** *
1249:../RTT/Src/SEGGER_RTT.c **** *  Return value
1250:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1251:../RTT/Src/SEGGER_RTT.c **** *
1252:../RTT/Src/SEGGER_RTT.c **** *  Notes
1253:../RTT/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1254:../RTT/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1255:../RTT/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1256:../RTT/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1257:../RTT/Src/SEGGER_RTT.c **** */
1258:../RTT/Src/SEGGER_RTT.c **** 
1259:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1703              		.loc 1 1259 69 is_stmt 1 view -0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 0
 1706              		@ frame_needed = 0, uses_anonymous_args = 0
1260:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1707              		.loc 1 1260 3 view .LVU550
1261:../RTT/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1708              		.loc 1 1261 3 view .LVU551
1262:../RTT/Src/SEGGER_RTT.c ****   unsigned              Status;
 1709              		.loc 1 1262 3 view .LVU552
1263:../RTT/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 1710              		.loc 1 1263 3 view .LVU553
1264:../RTT/Src/SEGGER_RTT.c ****   //
1265:../RTT/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1266:../RTT/Src/SEGGER_RTT.c ****   //
1267:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1711              		.loc 1 1267 3 view .LVU554
1268:../RTT/Src/SEGGER_RTT.c ****   //
1269:../RTT/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1270:../RTT/Src/SEGGER_RTT.c ****   //
1271:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1712              		.loc 1 1271 3 view .LVU555
1259:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1713              		.loc 1 1259 69 is_stmt 0 view .LVU556
 1714 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1715              	.LCFI18:
 1716              		.cfi_def_cfa_offset 20
 1717              		.cfi_offset 4, -20
 1718              		.cfi_offset 5, -16
 1719              		.cfi_offset 6, -12
 1720              		.cfi_offset 7, -8
 1721              		.cfi_offset 14, -4
 1722              		.loc 1 1271 16 view .LVU557
 1723 0002 0C4D     		ldr	r5, .L115
 1724 0004 1822     		movs	r2, #24
 1725 0006 02FB0054 		mla	r4, r2, r0, r5
 1726 000a 666A     		ldr	r6, [r4, #36]
1272:../RTT/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1727              		.loc 1 1272 6 view .LVU558
 1728 000c 276A     		ldr	r7, [r4, #32]
1271:../RTT/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1729              		.loc 1 1271 9 view .LVU559
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 58


 1730 000e 731C     		adds	r3, r6, #1
 1731              	.LVL148:
 1732              		.loc 1 1272 3 is_stmt 1 view .LVU560
1273:../RTT/Src/SEGGER_RTT.c ****     WrOff = 0;
 1733              		.loc 1 1273 11 is_stmt 0 view .LVU561
 1734 0010 9F42     		cmp	r7, r3
 1735 0012 08BF     		it	eq
 1736 0014 0023     		moveq	r3, #0
 1737              	.LVL149:
1274:../RTT/Src/SEGGER_RTT.c ****   }
1275:../RTT/Src/SEGGER_RTT.c ****   //
1276:../RTT/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1277:../RTT/Src/SEGGER_RTT.c ****   //
1278:../RTT/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1738              		.loc 1 1278 3 is_stmt 1 view .LVU562
 1739              		.loc 1 1278 21 is_stmt 0 view .LVU563
 1740 0016 A76A     		ldr	r7, [r4, #40]
 1741              		.loc 1 1278 6 view .LVU564
 1742 0018 9F42     		cmp	r7, r3
 1743 001a 09D0     		beq	.L114
1279:../RTT/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1744              		.loc 1 1279 5 is_stmt 1 view .LVU565
 1745              		.loc 1 1279 18 is_stmt 0 view .LVU566
 1746 001c 00FB0222 		mla	r2, r0, r2, r2
 1747 0020 1544     		add	r5, r5, r2
 1748              		.loc 1 1279 10 view .LVU567
 1749 0022 6A68     		ldr	r2, [r5, #4]
 1750              	.LVL150:
1280:../RTT/Src/SEGGER_RTT.c ****     *pDst = c;
 1751              		.loc 1 1280 5 is_stmt 1 view .LVU568
 1752              		.loc 1 1280 11 is_stmt 0 view .LVU569
 1753 0024 9155     		strb	r1, [r2, r6]
1281:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1754              		.loc 1 1281 5 is_stmt 1 view .LVU570
 1755              		.syntax unified
 1756              	@ 1281 "../RTT/Src/SEGGER_RTT.c" 1
 1757 0026 BFF35F8F 		dmb
 1758              	
 1759              	@ 0 "" 2
 1760              		.loc 1 1281 15 view .LVU571
1282:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1761              		.loc 1 1282 5 view .LVU572
1283:../RTT/Src/SEGGER_RTT.c ****     Status = 1;
 1762              		.loc 1 1283 12 is_stmt 0 view .LVU573
 1763              		.thumb
 1764              		.syntax unified
 1765 002a 0120     		movs	r0, #1
 1766              	.LVL151:
1282:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1767              		.loc 1 1282 18 view .LVU574
 1768 002c 6362     		str	r3, [r4, #36]
 1769              		.loc 1 1283 5 is_stmt 1 view .LVU575
 1770              	.LVL152:
 1771              	.L110:
1284:../RTT/Src/SEGGER_RTT.c ****   } else {
1285:../RTT/Src/SEGGER_RTT.c ****     Status = 0;
1286:../RTT/Src/SEGGER_RTT.c ****   }
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 59


1287:../RTT/Src/SEGGER_RTT.c ****   //
1288:../RTT/Src/SEGGER_RTT.c ****   return Status;
1289:../RTT/Src/SEGGER_RTT.c **** }
 1772              		.loc 1 1289 1 is_stmt 0 view .LVU576
 1773 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 1774              	.LVL153:
 1775              	.L114:
1285:../RTT/Src/SEGGER_RTT.c ****   }
 1776              		.loc 1 1285 12 view .LVU577
 1777 0030 0020     		movs	r0, #0
 1778              	.LVL154:
1288:../RTT/Src/SEGGER_RTT.c **** }
 1779              		.loc 1 1288 3 is_stmt 1 view .LVU578
1288:../RTT/Src/SEGGER_RTT.c **** }
 1780              		.loc 1 1288 10 is_stmt 0 view .LVU579
 1781 0032 FCE7     		b	.L110
 1782              	.L116:
 1783              		.align	2
 1784              	.L115:
 1785 0034 00000000 		.word	_SEGGER_RTT
 1786              		.cfi_endproc
 1787              	.LFE15:
 1789              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1790              		.align	1
 1791              		.global	SEGGER_RTT_PutCharSkip
 1792              		.syntax unified
 1793              		.thumb
 1794              		.thumb_func
 1796              	SEGGER_RTT_PutCharSkip:
 1797              	.LVL155:
 1798              	.LFB16:
1290:../RTT/Src/SEGGER_RTT.c **** 
1291:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1292:../RTT/Src/SEGGER_RTT.c **** *
1293:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1294:../RTT/Src/SEGGER_RTT.c **** *
1295:../RTT/Src/SEGGER_RTT.c **** *  Function description
1296:../RTT/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1297:../RTT/Src/SEGGER_RTT.c **** *
1298:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1299:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1300:../RTT/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1301:../RTT/Src/SEGGER_RTT.c **** *
1302:../RTT/Src/SEGGER_RTT.c **** *  Return value
1303:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1304:../RTT/Src/SEGGER_RTT.c **** *
1305:../RTT/Src/SEGGER_RTT.c **** *  Notes
1306:../RTT/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1307:../RTT/Src/SEGGER_RTT.c **** */
1308:../RTT/Src/SEGGER_RTT.c **** 
1309:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1799              		.loc 1 1309 63 is_stmt 1 view -0
 1800              		.cfi_startproc
 1801              		@ args = 0, pretend = 0, frame = 0
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
1310:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1803              		.loc 1 1310 3 view .LVU581
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 60


1311:../RTT/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1804              		.loc 1 1311 3 view .LVU582
1312:../RTT/Src/SEGGER_RTT.c ****   unsigned              Status;
 1805              		.loc 1 1312 3 view .LVU583
1313:../RTT/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 1806              		.loc 1 1313 3 view .LVU584
1314:../RTT/Src/SEGGER_RTT.c ****   //
1315:../RTT/Src/SEGGER_RTT.c ****   // Prepare
1316:../RTT/Src/SEGGER_RTT.c ****   //
1317:../RTT/Src/SEGGER_RTT.c ****   INIT();
 1807              		.loc 1 1317 3 view .LVU585
 1808              	.LBB20:
 1809              		.loc 1 1317 3 view .LVU586
 1810              		.loc 1 1317 3 view .LVU587
 1811              		.loc 1 1317 3 view .LVU588
 1812              	.LBE20:
1309:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1813              		.loc 1 1309 63 is_stmt 0 view .LVU589
 1814 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1815              	.LCFI19:
 1816              		.cfi_def_cfa_offset 24
 1817              		.cfi_offset 3, -24
 1818              		.cfi_offset 4, -20
 1819              		.cfi_offset 5, -16
 1820              		.cfi_offset 6, -12
 1821              		.cfi_offset 7, -8
 1822              		.cfi_offset 14, -4
 1823              	.LBB21:
 1824              		.loc 1 1317 3 view .LVU590
 1825 0002 144C     		ldr	r4, .L126
 1826 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1827 0006 532B     		cmp	r3, #83
 1828              	.LBE21:
1309:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1829              		.loc 1 1309 63 view .LVU591
 1830 0008 0646     		mov	r6, r0
 1831 000a 0F46     		mov	r7, r1
 1832              	.LBB22:
 1833              		.loc 1 1317 3 view .LVU592
 1834 000c 01D0     		beq	.L118
 1835              		.loc 1 1317 3 is_stmt 1 discriminator 1 view .LVU593
 1836 000e FFF7FEFF 		bl	_DoInit
 1837              	.LVL156:
 1838              	.L118:
 1839              		.loc 1 1317 3 is_stmt 0 discriminator 1 view .LVU594
 1840              	.LBE22:
 1841              		.loc 1 1317 3 is_stmt 1 discriminator 3 view .LVU595
 1842              	.LBB23:
1318:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1843              		.loc 1 1318 3 view .LVU596
 1844              		.loc 1 1318 3 view .LVU597
 1845              		.syntax unified
 1846              	@ 1318 "../RTT/Src/SEGGER_RTT.c" 1
 1847 0012 EFF3118C 		mrs   ip, basepri  
 1848 0016 4FF02001 		mov   r1, #32       
 1849 001a 81F31188 		msr   basepri, r1  
 1850              		
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 61


 1851              	@ 0 "" 2
 1852              	.LVL157:
 1853              		.loc 1 1318 20 view .LVU598
1319:../RTT/Src/SEGGER_RTT.c ****   //
1320:../RTT/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1321:../RTT/Src/SEGGER_RTT.c ****   //
1322:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1854              		.loc 1 1322 3 view .LVU599
1323:../RTT/Src/SEGGER_RTT.c ****   //
1324:../RTT/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1325:../RTT/Src/SEGGER_RTT.c ****   //
1326:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1855              		.loc 1 1326 3 view .LVU600
 1856              		.loc 1 1326 16 is_stmt 0 view .LVU601
 1857              		.thumb
 1858              		.syntax unified
 1859 001e 1822     		movs	r2, #24
 1860 0020 02FB0645 		mla	r5, r2, r6, r4
 1861 0024 696A     		ldr	r1, [r5, #36]
1327:../RTT/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1862              		.loc 1 1327 6 view .LVU602
 1863 0026 286A     		ldr	r0, [r5, #32]
1326:../RTT/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1864              		.loc 1 1326 9 view .LVU603
 1865 0028 4B1C     		adds	r3, r1, #1
 1866              	.LVL158:
 1867              		.loc 1 1327 3 is_stmt 1 view .LVU604
1328:../RTT/Src/SEGGER_RTT.c ****     WrOff = 0;
 1868              		.loc 1 1328 11 is_stmt 0 view .LVU605
 1869 002a 9842     		cmp	r0, r3
 1870 002c 08BF     		it	eq
 1871 002e 0023     		moveq	r3, #0
 1872              	.LVL159:
1329:../RTT/Src/SEGGER_RTT.c ****   }
1330:../RTT/Src/SEGGER_RTT.c ****   //
1331:../RTT/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1332:../RTT/Src/SEGGER_RTT.c ****   //
1333:../RTT/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1873              		.loc 1 1333 3 is_stmt 1 view .LVU606
 1874              		.loc 1 1333 21 is_stmt 0 view .LVU607
 1875 0030 A86A     		ldr	r0, [r5, #40]
 1876              		.loc 1 1333 6 view .LVU608
 1877 0032 9842     		cmp	r0, r3
 1878 0034 0BD0     		beq	.L122
1334:../RTT/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1879              		.loc 1 1334 5 is_stmt 1 view .LVU609
 1880              		.loc 1 1334 19 is_stmt 0 view .LVU610
 1881 0036 06FB0222 		mla	r2, r6, r2, r2
 1882 003a 1444     		add	r4, r4, r2
 1883              		.loc 1 1334 11 view .LVU611
 1884 003c 6268     		ldr	r2, [r4, #4]
 1885              	.LVL160:
1335:../RTT/Src/SEGGER_RTT.c ****     *pDst = c;
 1886              		.loc 1 1335 5 is_stmt 1 view .LVU612
 1887              		.loc 1 1335 11 is_stmt 0 view .LVU613
 1888 003e 5754     		strb	r7, [r2, r1]
1336:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 62


 1889              		.loc 1 1336 5 is_stmt 1 view .LVU614
 1890              		.syntax unified
 1891              	@ 1336 "../RTT/Src/SEGGER_RTT.c" 1
 1892 0040 BFF35F8F 		dmb
 1893              	
 1894              	@ 0 "" 2
 1895              		.loc 1 1336 15 view .LVU615
1337:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1896              		.loc 1 1337 5 view .LVU616
1338:../RTT/Src/SEGGER_RTT.c ****     Status = 1;
 1897              		.loc 1 1338 12 is_stmt 0 view .LVU617
 1898              		.thumb
 1899              		.syntax unified
 1900 0044 0120     		movs	r0, #1
1337:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1901              		.loc 1 1337 18 view .LVU618
 1902 0046 6B62     		str	r3, [r5, #36]
 1903              		.loc 1 1338 5 is_stmt 1 view .LVU619
 1904              	.LVL161:
 1905              	.L120:
1339:../RTT/Src/SEGGER_RTT.c ****   } else {
1340:../RTT/Src/SEGGER_RTT.c ****     Status = 0;
1341:../RTT/Src/SEGGER_RTT.c ****   }
1342:../RTT/Src/SEGGER_RTT.c ****   //
1343:../RTT/Src/SEGGER_RTT.c ****   // Finish up.
1344:../RTT/Src/SEGGER_RTT.c ****   //
1345:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1906              		.loc 1 1345 3 view .LVU620
 1907              		.syntax unified
 1908              	@ 1345 "../RTT/Src/SEGGER_RTT.c" 1
 1909 0048 8CF31188 		msr   basepri, ip  
 1910              		
 1911              	@ 0 "" 2
 1912              		.thumb
 1913              		.syntax unified
 1914              	.LBE23:
 1915              		.loc 1 1345 22 view .LVU621
1346:../RTT/Src/SEGGER_RTT.c ****   //
1347:../RTT/Src/SEGGER_RTT.c ****   return Status;
 1916              		.loc 1 1347 3 view .LVU622
1348:../RTT/Src/SEGGER_RTT.c **** }
 1917              		.loc 1 1348 1 is_stmt 0 view .LVU623
 1918 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1919              	.LVL162:
 1920              	.L122:
 1921              	.LBB24:
1340:../RTT/Src/SEGGER_RTT.c ****   }
 1922              		.loc 1 1340 12 view .LVU624
 1923 004e 0020     		movs	r0, #0
 1924 0050 FAE7     		b	.L120
 1925              	.L127:
 1926 0052 00BF     		.align	2
 1927              	.L126:
 1928 0054 00000000 		.word	_SEGGER_RTT
 1929              	.LBE24:
 1930              		.cfi_endproc
 1931              	.LFE16:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 63


 1933              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 1934              		.align	1
 1935              		.global	SEGGER_RTT_PutChar
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1940              	SEGGER_RTT_PutChar:
 1941              	.LVL163:
 1942              	.LFB17:
1349:../RTT/Src/SEGGER_RTT.c **** 
1350:../RTT/Src/SEGGER_RTT.c ****  /*********************************************************************
1351:../RTT/Src/SEGGER_RTT.c **** *
1352:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1353:../RTT/Src/SEGGER_RTT.c **** *
1354:../RTT/Src/SEGGER_RTT.c **** *  Function description
1355:../RTT/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1356:../RTT/Src/SEGGER_RTT.c **** *
1357:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1358:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1359:../RTT/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1360:../RTT/Src/SEGGER_RTT.c **** *
1361:../RTT/Src/SEGGER_RTT.c **** *  Return value
1362:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1363:../RTT/Src/SEGGER_RTT.c **** *
1364:../RTT/Src/SEGGER_RTT.c **** *  Notes
1365:../RTT/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1366:../RTT/Src/SEGGER_RTT.c **** */
1367:../RTT/Src/SEGGER_RTT.c **** 
1368:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 1943              		.loc 1 1368 59 is_stmt 1 view -0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 0
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
1369:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1947              		.loc 1 1369 3 view .LVU626
1370:../RTT/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1948              		.loc 1 1370 3 view .LVU627
1371:../RTT/Src/SEGGER_RTT.c ****   unsigned              Status;
 1949              		.loc 1 1371 3 view .LVU628
1372:../RTT/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 1950              		.loc 1 1372 3 view .LVU629
1373:../RTT/Src/SEGGER_RTT.c ****   //
1374:../RTT/Src/SEGGER_RTT.c ****   // Prepare
1375:../RTT/Src/SEGGER_RTT.c ****   //
1376:../RTT/Src/SEGGER_RTT.c ****   INIT();
 1951              		.loc 1 1376 3 view .LVU630
 1952              	.LBB25:
 1953              		.loc 1 1376 3 view .LVU631
 1954              		.loc 1 1376 3 view .LVU632
 1955              		.loc 1 1376 3 view .LVU633
 1956              	.LBE25:
1368:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1957              		.loc 1 1368 59 is_stmt 0 view .LVU634
 1958 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1959              	.LCFI20:
 1960              		.cfi_def_cfa_offset 24
 1961              		.cfi_offset 3, -24
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 64


 1962              		.cfi_offset 4, -20
 1963              		.cfi_offset 5, -16
 1964              		.cfi_offset 6, -12
 1965              		.cfi_offset 7, -8
 1966              		.cfi_offset 14, -4
 1967              	.LBB26:
 1968              		.loc 1 1376 3 view .LVU635
 1969 0002 194C     		ldr	r4, .L141
 1970 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1971 0006 532B     		cmp	r3, #83
 1972              	.LBE26:
1368:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1973              		.loc 1 1368 59 view .LVU636
 1974 0008 0546     		mov	r5, r0
 1975 000a 0E46     		mov	r6, r1
 1976              	.LBB27:
 1977              		.loc 1 1376 3 view .LVU637
 1978 000c 01D0     		beq	.L129
 1979              		.loc 1 1376 3 is_stmt 1 discriminator 1 view .LVU638
 1980 000e FFF7FEFF 		bl	_DoInit
 1981              	.LVL164:
 1982              	.L129:
 1983              		.loc 1 1376 3 is_stmt 0 discriminator 1 view .LVU639
 1984              	.LBE27:
 1985              		.loc 1 1376 3 is_stmt 1 discriminator 3 view .LVU640
 1986              	.LBB28:
1377:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1987              		.loc 1 1377 3 view .LVU641
 1988              		.loc 1 1377 3 view .LVU642
 1989              		.syntax unified
 1990              	@ 1377 "../RTT/Src/SEGGER_RTT.c" 1
 1991 0012 EFF31187 		mrs   r7, basepri  
 1992 0016 4FF02001 		mov   r1, #32       
 1993 001a 81F31188 		msr   basepri, r1  
 1994              		
 1995              	@ 0 "" 2
 1996              	.LVL165:
 1997              		.loc 1 1377 20 view .LVU643
1378:../RTT/Src/SEGGER_RTT.c ****   //
1379:../RTT/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1380:../RTT/Src/SEGGER_RTT.c ****   //
1381:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1998              		.loc 1 1381 3 view .LVU644
1382:../RTT/Src/SEGGER_RTT.c ****   //
1383:../RTT/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1384:../RTT/Src/SEGGER_RTT.c ****   //
1385:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1999              		.loc 1 1385 3 view .LVU645
 2000              		.loc 1 1385 16 is_stmt 0 view .LVU646
 2001              		.thumb
 2002              		.syntax unified
 2003 001e 1822     		movs	r2, #24
 2004 0020 02FB0542 		mla	r2, r2, r5, r4
 2005 0024 506A     		ldr	r0, [r2, #36]
1386:../RTT/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2006              		.loc 1 1386 6 view .LVU647
 2007 0026 116A     		ldr	r1, [r2, #32]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 65


1385:../RTT/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2008              		.loc 1 1385 9 view .LVU648
 2009 0028 431C     		adds	r3, r0, #1
 2010              	.LVL166:
 2011              		.loc 1 1386 3 is_stmt 1 view .LVU649
1387:../RTT/Src/SEGGER_RTT.c ****     WrOff = 0;
 2012              		.loc 1 1387 11 is_stmt 0 view .LVU650
 2013 002a 9942     		cmp	r1, r3
 2014 002c 08BF     		it	eq
 2015 002e 0023     		moveq	r3, #0
 2016              	.LVL167:
1388:../RTT/Src/SEGGER_RTT.c ****   }
1389:../RTT/Src/SEGGER_RTT.c ****   //
1390:../RTT/Src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1391:../RTT/Src/SEGGER_RTT.c ****   //
1392:../RTT/Src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2017              		.loc 1 1392 3 is_stmt 1 view .LVU651
 2018              		.loc 1 1392 6 is_stmt 0 view .LVU652
 2019 0030 D16A     		ldr	r1, [r2, #44]
 2020 0032 0229     		cmp	r1, #2
 2021              	.L140:
 2022 0034 02D1     		bne	.L131
1393:../RTT/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1394:../RTT/Src/SEGGER_RTT.c ****       ;
 2023              		.loc 1 1394 7 is_stmt 1 view .LVU653
1393:../RTT/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
 2024              		.loc 1 1393 18 discriminator 1 view .LVU654
1393:../RTT/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
 2025              		.loc 1 1393 26 is_stmt 0 discriminator 1 view .LVU655
 2026 0036 916A     		ldr	r1, [r2, #40]
1393:../RTT/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
 2027              		.loc 1 1393 18 discriminator 1 view .LVU656
 2028 0038 9942     		cmp	r1, r3
 2029 003a FBE7     		b	.L140
 2030              	.L131:
1395:../RTT/Src/SEGGER_RTT.c ****     }
1396:../RTT/Src/SEGGER_RTT.c ****   }
1397:../RTT/Src/SEGGER_RTT.c ****   //
1398:../RTT/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1399:../RTT/Src/SEGGER_RTT.c ****   //
1400:../RTT/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2031              		.loc 1 1400 3 is_stmt 1 view .LVU657
 2032              		.loc 1 1400 21 is_stmt 0 view .LVU658
 2033 003c 1822     		movs	r2, #24
 2034 003e 02FB0541 		mla	r1, r2, r5, r4
 2035 0042 D1F828C0 		ldr	ip, [r1, #40]
 2036              		.loc 1 1400 6 view .LVU659
 2037 0046 9C45     		cmp	ip, r3
 2038 0048 0BD0     		beq	.L135
1401:../RTT/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2039              		.loc 1 1401 5 is_stmt 1 view .LVU660
 2040              		.loc 1 1401 19 is_stmt 0 view .LVU661
 2041 004a 05FB0222 		mla	r2, r5, r2, r2
 2042 004e 1444     		add	r4, r4, r2
 2043              		.loc 1 1401 11 view .LVU662
 2044 0050 6268     		ldr	r2, [r4, #4]
 2045              	.LVL168:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 66


1402:../RTT/Src/SEGGER_RTT.c ****     *pDst = c;
 2046              		.loc 1 1402 5 is_stmt 1 view .LVU663
 2047              		.loc 1 1402 11 is_stmt 0 view .LVU664
 2048 0052 1654     		strb	r6, [r2, r0]
1403:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2049              		.loc 1 1403 5 is_stmt 1 view .LVU665
 2050              		.syntax unified
 2051              	@ 1403 "../RTT/Src/SEGGER_RTT.c" 1
 2052 0054 BFF35F8F 		dmb
 2053              	
 2054              	@ 0 "" 2
 2055              		.loc 1 1403 15 view .LVU666
1404:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2056              		.loc 1 1404 5 view .LVU667
1405:../RTT/Src/SEGGER_RTT.c ****     Status = 1;
 2057              		.loc 1 1405 12 is_stmt 0 view .LVU668
 2058              		.thumb
 2059              		.syntax unified
 2060 0058 0120     		movs	r0, #1
 2061              	.LVL169:
1404:../RTT/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2062              		.loc 1 1404 18 view .LVU669
 2063 005a 4B62     		str	r3, [r1, #36]
 2064              		.loc 1 1405 5 is_stmt 1 view .LVU670
 2065              	.LVL170:
 2066              	.L133:
1406:../RTT/Src/SEGGER_RTT.c ****   } else {
1407:../RTT/Src/SEGGER_RTT.c ****     Status = 0;
1408:../RTT/Src/SEGGER_RTT.c ****   }
1409:../RTT/Src/SEGGER_RTT.c ****   //
1410:../RTT/Src/SEGGER_RTT.c ****   // Finish up.
1411:../RTT/Src/SEGGER_RTT.c ****   //
1412:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2067              		.loc 1 1412 3 view .LVU671
 2068              		.syntax unified
 2069              	@ 1412 "../RTT/Src/SEGGER_RTT.c" 1
 2070 005c 87F31188 		msr   basepri, r7  
 2071              		
 2072              	@ 0 "" 2
 2073              		.thumb
 2074              		.syntax unified
 2075              	.LBE28:
 2076              		.loc 1 1412 22 view .LVU672
1413:../RTT/Src/SEGGER_RTT.c ****   return Status;
 2077              		.loc 1 1413 3 view .LVU673
1414:../RTT/Src/SEGGER_RTT.c **** }
 2078              		.loc 1 1414 1 is_stmt 0 view .LVU674
 2079 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2080              	.LVL171:
 2081              	.L135:
 2082              	.LBB29:
1407:../RTT/Src/SEGGER_RTT.c ****   }
 2083              		.loc 1 1407 12 view .LVU675
 2084 0062 0020     		movs	r0, #0
 2085 0064 FAE7     		b	.L133
 2086              	.L142:
 2087 0066 00BF     		.align	2
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 67


 2088              	.L141:
 2089 0068 00000000 		.word	_SEGGER_RTT
 2090              	.LBE29:
 2091              		.cfi_endproc
 2092              	.LFE17:
 2094              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2095              		.align	1
 2096              		.global	SEGGER_RTT_GetKey
 2097              		.syntax unified
 2098              		.thumb
 2099              		.thumb_func
 2101              	SEGGER_RTT_GetKey:
 2102              	.LFB18:
1415:../RTT/Src/SEGGER_RTT.c **** 
1416:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1417:../RTT/Src/SEGGER_RTT.c **** *
1418:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1419:../RTT/Src/SEGGER_RTT.c **** *
1420:../RTT/Src/SEGGER_RTT.c **** *  Function description
1421:../RTT/Src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1422:../RTT/Src/SEGGER_RTT.c **** *    Host has previously stored data there.
1423:../RTT/Src/SEGGER_RTT.c **** *
1424:../RTT/Src/SEGGER_RTT.c **** *  Return value
1425:../RTT/Src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1426:../RTT/Src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1427:../RTT/Src/SEGGER_RTT.c **** *
1428:../RTT/Src/SEGGER_RTT.c **** *  Notes
1429:../RTT/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1430:../RTT/Src/SEGGER_RTT.c **** */
1431:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2103              		.loc 1 1431 29 is_stmt 1 view -0
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 8
 2106              		@ frame_needed = 0, uses_anonymous_args = 0
1432:../RTT/Src/SEGGER_RTT.c ****   char c;
 2107              		.loc 1 1432 3 view .LVU677
1433:../RTT/Src/SEGGER_RTT.c ****   int r;
 2108              		.loc 1 1433 3 view .LVU678
1434:../RTT/Src/SEGGER_RTT.c **** 
1435:../RTT/Src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2109              		.loc 1 1435 3 view .LVU679
1431:../RTT/Src/SEGGER_RTT.c ****   char c;
 2110              		.loc 1 1431 29 is_stmt 0 view .LVU680
 2111 0000 07B5     		push	{r0, r1, r2, lr}
 2112              	.LCFI21:
 2113              		.cfi_def_cfa_offset 16
 2114              		.cfi_offset 14, -4
 2115              		.loc 1 1435 12 view .LVU681
 2116 0002 0122     		movs	r2, #1
 2117 0004 0DF10701 		add	r1, sp, #7
 2118 0008 0020     		movs	r0, #0
 2119 000a FFF7FEFF 		bl	SEGGER_RTT_Read
 2120              	.LVL172:
1436:../RTT/Src/SEGGER_RTT.c ****   if (r == 1) {
 2121              		.loc 1 1436 3 is_stmt 1 view .LVU682
 2122              		.loc 1 1436 6 is_stmt 0 view .LVU683
 2123 000e 0128     		cmp	r0, #1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 68


1437:../RTT/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2124              		.loc 1 1437 5 is_stmt 1 view .LVU684
 2125              		.loc 1 1437 7 is_stmt 0 view .LVU685
 2126 0010 0CBF     		ite	eq
 2127 0012 9DF80700 		ldrbeq	r0, [sp, #7]	@ zero_extendqisi2
 2128              	.LVL173:
1438:../RTT/Src/SEGGER_RTT.c ****   } else {
1439:../RTT/Src/SEGGER_RTT.c ****     r = -1;
 2129              		.loc 1 1439 7 view .LVU686
 2130 0016 4FF0FF30 		movne	r0, #-1
 2131              	.LVL174:
1440:../RTT/Src/SEGGER_RTT.c ****   }
1441:../RTT/Src/SEGGER_RTT.c ****   return r;
 2132              		.loc 1 1441 3 is_stmt 1 view .LVU687
1442:../RTT/Src/SEGGER_RTT.c **** }
 2133              		.loc 1 1442 1 is_stmt 0 view .LVU688
 2134 001a 03B0     		add	sp, sp, #12
 2135              	.LCFI22:
 2136              		.cfi_def_cfa_offset 4
 2137              		@ sp needed
 2138 001c 5DF804FB 		ldr	pc, [sp], #4
 2139              		.cfi_endproc
 2140              	.LFE18:
 2142              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2143              		.align	1
 2144              		.global	SEGGER_RTT_WaitKey
 2145              		.syntax unified
 2146              		.thumb
 2147              		.thumb_func
 2149              	SEGGER_RTT_WaitKey:
 2150              	.LFB19:
1443:../RTT/Src/SEGGER_RTT.c **** 
1444:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1445:../RTT/Src/SEGGER_RTT.c **** *
1446:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1447:../RTT/Src/SEGGER_RTT.c **** *
1448:../RTT/Src/SEGGER_RTT.c **** *  Function description
1449:../RTT/Src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1450:../RTT/Src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1451:../RTT/Src/SEGGER_RTT.c **** *
1452:../RTT/Src/SEGGER_RTT.c **** *  Return value
1453:../RTT/Src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1454:../RTT/Src/SEGGER_RTT.c **** *
1455:../RTT/Src/SEGGER_RTT.c **** *  Notes
1456:../RTT/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1457:../RTT/Src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1458:../RTT/Src/SEGGER_RTT.c **** */
1459:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2151              		.loc 1 1459 30 is_stmt 1 view -0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 0
 2154              		@ frame_needed = 0, uses_anonymous_args = 0
 2155 0000 08B5     		push	{r3, lr}
 2156              	.LCFI23:
 2157              		.cfi_def_cfa_offset 8
 2158              		.cfi_offset 3, -8
 2159              		.cfi_offset 14, -4
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 69


 2160              	.L147:
1460:../RTT/Src/SEGGER_RTT.c ****   int r;
 2161              		.loc 1 1460 3 view .LVU690
1461:../RTT/Src/SEGGER_RTT.c **** 
1462:../RTT/Src/SEGGER_RTT.c ****   do {
 2162              		.loc 1 1462 3 view .LVU691
1463:../RTT/Src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2163              		.loc 1 1463 5 view .LVU692
 2164              		.loc 1 1463 9 is_stmt 0 view .LVU693
 2165 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2166              	.LVL175:
1464:../RTT/Src/SEGGER_RTT.c ****   } while (r < 0);
 2167              		.loc 1 1464 14 is_stmt 1 discriminator 1 view .LVU694
 2168 0006 431C     		adds	r3, r0, #1
 2169 0008 FBD0     		beq	.L147
1465:../RTT/Src/SEGGER_RTT.c ****   return r;
 2170              		.loc 1 1465 3 view .LVU695
1466:../RTT/Src/SEGGER_RTT.c **** }
 2171              		.loc 1 1466 1 is_stmt 0 view .LVU696
 2172 000a 08BD     		pop	{r3, pc}
 2173              		.cfi_endproc
 2174              	.LFE19:
 2176              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2177              		.align	1
 2178              		.global	SEGGER_RTT_HasKey
 2179              		.syntax unified
 2180              		.thumb
 2181              		.thumb_func
 2183              	SEGGER_RTT_HasKey:
 2184              	.LFB20:
1467:../RTT/Src/SEGGER_RTT.c **** 
1468:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1469:../RTT/Src/SEGGER_RTT.c **** *
1470:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1471:../RTT/Src/SEGGER_RTT.c **** *
1472:../RTT/Src/SEGGER_RTT.c **** *  Function description
1473:../RTT/Src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1474:../RTT/Src/SEGGER_RTT.c **** *
1475:../RTT/Src/SEGGER_RTT.c **** *  Return value
1476:../RTT/Src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1477:../RTT/Src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1478:../RTT/Src/SEGGER_RTT.c **** *
1479:../RTT/Src/SEGGER_RTT.c **** *  Notes
1480:../RTT/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1481:../RTT/Src/SEGGER_RTT.c **** */
1482:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2185              		.loc 1 1482 29 is_stmt 1 view -0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 0
 2188              		@ frame_needed = 0, uses_anonymous_args = 0
1483:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2189              		.loc 1 1483 3 view .LVU698
1484:../RTT/Src/SEGGER_RTT.c ****   unsigned RdOff;
 2190              		.loc 1 1484 3 view .LVU699
1485:../RTT/Src/SEGGER_RTT.c ****   int r;
 2191              		.loc 1 1485 3 view .LVU700
1486:../RTT/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 70


1487:../RTT/Src/SEGGER_RTT.c ****   INIT();
 2192              		.loc 1 1487 3 view .LVU701
 2193              	.LBB30:
 2194              		.loc 1 1487 3 view .LVU702
 2195              		.loc 1 1487 3 view .LVU703
 2196              	.LVL176:
 2197              		.loc 1 1487 3 view .LVU704
 2198              	.LBE30:
1482:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2199              		.loc 1 1482 29 is_stmt 0 view .LVU705
 2200 0000 10B5     		push	{r4, lr}
 2201              	.LCFI24:
 2202              		.cfi_def_cfa_offset 8
 2203              		.cfi_offset 4, -8
 2204              		.cfi_offset 14, -4
 2205              	.LBB31:
 2206              		.loc 1 1487 3 view .LVU706
 2207 0002 064C     		ldr	r4, .L155
 2208 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2209 0006 532B     		cmp	r3, #83
 2210 0008 01D0     		beq	.L151
 2211              		.loc 1 1487 3 is_stmt 1 discriminator 1 view .LVU707
 2212 000a FFF7FEFF 		bl	_DoInit
 2213              	.LVL177:
 2214              	.L151:
 2215              	.LBE31:
 2216              		.loc 1 1487 3 discriminator 3 view .LVU708
1488:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  /
 2217              		.loc 1 1488 3 view .LVU709
1489:../RTT/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2218              		.loc 1 1489 3 view .LVU710
1490:../RTT/Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2219              		.loc 1 1490 3 view .LVU711
 2220              		.loc 1 1490 21 is_stmt 0 view .LVU712
 2221 000e E36E     		ldr	r3, [r4, #108]
 2222              	.LVL178:
1491:../RTT/Src/SEGGER_RTT.c ****     r = 1;
1492:../RTT/Src/SEGGER_RTT.c ****   } else {
1493:../RTT/Src/SEGGER_RTT.c ****     r = 0;
1494:../RTT/Src/SEGGER_RTT.c ****   }
1495:../RTT/Src/SEGGER_RTT.c ****   return r;
 2223              		.loc 1 1495 3 is_stmt 1 view .LVU713
1490:../RTT/Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2224              		.loc 1 1490 6 is_stmt 0 view .LVU714
 2225 0010 206F     		ldr	r0, [r4, #112]
1496:../RTT/Src/SEGGER_RTT.c **** }
 2226              		.loc 1 1496 1 view .LVU715
 2227 0012 C01A     		subs	r0, r0, r3
 2228 0014 18BF     		it	ne
 2229 0016 0120     		movne	r0, #1
 2230 0018 10BD     		pop	{r4, pc}
 2231              	.L156:
 2232 001a 00BF     		.align	2
 2233              	.L155:
 2234 001c 00000000 		.word	_SEGGER_RTT
 2235              		.cfi_endproc
 2236              	.LFE20:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 71


 2238              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2239              		.align	1
 2240              		.global	SEGGER_RTT_HasData
 2241              		.syntax unified
 2242              		.thumb
 2243              		.thumb_func
 2245              	SEGGER_RTT_HasData:
 2246              	.LVL179:
 2247              	.LFB21:
1497:../RTT/Src/SEGGER_RTT.c **** 
1498:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1499:../RTT/Src/SEGGER_RTT.c **** *
1500:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1501:../RTT/Src/SEGGER_RTT.c **** *
1502:../RTT/Src/SEGGER_RTT.c **** *  Function description
1503:../RTT/Src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1504:../RTT/Src/SEGGER_RTT.c **** *
1505:../RTT/Src/SEGGER_RTT.c **** *  Return value:
1506:../RTT/Src/SEGGER_RTT.c **** *  ==0:  No data
1507:../RTT/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1508:../RTT/Src/SEGGER_RTT.c **** *
1509:../RTT/Src/SEGGER_RTT.c **** */
1510:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2248              		.loc 1 1510 51 is_stmt 1 view -0
 2249              		.cfi_startproc
 2250              		@ args = 0, pretend = 0, frame = 0
 2251              		@ frame_needed = 0, uses_anonymous_args = 0
 2252              		@ link register save eliminated.
1511:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2253              		.loc 1 1511 3 view .LVU717
1512:../RTT/Src/SEGGER_RTT.c ****   unsigned                v;
 2254              		.loc 1 1512 3 view .LVU718
1513:../RTT/Src/SEGGER_RTT.c **** 
1514:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHE
 2255              		.loc 1 1514 3 view .LVU719
1515:../RTT/Src/SEGGER_RTT.c ****   v = pRing->WrOff;
 2256              		.loc 1 1515 3 view .LVU720
 2257              		.loc 1 1515 5 is_stmt 0 view .LVU721
 2258 0000 034B     		ldr	r3, .L158
 2259 0002 1822     		movs	r2, #24
 2260 0004 02FB0033 		mla	r3, r2, r0, r3
 2261 0008 D86E     		ldr	r0, [r3, #108]
 2262              	.LVL180:
1516:../RTT/Src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2263              		.loc 1 1516 3 is_stmt 1 view .LVU722
 2264              		.loc 1 1516 12 is_stmt 0 view .LVU723
 2265 000a 1B6F     		ldr	r3, [r3, #112]
1517:../RTT/Src/SEGGER_RTT.c **** }
 2266              		.loc 1 1517 1 view .LVU724
 2267 000c C01A     		subs	r0, r0, r3
 2268              	.LVL181:
 2269              		.loc 1 1517 1 view .LVU725
 2270 000e 7047     		bx	lr
 2271              	.L159:
 2272              		.align	2
 2273              	.L158:
 2274 0010 00000000 		.word	_SEGGER_RTT
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 72


 2275              		.cfi_endproc
 2276              	.LFE21:
 2278              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2279              		.align	1
 2280              		.global	SEGGER_RTT_HasDataUp
 2281              		.syntax unified
 2282              		.thumb
 2283              		.thumb_func
 2285              	SEGGER_RTT_HasDataUp:
 2286              	.LVL182:
 2287              	.LFB22:
1518:../RTT/Src/SEGGER_RTT.c **** 
1519:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1520:../RTT/Src/SEGGER_RTT.c **** *
1521:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1522:../RTT/Src/SEGGER_RTT.c **** *
1523:../RTT/Src/SEGGER_RTT.c **** *  Function description
1524:../RTT/Src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1525:../RTT/Src/SEGGER_RTT.c **** *
1526:../RTT/Src/SEGGER_RTT.c **** *  Return value:
1527:../RTT/Src/SEGGER_RTT.c **** *  ==0:  No data
1528:../RTT/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1529:../RTT/Src/SEGGER_RTT.c **** *
1530:../RTT/Src/SEGGER_RTT.c **** */
1531:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2288              		.loc 1 1531 53 is_stmt 1 view -0
 2289              		.cfi_startproc
 2290              		@ args = 0, pretend = 0, frame = 0
 2291              		@ frame_needed = 0, uses_anonymous_args = 0
 2292              		@ link register save eliminated.
1532:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2293              		.loc 1 1532 3 view .LVU727
1533:../RTT/Src/SEGGER_RTT.c ****   unsigned                v;
 2294              		.loc 1 1533 3 view .LVU728
1534:../RTT/Src/SEGGER_RTT.c **** 
1535:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2295              		.loc 1 1535 3 view .LVU729
1536:../RTT/Src/SEGGER_RTT.c ****   v = pRing->RdOff;
 2296              		.loc 1 1536 3 view .LVU730
 2297              		.loc 1 1536 5 is_stmt 0 view .LVU731
 2298 0000 034B     		ldr	r3, .L161
 2299 0002 1822     		movs	r2, #24
 2300 0004 02FB0033 		mla	r3, r2, r0, r3
 2301 0008 9A6A     		ldr	r2, [r3, #40]
 2302              	.LVL183:
1537:../RTT/Src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2303              		.loc 1 1537 3 is_stmt 1 view .LVU732
 2304              		.loc 1 1537 23 is_stmt 0 view .LVU733
 2305 000a 586A     		ldr	r0, [r3, #36]
 2306              	.LVL184:
1538:../RTT/Src/SEGGER_RTT.c **** }
 2307              		.loc 1 1538 1 view .LVU734
 2308 000c 801A     		subs	r0, r0, r2
 2309 000e 7047     		bx	lr
 2310              	.L162:
 2311              		.align	2
 2312              	.L161:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 73


 2313 0010 00000000 		.word	_SEGGER_RTT
 2314              		.cfi_endproc
 2315              	.LFE22:
 2317              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2318              		.align	1
 2319              		.global	SEGGER_RTT_AllocDownBuffer
 2320              		.syntax unified
 2321              		.thumb
 2322              		.thumb_func
 2324              	SEGGER_RTT_AllocDownBuffer:
 2325              	.LVL185:
 2326              	.LFB23:
1539:../RTT/Src/SEGGER_RTT.c **** 
1540:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1541:../RTT/Src/SEGGER_RTT.c **** *
1542:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1543:../RTT/Src/SEGGER_RTT.c **** *
1544:../RTT/Src/SEGGER_RTT.c **** *  Function description
1545:../RTT/Src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1546:../RTT/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1547:../RTT/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1548:../RTT/Src/SEGGER_RTT.c **** *
1549:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1550:../RTT/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1551:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1552:../RTT/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1553:../RTT/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1554:../RTT/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1555:../RTT/Src/SEGGER_RTT.c **** *
1556:../RTT/Src/SEGGER_RTT.c **** *  Return value
1557:../RTT/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1558:../RTT/Src/SEGGER_RTT.c **** *     < 0 - Error
1559:../RTT/Src/SEGGER_RTT.c **** */
1560:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2327              		.loc 1 1560 103 is_stmt 1 view -0
 2328              		.cfi_startproc
 2329              		@ args = 0, pretend = 0, frame = 0
 2330              		@ frame_needed = 0, uses_anonymous_args = 0
1561:../RTT/Src/SEGGER_RTT.c ****   int BufferIndex;
 2331              		.loc 1 1561 3 view .LVU736
1562:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2332              		.loc 1 1562 3 view .LVU737
1563:../RTT/Src/SEGGER_RTT.c **** 
1564:../RTT/Src/SEGGER_RTT.c ****   INIT();
 2333              		.loc 1 1564 3 view .LVU738
 2334              	.LBB32:
 2335              		.loc 1 1564 3 view .LVU739
 2336              		.loc 1 1564 3 view .LVU740
 2337              		.loc 1 1564 3 view .LVU741
 2338              	.LBE32:
1560:../RTT/Src/SEGGER_RTT.c ****   int BufferIndex;
 2339              		.loc 1 1560 103 is_stmt 0 view .LVU742
 2340 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2341              	.LCFI25:
 2342              		.cfi_def_cfa_offset 24
 2343              		.cfi_offset 4, -24
 2344              		.cfi_offset 5, -20
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 74


 2345              		.cfi_offset 6, -16
 2346              		.cfi_offset 7, -12
 2347              		.cfi_offset 8, -8
 2348              		.cfi_offset 14, -4
 2349              	.LBB33:
 2350              		.loc 1 1564 3 view .LVU743
 2351 0004 184C     		ldr	r4, .L176
 2352              	.LBE33:
1560:../RTT/Src/SEGGER_RTT.c ****   int BufferIndex;
 2353              		.loc 1 1560 103 view .LVU744
 2354 0006 1D46     		mov	r5, r3
 2355              	.LBB34:
 2356              		.loc 1 1564 3 view .LVU745
 2357 0008 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2358              	.LVL186:
 2359              		.loc 1 1564 3 view .LVU746
 2360 000a 532B     		cmp	r3, #83
 2361              	.LBE34:
1560:../RTT/Src/SEGGER_RTT.c ****   int BufferIndex;
 2362              		.loc 1 1560 103 view .LVU747
 2363 000c 8046     		mov	r8, r0
 2364 000e 0F46     		mov	r7, r1
 2365 0010 1646     		mov	r6, r2
 2366              	.LBB35:
 2367              		.loc 1 1564 3 view .LVU748
 2368 0012 01D0     		beq	.L164
 2369              		.loc 1 1564 3 is_stmt 1 discriminator 1 view .LVU749
 2370 0014 FFF7FEFF 		bl	_DoInit
 2371              	.LVL187:
 2372              	.L164:
 2373              		.loc 1 1564 3 is_stmt 0 discriminator 1 view .LVU750
 2374              	.LBE35:
 2375              		.loc 1 1564 3 is_stmt 1 discriminator 3 view .LVU751
 2376              	.LBB36:
1565:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2377              		.loc 1 1565 3 view .LVU752
 2378              		.loc 1 1565 3 view .LVU753
 2379              		.syntax unified
 2380              	@ 1565 "../RTT/Src/SEGGER_RTT.c" 1
 2381 0018 EFF31182 		mrs   r2, basepri  
 2382 001c 4FF02001 		mov   r1, #32       
 2383 0020 81F31188 		msr   basepri, r1  
 2384              		
 2385              	@ 0 "" 2
 2386              	.LVL188:
 2387              		.loc 1 1565 20 view .LVU754
1566:../RTT/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 2388              		.loc 1 1566 3 view .LVU755
1567:../RTT/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2389              		.loc 1 1567 3 view .LVU756
 2390              		.loc 1 1567 15 is_stmt 0 view .LVU757
 2391              		.thumb
 2392              		.syntax unified
 2393 0024 0020     		movs	r0, #0
1568:../RTT/Src/SEGGER_RTT.c ****   do {
1569:../RTT/Src/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
 2394              		.loc 1 1569 35 view .LVU758
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 75


 2395 0026 1821     		movs	r1, #24
 2396              	.LVL189:
 2397              	.L166:
1568:../RTT/Src/SEGGER_RTT.c ****   do {
 2398              		.loc 1 1568 3 is_stmt 1 view .LVU759
 2399              		.loc 1 1569 5 view .LVU760
 2400              		.loc 1 1569 35 is_stmt 0 view .LVU761
 2401 0028 01FB0043 		mla	r3, r1, r0, r4
 2402 002c 5B6E     		ldr	r3, [r3, #100]
 2403              		.loc 1 1569 8 view .LVU762
 2404 002e 1BB1     		cbz	r3, .L165
1570:../RTT/Src/SEGGER_RTT.c ****       break;
1571:../RTT/Src/SEGGER_RTT.c ****     }
1572:../RTT/Src/SEGGER_RTT.c ****     BufferIndex++;
 2405              		.loc 1 1572 5 is_stmt 1 view .LVU763
1573:../RTT/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2406              		.loc 1 1573 32 is_stmt 0 view .LVU764
 2407 0030 6369     		ldr	r3, [r4, #20]
1572:../RTT/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2408              		.loc 1 1572 16 view .LVU765
 2409 0032 0130     		adds	r0, r0, #1
 2410              	.LVL190:
 2411              		.loc 1 1573 24 is_stmt 1 view .LVU766
 2412 0034 8342     		cmp	r3, r0
 2413 0036 F7DC     		bgt	.L166
 2414              	.L165:
1574:../RTT/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2415              		.loc 1 1574 3 view .LVU767
 2416              		.loc 1 1574 27 is_stmt 0 view .LVU768
 2417 0038 6369     		ldr	r3, [r4, #20]
 2418              		.loc 1 1574 6 view .LVU769
 2419 003a 8342     		cmp	r3, r0
 2420 003c 10DD     		ble	.L168
1575:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2421              		.loc 1 1575 5 is_stmt 1 view .LVU770
 2422              		.loc 1 1575 45 is_stmt 0 view .LVU771
 2423 003e 1823     		movs	r3, #24
 2424 0040 03FB0044 		mla	r4, r3, r0, r4
1576:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
1577:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
1578:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2425              		.loc 1 1578 45 view .LVU772
 2426 0044 0023     		movs	r3, #0
1575:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2427              		.loc 1 1575 45 view .LVU773
 2428 0046 C4F86080 		str	r8, [r4, #96]
1576:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2429              		.loc 1 1576 5 is_stmt 1 view .LVU774
1576:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2430              		.loc 1 1576 45 is_stmt 0 view .LVU775
 2431 004a 6766     		str	r7, [r4, #100]
1577:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2432              		.loc 1 1577 5 is_stmt 1 view .LVU776
1577:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2433              		.loc 1 1577 45 is_stmt 0 view .LVU777
 2434 004c A666     		str	r6, [r4, #104]
 2435              		.loc 1 1578 5 is_stmt 1 view .LVU778
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 76


 2436              		.loc 1 1578 45 is_stmt 0 view .LVU779
 2437 004e 2367     		str	r3, [r4, #112]
1579:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2438              		.loc 1 1579 5 is_stmt 1 view .LVU780
 2439              		.loc 1 1579 45 is_stmt 0 view .LVU781
 2440 0050 E366     		str	r3, [r4, #108]
1580:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2441              		.loc 1 1580 5 is_stmt 1 view .LVU782
 2442              		.loc 1 1580 45 is_stmt 0 view .LVU783
 2443 0052 6567     		str	r5, [r4, #116]
1581:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2444              		.loc 1 1581 5 is_stmt 1 view .LVU784
 2445              		.syntax unified
 2446              	@ 1581 "../RTT/Src/SEGGER_RTT.c" 1
 2447 0054 BFF35F8F 		dmb
 2448              	
 2449              	@ 0 "" 2
 2450              		.loc 1 1581 15 view .LVU785
 2451              	.LVL191:
 2452              		.thumb
 2453              		.syntax unified
 2454              	.L167:
1582:../RTT/Src/SEGGER_RTT.c ****   } else {
1583:../RTT/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1584:../RTT/Src/SEGGER_RTT.c ****   }
1585:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2455              		.loc 1 1585 3 view .LVU786
 2456              		.syntax unified
 2457              	@ 1585 "../RTT/Src/SEGGER_RTT.c" 1
 2458 0058 82F31188 		msr   basepri, r2  
 2459              		
 2460              	@ 0 "" 2
 2461              		.thumb
 2462              		.syntax unified
 2463              	.LBE36:
 2464              		.loc 1 1585 22 view .LVU787
1586:../RTT/Src/SEGGER_RTT.c ****   return BufferIndex;
 2465              		.loc 1 1586 3 view .LVU788
1587:../RTT/Src/SEGGER_RTT.c **** }
 2466              		.loc 1 1587 1 is_stmt 0 view .LVU789
 2467 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2468              	.LVL192:
 2469              	.L168:
 2470              	.LBB37:
1583:../RTT/Src/SEGGER_RTT.c ****   }
 2471              		.loc 1 1583 17 view .LVU790
 2472 0060 4FF0FF30 		mov	r0, #-1
 2473              	.LVL193:
1583:../RTT/Src/SEGGER_RTT.c ****   }
 2474              		.loc 1 1583 17 view .LVU791
 2475 0064 F8E7     		b	.L167
 2476              	.L177:
 2477 0066 00BF     		.align	2
 2478              	.L176:
 2479 0068 00000000 		.word	_SEGGER_RTT
 2480              	.LBE37:
 2481              		.cfi_endproc
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 77


 2482              	.LFE23:
 2484              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2485              		.align	1
 2486              		.global	SEGGER_RTT_AllocUpBuffer
 2487              		.syntax unified
 2488              		.thumb
 2489              		.thumb_func
 2491              	SEGGER_RTT_AllocUpBuffer:
 2492              	.LVL194:
 2493              	.LFB24:
1588:../RTT/Src/SEGGER_RTT.c **** 
1589:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1590:../RTT/Src/SEGGER_RTT.c **** *
1591:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1592:../RTT/Src/SEGGER_RTT.c **** *
1593:../RTT/Src/SEGGER_RTT.c **** *  Function description
1594:../RTT/Src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1595:../RTT/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1596:../RTT/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1597:../RTT/Src/SEGGER_RTT.c **** *
1598:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1599:../RTT/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1600:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1601:../RTT/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1602:../RTT/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1603:../RTT/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1604:../RTT/Src/SEGGER_RTT.c **** *
1605:../RTT/Src/SEGGER_RTT.c **** *  Return value
1606:../RTT/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1607:../RTT/Src/SEGGER_RTT.c **** *     < 0 - Error
1608:../RTT/Src/SEGGER_RTT.c **** */
1609:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2494              		.loc 1 1609 101 is_stmt 1 view -0
 2495              		.cfi_startproc
 2496              		@ args = 0, pretend = 0, frame = 0
 2497              		@ frame_needed = 0, uses_anonymous_args = 0
1610:../RTT/Src/SEGGER_RTT.c ****   int BufferIndex;
 2498              		.loc 1 1610 3 view .LVU793
1611:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2499              		.loc 1 1611 3 view .LVU794
1612:../RTT/Src/SEGGER_RTT.c **** 
1613:../RTT/Src/SEGGER_RTT.c ****   INIT();
 2500              		.loc 1 1613 3 view .LVU795
 2501              	.LBB38:
 2502              		.loc 1 1613 3 view .LVU796
 2503              		.loc 1 1613 3 view .LVU797
 2504              		.loc 1 1613 3 view .LVU798
 2505              	.LBE38:
1609:../RTT/Src/SEGGER_RTT.c ****   int BufferIndex;
 2506              		.loc 1 1609 101 is_stmt 0 view .LVU799
 2507 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2508              	.LCFI26:
 2509              		.cfi_def_cfa_offset 24
 2510              		.cfi_offset 4, -24
 2511              		.cfi_offset 5, -20
 2512              		.cfi_offset 6, -16
 2513              		.cfi_offset 7, -12
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 78


 2514              		.cfi_offset 8, -8
 2515              		.cfi_offset 14, -4
 2516              	.LBB39:
 2517              		.loc 1 1613 3 view .LVU800
 2518 0004 1A4C     		ldr	r4, .L191
 2519              	.LBE39:
1609:../RTT/Src/SEGGER_RTT.c ****   int BufferIndex;
 2520              		.loc 1 1609 101 view .LVU801
 2521 0006 1D46     		mov	r5, r3
 2522              	.LBB40:
 2523              		.loc 1 1613 3 view .LVU802
 2524 0008 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2525              	.LVL195:
 2526              		.loc 1 1613 3 view .LVU803
 2527 000a 532B     		cmp	r3, #83
 2528              	.LBE40:
1609:../RTT/Src/SEGGER_RTT.c ****   int BufferIndex;
 2529              		.loc 1 1609 101 view .LVU804
 2530 000c 8046     		mov	r8, r0
 2531 000e 0F46     		mov	r7, r1
 2532 0010 1646     		mov	r6, r2
 2533              	.LBB41:
 2534              		.loc 1 1613 3 view .LVU805
 2535 0012 01D0     		beq	.L179
 2536              		.loc 1 1613 3 is_stmt 1 discriminator 1 view .LVU806
 2537 0014 FFF7FEFF 		bl	_DoInit
 2538              	.LVL196:
 2539              	.L179:
 2540              		.loc 1 1613 3 is_stmt 0 discriminator 1 view .LVU807
 2541              	.LBE41:
 2542              		.loc 1 1613 3 is_stmt 1 discriminator 3 view .LVU808
 2543              	.LBB42:
1614:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2544              		.loc 1 1614 3 view .LVU809
 2545              		.loc 1 1614 3 view .LVU810
 2546              		.syntax unified
 2547              	@ 1614 "../RTT/Src/SEGGER_RTT.c" 1
 2548 0018 EFF3118C 		mrs   ip, basepri  
 2549 001c 4FF02001 		mov   r1, #32       
 2550 0020 81F31188 		msr   basepri, r1  
 2551              		
 2552              	@ 0 "" 2
 2553              	.LVL197:
 2554              		.loc 1 1614 20 view .LVU811
1615:../RTT/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 2555              		.loc 1 1615 3 view .LVU812
1616:../RTT/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2556              		.loc 1 1616 3 view .LVU813
 2557              		.loc 1 1616 15 is_stmt 0 view .LVU814
 2558              		.thumb
 2559              		.syntax unified
 2560 0024 0020     		movs	r0, #0
1617:../RTT/Src/SEGGER_RTT.c ****   do {
1618:../RTT/Src/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2561              		.loc 1 1618 33 view .LVU815
 2562 0026 1822     		movs	r2, #24
 2563              	.LVL198:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 79


 2564              	.L181:
1617:../RTT/Src/SEGGER_RTT.c ****   do {
 2565              		.loc 1 1617 3 is_stmt 1 view .LVU816
 2566              		.loc 1 1618 5 view .LVU817
 2567              		.loc 1 1618 33 is_stmt 0 view .LVU818
 2568 0028 00FB0223 		mla	r3, r0, r2, r2
 2569 002c 2344     		add	r3, r3, r4
 2570 002e 411C     		adds	r1, r0, #1
 2571 0030 5B68     		ldr	r3, [r3, #4]
 2572              		.loc 1 1618 8 view .LVU819
 2573 0032 1BB1     		cbz	r3, .L180
1619:../RTT/Src/SEGGER_RTT.c ****       break;
1620:../RTT/Src/SEGGER_RTT.c ****     }
1621:../RTT/Src/SEGGER_RTT.c ****     BufferIndex++;
 2574              		.loc 1 1621 5 is_stmt 1 view .LVU820
1622:../RTT/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2575              		.loc 1 1622 32 is_stmt 0 view .LVU821
 2576 0034 2369     		ldr	r3, [r4, #16]
 2577              		.loc 1 1622 24 view .LVU822
 2578 0036 8B42     		cmp	r3, r1
1621:../RTT/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2579              		.loc 1 1621 16 view .LVU823
 2580 0038 0846     		mov	r0, r1
 2581              	.LVL199:
 2582              		.loc 1 1622 24 is_stmt 1 view .LVU824
 2583 003a F5DC     		bgt	.L181
 2584              	.L180:
1623:../RTT/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2585              		.loc 1 1623 3 view .LVU825
 2586              		.loc 1 1623 27 is_stmt 0 view .LVU826
 2587 003c 2369     		ldr	r3, [r4, #16]
 2588              		.loc 1 1623 6 view .LVU827
 2589 003e 8342     		cmp	r3, r0
 2590 0040 13DD     		ble	.L183
1624:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2591              		.loc 1 1624 5 is_stmt 1 view .LVU828
 2592              		.loc 1 1624 43 is_stmt 0 view .LVU829
 2593 0042 1823     		movs	r3, #24
 2594 0044 00FB0332 		mla	r2, r0, r3, r3
 2595 0048 A118     		adds	r1, r4, r2
 2596 004a 44F80280 		str	r8, [r4, r2]
1625:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2597              		.loc 1 1625 5 is_stmt 1 view .LVU830
1626:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2598              		.loc 1 1626 43 is_stmt 0 view .LVU831
 2599 004e 03FB0044 		mla	r4, r3, r0, r4
1627:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 2600              		.loc 1 1627 43 view .LVU832
 2601 0052 0023     		movs	r3, #0
1625:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2602              		.loc 1 1625 43 view .LVU833
 2603 0054 4F60     		str	r7, [r1, #4]
1626:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2604              		.loc 1 1626 5 is_stmt 1 view .LVU834
1626:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2605              		.loc 1 1626 43 is_stmt 0 view .LVU835
 2606 0056 2662     		str	r6, [r4, #32]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 80


 2607              		.loc 1 1627 5 is_stmt 1 view .LVU836
 2608              		.loc 1 1627 43 is_stmt 0 view .LVU837
 2609 0058 A362     		str	r3, [r4, #40]
1628:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 2610              		.loc 1 1628 5 is_stmt 1 view .LVU838
 2611              		.loc 1 1628 43 is_stmt 0 view .LVU839
 2612 005a 6362     		str	r3, [r4, #36]
1629:../RTT/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 2613              		.loc 1 1629 5 is_stmt 1 view .LVU840
 2614              		.loc 1 1629 43 is_stmt 0 view .LVU841
 2615 005c E562     		str	r5, [r4, #44]
1630:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2616              		.loc 1 1630 5 is_stmt 1 view .LVU842
 2617              		.syntax unified
 2618              	@ 1630 "../RTT/Src/SEGGER_RTT.c" 1
 2619 005e BFF35F8F 		dmb
 2620              	
 2621              	@ 0 "" 2
 2622              		.loc 1 1630 15 view .LVU843
 2623              	.LVL200:
 2624              		.thumb
 2625              		.syntax unified
 2626              	.L182:
1631:../RTT/Src/SEGGER_RTT.c ****   } else {
1632:../RTT/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1633:../RTT/Src/SEGGER_RTT.c ****   }
1634:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2627              		.loc 1 1634 3 view .LVU844
 2628              		.syntax unified
 2629              	@ 1634 "../RTT/Src/SEGGER_RTT.c" 1
 2630 0062 8CF31188 		msr   basepri, ip  
 2631              		
 2632              	@ 0 "" 2
 2633              		.thumb
 2634              		.syntax unified
 2635              	.LBE42:
 2636              		.loc 1 1634 22 view .LVU845
1635:../RTT/Src/SEGGER_RTT.c ****   return BufferIndex;
 2637              		.loc 1 1635 3 view .LVU846
1636:../RTT/Src/SEGGER_RTT.c **** }
 2638              		.loc 1 1636 1 is_stmt 0 view .LVU847
 2639 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2640              	.LVL201:
 2641              	.L183:
 2642              	.LBB43:
1632:../RTT/Src/SEGGER_RTT.c ****   }
 2643              		.loc 1 1632 17 view .LVU848
 2644 006a 4FF0FF30 		mov	r0, #-1
 2645              	.LVL202:
1632:../RTT/Src/SEGGER_RTT.c ****   }
 2646              		.loc 1 1632 17 view .LVU849
 2647 006e F8E7     		b	.L182
 2648              	.L192:
 2649              		.align	2
 2650              	.L191:
 2651 0070 00000000 		.word	_SEGGER_RTT
 2652              	.LBE43:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 81


 2653              		.cfi_endproc
 2654              	.LFE24:
 2656              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2657              		.align	1
 2658              		.global	SEGGER_RTT_ConfigUpBuffer
 2659              		.syntax unified
 2660              		.thumb
 2661              		.thumb_func
 2663              	SEGGER_RTT_ConfigUpBuffer:
 2664              	.LVL203:
 2665              	.LFB25:
1637:../RTT/Src/SEGGER_RTT.c **** 
1638:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1639:../RTT/Src/SEGGER_RTT.c **** *
1640:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1641:../RTT/Src/SEGGER_RTT.c **** *
1642:../RTT/Src/SEGGER_RTT.c **** *  Function description
1643:../RTT/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1644:../RTT/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1645:../RTT/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1646:../RTT/Src/SEGGER_RTT.c **** *
1647:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1648:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1649:../RTT/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1650:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1651:../RTT/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1652:../RTT/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1653:../RTT/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1654:../RTT/Src/SEGGER_RTT.c **** *
1655:../RTT/Src/SEGGER_RTT.c **** *  Return value
1656:../RTT/Src/SEGGER_RTT.c **** *    >= 0 - O.K.
1657:../RTT/Src/SEGGER_RTT.c **** *     < 0 - Error
1658:../RTT/Src/SEGGER_RTT.c **** *
1659:../RTT/Src/SEGGER_RTT.c **** *  Additional information
1660:../RTT/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1661:../RTT/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1662:../RTT/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1663:../RTT/Src/SEGGER_RTT.c **** */
1664:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2666              		.loc 1 1664 124 is_stmt 1 view -0
 2667              		.cfi_startproc
 2668              		@ args = 4, pretend = 0, frame = 0
 2669              		@ frame_needed = 0, uses_anonymous_args = 0
1665:../RTT/Src/SEGGER_RTT.c ****   int r;
 2670              		.loc 1 1665 3 view .LVU851
1666:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2671              		.loc 1 1666 3 view .LVU852
1667:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 2672              		.loc 1 1667 3 view .LVU853
1668:../RTT/Src/SEGGER_RTT.c **** 
1669:../RTT/Src/SEGGER_RTT.c ****   INIT();
 2673              		.loc 1 1669 3 view .LVU854
 2674              	.LBB44:
 2675              		.loc 1 1669 3 view .LVU855
 2676              		.loc 1 1669 3 view .LVU856
 2677              		.loc 1 1669 3 view .LVU857
 2678              	.LBE44:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 82


1664:../RTT/Src/SEGGER_RTT.c ****   int r;
 2679              		.loc 1 1664 124 is_stmt 0 view .LVU858
 2680 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2681              	.LCFI27:
 2682              		.cfi_def_cfa_offset 24
 2683              		.cfi_offset 4, -24
 2684              		.cfi_offset 5, -20
 2685              		.cfi_offset 6, -16
 2686              		.cfi_offset 7, -12
 2687              		.cfi_offset 8, -8
 2688              		.cfi_offset 14, -4
 2689              	.LBB45:
 2690              		.loc 1 1669 3 view .LVU859
 2691 0004 164C     		ldr	r4, .L204
 2692              	.LBE45:
1664:../RTT/Src/SEGGER_RTT.c ****   int r;
 2693              		.loc 1 1664 124 view .LVU860
 2694 0006 1E46     		mov	r6, r3
 2695              	.LBB46:
 2696              		.loc 1 1669 3 view .LVU861
 2697 0008 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2698              	.LVL204:
 2699              		.loc 1 1669 3 view .LVU862
 2700 000a 532B     		cmp	r3, #83
 2701              	.LBE46:
1664:../RTT/Src/SEGGER_RTT.c ****   int r;
 2702              		.loc 1 1664 124 view .LVU863
 2703 000c 0546     		mov	r5, r0
 2704 000e 8846     		mov	r8, r1
 2705 0010 1746     		mov	r7, r2
 2706              	.LBB47:
 2707              		.loc 1 1669 3 view .LVU864
 2708 0012 01D0     		beq	.L194
 2709              		.loc 1 1669 3 is_stmt 1 discriminator 1 view .LVU865
 2710 0014 FFF7FEFF 		bl	_DoInit
 2711              	.LVL205:
 2712              	.L194:
 2713              		.loc 1 1669 3 is_stmt 0 discriminator 1 view .LVU866
 2714              	.LBE47:
 2715              		.loc 1 1669 3 is_stmt 1 discriminator 3 view .LVU867
1670:../RTT/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 2716              		.loc 1 1670 3 view .LVU868
1671:../RTT/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 2717              		.loc 1 1671 3 view .LVU869
 2718              		.loc 1 1671 6 is_stmt 0 view .LVU870
 2719 0018 022D     		cmp	r5, #2
 2720 001a 1DD8     		bhi	.L197
 2721              	.LBB48:
1672:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2722              		.loc 1 1672 5 is_stmt 1 view .LVU871
 2723              		.loc 1 1672 5 view .LVU872
 2724              		.syntax unified
 2725              	@ 1672 "../RTT/Src/SEGGER_RTT.c" 1
 2726 001c EFF3118C 		mrs   ip, basepri  
 2727 0020 4FF02001 		mov   r1, #32       
 2728 0024 81F31188 		msr   basepri, r1  
 2729              		
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 83


 2730              	@ 0 "" 2
 2731              	.LVL206:
 2732              		.loc 1 1672 22 view .LVU873
1673:../RTT/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 2733              		.loc 1 1673 5 view .LVU874
1674:../RTT/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 2734              		.loc 1 1674 5 view .LVU875
 2735              		.loc 1 1674 8 is_stmt 0 view .LVU876
 2736              		.thumb
 2737              		.syntax unified
 2738 0028 65B1     		cbz	r5, .L196
1675:../RTT/Src/SEGGER_RTT.c ****       pUp->sName        = sName;
 2739              		.loc 1 1675 7 is_stmt 1 view .LVU877
 2740              		.loc 1 1675 25 is_stmt 0 view .LVU878
 2741 002a 1820     		movs	r0, #24
 2742 002c 05FB0003 		mla	r3, r5, r0, r0
 2743 0030 E218     		adds	r2, r4, r3
 2744 0032 44F80380 		str	r8, [r4, r3]
1676:../RTT/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 2745              		.loc 1 1676 7 is_stmt 1 view .LVU879
 2746              		.loc 1 1676 25 is_stmt 0 view .LVU880
 2747 0036 5760     		str	r7, [r2, #4]
1677:../RTT/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 2748              		.loc 1 1677 7 is_stmt 1 view .LVU881
 2749              		.loc 1 1677 25 is_stmt 0 view .LVU882
 2750 0038 00FB0542 		mla	r2, r0, r5, r4
1678:../RTT/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 2751              		.loc 1 1678 25 view .LVU883
 2752 003c 0023     		movs	r3, #0
1677:../RTT/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 2753              		.loc 1 1677 25 view .LVU884
 2754 003e 1662     		str	r6, [r2, #32]
 2755              		.loc 1 1678 7 is_stmt 1 view .LVU885
 2756              		.loc 1 1678 25 is_stmt 0 view .LVU886
 2757 0040 9362     		str	r3, [r2, #40]
1679:../RTT/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 2758              		.loc 1 1679 7 is_stmt 1 view .LVU887
 2759              		.loc 1 1679 25 is_stmt 0 view .LVU888
 2760 0042 5362     		str	r3, [r2, #36]
 2761              	.L196:
1680:../RTT/Src/SEGGER_RTT.c ****     }
1681:../RTT/Src/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 2762              		.loc 1 1681 5 is_stmt 1 view .LVU889
 2763              		.loc 1 1681 25 is_stmt 0 view .LVU890
 2764 0044 1823     		movs	r3, #24
 2765 0046 03FB0544 		mla	r4, r3, r5, r4
 2766 004a 069B     		ldr	r3, [sp, #24]
 2767 004c E362     		str	r3, [r4, #44]
1682:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2768              		.loc 1 1682 5 is_stmt 1 view .LVU891
 2769              		.syntax unified
 2770              	@ 1682 "../RTT/Src/SEGGER_RTT.c" 1
 2771 004e 8CF31188 		msr   basepri, ip  
 2772              		
 2773              	@ 0 "" 2
 2774              		.thumb
 2775              		.syntax unified
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 84


 2776              	.LBE48:
 2777              		.loc 1 1682 24 view .LVU892
1683:../RTT/Src/SEGGER_RTT.c ****     r =  0;
 2778              		.loc 1 1683 5 view .LVU893
 2779              	.LVL207:
 2780              		.loc 1 1683 7 is_stmt 0 view .LVU894
 2781 0052 0020     		movs	r0, #0
 2782              	.LVL208:
 2783              	.L193:
1684:../RTT/Src/SEGGER_RTT.c ****   } else {
1685:../RTT/Src/SEGGER_RTT.c ****     r = -1;
1686:../RTT/Src/SEGGER_RTT.c ****   }
1687:../RTT/Src/SEGGER_RTT.c ****   return r;
1688:../RTT/Src/SEGGER_RTT.c **** }
 2784              		.loc 1 1688 1 view .LVU895
 2785 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2786              	.LVL209:
 2787              	.L197:
1685:../RTT/Src/SEGGER_RTT.c ****   }
 2788              		.loc 1 1685 7 view .LVU896
 2789 0058 4FF0FF30 		mov	r0, #-1
 2790              	.LVL210:
1687:../RTT/Src/SEGGER_RTT.c **** }
 2791              		.loc 1 1687 3 is_stmt 1 view .LVU897
1687:../RTT/Src/SEGGER_RTT.c **** }
 2792              		.loc 1 1687 10 is_stmt 0 view .LVU898
 2793 005c FAE7     		b	.L193
 2794              	.L205:
 2795 005e 00BF     		.align	2
 2796              	.L204:
 2797 0060 00000000 		.word	_SEGGER_RTT
 2798              		.cfi_endproc
 2799              	.LFE25:
 2801              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2802              		.align	1
 2803              		.global	SEGGER_RTT_ConfigDownBuffer
 2804              		.syntax unified
 2805              		.thumb
 2806              		.thumb_func
 2808              	SEGGER_RTT_ConfigDownBuffer:
 2809              	.LVL211:
 2810              	.LFB26:
1689:../RTT/Src/SEGGER_RTT.c **** 
1690:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1691:../RTT/Src/SEGGER_RTT.c **** *
1692:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1693:../RTT/Src/SEGGER_RTT.c **** *
1694:../RTT/Src/SEGGER_RTT.c **** *  Function description
1695:../RTT/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1696:../RTT/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1697:../RTT/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1698:../RTT/Src/SEGGER_RTT.c **** *
1699:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1700:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1701:../RTT/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1702:../RTT/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1703:../RTT/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 85


1704:../RTT/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1705:../RTT/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1706:../RTT/Src/SEGGER_RTT.c **** *
1707:../RTT/Src/SEGGER_RTT.c **** *  Return value
1708:../RTT/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1709:../RTT/Src/SEGGER_RTT.c **** *     < 0  Error
1710:../RTT/Src/SEGGER_RTT.c **** *
1711:../RTT/Src/SEGGER_RTT.c **** *  Additional information
1712:../RTT/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1713:../RTT/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1714:../RTT/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1715:../RTT/Src/SEGGER_RTT.c **** */
1716:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2811              		.loc 1 1716 126 is_stmt 1 view -0
 2812              		.cfi_startproc
 2813              		@ args = 4, pretend = 0, frame = 0
 2814              		@ frame_needed = 0, uses_anonymous_args = 0
1717:../RTT/Src/SEGGER_RTT.c ****   int r;
 2815              		.loc 1 1717 3 view .LVU900
1718:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2816              		.loc 1 1718 3 view .LVU901
1719:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 2817              		.loc 1 1719 3 view .LVU902
1720:../RTT/Src/SEGGER_RTT.c **** 
1721:../RTT/Src/SEGGER_RTT.c ****   INIT();
 2818              		.loc 1 1721 3 view .LVU903
 2819              	.LBB49:
 2820              		.loc 1 1721 3 view .LVU904
 2821              		.loc 1 1721 3 view .LVU905
 2822              		.loc 1 1721 3 view .LVU906
 2823              	.LBE49:
1716:../RTT/Src/SEGGER_RTT.c ****   int r;
 2824              		.loc 1 1716 126 is_stmt 0 view .LVU907
 2825 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2826              	.LCFI28:
 2827              		.cfi_def_cfa_offset 32
 2828              		.cfi_offset 3, -32
 2829              		.cfi_offset 4, -28
 2830              		.cfi_offset 5, -24
 2831              		.cfi_offset 6, -20
 2832              		.cfi_offset 7, -16
 2833              		.cfi_offset 8, -12
 2834              		.cfi_offset 9, -8
 2835              		.cfi_offset 14, -4
 2836              	.LBB50:
 2837              		.loc 1 1721 3 view .LVU908
 2838 0004 164E     		ldr	r6, .L217
 2839              	.LBE50:
1716:../RTT/Src/SEGGER_RTT.c ****   int r;
 2840              		.loc 1 1716 126 view .LVU909
 2841 0006 1F46     		mov	r7, r3
 2842              	.LBB51:
 2843              		.loc 1 1721 3 view .LVU910
 2844 0008 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 2845              	.LVL212:
 2846              		.loc 1 1721 3 view .LVU911
 2847 000a 532B     		cmp	r3, #83
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 86


 2848              	.LBE51:
1716:../RTT/Src/SEGGER_RTT.c ****   int r;
 2849              		.loc 1 1716 126 view .LVU912
 2850 000c 0546     		mov	r5, r0
 2851 000e 8946     		mov	r9, r1
 2852 0010 9046     		mov	r8, r2
 2853              	.LBB52:
 2854              		.loc 1 1721 3 view .LVU913
 2855 0012 01D0     		beq	.L207
 2856              		.loc 1 1721 3 is_stmt 1 discriminator 1 view .LVU914
 2857 0014 FFF7FEFF 		bl	_DoInit
 2858              	.LVL213:
 2859              	.L207:
 2860              		.loc 1 1721 3 is_stmt 0 discriminator 1 view .LVU915
 2861              	.LBE52:
 2862              		.loc 1 1721 3 is_stmt 1 discriminator 3 view .LVU916
1722:../RTT/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 2863              		.loc 1 1722 3 view .LVU917
1723:../RTT/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 2864              		.loc 1 1723 3 view .LVU918
 2865              		.loc 1 1723 6 is_stmt 0 view .LVU919
 2866 0018 022D     		cmp	r5, #2
 2867 001a 1DD8     		bhi	.L210
 2868              	.LBB53:
1724:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2869              		.loc 1 1724 5 is_stmt 1 view .LVU920
 2870              		.loc 1 1724 5 view .LVU921
 2871              		.syntax unified
 2872              	@ 1724 "../RTT/Src/SEGGER_RTT.c" 1
 2873 001c EFF31182 		mrs   r2, basepri  
 2874 0020 4FF02001 		mov   r1, #32       
 2875 0024 81F31188 		msr   basepri, r1  
 2876              		
 2877              	@ 0 "" 2
 2878              	.LVL214:
 2879              		.loc 1 1724 22 view .LVU922
1725:../RTT/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 2880              		.loc 1 1725 5 view .LVU923
1726:../RTT/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 2881              		.loc 1 1726 5 view .LVU924
 2882              		.loc 1 1726 8 is_stmt 0 view .LVU925
 2883              		.thumb
 2884              		.syntax unified
 2885 0028 55B1     		cbz	r5, .L209
1727:../RTT/Src/SEGGER_RTT.c ****       pDown->sName        = sName;
 2886              		.loc 1 1727 7 is_stmt 1 view .LVU926
 2887              		.loc 1 1727 27 is_stmt 0 view .LVU927
 2888 002a 1824     		movs	r4, #24
 2889 002c 04FB0564 		mla	r4, r4, r5, r6
1728:../RTT/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
1729:../RTT/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
1730:../RTT/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 2890              		.loc 1 1730 27 view .LVU928
 2891 0030 0023     		movs	r3, #0
1727:../RTT/Src/SEGGER_RTT.c ****       pDown->sName        = sName;
 2892              		.loc 1 1727 27 view .LVU929
 2893 0032 C4F86090 		str	r9, [r4, #96]
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 87


1728:../RTT/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 2894              		.loc 1 1728 7 is_stmt 1 view .LVU930
1728:../RTT/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 2895              		.loc 1 1728 27 is_stmt 0 view .LVU931
 2896 0036 C4F86480 		str	r8, [r4, #100]
1729:../RTT/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 2897              		.loc 1 1729 7 is_stmt 1 view .LVU932
1729:../RTT/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 2898              		.loc 1 1729 27 is_stmt 0 view .LVU933
 2899 003a A766     		str	r7, [r4, #104]
 2900              		.loc 1 1730 7 is_stmt 1 view .LVU934
 2901              		.loc 1 1730 27 is_stmt 0 view .LVU935
 2902 003c 2367     		str	r3, [r4, #112]
1731:../RTT/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 2903              		.loc 1 1731 7 is_stmt 1 view .LVU936
 2904              		.loc 1 1731 27 is_stmt 0 view .LVU937
 2905 003e E366     		str	r3, [r4, #108]
 2906              	.L209:
1732:../RTT/Src/SEGGER_RTT.c ****     }
1733:../RTT/Src/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 2907              		.loc 1 1733 5 is_stmt 1 view .LVU938
 2908              		.loc 1 1733 27 is_stmt 0 view .LVU939
 2909 0040 1823     		movs	r3, #24
 2910 0042 03FB0566 		mla	r6, r3, r5, r6
 2911 0046 089B     		ldr	r3, [sp, #32]
 2912 0048 7367     		str	r3, [r6, #116]
1734:../RTT/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2913              		.loc 1 1734 5 is_stmt 1 view .LVU940
 2914              		.syntax unified
 2915              	@ 1734 "../RTT/Src/SEGGER_RTT.c" 1
 2916 004a BFF35F8F 		dmb
 2917              	
 2918              	@ 0 "" 2
 2919              		.loc 1 1734 15 view .LVU941
1735:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2920              		.loc 1 1735 5 view .LVU942
 2921              	@ 1735 "../RTT/Src/SEGGER_RTT.c" 1
 2922 004e 82F31188 		msr   basepri, r2  
 2923              		
 2924              	@ 0 "" 2
 2925              		.thumb
 2926              		.syntax unified
 2927              	.LBE53:
 2928              		.loc 1 1735 24 view .LVU943
1736:../RTT/Src/SEGGER_RTT.c ****     r =  0;
 2929              		.loc 1 1736 5 view .LVU944
 2930              	.LVL215:
 2931              		.loc 1 1736 7 is_stmt 0 view .LVU945
 2932 0052 0020     		movs	r0, #0
 2933              	.LVL216:
 2934              	.L206:
1737:../RTT/Src/SEGGER_RTT.c ****   } else {
1738:../RTT/Src/SEGGER_RTT.c ****     r = -1;
1739:../RTT/Src/SEGGER_RTT.c ****   }
1740:../RTT/Src/SEGGER_RTT.c ****   return r;
1741:../RTT/Src/SEGGER_RTT.c **** }
 2935              		.loc 1 1741 1 view .LVU946
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 88


 2936 0054 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2937              	.LVL217:
 2938              	.L210:
1738:../RTT/Src/SEGGER_RTT.c ****   }
 2939              		.loc 1 1738 7 view .LVU947
 2940 0058 4FF0FF30 		mov	r0, #-1
 2941              	.LVL218:
1740:../RTT/Src/SEGGER_RTT.c **** }
 2942              		.loc 1 1740 3 is_stmt 1 view .LVU948
1740:../RTT/Src/SEGGER_RTT.c **** }
 2943              		.loc 1 1740 10 is_stmt 0 view .LVU949
 2944 005c FAE7     		b	.L206
 2945              	.L218:
 2946 005e 00BF     		.align	2
 2947              	.L217:
 2948 0060 00000000 		.word	_SEGGER_RTT
 2949              		.cfi_endproc
 2950              	.LFE26:
 2952              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 2953              		.align	1
 2954              		.global	SEGGER_RTT_SetNameUpBuffer
 2955              		.syntax unified
 2956              		.thumb
 2957              		.thumb_func
 2959              	SEGGER_RTT_SetNameUpBuffer:
 2960              	.LVL219:
 2961              	.LFB27:
1742:../RTT/Src/SEGGER_RTT.c **** 
1743:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1744:../RTT/Src/SEGGER_RTT.c **** *
1745:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1746:../RTT/Src/SEGGER_RTT.c **** *
1747:../RTT/Src/SEGGER_RTT.c **** *  Function description
1748:../RTT/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1749:../RTT/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1750:../RTT/Src/SEGGER_RTT.c **** *
1751:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1752:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1753:../RTT/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1754:../RTT/Src/SEGGER_RTT.c **** *
1755:../RTT/Src/SEGGER_RTT.c **** *  Return value
1756:../RTT/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1757:../RTT/Src/SEGGER_RTT.c **** *     < 0  Error
1758:../RTT/Src/SEGGER_RTT.c **** */
1759:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 2962              		.loc 1 1759 73 is_stmt 1 view -0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 0
 2965              		@ frame_needed = 0, uses_anonymous_args = 0
1760:../RTT/Src/SEGGER_RTT.c ****   int r;
 2966              		.loc 1 1760 3 view .LVU951
1761:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2967              		.loc 1 1761 3 view .LVU952
1762:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 2968              		.loc 1 1762 3 view .LVU953
1763:../RTT/Src/SEGGER_RTT.c **** 
1764:../RTT/Src/SEGGER_RTT.c ****   INIT();
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 89


 2969              		.loc 1 1764 3 view .LVU954
 2970              	.LBB54:
 2971              		.loc 1 1764 3 view .LVU955
 2972              		.loc 1 1764 3 view .LVU956
 2973              		.loc 1 1764 3 view .LVU957
 2974              	.LBE54:
1759:../RTT/Src/SEGGER_RTT.c ****   int r;
 2975              		.loc 1 1759 73 is_stmt 0 view .LVU958
 2976 0000 70B5     		push	{r4, r5, r6, lr}
 2977              	.LCFI29:
 2978              		.cfi_def_cfa_offset 16
 2979              		.cfi_offset 4, -16
 2980              		.cfi_offset 5, -12
 2981              		.cfi_offset 6, -8
 2982              		.cfi_offset 14, -4
 2983              	.LBB55:
 2984              		.loc 1 1764 3 view .LVU959
 2985 0002 0D4E     		ldr	r6, .L226
 2986 0004 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 2987 0006 532B     		cmp	r3, #83
 2988              	.LBE55:
1759:../RTT/Src/SEGGER_RTT.c ****   int r;
 2989              		.loc 1 1759 73 view .LVU960
 2990 0008 0446     		mov	r4, r0
 2991 000a 0D46     		mov	r5, r1
 2992              	.LBB56:
 2993              		.loc 1 1764 3 view .LVU961
 2994 000c 01D0     		beq	.L220
 2995              		.loc 1 1764 3 is_stmt 1 discriminator 1 view .LVU962
 2996 000e FFF7FEFF 		bl	_DoInit
 2997              	.LVL220:
 2998              	.L220:
 2999              		.loc 1 1764 3 is_stmt 0 discriminator 1 view .LVU963
 3000              	.LBE56:
 3001              		.loc 1 1764 3 is_stmt 1 discriminator 3 view .LVU964
1765:../RTT/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3002              		.loc 1 1765 3 view .LVU965
1766:../RTT/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3003              		.loc 1 1766 3 view .LVU966
 3004              		.loc 1 1766 6 is_stmt 0 view .LVU967
 3005 0012 022C     		cmp	r4, #2
 3006 0014 0DD8     		bhi	.L222
 3007              	.LBB57:
1767:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3008              		.loc 1 1767 5 is_stmt 1 view .LVU968
 3009              		.loc 1 1767 5 view .LVU969
 3010              		.syntax unified
 3011              	@ 1767 "../RTT/Src/SEGGER_RTT.c" 1
 3012 0016 EFF31182 		mrs   r2, basepri  
 3013 001a 4FF02001 		mov   r1, #32       
 3014 001e 81F31188 		msr   basepri, r1  
 3015              		
 3016              	@ 0 "" 2
 3017              	.LVL221:
 3018              		.loc 1 1767 22 view .LVU970
1768:../RTT/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3019              		.loc 1 1768 5 view .LVU971
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 90


1769:../RTT/Src/SEGGER_RTT.c ****     pUp->sName = sName;
 3020              		.loc 1 1769 5 view .LVU972
 3021              		.loc 1 1769 16 is_stmt 0 view .LVU973
 3022              		.thumb
 3023              		.syntax unified
 3024 0022 1823     		movs	r3, #24
 3025 0024 04FB0333 		mla	r3, r4, r3, r3
 3026 0028 F550     		str	r5, [r6, r3]
1770:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3027              		.loc 1 1770 5 is_stmt 1 view .LVU974
 3028              		.syntax unified
 3029              	@ 1770 "../RTT/Src/SEGGER_RTT.c" 1
 3030 002a 82F31188 		msr   basepri, r2  
 3031              		
 3032              	@ 0 "" 2
 3033              		.thumb
 3034              		.syntax unified
 3035              	.LBE57:
 3036              		.loc 1 1770 24 view .LVU975
1771:../RTT/Src/SEGGER_RTT.c ****     r =  0;
 3037              		.loc 1 1771 5 view .LVU976
 3038              	.LVL222:
 3039              		.loc 1 1771 7 is_stmt 0 view .LVU977
 3040 002e 0020     		movs	r0, #0
 3041              	.LVL223:
 3042              	.L219:
1772:../RTT/Src/SEGGER_RTT.c ****   } else {
1773:../RTT/Src/SEGGER_RTT.c ****     r = -1;
1774:../RTT/Src/SEGGER_RTT.c ****   }
1775:../RTT/Src/SEGGER_RTT.c ****   return r;
1776:../RTT/Src/SEGGER_RTT.c **** }
 3043              		.loc 1 1776 1 view .LVU978
 3044 0030 70BD     		pop	{r4, r5, r6, pc}
 3045              	.LVL224:
 3046              	.L222:
1773:../RTT/Src/SEGGER_RTT.c ****   }
 3047              		.loc 1 1773 7 view .LVU979
 3048 0032 4FF0FF30 		mov	r0, #-1
 3049              	.LVL225:
1775:../RTT/Src/SEGGER_RTT.c **** }
 3050              		.loc 1 1775 3 is_stmt 1 view .LVU980
1775:../RTT/Src/SEGGER_RTT.c **** }
 3051              		.loc 1 1775 10 is_stmt 0 view .LVU981
 3052 0036 FBE7     		b	.L219
 3053              	.L227:
 3054              		.align	2
 3055              	.L226:
 3056 0038 00000000 		.word	_SEGGER_RTT
 3057              		.cfi_endproc
 3058              	.LFE27:
 3060              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3061              		.align	1
 3062              		.global	SEGGER_RTT_SetNameDownBuffer
 3063              		.syntax unified
 3064              		.thumb
 3065              		.thumb_func
 3067              	SEGGER_RTT_SetNameDownBuffer:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 91


 3068              	.LVL226:
 3069              	.LFB28:
1777:../RTT/Src/SEGGER_RTT.c **** 
1778:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1779:../RTT/Src/SEGGER_RTT.c **** *
1780:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1781:../RTT/Src/SEGGER_RTT.c **** *
1782:../RTT/Src/SEGGER_RTT.c **** *  Function description
1783:../RTT/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1784:../RTT/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1785:../RTT/Src/SEGGER_RTT.c **** *
1786:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1787:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1788:../RTT/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1789:../RTT/Src/SEGGER_RTT.c **** *
1790:../RTT/Src/SEGGER_RTT.c **** *  Return value
1791:../RTT/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1792:../RTT/Src/SEGGER_RTT.c **** *     < 0  Error
1793:../RTT/Src/SEGGER_RTT.c **** */
1794:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3070              		.loc 1 1794 75 is_stmt 1 view -0
 3071              		.cfi_startproc
 3072              		@ args = 0, pretend = 0, frame = 0
 3073              		@ frame_needed = 0, uses_anonymous_args = 0
1795:../RTT/Src/SEGGER_RTT.c ****   int r;
 3074              		.loc 1 1795 3 view .LVU983
1796:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3075              		.loc 1 1796 3 view .LVU984
1797:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3076              		.loc 1 1797 3 view .LVU985
1798:../RTT/Src/SEGGER_RTT.c **** 
1799:../RTT/Src/SEGGER_RTT.c ****   INIT();
 3077              		.loc 1 1799 3 view .LVU986
 3078              	.LBB58:
 3079              		.loc 1 1799 3 view .LVU987
 3080              		.loc 1 1799 3 view .LVU988
 3081              		.loc 1 1799 3 view .LVU989
 3082              	.LBE58:
1794:../RTT/Src/SEGGER_RTT.c ****   int r;
 3083              		.loc 1 1794 75 is_stmt 0 view .LVU990
 3084 0000 70B5     		push	{r4, r5, r6, lr}
 3085              	.LCFI30:
 3086              		.cfi_def_cfa_offset 16
 3087              		.cfi_offset 4, -16
 3088              		.cfi_offset 5, -12
 3089              		.cfi_offset 6, -8
 3090              		.cfi_offset 14, -4
 3091              	.LBB59:
 3092              		.loc 1 1799 3 view .LVU991
 3093 0002 0D4C     		ldr	r4, .L235
 3094 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3095 0006 532B     		cmp	r3, #83
 3096              	.LBE59:
1794:../RTT/Src/SEGGER_RTT.c ****   int r;
 3097              		.loc 1 1794 75 view .LVU992
 3098 0008 0546     		mov	r5, r0
 3099 000a 0E46     		mov	r6, r1
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 92


 3100              	.LBB60:
 3101              		.loc 1 1799 3 view .LVU993
 3102 000c 01D0     		beq	.L229
 3103              		.loc 1 1799 3 is_stmt 1 discriminator 1 view .LVU994
 3104 000e FFF7FEFF 		bl	_DoInit
 3105              	.LVL227:
 3106              	.L229:
 3107              		.loc 1 1799 3 is_stmt 0 discriminator 1 view .LVU995
 3108              	.LBE60:
 3109              		.loc 1 1799 3 is_stmt 1 discriminator 3 view .LVU996
1800:../RTT/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3110              		.loc 1 1800 3 view .LVU997
1801:../RTT/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3111              		.loc 1 1801 3 view .LVU998
 3112              		.loc 1 1801 6 is_stmt 0 view .LVU999
 3113 0012 022D     		cmp	r5, #2
 3114 0014 0DD8     		bhi	.L231
 3115              	.LBB61:
1802:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3116              		.loc 1 1802 5 is_stmt 1 view .LVU1000
 3117              		.loc 1 1802 5 view .LVU1001
 3118              		.syntax unified
 3119              	@ 1802 "../RTT/Src/SEGGER_RTT.c" 1
 3120 0016 EFF31183 		mrs   r3, basepri  
 3121 001a 4FF02001 		mov   r1, #32       
 3122 001e 81F31188 		msr   basepri, r1  
 3123              		
 3124              	@ 0 "" 2
 3125              	.LVL228:
 3126              		.loc 1 1802 22 view .LVU1002
1803:../RTT/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3127              		.loc 1 1803 5 view .LVU1003
1804:../RTT/Src/SEGGER_RTT.c ****     pDown->sName = sName;
 3128              		.loc 1 1804 5 view .LVU1004
 3129              		.loc 1 1804 18 is_stmt 0 view .LVU1005
 3130              		.thumb
 3131              		.syntax unified
 3132 0022 1822     		movs	r2, #24
 3133 0024 02FB0544 		mla	r4, r2, r5, r4
 3134 0028 2666     		str	r6, [r4, #96]
1805:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3135              		.loc 1 1805 5 is_stmt 1 view .LVU1006
 3136              		.syntax unified
 3137              	@ 1805 "../RTT/Src/SEGGER_RTT.c" 1
 3138 002a 83F31188 		msr   basepri, r3  
 3139              		
 3140              	@ 0 "" 2
 3141              		.thumb
 3142              		.syntax unified
 3143              	.LBE61:
 3144              		.loc 1 1805 24 view .LVU1007
1806:../RTT/Src/SEGGER_RTT.c ****     r =  0;
 3145              		.loc 1 1806 5 view .LVU1008
 3146              	.LVL229:
 3147              		.loc 1 1806 7 is_stmt 0 view .LVU1009
 3148 002e 0020     		movs	r0, #0
 3149              	.LVL230:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 93


 3150              	.L228:
1807:../RTT/Src/SEGGER_RTT.c ****   } else {
1808:../RTT/Src/SEGGER_RTT.c ****     r = -1;
1809:../RTT/Src/SEGGER_RTT.c ****   }
1810:../RTT/Src/SEGGER_RTT.c ****   return r;
1811:../RTT/Src/SEGGER_RTT.c **** }
 3151              		.loc 1 1811 1 view .LVU1010
 3152 0030 70BD     		pop	{r4, r5, r6, pc}
 3153              	.LVL231:
 3154              	.L231:
1808:../RTT/Src/SEGGER_RTT.c ****   }
 3155              		.loc 1 1808 7 view .LVU1011
 3156 0032 4FF0FF30 		mov	r0, #-1
 3157              	.LVL232:
1810:../RTT/Src/SEGGER_RTT.c **** }
 3158              		.loc 1 1810 3 is_stmt 1 view .LVU1012
1810:../RTT/Src/SEGGER_RTT.c **** }
 3159              		.loc 1 1810 10 is_stmt 0 view .LVU1013
 3160 0036 FBE7     		b	.L228
 3161              	.L236:
 3162              		.align	2
 3163              	.L235:
 3164 0038 00000000 		.word	_SEGGER_RTT
 3165              		.cfi_endproc
 3166              	.LFE28:
 3168              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3169              		.align	1
 3170              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3171              		.syntax unified
 3172              		.thumb
 3173              		.thumb_func
 3175              	SEGGER_RTT_SetFlagsUpBuffer:
 3176              	.LVL233:
 3177              	.LFB29:
1812:../RTT/Src/SEGGER_RTT.c **** 
1813:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1814:../RTT/Src/SEGGER_RTT.c **** *
1815:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1816:../RTT/Src/SEGGER_RTT.c **** *
1817:../RTT/Src/SEGGER_RTT.c **** *  Function description
1818:../RTT/Src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1819:../RTT/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1820:../RTT/Src/SEGGER_RTT.c **** *
1821:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1822:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1823:../RTT/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1824:../RTT/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1825:../RTT/Src/SEGGER_RTT.c **** *
1826:../RTT/Src/SEGGER_RTT.c **** *  Return value
1827:../RTT/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1828:../RTT/Src/SEGGER_RTT.c **** *     < 0  Error
1829:../RTT/Src/SEGGER_RTT.c **** */
1830:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3178              		.loc 1 1830 71 is_stmt 1 view -0
 3179              		.cfi_startproc
 3180              		@ args = 0, pretend = 0, frame = 0
 3181              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 94


1831:../RTT/Src/SEGGER_RTT.c ****   int r;
 3182              		.loc 1 1831 3 view .LVU1015
1832:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3183              		.loc 1 1832 3 view .LVU1016
1833:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3184              		.loc 1 1833 3 view .LVU1017
1834:../RTT/Src/SEGGER_RTT.c **** 
1835:../RTT/Src/SEGGER_RTT.c ****   INIT();
 3185              		.loc 1 1835 3 view .LVU1018
 3186              	.LBB62:
 3187              		.loc 1 1835 3 view .LVU1019
 3188              		.loc 1 1835 3 view .LVU1020
 3189              		.loc 1 1835 3 view .LVU1021
 3190              	.LBE62:
1830:../RTT/Src/SEGGER_RTT.c ****   int r;
 3191              		.loc 1 1830 71 is_stmt 0 view .LVU1022
 3192 0000 70B5     		push	{r4, r5, r6, lr}
 3193              	.LCFI31:
 3194              		.cfi_def_cfa_offset 16
 3195              		.cfi_offset 4, -16
 3196              		.cfi_offset 5, -12
 3197              		.cfi_offset 6, -8
 3198              		.cfi_offset 14, -4
 3199              	.LBB63:
 3200              		.loc 1 1835 3 view .LVU1023
 3201 0002 0D4C     		ldr	r4, .L244
 3202 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3203 0006 532B     		cmp	r3, #83
 3204              	.LBE63:
1830:../RTT/Src/SEGGER_RTT.c ****   int r;
 3205              		.loc 1 1830 71 view .LVU1024
 3206 0008 0546     		mov	r5, r0
 3207 000a 0E46     		mov	r6, r1
 3208              	.LBB64:
 3209              		.loc 1 1835 3 view .LVU1025
 3210 000c 01D0     		beq	.L238
 3211              		.loc 1 1835 3 is_stmt 1 discriminator 1 view .LVU1026
 3212 000e FFF7FEFF 		bl	_DoInit
 3213              	.LVL234:
 3214              	.L238:
 3215              		.loc 1 1835 3 is_stmt 0 discriminator 1 view .LVU1027
 3216              	.LBE64:
 3217              		.loc 1 1835 3 is_stmt 1 discriminator 3 view .LVU1028
1836:../RTT/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3218              		.loc 1 1836 3 view .LVU1029
1837:../RTT/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3219              		.loc 1 1837 3 view .LVU1030
 3220              		.loc 1 1837 6 is_stmt 0 view .LVU1031
 3221 0012 022D     		cmp	r5, #2
 3222 0014 0DD8     		bhi	.L240
 3223              	.LBB65:
1838:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3224              		.loc 1 1838 5 is_stmt 1 view .LVU1032
 3225              		.loc 1 1838 5 view .LVU1033
 3226              		.syntax unified
 3227              	@ 1838 "../RTT/Src/SEGGER_RTT.c" 1
 3228 0016 EFF31183 		mrs   r3, basepri  
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 95


 3229 001a 4FF02001 		mov   r1, #32       
 3230 001e 81F31188 		msr   basepri, r1  
 3231              		
 3232              	@ 0 "" 2
 3233              	.LVL235:
 3234              		.loc 1 1838 22 view .LVU1034
1839:../RTT/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3235              		.loc 1 1839 5 view .LVU1035
1840:../RTT/Src/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3236              		.loc 1 1840 5 view .LVU1036
 3237              		.loc 1 1840 16 is_stmt 0 view .LVU1037
 3238              		.thumb
 3239              		.syntax unified
 3240 0022 1822     		movs	r2, #24
 3241 0024 02FB0544 		mla	r4, r2, r5, r4
 3242 0028 E662     		str	r6, [r4, #44]
1841:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3243              		.loc 1 1841 5 is_stmt 1 view .LVU1038
 3244              		.syntax unified
 3245              	@ 1841 "../RTT/Src/SEGGER_RTT.c" 1
 3246 002a 83F31188 		msr   basepri, r3  
 3247              		
 3248              	@ 0 "" 2
 3249              		.thumb
 3250              		.syntax unified
 3251              	.LBE65:
 3252              		.loc 1 1841 24 view .LVU1039
1842:../RTT/Src/SEGGER_RTT.c ****     r =  0;
 3253              		.loc 1 1842 5 view .LVU1040
 3254              	.LVL236:
 3255              		.loc 1 1842 7 is_stmt 0 view .LVU1041
 3256 002e 0020     		movs	r0, #0
 3257              	.LVL237:
 3258              	.L237:
1843:../RTT/Src/SEGGER_RTT.c ****   } else {
1844:../RTT/Src/SEGGER_RTT.c ****     r = -1;
1845:../RTT/Src/SEGGER_RTT.c ****   }
1846:../RTT/Src/SEGGER_RTT.c ****   return r;
1847:../RTT/Src/SEGGER_RTT.c **** }
 3259              		.loc 1 1847 1 view .LVU1042
 3260 0030 70BD     		pop	{r4, r5, r6, pc}
 3261              	.LVL238:
 3262              	.L240:
1844:../RTT/Src/SEGGER_RTT.c ****   }
 3263              		.loc 1 1844 7 view .LVU1043
 3264 0032 4FF0FF30 		mov	r0, #-1
 3265              	.LVL239:
1846:../RTT/Src/SEGGER_RTT.c **** }
 3266              		.loc 1 1846 3 is_stmt 1 view .LVU1044
1846:../RTT/Src/SEGGER_RTT.c **** }
 3267              		.loc 1 1846 10 is_stmt 0 view .LVU1045
 3268 0036 FBE7     		b	.L237
 3269              	.L245:
 3270              		.align	2
 3271              	.L244:
 3272 0038 00000000 		.word	_SEGGER_RTT
 3273              		.cfi_endproc
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 96


 3274              	.LFE29:
 3276              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3277              		.align	1
 3278              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3279              		.syntax unified
 3280              		.thumb
 3281              		.thumb_func
 3283              	SEGGER_RTT_SetFlagsDownBuffer:
 3284              	.LVL240:
 3285              	.LFB30:
1848:../RTT/Src/SEGGER_RTT.c **** 
1849:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1850:../RTT/Src/SEGGER_RTT.c **** *
1851:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1852:../RTT/Src/SEGGER_RTT.c **** *
1853:../RTT/Src/SEGGER_RTT.c **** *  Function description
1854:../RTT/Src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1855:../RTT/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1856:../RTT/Src/SEGGER_RTT.c **** *
1857:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1858:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1859:../RTT/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1860:../RTT/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1861:../RTT/Src/SEGGER_RTT.c **** *
1862:../RTT/Src/SEGGER_RTT.c **** *  Return value
1863:../RTT/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1864:../RTT/Src/SEGGER_RTT.c **** *     < 0  Error
1865:../RTT/Src/SEGGER_RTT.c **** */
1866:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3286              		.loc 1 1866 73 is_stmt 1 view -0
 3287              		.cfi_startproc
 3288              		@ args = 0, pretend = 0, frame = 0
 3289              		@ frame_needed = 0, uses_anonymous_args = 0
1867:../RTT/Src/SEGGER_RTT.c ****   int r;
 3290              		.loc 1 1867 3 view .LVU1047
1868:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3291              		.loc 1 1868 3 view .LVU1048
1869:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3292              		.loc 1 1869 3 view .LVU1049
1870:../RTT/Src/SEGGER_RTT.c **** 
1871:../RTT/Src/SEGGER_RTT.c ****   INIT();
 3293              		.loc 1 1871 3 view .LVU1050
 3294              	.LBB66:
 3295              		.loc 1 1871 3 view .LVU1051
 3296              		.loc 1 1871 3 view .LVU1052
 3297              		.loc 1 1871 3 view .LVU1053
 3298              	.LBE66:
1866:../RTT/Src/SEGGER_RTT.c ****   int r;
 3299              		.loc 1 1866 73 is_stmt 0 view .LVU1054
 3300 0000 70B5     		push	{r4, r5, r6, lr}
 3301              	.LCFI32:
 3302              		.cfi_def_cfa_offset 16
 3303              		.cfi_offset 4, -16
 3304              		.cfi_offset 5, -12
 3305              		.cfi_offset 6, -8
 3306              		.cfi_offset 14, -4
 3307              	.LBB67:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 97


 3308              		.loc 1 1871 3 view .LVU1055
 3309 0002 0D4C     		ldr	r4, .L253
 3310 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3311 0006 532B     		cmp	r3, #83
 3312              	.LBE67:
1866:../RTT/Src/SEGGER_RTT.c ****   int r;
 3313              		.loc 1 1866 73 view .LVU1056
 3314 0008 0546     		mov	r5, r0
 3315 000a 0E46     		mov	r6, r1
 3316              	.LBB68:
 3317              		.loc 1 1871 3 view .LVU1057
 3318 000c 01D0     		beq	.L247
 3319              		.loc 1 1871 3 is_stmt 1 discriminator 1 view .LVU1058
 3320 000e FFF7FEFF 		bl	_DoInit
 3321              	.LVL241:
 3322              	.L247:
 3323              		.loc 1 1871 3 is_stmt 0 discriminator 1 view .LVU1059
 3324              	.LBE68:
 3325              		.loc 1 1871 3 is_stmt 1 discriminator 3 view .LVU1060
1872:../RTT/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3326              		.loc 1 1872 3 view .LVU1061
1873:../RTT/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3327              		.loc 1 1873 3 view .LVU1062
 3328              		.loc 1 1873 6 is_stmt 0 view .LVU1063
 3329 0012 022D     		cmp	r5, #2
 3330 0014 0DD8     		bhi	.L249
 3331              	.LBB69:
1874:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3332              		.loc 1 1874 5 is_stmt 1 view .LVU1064
 3333              		.loc 1 1874 5 view .LVU1065
 3334              		.syntax unified
 3335              	@ 1874 "../RTT/Src/SEGGER_RTT.c" 1
 3336 0016 EFF31183 		mrs   r3, basepri  
 3337 001a 4FF02001 		mov   r1, #32       
 3338 001e 81F31188 		msr   basepri, r1  
 3339              		
 3340              	@ 0 "" 2
 3341              	.LVL242:
 3342              		.loc 1 1874 22 view .LVU1066
1875:../RTT/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3343              		.loc 1 1875 5 view .LVU1067
1876:../RTT/Src/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3344              		.loc 1 1876 5 view .LVU1068
 3345              		.loc 1 1876 18 is_stmt 0 view .LVU1069
 3346              		.thumb
 3347              		.syntax unified
 3348 0022 1822     		movs	r2, #24
 3349 0024 02FB0544 		mla	r4, r2, r5, r4
 3350 0028 6667     		str	r6, [r4, #116]
1877:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3351              		.loc 1 1877 5 is_stmt 1 view .LVU1070
 3352              		.syntax unified
 3353              	@ 1877 "../RTT/Src/SEGGER_RTT.c" 1
 3354 002a 83F31188 		msr   basepri, r3  
 3355              		
 3356              	@ 0 "" 2
 3357              		.thumb
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 98


 3358              		.syntax unified
 3359              	.LBE69:
 3360              		.loc 1 1877 24 view .LVU1071
1878:../RTT/Src/SEGGER_RTT.c ****     r =  0;
 3361              		.loc 1 1878 5 view .LVU1072
 3362              	.LVL243:
 3363              		.loc 1 1878 7 is_stmt 0 view .LVU1073
 3364 002e 0020     		movs	r0, #0
 3365              	.LVL244:
 3366              	.L246:
1879:../RTT/Src/SEGGER_RTT.c ****   } else {
1880:../RTT/Src/SEGGER_RTT.c ****     r = -1;
1881:../RTT/Src/SEGGER_RTT.c ****   }
1882:../RTT/Src/SEGGER_RTT.c ****   return r;
1883:../RTT/Src/SEGGER_RTT.c **** }
 3367              		.loc 1 1883 1 view .LVU1074
 3368 0030 70BD     		pop	{r4, r5, r6, pc}
 3369              	.LVL245:
 3370              	.L249:
1880:../RTT/Src/SEGGER_RTT.c ****   }
 3371              		.loc 1 1880 7 view .LVU1075
 3372 0032 4FF0FF30 		mov	r0, #-1
 3373              	.LVL246:
1882:../RTT/Src/SEGGER_RTT.c **** }
 3374              		.loc 1 1882 3 is_stmt 1 view .LVU1076
1882:../RTT/Src/SEGGER_RTT.c **** }
 3375              		.loc 1 1882 10 is_stmt 0 view .LVU1077
 3376 0036 FBE7     		b	.L246
 3377              	.L254:
 3378              		.align	2
 3379              	.L253:
 3380 0038 00000000 		.word	_SEGGER_RTT
 3381              		.cfi_endproc
 3382              	.LFE30:
 3384              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3385              		.align	1
 3386              		.global	SEGGER_RTT_Init
 3387              		.syntax unified
 3388              		.thumb
 3389              		.thumb_func
 3391              	SEGGER_RTT_Init:
 3392              	.LFB31:
1884:../RTT/Src/SEGGER_RTT.c **** 
1885:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1886:../RTT/Src/SEGGER_RTT.c **** *
1887:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1888:../RTT/Src/SEGGER_RTT.c **** *
1889:../RTT/Src/SEGGER_RTT.c **** *  Function description
1890:../RTT/Src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1891:../RTT/Src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1892:../RTT/Src/SEGGER_RTT.c **** *
1893:../RTT/Src/SEGGER_RTT.c **** */
1894:../RTT/Src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3393              		.loc 1 1894 29 is_stmt 1 view -0
 3394              		.cfi_startproc
 3395              		@ args = 0, pretend = 0, frame = 0
 3396              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 99


 3397              		@ link register save eliminated.
1895:../RTT/Src/SEGGER_RTT.c ****   _DoInit();
 3398              		.loc 1 1895 3 view .LVU1079
 3399 0000 FFF7FEBF 		b	_DoInit
 3400              	.LVL247:
 3401              		.cfi_endproc
 3402              	.LFE31:
 3404              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3405              		.align	1
 3406              		.global	SEGGER_RTT_SetTerminal
 3407              		.syntax unified
 3408              		.thumb
 3409              		.thumb_func
 3411              	SEGGER_RTT_SetTerminal:
 3412              	.LVL248:
 3413              	.LFB32:
1896:../RTT/Src/SEGGER_RTT.c **** }
1897:../RTT/Src/SEGGER_RTT.c **** 
1898:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1899:../RTT/Src/SEGGER_RTT.c **** *
1900:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1901:../RTT/Src/SEGGER_RTT.c **** *
1902:../RTT/Src/SEGGER_RTT.c **** *  Function description
1903:../RTT/Src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1904:../RTT/Src/SEGGER_RTT.c **** *
1905:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1906:../RTT/Src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1907:../RTT/Src/SEGGER_RTT.c **** *
1908:../RTT/Src/SEGGER_RTT.c **** *  Return value
1909:../RTT/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1910:../RTT/Src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1911:../RTT/Src/SEGGER_RTT.c **** *
1912:../RTT/Src/SEGGER_RTT.c **** *  Notes
1913:../RTT/Src/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1914:../RTT/Src/SEGGER_RTT.c **** */
1915:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3414              		.loc 1 1915 55 view -0
 3415              		.cfi_startproc
 3416              		@ args = 0, pretend = 0, frame = 8
 3417              		@ frame_needed = 0, uses_anonymous_args = 0
1916:../RTT/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 3418              		.loc 1 1916 3 view .LVU1081
1917:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3419              		.loc 1 1917 3 view .LVU1082
1918:../RTT/Src/SEGGER_RTT.c ****   unsigned Avail;
 3420              		.loc 1 1918 3 view .LVU1083
1919:../RTT/Src/SEGGER_RTT.c ****   int r;
 3421              		.loc 1 1919 3 view .LVU1084
1920:../RTT/Src/SEGGER_RTT.c **** 
1921:../RTT/Src/SEGGER_RTT.c ****   INIT();
 3422              		.loc 1 1921 3 view .LVU1085
 3423              	.LBB70:
 3424              		.loc 1 1921 3 view .LVU1086
 3425              		.loc 1 1921 3 view .LVU1087
 3426              		.loc 1 1921 3 view .LVU1088
 3427              	.LBE70:
1915:../RTT/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 100


 3428              		.loc 1 1915 55 is_stmt 0 view .LVU1089
 3429 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 3430              	.LCFI33:
 3431              		.cfi_def_cfa_offset 24
 3432              		.cfi_offset 4, -16
 3433              		.cfi_offset 5, -12
 3434              		.cfi_offset 6, -8
 3435              		.cfi_offset 14, -4
 3436              	.LBB71:
 3437              		.loc 1 1921 3 view .LVU1090
 3438 0002 1C4D     		ldr	r5, .L267
 3439 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3440 0006 532B     		cmp	r3, #83
 3441              	.LBE71:
1915:../RTT/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 3442              		.loc 1 1915 55 view .LVU1091
 3443 0008 0446     		mov	r4, r0
 3444              	.LBB72:
 3445              		.loc 1 1921 3 view .LVU1092
 3446 000a 01D0     		beq	.L257
 3447              		.loc 1 1921 3 is_stmt 1 discriminator 1 view .LVU1093
 3448 000c FFF7FEFF 		bl	_DoInit
 3449              	.LVL249:
 3450              	.L257:
 3451              		.loc 1 1921 3 is_stmt 0 discriminator 1 view .LVU1094
 3452              	.LBE72:
 3453              		.loc 1 1921 3 is_stmt 1 discriminator 3 view .LVU1095
1922:../RTT/Src/SEGGER_RTT.c ****   r = 0;
 3454              		.loc 1 1922 3 view .LVU1096
1923:../RTT/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3455              		.loc 1 1923 3 view .LVU1097
 3456              		.loc 1 1923 9 is_stmt 0 view .LVU1098
 3457 0010 FF23     		movs	r3, #255
1924:../RTT/Src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3458              		.loc 1 1924 6 view .LVU1099
 3459 0012 0F2C     		cmp	r4, #15
1923:../RTT/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3460              		.loc 1 1923 9 view .LVU1100
 3461 0014 8DF80430 		strb	r3, [sp, #4]
 3462              		.loc 1 1924 3 is_stmt 1 view .LVU1101
 3463              		.loc 1 1924 6 is_stmt 0 view .LVU1102
 3464 0018 29D8     		bhi	.L262
1925:../RTT/Src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3465              		.loc 1 1925 5 is_stmt 1 view .LVU1103
 3466              		.loc 1 1925 25 is_stmt 0 view .LVU1104
 3467 001a 174B     		ldr	r3, .L267+4
 3468              		.loc 1 1925 11 view .LVU1105
 3469 001c 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 3470 001e 8DF80530 		strb	r3, [sp, #5]
1926:../RTT/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // 
 3471              		.loc 1 1926 5 is_stmt 1 view .LVU1106
 3472              	.LVL250:
 3473              	.LBB73:
1927:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 3474              		.loc 1 1927 5 view .LVU1107
 3475              		.loc 1 1927 5 view .LVU1108
 3476              		.syntax unified
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 101


 3477              	@ 1927 "../RTT/Src/SEGGER_RTT.c" 1
 3478 0022 EFF31186 		mrs   r6, basepri  
 3479 0026 4FF02001 		mov   r1, #32       
 3480 002a 81F31188 		msr   basepri, r1  
 3481              		
 3482              	@ 0 "" 2
 3483              	.LVL251:
 3484              		.loc 1 1927 22 view .LVU1109
1928:../RTT/Src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3485              		.loc 1 1928 5 view .LVU1110
 3486              		.loc 1 1928 23 is_stmt 0 view .LVU1111
 3487              		.thumb
 3488              		.syntax unified
 3489 002e EA6A     		ldr	r2, [r5, #44]
 3490 0030 02F00302 		and	r2, r2, #3
 3491              		.loc 1 1928 8 view .LVU1112
 3492 0034 022A     		cmp	r2, #2
 3493 0036 0AD1     		bne	.L259
1929:../RTT/Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
 3494              		.loc 1 1929 7 is_stmt 1 view .LVU1113
 3495              		.loc 1 1929 23 is_stmt 0 view .LVU1114
 3496 0038 104B     		ldr	r3, .L267+8
1930:../RTT/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3497              		.loc 1 1930 7 view .LVU1115
 3498 003a 1148     		ldr	r0, .L267+12
 3499              	.LVL252:
1929:../RTT/Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
 3500              		.loc 1 1929 23 view .LVU1116
 3501 003c 1C70     		strb	r4, [r3]
 3502              		.loc 1 1930 7 is_stmt 1 view .LVU1117
 3503 003e 01A9     		add	r1, sp, #4
 3504 0040 FFF7FEFF 		bl	_WriteBlocking
 3505              	.LVL253:
 3506              	.L260:
 3507              		.loc 1 1930 7 is_stmt 0 view .LVU1118
 3508              	.LBE73:
1922:../RTT/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3509              		.loc 1 1922 5 view .LVU1119
 3510 0044 0020     		movs	r0, #0
 3511              	.L261:
 3512              	.LVL254:
 3513              	.LBB74:
1931:../RTT/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1932:../RTT/Src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
1933:../RTT/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
1934:../RTT/Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1935:../RTT/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1936:../RTT/Src/SEGGER_RTT.c ****       } else {
1937:../RTT/Src/SEGGER_RTT.c ****         r = -1;
1938:../RTT/Src/SEGGER_RTT.c ****       }
1939:../RTT/Src/SEGGER_RTT.c ****     }
1940:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3514              		.loc 1 1940 5 is_stmt 1 view .LVU1120
 3515              		.syntax unified
 3516              	@ 1940 "../RTT/Src/SEGGER_RTT.c" 1
 3517 0046 86F31188 		msr   basepri, r6  
 3518              		
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 102


 3519              	@ 0 "" 2
 3520              		.thumb
 3521              		.syntax unified
 3522              	.LBE74:
 3523              		.loc 1 1940 24 view .LVU1121
 3524              	.LVL255:
 3525              	.L256:
1941:../RTT/Src/SEGGER_RTT.c ****   } else {
1942:../RTT/Src/SEGGER_RTT.c ****     r = -1;
1943:../RTT/Src/SEGGER_RTT.c ****   }
1944:../RTT/Src/SEGGER_RTT.c ****   return r;
1945:../RTT/Src/SEGGER_RTT.c **** }
 3526              		.loc 1 1945 1 is_stmt 0 view .LVU1122
 3527 004a 02B0     		add	sp, sp, #8
 3528              	.LCFI34:
 3529              		.cfi_remember_state
 3530              		.cfi_def_cfa_offset 16
 3531              		@ sp needed
 3532 004c 70BD     		pop	{r4, r5, r6, pc}
 3533              	.LVL256:
 3534              	.L259:
 3535              	.LCFI35:
 3536              		.cfi_restore_state
 3537              	.LBB75:
1932:../RTT/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 3538              		.loc 1 1932 7 is_stmt 1 view .LVU1123
1932:../RTT/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 3539              		.loc 1 1932 15 is_stmt 0 view .LVU1124
 3540 004e 0C48     		ldr	r0, .L267+12
 3541              	.LVL257:
1932:../RTT/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 3542              		.loc 1 1932 15 view .LVU1125
 3543 0050 FFF7FEFF 		bl	_GetAvailWriteSpace
 3544              	.LVL258:
1933:../RTT/Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
 3545              		.loc 1 1933 7 is_stmt 1 view .LVU1126
1933:../RTT/Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
 3546              		.loc 1 1933 10 is_stmt 0 view .LVU1127
 3547 0054 0128     		cmp	r0, #1
 3548 0056 07D9     		bls	.L263
1934:../RTT/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3549              		.loc 1 1934 9 is_stmt 1 view .LVU1128
1934:../RTT/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3550              		.loc 1 1934 25 is_stmt 0 view .LVU1129
 3551 0058 084B     		ldr	r3, .L267+8
1935:../RTT/Src/SEGGER_RTT.c ****       } else {
 3552              		.loc 1 1935 9 view .LVU1130
 3553 005a 0948     		ldr	r0, .L267+12
 3554              	.LVL259:
1934:../RTT/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3555              		.loc 1 1934 25 view .LVU1131
 3556 005c 1C70     		strb	r4, [r3]
1935:../RTT/Src/SEGGER_RTT.c ****       } else {
 3557              		.loc 1 1935 9 is_stmt 1 view .LVU1132
 3558 005e 0222     		movs	r2, #2
 3559 0060 01A9     		add	r1, sp, #4
 3560 0062 FFF7FEFF 		bl	_WriteNoCheck
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 103


 3561              	.LVL260:
1935:../RTT/Src/SEGGER_RTT.c ****       } else {
 3562              		.loc 1 1935 9 is_stmt 0 view .LVU1133
 3563 0066 EDE7     		b	.L260
 3564              	.LVL261:
 3565              	.L263:
1937:../RTT/Src/SEGGER_RTT.c ****       }
 3566              		.loc 1 1937 11 view .LVU1134
 3567 0068 4FF0FF30 		mov	r0, #-1
 3568              	.LVL262:
1937:../RTT/Src/SEGGER_RTT.c ****       }
 3569              		.loc 1 1937 11 view .LVU1135
 3570 006c EBE7     		b	.L261
 3571              	.LVL263:
 3572              	.L262:
1937:../RTT/Src/SEGGER_RTT.c ****       }
 3573              		.loc 1 1937 11 view .LVU1136
 3574              	.LBE75:
1942:../RTT/Src/SEGGER_RTT.c ****   }
 3575              		.loc 1 1942 7 view .LVU1137
 3576 006e 4FF0FF30 		mov	r0, #-1
 3577              	.LVL264:
1944:../RTT/Src/SEGGER_RTT.c **** }
 3578              		.loc 1 1944 3 is_stmt 1 view .LVU1138
1944:../RTT/Src/SEGGER_RTT.c **** }
 3579              		.loc 1 1944 10 is_stmt 0 view .LVU1139
 3580 0072 EAE7     		b	.L256
 3581              	.L268:
 3582              		.align	2
 3583              	.L267:
 3584 0074 00000000 		.word	_SEGGER_RTT
 3585 0078 00000000 		.word	_aTerminalId
 3586 007c 00000000 		.word	_ActiveTerminal
 3587 0080 18000000 		.word	_SEGGER_RTT+24
 3588              		.cfi_endproc
 3589              	.LFE32:
 3591              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3592              		.align	1
 3593              		.global	SEGGER_RTT_TerminalOut
 3594              		.syntax unified
 3595              		.thumb
 3596              		.thumb_func
 3598              	SEGGER_RTT_TerminalOut:
 3599              	.LVL265:
 3600              	.LFB33:
1946:../RTT/Src/SEGGER_RTT.c **** 
1947:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
1948:../RTT/Src/SEGGER_RTT.c **** *
1949:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1950:../RTT/Src/SEGGER_RTT.c **** *
1951:../RTT/Src/SEGGER_RTT.c **** *  Function description
1952:../RTT/Src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1953:../RTT/Src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1954:../RTT/Src/SEGGER_RTT.c **** *
1955:../RTT/Src/SEGGER_RTT.c **** *  Parameters
1956:../RTT/Src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1957:../RTT/Src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 104


1958:../RTT/Src/SEGGER_RTT.c **** *
1959:../RTT/Src/SEGGER_RTT.c **** *  Return value
1960:../RTT/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1961:../RTT/Src/SEGGER_RTT.c **** *     < 0 - Error.
1962:../RTT/Src/SEGGER_RTT.c **** *
1963:../RTT/Src/SEGGER_RTT.c **** */
1964:../RTT/Src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3601              		.loc 1 1964 70 is_stmt 1 view -0
 3602              		.cfi_startproc
 3603              		@ args = 0, pretend = 0, frame = 0
 3604              		@ frame_needed = 0, uses_anonymous_args = 0
1965:../RTT/Src/SEGGER_RTT.c ****   int                   Status;
 3605              		.loc 1 1965 3 view .LVU1141
1966:../RTT/Src/SEGGER_RTT.c ****   unsigned              FragLen;
 3606              		.loc 1 1966 3 view .LVU1142
1967:../RTT/Src/SEGGER_RTT.c ****   unsigned              Avail;
 3607              		.loc 1 1967 3 view .LVU1143
1968:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3608              		.loc 1 1968 3 view .LVU1144
1969:../RTT/Src/SEGGER_RTT.c ****   //
1970:../RTT/Src/SEGGER_RTT.c ****   INIT();
 3609              		.loc 1 1970 3 view .LVU1145
 3610              	.LBB76:
 3611              		.loc 1 1970 3 view .LVU1146
 3612              		.loc 1 1970 3 view .LVU1147
 3613              		.loc 1 1970 3 view .LVU1148
 3614              	.LBE76:
1964:../RTT/Src/SEGGER_RTT.c ****   int                   Status;
 3615              		.loc 1 1964 70 is_stmt 0 view .LVU1149
 3616 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3617              	.LCFI36:
 3618              		.cfi_def_cfa_offset 32
 3619              		.cfi_offset 3, -32
 3620              		.cfi_offset 4, -28
 3621              		.cfi_offset 5, -24
 3622              		.cfi_offset 6, -20
 3623              		.cfi_offset 7, -16
 3624              		.cfi_offset 8, -12
 3625              		.cfi_offset 9, -8
 3626              		.cfi_offset 14, -4
 3627              	.LBB77:
 3628              		.loc 1 1970 3 view .LVU1150
 3629 0004 234C     		ldr	r4, .L283
 3630 0006 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3631 0008 532B     		cmp	r3, #83
 3632              	.LBE77:
1964:../RTT/Src/SEGGER_RTT.c ****   int                   Status;
 3633              		.loc 1 1964 70 view .LVU1151
 3634 000a 8146     		mov	r9, r0
 3635 000c 0F46     		mov	r7, r1
 3636              	.LBB78:
 3637              		.loc 1 1970 3 view .LVU1152
 3638 000e 01D0     		beq	.L270
 3639              		.loc 1 1970 3 is_stmt 1 discriminator 1 view .LVU1153
 3640 0010 FFF7FEFF 		bl	_DoInit
 3641              	.LVL266:
 3642              	.L270:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 105


 3643              		.loc 1 1970 3 is_stmt 0 discriminator 1 view .LVU1154
 3644              	.LBE78:
 3645              		.loc 1 1970 3 is_stmt 1 discriminator 3 view .LVU1155
1971:../RTT/Src/SEGGER_RTT.c ****   //
1972:../RTT/Src/SEGGER_RTT.c ****   // Validate terminal ID.
1973:../RTT/Src/SEGGER_RTT.c ****   //
1974:../RTT/Src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3646              		.loc 1 1974 3 view .LVU1156
 3647              		.loc 1 1974 6 is_stmt 0 view .LVU1157
 3648 0014 B9F10F0F 		cmp	r9, #15
 3649 0018 38D8     		bhi	.L275
1975:../RTT/Src/SEGGER_RTT.c ****     //
1976:../RTT/Src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1977:../RTT/Src/SEGGER_RTT.c ****     //
1978:../RTT/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // 
 3650              		.loc 1 1978 5 is_stmt 1 view .LVU1158
 3651              	.LVL267:
1979:../RTT/Src/SEGGER_RTT.c ****     //
1980:../RTT/Src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1981:../RTT/Src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1982:../RTT/Src/SEGGER_RTT.c ****     //
1983:../RTT/Src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3652              		.loc 1 1983 5 view .LVU1159
 3653              		.loc 1 1983 15 is_stmt 0 view .LVU1160
 3654 001a 3846     		mov	r0, r7
 3655 001c FFF7FEFF 		bl	strlen
 3656              	.LVL268:
 3657 0020 8046     		mov	r8, r0
 3658              	.LVL269:
 3659              	.LBB79:
1984:../RTT/Src/SEGGER_RTT.c ****     //
1985:../RTT/Src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1986:../RTT/Src/SEGGER_RTT.c ****     //
1987:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3660              		.loc 1 1987 5 is_stmt 1 view .LVU1161
 3661              		.loc 1 1987 5 view .LVU1162
 3662              		.syntax unified
 3663              	@ 1987 "../RTT/Src/SEGGER_RTT.c" 1
 3664 0022 EFF31186 		mrs   r6, basepri  
 3665 0026 4FF02001 		mov   r1, #32       
 3666 002a 81F31188 		msr   basepri, r1  
 3667              		
 3668              	@ 0 "" 2
 3669              	.LVL270:
 3670              		.loc 1 1987 22 view .LVU1163
1988:../RTT/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3671              		.loc 1 1988 5 view .LVU1164
 3672              		.loc 1 1988 13 is_stmt 0 view .LVU1165
 3673              		.thumb
 3674              		.syntax unified
 3675 002e 1A48     		ldr	r0, .L283+4
 3676              	.LVL271:
 3677              		.loc 1 1988 13 view .LVU1166
 3678 0030 FFF7FEFF 		bl	_GetAvailWriteSpace
 3679              	.LVL272:
1989:../RTT/Src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3680              		.loc 1 1989 26 view .LVU1167
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 106


 3681 0034 E46A     		ldr	r4, [r4, #44]
 3682 0036 04F00304 		and	r4, r4, #3
 3683              		.loc 1 1989 5 view .LVU1168
 3684 003a 012C     		cmp	r4, #1
1988:../RTT/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3685              		.loc 1 1988 13 view .LVU1169
 3686 003c 0546     		mov	r5, r0
 3687              	.LVL273:
 3688              		.loc 1 1989 5 is_stmt 1 view .LVU1170
 3689 003e 0BD0     		beq	.L272
 3690 0040 022C     		cmp	r4, #2
 3691 0042 04D0     		beq	.L273
 3692 0044 FCB9     		cbnz	r4, .L278
1990:../RTT/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1991:../RTT/Src/SEGGER_RTT.c ****       //
1992:../RTT/Src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1993:../RTT/Src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1994:../RTT/Src/SEGGER_RTT.c ****       //
1995:../RTT/Src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
 3693              		.loc 1 1995 7 view .LVU1171
 3694              		.loc 1 1995 28 is_stmt 0 view .LVU1172
 3695 0046 08F10403 		add	r3, r8, #4
 3696              		.loc 1 1995 10 view .LVU1173
 3697 004a 8342     		cmp	r3, r0
 3698 004c 16D8     		bhi	.L274
 3699              	.L273:
1996:../RTT/Src/SEGGER_RTT.c ****         Status = 0;
1997:../RTT/Src/SEGGER_RTT.c ****       } else {
1998:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1999:../RTT/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
2000:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2001:../RTT/Src/SEGGER_RTT.c ****       }
2002:../RTT/Src/SEGGER_RTT.c ****       break;
2003:../RTT/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
2004:../RTT/Src/SEGGER_RTT.c ****       //
2005:../RTT/Src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
2006:../RTT/Src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
2007:../RTT/Src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
2008:../RTT/Src/SEGGER_RTT.c ****       //
2009:../RTT/Src/SEGGER_RTT.c ****       if (Avail < 4u) {
2010:../RTT/Src/SEGGER_RTT.c ****         Status = -1;
2011:../RTT/Src/SEGGER_RTT.c ****       } else {
2012:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2013:../RTT/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
2014:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2015:../RTT/Src/SEGGER_RTT.c ****       }
2016:../RTT/Src/SEGGER_RTT.c ****       break;
2017:../RTT/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2018:../RTT/Src/SEGGER_RTT.c ****       //
2019:../RTT/Src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2020:../RTT/Src/SEGGER_RTT.c ****       //
2021:../RTT/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
 3700              		.loc 1 2021 7 is_stmt 1 view .LVU1174
 3701 004e 4846     		mov	r0, r9
 3702              	.LVL274:
 3703              		.loc 1 2021 7 is_stmt 0 view .LVU1175
 3704 0050 FFF7FEFF 		bl	_PostTerminalSwitch.constprop.0
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 107


 3705              	.LVL275:
2022:../RTT/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3706              		.loc 1 2022 7 is_stmt 1 view .LVU1176
 3707              		.loc 1 2022 21 is_stmt 0 view .LVU1177
 3708 0054 4246     		mov	r2, r8
 3709 0056 08E0     		b	.L282
 3710              	.LVL276:
 3711              	.L272:
2009:../RTT/Src/SEGGER_RTT.c ****         Status = -1;
 3712              		.loc 1 2009 7 is_stmt 1 view .LVU1178
2009:../RTT/Src/SEGGER_RTT.c ****         Status = -1;
 3713              		.loc 1 2009 10 is_stmt 0 view .LVU1179
 3714 0058 0328     		cmp	r0, #3
 3715 005a 14D9     		bls	.L278
2012:../RTT/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3716              		.loc 1 2012 9 is_stmt 1 view .LVU1180
 3717 005c 4846     		mov	r0, r9
 3718              	.LVL277:
2012:../RTT/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3719              		.loc 1 2012 9 is_stmt 0 view .LVU1181
 3720 005e FFF7FEFF 		bl	_PostTerminalSwitch.constprop.0
 3721              	.LVL278:
2013:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3722              		.loc 1 2013 9 is_stmt 1 view .LVU1182
2013:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3723              		.loc 1 2013 66 is_stmt 0 view .LVU1183
 3724 0062 2A1F     		subs	r2, r5, #4
2013:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3725              		.loc 1 2013 23 view .LVU1184
 3726 0064 4245     		cmp	r2, r8
 3727 0066 28BF     		it	cs
 3728 0068 4246     		movcs	r2, r8
 3729              	.L282:
2013:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3730              		.loc 1 2013 23 view .LVU1185
 3731 006a 0B48     		ldr	r0, .L283+4
 3732              	.LVL279:
2013:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3733              		.loc 1 2013 23 view .LVU1186
 3734 006c 3946     		mov	r1, r7
 3735 006e FFF7FEFF 		bl	_WriteBlocking
 3736              	.LVL280:
2014:../RTT/Src/SEGGER_RTT.c ****       }
 3737              		.loc 1 2014 9 view .LVU1187
 3738 0072 0A4B     		ldr	r3, .L283+8
2013:../RTT/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3739              		.loc 1 2013 23 view .LVU1188
 3740 0074 0446     		mov	r4, r0
 3741              	.LVL281:
2014:../RTT/Src/SEGGER_RTT.c ****       }
 3742              		.loc 1 2014 9 is_stmt 1 view .LVU1189
 3743 0076 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3744              	.LVL282:
2014:../RTT/Src/SEGGER_RTT.c ****       }
 3745              		.loc 1 2014 9 is_stmt 0 view .LVU1190
 3746 0078 FFF7FEFF 		bl	_PostTerminalSwitch.constprop.0
 3747              	.LVL283:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 108


 3748              	.L274:
2023:../RTT/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
2024:../RTT/Src/SEGGER_RTT.c ****       break;
2025:../RTT/Src/SEGGER_RTT.c ****     default:
2026:../RTT/Src/SEGGER_RTT.c ****       Status = -1;
2027:../RTT/Src/SEGGER_RTT.c ****       break;
2028:../RTT/Src/SEGGER_RTT.c ****     }
2029:../RTT/Src/SEGGER_RTT.c ****     //
2030:../RTT/Src/SEGGER_RTT.c ****     // Finish up.
2031:../RTT/Src/SEGGER_RTT.c ****     //
2032:../RTT/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3749              		.loc 1 2032 5 is_stmt 1 view .LVU1191
 3750              		.syntax unified
 3751              	@ 2032 "../RTT/Src/SEGGER_RTT.c" 1
 3752 007c 86F31188 		msr   basepri, r6  
 3753              		
 3754              	@ 0 "" 2
 3755              		.thumb
 3756              		.syntax unified
 3757              	.LBE79:
 3758              		.loc 1 2032 24 view .LVU1192
 3759              	.LVL284:
 3760              	.L269:
2033:../RTT/Src/SEGGER_RTT.c ****   } else {
2034:../RTT/Src/SEGGER_RTT.c ****     Status = -1;
2035:../RTT/Src/SEGGER_RTT.c ****   }
2036:../RTT/Src/SEGGER_RTT.c ****   return Status;
2037:../RTT/Src/SEGGER_RTT.c **** }
 3761              		.loc 1 2037 1 is_stmt 0 view .LVU1193
 3762 0080 2046     		mov	r0, r4
 3763 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3764              	.LVL285:
 3765              	.L278:
 3766              	.LBB80:
2026:../RTT/Src/SEGGER_RTT.c ****       break;
 3767              		.loc 1 2026 14 view .LVU1194
 3768 0086 4FF0FF34 		mov	r4, #-1
 3769 008a F7E7     		b	.L274
 3770              	.LVL286:
 3771              	.L275:
2026:../RTT/Src/SEGGER_RTT.c ****       break;
 3772              		.loc 1 2026 14 view .LVU1195
 3773              	.LBE80:
2034:../RTT/Src/SEGGER_RTT.c ****   }
 3774              		.loc 1 2034 12 view .LVU1196
 3775 008c 4FF0FF34 		mov	r4, #-1
 3776              	.LVL287:
2036:../RTT/Src/SEGGER_RTT.c **** }
 3777              		.loc 1 2036 3 is_stmt 1 view .LVU1197
2036:../RTT/Src/SEGGER_RTT.c **** }
 3778              		.loc 1 2036 10 is_stmt 0 view .LVU1198
 3779 0090 F6E7     		b	.L269
 3780              	.L284:
 3781 0092 00BF     		.align	2
 3782              	.L283:
 3783 0094 00000000 		.word	_SEGGER_RTT
 3784 0098 18000000 		.word	_SEGGER_RTT+24
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 109


 3785 009c 00000000 		.word	_ActiveTerminal
 3786              		.cfi_endproc
 3787              	.LFE33:
 3789              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 3790              		.align	1
 3791              		.global	SEGGER_RTT_GetAvailWriteSpace
 3792              		.syntax unified
 3793              		.thumb
 3794              		.thumb_func
 3796              	SEGGER_RTT_GetAvailWriteSpace:
 3797              	.LVL288:
 3798              	.LFB34:
2038:../RTT/Src/SEGGER_RTT.c **** 
2039:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
2040:../RTT/Src/SEGGER_RTT.c **** *
2041:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2042:../RTT/Src/SEGGER_RTT.c **** *
2043:../RTT/Src/SEGGER_RTT.c **** *  Function description
2044:../RTT/Src/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2045:../RTT/Src/SEGGER_RTT.c **** *
2046:../RTT/Src/SEGGER_RTT.c **** *  Parameters
2047:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2048:../RTT/Src/SEGGER_RTT.c **** *
2049:../RTT/Src/SEGGER_RTT.c **** *  Return value
2050:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2051:../RTT/Src/SEGGER_RTT.c **** */
2052:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 3799              		.loc 1 2052 63 is_stmt 1 view -0
 3800              		.cfi_startproc
 3801              		@ args = 0, pretend = 0, frame = 0
 3802              		@ frame_needed = 0, uses_anonymous_args = 0
 3803              		@ link register save eliminated.
2053:../RTT/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3804              		.loc 1 2053 3 view .LVU1200
2054:../RTT/Src/SEGGER_RTT.c **** 
2055:../RTT/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 3805              		.loc 1 2055 3 view .LVU1201
2056:../RTT/Src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 3806              		.loc 1 2056 3 view .LVU1202
2055:../RTT/Src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 3807              		.loc 1 2055 9 is_stmt 0 view .LVU1203
 3808 0000 1823     		movs	r3, #24
 3809 0002 00FB0333 		mla	r3, r0, r3, r3
 3810              		.loc 1 2056 10 view .LVU1204
 3811 0006 0248     		ldr	r0, .L286
 3812              	.LVL289:
 3813              		.loc 1 2056 10 view .LVU1205
 3814 0008 1844     		add	r0, r0, r3
 3815 000a FFF7FEBF 		b	_GetAvailWriteSpace
 3816              	.LVL290:
 3817              	.L287:
 3818 000e 00BF     		.align	2
 3819              	.L286:
 3820 0010 00000000 		.word	_SEGGER_RTT
 3821              		.cfi_endproc
 3822              	.LFE34:
 3824              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 110


 3825              		.align	1
 3826              		.global	SEGGER_RTT_GetBytesInBuffer
 3827              		.syntax unified
 3828              		.thumb
 3829              		.thumb_func
 3831              	SEGGER_RTT_GetBytesInBuffer:
 3832              	.LVL291:
 3833              	.LFB35:
2057:../RTT/Src/SEGGER_RTT.c **** }
2058:../RTT/Src/SEGGER_RTT.c **** 
2059:../RTT/Src/SEGGER_RTT.c **** 
2060:../RTT/Src/SEGGER_RTT.c **** /*********************************************************************
2061:../RTT/Src/SEGGER_RTT.c **** *
2062:../RTT/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2063:../RTT/Src/SEGGER_RTT.c **** *
2064:../RTT/Src/SEGGER_RTT.c **** *  Function description
2065:../RTT/Src/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2066:../RTT/Src/SEGGER_RTT.c **** *
2067:../RTT/Src/SEGGER_RTT.c **** *  Parameters
2068:../RTT/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2069:../RTT/Src/SEGGER_RTT.c **** *
2070:../RTT/Src/SEGGER_RTT.c **** *  Return value
2071:../RTT/Src/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2072:../RTT/Src/SEGGER_RTT.c **** */
2073:../RTT/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 3834              		.loc 1 2073 60 is_stmt 1 view -0
 3835              		.cfi_startproc
 3836              		@ args = 0, pretend = 0, frame = 0
 3837              		@ frame_needed = 0, uses_anonymous_args = 0
 3838              		@ link register save eliminated.
2074:../RTT/Src/SEGGER_RTT.c ****   unsigned RdOff;
 3839              		.loc 1 2074 3 view .LVU1207
2075:../RTT/Src/SEGGER_RTT.c ****   unsigned WrOff;
 3840              		.loc 1 2075 3 view .LVU1208
2076:../RTT/Src/SEGGER_RTT.c ****   unsigned r;
 3841              		.loc 1 2076 3 view .LVU1209
2077:../RTT/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3842              		.loc 1 2077 3 view .LVU1210
2078:../RTT/Src/SEGGER_RTT.c ****   //
2079:../RTT/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2080:../RTT/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2081:../RTT/Src/SEGGER_RTT.c ****   //
2082:../RTT/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3843              		.loc 1 2082 3 view .LVU1211
2083:../RTT/Src/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 3844              		.loc 1 2083 3 view .LVU1212
 3845              		.loc 1 2083 9 is_stmt 0 view .LVU1213
 3846 0000 064B     		ldr	r3, .L291
 3847 0002 1822     		movs	r2, #24
 3848 0004 02FB0033 		mla	r3, r2, r0, r3
 3849 0008 9A6A     		ldr	r2, [r3, #40]
 3850              	.LVL292:
2084:../RTT/Src/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 3851              		.loc 1 2084 3 is_stmt 1 view .LVU1214
 3852              		.loc 1 2084 9 is_stmt 0 view .LVU1215
 3853 000a 586A     		ldr	r0, [r3, #36]
 3854              	.LVL293:
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 111


2085:../RTT/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 3855              		.loc 1 2085 3 is_stmt 1 view .LVU1216
 3856              		.loc 1 2085 6 is_stmt 0 view .LVU1217
 3857 000c 8242     		cmp	r2, r0
2086:../RTT/Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 3858              		.loc 1 2086 5 is_stmt 1 view .LVU1218
2087:../RTT/Src/SEGGER_RTT.c ****   } else {
2088:../RTT/Src/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 3859              		.loc 1 2088 33 is_stmt 0 view .LVU1219
 3860 000e 85BF     		ittet	hi
 3861 0010 1B6A     		ldrhi	r3, [r3, #32]
 3862              		.loc 1 2088 7 view .LVU1220
 3863 0012 9B18     		addhi	r3, r3, r2
2086:../RTT/Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 3864              		.loc 1 2086 7 view .LVU1221
 3865 0014 801A     		subls	r0, r0, r2
 3866              	.LVL294:
 3867              		.loc 1 2088 5 is_stmt 1 view .LVU1222
 3868              		.loc 1 2088 7 is_stmt 0 view .LVU1223
 3869 0016 181A     		subhi	r0, r3, r0
 3870              	.LVL295:
2089:../RTT/Src/SEGGER_RTT.c ****   }
2090:../RTT/Src/SEGGER_RTT.c ****   return r;
 3871              		.loc 1 2090 3 is_stmt 1 view .LVU1224
2091:../RTT/Src/SEGGER_RTT.c **** }
 3872              		.loc 1 2091 1 is_stmt 0 view .LVU1225
 3873 0018 7047     		bx	lr
 3874              	.L292:
 3875 001a 00BF     		.align	2
 3876              	.L291:
 3877 001c 00000000 		.word	_SEGGER_RTT
 3878              		.cfi_endproc
 3879              	.LFE35:
 3881              		.section	.rodata._aInitStr.0,"a"
 3884              	_aInitStr.0:
 3885 0000 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 3885      00005454 
 3885      52205245 
 3885      47474553 
 3885      00
 3886              		.section	.bss._ActiveTerminal,"aw",%nobits
 3889              	_ActiveTerminal:
 3890 0000 00       		.space	1
 3891              		.section	.bss._acDownBuffer,"aw",%nobits
 3894              	_acDownBuffer:
 3895 0000 00000000 		.space	16
 3895      00000000 
 3895      00000000 
 3895      00000000 
 3896              		.section	.bss._acUpBuffer,"aw",%nobits
 3899              	_acUpBuffer:
 3900 0000 00000000 		.space	1024
 3900      00000000 
 3900      00000000 
 3900      00000000 
 3900      00000000 
 3901              		.global	_SEGGER_RTT
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 112


 3902              		.section	.bss._SEGGER_RTT,"aw",%nobits
 3903              		.align	2
 3906              	_SEGGER_RTT:
 3907 0000 00000000 		.space	168
 3907      00000000 
 3907      00000000 
 3907      00000000 
 3907      00000000 
 3908              		.section	.rodata._aTerminalId,"a"
 3911              	_aTerminalId:
 3912 0000 30313233 		.ascii	"0123456789ABCDEF"
 3912      34353637 
 3912      38394142 
 3912      43444546 
 3913              		.text
 3914              	.Letext0:
 3915              		.file 2 "D:/Tool/arm-gnu-toolchain/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h"
 3916              		.file 3 "D:/Tool/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 3917              		.file 4 "D:/Tool/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 3918              		.file 5 "../RTT/Ins/SEGGER_RTT.h"
 3919              		.file 6 "D:/Tool/arm-gnu-toolchain/arm-none-eabi/include/string.h"
 3920              		.file 7 "<built-in>"
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 113


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:21     .text._GetAvailWriteSpace:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:26     .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:66     .text._WriteNoCheck:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:71     .text._WriteNoCheck:00000000 _WriteNoCheck
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:156    .text._WriteBlocking:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:161    .text._WriteBlocking:00000000 _WriteBlocking
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:295    .text._DoInit:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:300    .text._DoInit:00000000 _DoInit
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:418    .text._DoInit:00000054 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3906   .bss._SEGGER_RTT:00000000 _SEGGER_RTT
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3899   .bss._acUpBuffer:00000000 _acUpBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3894   .bss._acDownBuffer:00000000 _acDownBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3884   .rodata._aInitStr.0:00000000 _aInitStr.0
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:427    .text._PostTerminalSwitch.constprop.0:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:432    .text._PostTerminalSwitch.constprop.0:00000000 _PostTerminalSwitch.constprop.0
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:474    .text._PostTerminalSwitch.constprop.0:00000020 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3911   .rodata._aTerminalId:00000000 _aTerminalId
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:480    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:486    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 SEGGER_RTT_ReadUpBufferNoLock
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:667    .text.SEGGER_RTT_ReadUpBufferNoLock:00000090 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:672    .text.SEGGER_RTT_ReadNoLock:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:678    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:854    .text.SEGGER_RTT_ReadNoLock:00000088 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:859    .text.SEGGER_RTT_ReadUpBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:865    .text.SEGGER_RTT_ReadUpBuffer:00000000 SEGGER_RTT_ReadUpBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:921    .text.SEGGER_RTT_Read:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:927    .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:983    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:989    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1195   .text.SEGGER_RTT_WriteWithOverwriteNoLock:000000b8 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1200   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1206   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 SEGGER_RTT_WriteDownBufferNoLock
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1315   .text.SEGGER_RTT_WriteDownBufferNoLock:0000004c $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1320   .text.SEGGER_RTT_WriteNoLock:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1326   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1442   .text.SEGGER_RTT_WriteNoLock:00000054 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1447   .text.SEGGER_RTT_WriteDownBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1453   .text.SEGGER_RTT_WriteDownBuffer:00000000 SEGGER_RTT_WriteDownBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1536   .text.SEGGER_RTT_WriteDownBuffer:00000030 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1541   .text.SEGGER_RTT_Write:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1547   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1630   .text.SEGGER_RTT_Write:00000030 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1635   .text.SEGGER_RTT_WriteString:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1641   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1694   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1700   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1785   .text.SEGGER_RTT_PutCharSkipNoLock:00000034 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1790   .text.SEGGER_RTT_PutCharSkip:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1796   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1928   .text.SEGGER_RTT_PutCharSkip:00000054 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1934   .text.SEGGER_RTT_PutChar:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:1940   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2089   .text.SEGGER_RTT_PutChar:00000068 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2095   .text.SEGGER_RTT_GetKey:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2101   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 114


C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2143   .text.SEGGER_RTT_WaitKey:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2149   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2177   .text.SEGGER_RTT_HasKey:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2183   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2234   .text.SEGGER_RTT_HasKey:0000001c $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2239   .text.SEGGER_RTT_HasData:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2245   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2274   .text.SEGGER_RTT_HasData:00000010 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2279   .text.SEGGER_RTT_HasDataUp:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2285   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2313   .text.SEGGER_RTT_HasDataUp:00000010 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2318   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2324   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2479   .text.SEGGER_RTT_AllocDownBuffer:00000068 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2485   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2491   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2651   .text.SEGGER_RTT_AllocUpBuffer:00000070 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2657   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2663   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2797   .text.SEGGER_RTT_ConfigUpBuffer:00000060 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2802   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2808   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2948   .text.SEGGER_RTT_ConfigDownBuffer:00000060 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2953   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:2959   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3056   .text.SEGGER_RTT_SetNameUpBuffer:00000038 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3061   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3067   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3164   .text.SEGGER_RTT_SetNameDownBuffer:00000038 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3169   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3175   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3272   .text.SEGGER_RTT_SetFlagsUpBuffer:00000038 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3277   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3283   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3380   .text.SEGGER_RTT_SetFlagsDownBuffer:00000038 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3385   .text.SEGGER_RTT_Init:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3391   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3405   .text.SEGGER_RTT_SetTerminal:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3411   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3584   .text.SEGGER_RTT_SetTerminal:00000074 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3889   .bss._ActiveTerminal:00000000 _ActiveTerminal
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3592   .text.SEGGER_RTT_TerminalOut:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3598   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3783   .text.SEGGER_RTT_TerminalOut:00000094 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3790   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3796   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 SEGGER_RTT_GetAvailWriteSpace
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3820   .text.SEGGER_RTT_GetAvailWriteSpace:00000010 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3825   .text.SEGGER_RTT_GetBytesInBuffer:00000000 $t
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3831   .text.SEGGER_RTT_GetBytesInBuffer:00000000 SEGGER_RTT_GetBytesInBuffer
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3877   .text.SEGGER_RTT_GetBytesInBuffer:0000001c $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3890   .bss._ActiveTerminal:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3895   .bss._acDownBuffer:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3900   .bss._acUpBuffer:00000000 $d
C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s:3903   .bss._SEGGER_RTT:00000000 $d

UNDEFINED SYMBOLS
memcpy
ARM GAS  C:\Users\Dawn\AppData\Local\Temp\ccEpnnmr.s 			page 115


memset
strlen
